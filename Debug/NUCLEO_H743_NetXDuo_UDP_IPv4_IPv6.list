
NUCLEO_H743_NetXDuo_UDP_IPv4_IPv6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b2f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0801b594  0801b594  0002b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b85c  0801b85c  0002b85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b864  0801b864  0002b864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b868  0801b868  0002b868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f4  24000000  0801b86c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001dec  240000f4  0801b960  000300f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001ee0  0801b960  00031ee0  2**0
                  ALLOC
  9 .tcp_sec      00047a00  30000000  0801b960  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00194e83  00000000  00000000  00030122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00017bb8  00000000  00000000  001c4fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ee0  00000000  00000000  001dcb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000020d8  00000000  00000000  001dfa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0005aee8  00000000  00000000  001e1b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0007ce71  00000000  00000000  0023ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00183c9e  00000000  00000000  002b9871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0043d50f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008dcc  00000000  00000000  0043d560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000f4 	.word	0x240000f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b57c 	.word	0x0801b57c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000f8 	.word	0x240000f8
 80002dc:	0801b57c 	.word	0x0801b57c

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24000870 	.word	0x24000870
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	003d08ff 	.word	0x003d08ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	2400090c 	.word	0x2400090c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	24000874 	.word	0x24000874
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24000878 	.word	0x24000878
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24000e78 	.word	0x24000e78

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f019 f8c9 	bl	8019650 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f018 ffd2 	bl	801946c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24000918 	.word	0x24000918
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24000e78 	.word	0x24000e78
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	2400091c 	.word	0x2400091c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	240009a8 	.word	0x240009a8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	240009ac 	.word	0x240009ac
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	240009a4 	.word	0x240009a4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	240009a0 	.word	0x240009a0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	2400090c 	.word	0x2400090c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	24000874 	.word	0x24000874
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24000878 	.word	0x24000878
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_uldivmod>:
 80005c0:	b953      	cbnz	r3, 80005d8 <__aeabi_uldivmod+0x18>
 80005c2:	b94a      	cbnz	r2, 80005d8 <__aeabi_uldivmod+0x18>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	bf08      	it	eq
 80005c8:	2800      	cmpeq	r0, #0
 80005ca:	bf1c      	itt	ne
 80005cc:	f04f 31ff 	movne.w	r1, #4294967295
 80005d0:	f04f 30ff 	movne.w	r0, #4294967295
 80005d4:	f000 b974 	b.w	80008c0 <__aeabi_idiv0>
 80005d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005e0:	f000 f806 	bl	80005f0 <__udivmoddi4>
 80005e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <__udivmoddi4>:
 80005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f4:	9d08      	ldr	r5, [sp, #32]
 80005f6:	4604      	mov	r4, r0
 80005f8:	468e      	mov	lr, r1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14d      	bne.n	800069a <__udivmoddi4+0xaa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	4694      	mov	ip, r2
 8000602:	d969      	bls.n	80006d8 <__udivmoddi4+0xe8>
 8000604:	fab2 f282 	clz	r2, r2
 8000608:	b152      	cbz	r2, 8000620 <__udivmoddi4+0x30>
 800060a:	fa01 f302 	lsl.w	r3, r1, r2
 800060e:	f1c2 0120 	rsb	r1, r2, #32
 8000612:	fa20 f101 	lsr.w	r1, r0, r1
 8000616:	fa0c fc02 	lsl.w	ip, ip, r2
 800061a:	ea41 0e03 	orr.w	lr, r1, r3
 800061e:	4094      	lsls	r4, r2
 8000620:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000624:	0c21      	lsrs	r1, r4, #16
 8000626:	fbbe f6f8 	udiv	r6, lr, r8
 800062a:	fa1f f78c 	uxth.w	r7, ip
 800062e:	fb08 e316 	mls	r3, r8, r6, lr
 8000632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000636:	fb06 f107 	mul.w	r1, r6, r7
 800063a:	4299      	cmp	r1, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x64>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f106 30ff 	add.w	r0, r6, #4294967295
 8000646:	f080 811f 	bcs.w	8000888 <__udivmoddi4+0x298>
 800064a:	4299      	cmp	r1, r3
 800064c:	f240 811c 	bls.w	8000888 <__udivmoddi4+0x298>
 8000650:	3e02      	subs	r6, #2
 8000652:	4463      	add	r3, ip
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	b2a4      	uxth	r4, r4
 8000658:	fbb3 f0f8 	udiv	r0, r3, r8
 800065c:	fb08 3310 	mls	r3, r8, r0, r3
 8000660:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000664:	fb00 f707 	mul.w	r7, r0, r7
 8000668:	42a7      	cmp	r7, r4
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x92>
 800066c:	eb1c 0404 	adds.w	r4, ip, r4
 8000670:	f100 33ff 	add.w	r3, r0, #4294967295
 8000674:	f080 810a 	bcs.w	800088c <__udivmoddi4+0x29c>
 8000678:	42a7      	cmp	r7, r4
 800067a:	f240 8107 	bls.w	800088c <__udivmoddi4+0x29c>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000686:	1be4      	subs	r4, r4, r7
 8000688:	2600      	movs	r6, #0
 800068a:	b11d      	cbz	r5, 8000694 <__udivmoddi4+0xa4>
 800068c:	40d4      	lsrs	r4, r2
 800068e:	2300      	movs	r3, #0
 8000690:	e9c5 4300 	strd	r4, r3, [r5]
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	428b      	cmp	r3, r1
 800069c:	d909      	bls.n	80006b2 <__udivmoddi4+0xc2>
 800069e:	2d00      	cmp	r5, #0
 80006a0:	f000 80ef 	beq.w	8000882 <__udivmoddi4+0x292>
 80006a4:	2600      	movs	r6, #0
 80006a6:	e9c5 0100 	strd	r0, r1, [r5]
 80006aa:	4630      	mov	r0, r6
 80006ac:	4631      	mov	r1, r6
 80006ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b2:	fab3 f683 	clz	r6, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d14a      	bne.n	8000750 <__udivmoddi4+0x160>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d302      	bcc.n	80006c4 <__udivmoddi4+0xd4>
 80006be:	4282      	cmp	r2, r0
 80006c0:	f200 80f9 	bhi.w	80008b6 <__udivmoddi4+0x2c6>
 80006c4:	1a84      	subs	r4, r0, r2
 80006c6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	469e      	mov	lr, r3
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d0e0      	beq.n	8000694 <__udivmoddi4+0xa4>
 80006d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006d6:	e7dd      	b.n	8000694 <__udivmoddi4+0xa4>
 80006d8:	b902      	cbnz	r2, 80006dc <__udivmoddi4+0xec>
 80006da:	deff      	udf	#255	; 0xff
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	f040 8092 	bne.w	800080a <__udivmoddi4+0x21a>
 80006e6:	eba1 010c 	sub.w	r1, r1, ip
 80006ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ee:	fa1f fe8c 	uxth.w	lr, ip
 80006f2:	2601      	movs	r6, #1
 80006f4:	0c20      	lsrs	r0, r4, #16
 80006f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006fa:	fb07 1113 	mls	r1, r7, r3, r1
 80006fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000702:	fb0e f003 	mul.w	r0, lr, r3
 8000706:	4288      	cmp	r0, r1
 8000708:	d908      	bls.n	800071c <__udivmoddi4+0x12c>
 800070a:	eb1c 0101 	adds.w	r1, ip, r1
 800070e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x12a>
 8000714:	4288      	cmp	r0, r1
 8000716:	f200 80cb 	bhi.w	80008b0 <__udivmoddi4+0x2c0>
 800071a:	4643      	mov	r3, r8
 800071c:	1a09      	subs	r1, r1, r0
 800071e:	b2a4      	uxth	r4, r4
 8000720:	fbb1 f0f7 	udiv	r0, r1, r7
 8000724:	fb07 1110 	mls	r1, r7, r0, r1
 8000728:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800072c:	fb0e fe00 	mul.w	lr, lr, r0
 8000730:	45a6      	cmp	lr, r4
 8000732:	d908      	bls.n	8000746 <__udivmoddi4+0x156>
 8000734:	eb1c 0404 	adds.w	r4, ip, r4
 8000738:	f100 31ff 	add.w	r1, r0, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x154>
 800073e:	45a6      	cmp	lr, r4
 8000740:	f200 80bb 	bhi.w	80008ba <__udivmoddi4+0x2ca>
 8000744:	4608      	mov	r0, r1
 8000746:	eba4 040e 	sub.w	r4, r4, lr
 800074a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800074e:	e79c      	b.n	800068a <__udivmoddi4+0x9a>
 8000750:	f1c6 0720 	rsb	r7, r6, #32
 8000754:	40b3      	lsls	r3, r6
 8000756:	fa22 fc07 	lsr.w	ip, r2, r7
 800075a:	ea4c 0c03 	orr.w	ip, ip, r3
 800075e:	fa20 f407 	lsr.w	r4, r0, r7
 8000762:	fa01 f306 	lsl.w	r3, r1, r6
 8000766:	431c      	orrs	r4, r3
 8000768:	40f9      	lsrs	r1, r7
 800076a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800076e:	fa00 f306 	lsl.w	r3, r0, r6
 8000772:	fbb1 f8f9 	udiv	r8, r1, r9
 8000776:	0c20      	lsrs	r0, r4, #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fb09 1118 	mls	r1, r9, r8, r1
 8000780:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000784:	fb08 f00e 	mul.w	r0, r8, lr
 8000788:	4288      	cmp	r0, r1
 800078a:	fa02 f206 	lsl.w	r2, r2, r6
 800078e:	d90b      	bls.n	80007a8 <__udivmoddi4+0x1b8>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f108 3aff 	add.w	sl, r8, #4294967295
 8000798:	f080 8088 	bcs.w	80008ac <__udivmoddi4+0x2bc>
 800079c:	4288      	cmp	r0, r1
 800079e:	f240 8085 	bls.w	80008ac <__udivmoddi4+0x2bc>
 80007a2:	f1a8 0802 	sub.w	r8, r8, #2
 80007a6:	4461      	add	r1, ip
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80007b0:	fb09 1110 	mls	r1, r9, r0, r1
 80007b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	458e      	cmp	lr, r1
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x1e2>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c8:	d26c      	bcs.n	80008a4 <__udivmoddi4+0x2b4>
 80007ca:	458e      	cmp	lr, r1
 80007cc:	d96a      	bls.n	80008a4 <__udivmoddi4+0x2b4>
 80007ce:	3802      	subs	r0, #2
 80007d0:	4461      	add	r1, ip
 80007d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007d6:	fba0 9402 	umull	r9, r4, r0, r2
 80007da:	eba1 010e 	sub.w	r1, r1, lr
 80007de:	42a1      	cmp	r1, r4
 80007e0:	46c8      	mov	r8, r9
 80007e2:	46a6      	mov	lr, r4
 80007e4:	d356      	bcc.n	8000894 <__udivmoddi4+0x2a4>
 80007e6:	d053      	beq.n	8000890 <__udivmoddi4+0x2a0>
 80007e8:	b15d      	cbz	r5, 8000802 <__udivmoddi4+0x212>
 80007ea:	ebb3 0208 	subs.w	r2, r3, r8
 80007ee:	eb61 010e 	sbc.w	r1, r1, lr
 80007f2:	fa01 f707 	lsl.w	r7, r1, r7
 80007f6:	fa22 f306 	lsr.w	r3, r2, r6
 80007fa:	40f1      	lsrs	r1, r6
 80007fc:	431f      	orrs	r7, r3
 80007fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000802:	2600      	movs	r6, #0
 8000804:	4631      	mov	r1, r6
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	40d8      	lsrs	r0, r3
 8000810:	fa0c fc02 	lsl.w	ip, ip, r2
 8000814:	fa21 f303 	lsr.w	r3, r1, r3
 8000818:	4091      	lsls	r1, r2
 800081a:	4301      	orrs	r1, r0
 800081c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fbb3 f0f7 	udiv	r0, r3, r7
 8000828:	fb07 3610 	mls	r6, r7, r0, r3
 800082c:	0c0b      	lsrs	r3, r1, #16
 800082e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000832:	fb00 f60e 	mul.w	r6, r0, lr
 8000836:	429e      	cmp	r6, r3
 8000838:	fa04 f402 	lsl.w	r4, r4, r2
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x260>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	d22f      	bcs.n	80008a8 <__udivmoddi4+0x2b8>
 8000848:	429e      	cmp	r6, r3
 800084a:	d92d      	bls.n	80008a8 <__udivmoddi4+0x2b8>
 800084c:	3802      	subs	r0, #2
 800084e:	4463      	add	r3, ip
 8000850:	1b9b      	subs	r3, r3, r6
 8000852:	b289      	uxth	r1, r1
 8000854:	fbb3 f6f7 	udiv	r6, r3, r7
 8000858:	fb07 3316 	mls	r3, r7, r6, r3
 800085c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000860:	fb06 f30e 	mul.w	r3, r6, lr
 8000864:	428b      	cmp	r3, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x28a>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000870:	d216      	bcs.n	80008a0 <__udivmoddi4+0x2b0>
 8000872:	428b      	cmp	r3, r1
 8000874:	d914      	bls.n	80008a0 <__udivmoddi4+0x2b0>
 8000876:	3e02      	subs	r6, #2
 8000878:	4461      	add	r1, ip
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000880:	e738      	b.n	80006f4 <__udivmoddi4+0x104>
 8000882:	462e      	mov	r6, r5
 8000884:	4628      	mov	r0, r5
 8000886:	e705      	b.n	8000694 <__udivmoddi4+0xa4>
 8000888:	4606      	mov	r6, r0
 800088a:	e6e3      	b.n	8000654 <__udivmoddi4+0x64>
 800088c:	4618      	mov	r0, r3
 800088e:	e6f8      	b.n	8000682 <__udivmoddi4+0x92>
 8000890:	454b      	cmp	r3, r9
 8000892:	d2a9      	bcs.n	80007e8 <__udivmoddi4+0x1f8>
 8000894:	ebb9 0802 	subs.w	r8, r9, r2
 8000898:	eb64 0e0c 	sbc.w	lr, r4, ip
 800089c:	3801      	subs	r0, #1
 800089e:	e7a3      	b.n	80007e8 <__udivmoddi4+0x1f8>
 80008a0:	4646      	mov	r6, r8
 80008a2:	e7ea      	b.n	800087a <__udivmoddi4+0x28a>
 80008a4:	4620      	mov	r0, r4
 80008a6:	e794      	b.n	80007d2 <__udivmoddi4+0x1e2>
 80008a8:	4640      	mov	r0, r8
 80008aa:	e7d1      	b.n	8000850 <__udivmoddi4+0x260>
 80008ac:	46d0      	mov	r8, sl
 80008ae:	e77b      	b.n	80007a8 <__udivmoddi4+0x1b8>
 80008b0:	3b02      	subs	r3, #2
 80008b2:	4461      	add	r1, ip
 80008b4:	e732      	b.n	800071c <__udivmoddi4+0x12c>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e709      	b.n	80006ce <__udivmoddi4+0xde>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	e742      	b.n	8000746 <__udivmoddi4+0x156>

080008c0 <__aeabi_idiv0>:
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008d0:	2334      	movs	r3, #52	; 0x34
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <tx_application_define+0x6c>)
 80008da:	4916      	ldr	r1, [pc, #88]	; (8000934 <tx_application_define+0x70>)
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <tx_application_define+0x74>)
 80008de:	f019 f961 	bl	8019ba4 <_txe_byte_pool_create>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <tx_application_define+0x74>)
 80008ea:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f000 f82b 	bl	8000948 <App_ThreadX_Init>
 80008f2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80008fa:	e7fe      	b.n	80008fa <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008fc:	2334      	movs	r3, #52	; 0x34
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <tx_application_define+0x78>)
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <tx_application_define+0x7c>)
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <tx_application_define+0x80>)
 800090a:	f019 f94b 	bl	8019ba4 <_txe_byte_pool_create>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <tx_application_define+0x80>)
 8000916:	60bb      	str	r3, [r7, #8]
    status = MX_NetXDuo_Init(memory_ptr);
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f019 fb03 	bl	8019f24 <MX_NetXDuo_Init>
 800091e:	60f8      	str	r0, [r7, #12]
    if (status != NX_SUCCESS)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_NetXDuo_Init_Error */
      while(1)
 8000926:	e7fe      	b.n	8000926 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000110 	.word	0x24000110
 8000934:	0801b594 	.word	0x0801b594
 8000938:	24000510 	.word	0x24000510
 800093c:	30040200 	.word	0x30040200
 8000940:	0801b5a8 	.word	0x0801b5a8
 8000944:	24000544 	.word	0x24000544

08000948 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000954:	68fb      	ldr	r3, [r7, #12]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000966:	f017 fabd 	bl	8017ee4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000978:	1d39      	adds	r1, r7, #4
 800097a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800097e:	2201      	movs	r2, #1
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <__io_putchar+0x20>)
 8000982:	f006 f9f3 	bl	8006d6c <HAL_UART_Transmit>

  return ch;
 8000986:	687b      	ldr	r3, [r7, #4]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000660 	.word	0x24000660

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800099a:	f000 f9eb 	bl	8000d74 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800099e:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <main+0xec>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11b      	bne.n	80009e2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009aa:	f3bf 8f4f 	dsb	sy
}
 80009ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009b0:	f3bf 8f6f 	isb	sy
}
 80009b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <main+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009be:	f3bf 8f4f 	dsb	sy
}
 80009c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009c4:	f3bf 8f6f 	isb	sy
}
 80009c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009ca:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <main+0xec>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <main+0xec>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d6:	f3bf 8f4f 	dsb	sy
}
 80009da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009dc:	f3bf 8f6f 	isb	sy
}
 80009e0:	e000      	b.n	80009e4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <main+0xec>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d138      	bne.n	8000a62 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <main+0xec>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009f8:	f3bf 8f4f 	dsb	sy
}
 80009fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <main+0xec>)
 8000a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a04:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	0b5b      	lsrs	r3, r3, #13
 8000a0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a0e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a18:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	015a      	lsls	r2, r3, #5
 8000a1e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a22:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a28:	4915      	ldr	r1, [pc, #84]	; (8000a80 <main+0xec>)
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	1e5a      	subs	r2, r3, #1
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1ef      	bne.n	8000a1a <main+0x86>
    } while(sets-- != 0U);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	60ba      	str	r2, [r7, #8]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1e5      	bne.n	8000a10 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a44:	f3bf 8f4f 	dsb	sy
}
 8000a48:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <main+0xec>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <main+0xec>)
 8000a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a54:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a56:	f3bf 8f4f 	dsb	sy
}
 8000a5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a5c:	f3bf 8f6f 	isb	sy
}
 8000a60:	e000      	b.n	8000a64 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a62:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fea6 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f80c 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 f91c 	bl	8000ca8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a70:	f000 f882 	bl	8000b78 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a74:	f000 f8cc 	bl	8000c10 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000a78:	f7ff ff73 	bl	8000962 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <main+0xe8>
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f019 fc46 	bl	801a324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f019 fc40 	bl	801a324 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f002 ffa9 	bl	80039fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <SystemClock_Config+0xec>)
 8000ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <SystemClock_Config+0xec>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <SystemClock_Config+0xec>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <SystemClock_Config+0xf0>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <SystemClock_Config+0xf0>)
 8000aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xf0>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000adc:	bf00      	nop
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <SystemClock_Config+0xf0>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aea:	d1f8      	bne.n	8000ade <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	2302      	movs	r3, #2
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b12:	230c      	movs	r3, #12
 8000b14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 ffa4 	bl	8003a70 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b2e:	f000 f973 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	233f      	movs	r3, #63	; 0x3f
 8000b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2303      	movs	r3, #3
 8000b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2102      	movs	r1, #2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fbe3 	bl	8004324 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b64:	f000 f958 	bl	8000e18 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	; 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58000400 	.word	0x58000400
 8000b74:	58024800 	.word	0x58024800

08000b78 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_ETH_Init+0x80>)
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	; (8000bfc <MX_ETH_Init+0x84>)
 8000b80:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_ETH_Init+0x88>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_ETH_Init+0x88>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_ETH_Init+0x88>)
 8000b90:	22e1      	movs	r2, #225	; 0xe1
 8000b92:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_ETH_Init+0x88>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_ETH_Init+0x88>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_ETH_Init+0x88>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ETH_Init+0x80>)
 8000ba8:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_ETH_Init+0x88>)
 8000baa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_ETH_Init+0x80>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_ETH_Init+0x80>)
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <MX_ETH_Init+0x8c>)
 8000bb6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_ETH_Init+0x80>)
 8000bba:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <MX_ETH_Init+0x90>)
 8000bbc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_ETH_Init+0x80>)
 8000bc0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000bc4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_ETH_Init+0x80>)
 8000bc8:	f000 ffcc 	bl	8001b64 <HAL_ETH_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000bd2:	f000 f921 	bl	8000e18 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bd6:	2238      	movs	r2, #56	; 0x38
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_ETH_Init+0x94>)
 8000bdc:	f019 fba2 	bl	801a324 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_ETH_Init+0x94>)
 8000be2:	2221      	movs	r2, #33	; 0x21
 8000be4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_ETH_Init+0x94>)
 8000be8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <MX_ETH_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	240005b0 	.word	0x240005b0
 8000bfc:	40028000 	.word	0x40028000
 8000c00:	240006f4 	.word	0x240006f4
 8000c04:	30040060 	.word	0x30040060
 8000c08:	30040000 	.word	0x30040000
 8000c0c:	24000578 	.word	0x24000578

08000c10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <MX_USART3_UART_Init+0x94>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c5a:	f006 f837 	bl	8006ccc <HAL_UART_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c64:	f000 f8d8 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c6c:	f007 f8c7 	bl	8007dfe <HAL_UARTEx_SetTxFifoThreshold>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c76:	f000 f8cf 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c7e:	f007 f8fc 	bl	8007e7a <HAL_UARTEx_SetRxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c88:	f000 f8c6 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c8e:	f007 f87d 	bl	8007d8c <HAL_UARTEx_DisableFifoMode>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 f8be 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	24000660 	.word	0x24000660
 8000ca4:	40004800 	.word	0x40004800

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_GPIO_Init+0xc8>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d62:	bf00      	nop
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	58024400 	.word	0x58024400

08000d74 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d86:	f000 fe71 	bl	8001a6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d96:	231f      	movs	r3, #31
 8000d98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d9a:	2387      	movs	r3, #135	; 0x87
 8000d9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000da2:	2300      	movs	r3, #0
 8000da4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000db6:	463b      	mov	r3, r7
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fe8f 	bl	8001adc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MPU_Config+0x7c>)
 8000dc4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fe7d 	bl	8001adc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000de2:	2004      	movs	r0, #4
 8000de4:	f000 fe5a 	bl	8001a9c <HAL_MPU_Enable>

}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	30040000 	.word	0x30040000

08000df4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d101      	bne.n	8000e0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e06:	f000 fd11 	bl	800182c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40001000 	.word	0x40001000

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_MspInit+0x30>)
 8000e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x30>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x30>)
 8000e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	58024400 	.word	0x58024400

08000e58 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a5d      	ldr	r2, [pc, #372]	; (8000fec <HAL_ETH_MspInit+0x194>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	f040 80b3 	bne.w	8000fe2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e7c:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e82:	4a5b      	ldr	r2, [pc, #364]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e96:	623b      	str	r3, [r7, #32]
 8000e98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e9a:	4b55      	ldr	r3, [pc, #340]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea0:	4a53      	ldr	r2, [pc, #332]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eaa:	4b51      	ldr	r3, [pc, #324]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000eba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ebe:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ec8:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	4b46      	ldr	r3, [pc, #280]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a44      	ldr	r2, [pc, #272]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b42      	ldr	r3, [pc, #264]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	4a3d      	ldr	r2, [pc, #244]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	4a35      	ldr	r2, [pc, #212]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <HAL_ETH_MspInit+0x198>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f4e:	2332      	movs	r3, #50	; 0x32
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5e:	230b      	movs	r3, #11
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <HAL_ETH_MspInit+0x19c>)
 8000f6a:	f002 fb97 	bl	800369c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f6e:	2386      	movs	r3, #134	; 0x86
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	481b      	ldr	r0, [pc, #108]	; (8000ff8 <HAL_ETH_MspInit+0x1a0>)
 8000f8a:	f002 fb87 	bl	800369c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa0:	230b      	movs	r3, #11
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4814      	ldr	r0, [pc, #80]	; (8000ffc <HAL_ETH_MspInit+0x1a4>)
 8000fac:	f002 fb76 	bl	800369c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc2:	230b      	movs	r3, #11
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <HAL_ETH_MspInit+0x1a8>)
 8000fce:	f002 fb65 	bl	800369c <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	203d      	movs	r0, #61	; 0x3d
 8000fd8:	f000 fd20 	bl	8001a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000fdc:	203d      	movs	r0, #61	; 0x3d
 8000fde:	f000 fd37 	bl	8001a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3738      	adds	r7, #56	; 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40028000 	.word	0x40028000
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	58020800 	.word	0x58020800
 8000ff8:	58020000 	.word	0x58020000
 8000ffc:	58020400 	.word	0x58020400
 8001000:	58021800 	.word	0x58021800

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0ba      	sub	sp, #232	; 0xe8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	22c0      	movs	r2, #192	; 0xc0
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f019 f97d 	bl	801a324 <memset>
  if(huart->Instance==USART3)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a27      	ldr	r2, [pc, #156]	; (80010cc <HAL_UART_MspInit+0xc8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d146      	bne.n	80010c2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001034:	f04f 0202 	mov.w	r2, #2
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fd38 	bl	8004ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001056:	f7ff fedf 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_UART_MspInit+0xcc>)
 800105c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_UART_MspInit+0xcc>)
 8001062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001066:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_UART_MspInit+0xcc>)
 800106c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_UART_MspInit+0xcc>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_UART_MspInit+0xcc>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_UART_MspInit+0xcc>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010b0:	2307      	movs	r3, #7
 80010b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_UART_MspInit+0xd0>)
 80010be:	f002 faed 	bl	800369c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	37e8      	adds	r7, #232	; 0xe8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40004800 	.word	0x40004800
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58020c00 	.word	0x58020c00

080010d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	d827      	bhi.n	8001136 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010e6:	2200      	movs	r2, #0
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	2036      	movs	r0, #54	; 0x36
 80010ec:	f000 fc96 	bl	8001a1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010f0:	2036      	movs	r0, #54	; 0x36
 80010f2:	f000 fcad 	bl	8001a50 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80010f6:	4a29      	ldr	r2, [pc, #164]	; (800119c <HAL_InitTick+0xc4>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_InitTick+0xc8>)
 80010fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001102:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <HAL_InitTick+0xc8>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_InitTick+0xc8>)
 800110e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800111a:	f107 0210 	add.w	r2, r7, #16
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f003 fc89 	bl	8004a3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <HAL_InitTick+0x6a>
 8001134:	e001      	b.n	800113a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e02b      	b.n	8001192 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800113a:	f003 fc53 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 800113e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001140:	e004      	b.n	800114c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001142:	f003 fc4f 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8001146:	4603      	mov	r3, r0
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800114c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <HAL_InitTick+0xcc>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	0c9b      	lsrs	r3, r3, #18
 8001156:	3b01      	subs	r3, #1
 8001158:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_InitTick+0xd0>)
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_InitTick+0xd4>)
 800115e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_InitTick+0xd0>)
 8001162:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001166:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001168:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_InitTick+0xd0>)
 800116a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_InitTick+0xd0>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_InitTick+0xd0>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_InitTick+0xd0>)
 800117c:	f005 facc 	bl	8006718 <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d104      	bne.n	8001190 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001186:	4808      	ldr	r0, [pc, #32]	; (80011a8 <HAL_InitTick+0xd0>)
 8001188:	f005 fb28 	bl	80067dc <HAL_TIM_Base_Start_IT>
 800118c:	4603      	mov	r3, r0
 800118e:	e000      	b.n	8001192 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
}
 8001192:	4618      	mov	r0, r3
 8001194:	3740      	adds	r7, #64	; 0x40
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	24000008 	.word	0x24000008
 80011a0:	58024400 	.word	0x58024400
 80011a4:	431bde83 	.word	0x431bde83
 80011a8:	240006fc 	.word	0x240006fc
 80011ac:	40001000 	.word	0x40001000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <NMI_Handler+0x4>

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <TIM6_DAC_IRQHandler+0x10>)
 80011e2:	f005 fb73 	bl	80068cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	240006fc 	.word	0x240006fc

080011f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <ETH_IRQHandler+0x10>)
 80011f6:	f001 f851 	bl	800229c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	240005b0 	.word	0x240005b0

08001204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_kill>:

int _kill(int pid, int sig)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800121e:	f019 f81f 	bl	801a260 <__errno>
 8001222:	4603      	mov	r3, r0
 8001224:	2216      	movs	r2, #22
 8001226:	601a      	str	r2, [r3, #0]
  return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_exit>:

void _exit (int status)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffe7 	bl	8001214 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001246:	e7fe      	b.n	8001246 <_exit+0x12>

08001248 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00a      	b.n	8001270 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125a:	f3af 8000 	nop.w
 800125e:	4601      	mov	r1, r0
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbf0      	blt.n	800125a <_read+0x12>
  }

  return len;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e009      	b.n	80012a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fb67 	bl	8000970 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf1      	blt.n	8001294 <_write+0x12>
  }
  return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:

int _close(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
  return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_isatty>:

int _isatty(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f018 ff84 	bl	801a260 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	24080000 	.word	0x24080000
 8001384:	00000400 	.word	0x00000400
 8001388:	24000748 	.word	0x24000748
 800138c:	24001ee0 	.word	0x24001ee0

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <SystemInit+0xe4>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a36      	ldr	r2, [pc, #216]	; (8001474 <SystemInit+0xe4>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <SystemInit+0xe8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	2b06      	cmp	r3, #6
 80013ae:	d807      	bhi.n	80013c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <SystemInit+0xe8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 030f 	bic.w	r3, r3, #15
 80013b8:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <SystemInit+0xe8>)
 80013ba:	f043 0307 	orr.w	r3, r3, #7
 80013be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <SystemInit+0xec>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2d      	ldr	r2, [pc, #180]	; (800147c <SystemInit+0xec>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <SystemInit+0xec>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <SystemInit+0xec>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4929      	ldr	r1, [pc, #164]	; (800147c <SystemInit+0xec>)
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <SystemInit+0xf0>)
 80013da:	4013      	ands	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <SystemInit+0xe8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <SystemInit+0xe8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 030f 	bic.w	r3, r3, #15
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemInit+0xe8>)
 80013f4:	f043 0307 	orr.w	r3, r3, #7
 80013f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <SystemInit+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <SystemInit+0xec>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <SystemInit+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <SystemInit+0xec>)
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <SystemInit+0xf4>)
 8001410:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <SystemInit+0xec>)
 8001414:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <SystemInit+0xf8>)
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <SystemInit+0xec>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <SystemInit+0xfc>)
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <SystemInit+0xec>)
 8001420:	2200      	movs	r2, #0
 8001422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <SystemInit+0xec>)
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <SystemInit+0xfc>)
 8001428:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <SystemInit+0xec>)
 800142c:	2200      	movs	r2, #0
 800142e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <SystemInit+0xec>)
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <SystemInit+0xfc>)
 8001434:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <SystemInit+0xec>)
 8001438:	2200      	movs	r2, #0
 800143a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <SystemInit+0xec>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <SystemInit+0xec>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <SystemInit+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <SystemInit+0x100>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <SystemInit+0x104>)
 8001454:	4013      	ands	r3, r2
 8001456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800145a:	d202      	bcs.n	8001462 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <SystemInit+0x108>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <SystemInit+0x10c>)
 8001464:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	52002000 	.word	0x52002000
 800147c:	58024400 	.word	0x58024400
 8001480:	eaf6ed7f 	.word	0xeaf6ed7f
 8001484:	02020200 	.word	0x02020200
 8001488:	01ff0000 	.word	0x01ff0000
 800148c:	01010280 	.word	0x01010280
 8001490:	5c001000 	.word	0x5c001000
 8001494:	ffff0000 	.word	0xffff0000
 8001498:	51008108 	.word	0x51008108
 800149c:	52004000 	.word	0x52004000

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014a4:	f7ff ff74 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	; (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	; (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f018 fecd 	bl	801a26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fa5f 	bl	8000994 <main>
  bx  lr
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e0:	240000f4 	.word	0x240000f4
  ldr r2, =_sidata
 80014e4:	0801b86c 	.word	0x0801b86c
  ldr r2, =_sbss
 80014e8:	240000f4 	.word	0x240000f4
  ldr r4, =_ebss
 80014ec:	24001ee0 	.word	0x24001ee0

080014f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC3_IRQHandler>

080014f2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <LAN8742_RegisterBusIO+0x28>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <LAN8742_RegisterBusIO+0x28>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <LAN8742_RegisterBusIO+0x28>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e014      	b.n	800154a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d17c      	bne.n	8001670 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e01c      	b.n	80015ca <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	2112      	movs	r1, #18
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	4798      	blx	r3
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da03      	bge.n	80015ac <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80015a4:	f06f 0304 	mvn.w	r3, #4
 80015a8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80015aa:	e00b      	b.n	80015c4 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d105      	bne.n	80015c4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
         break;
 80015c2:	e005      	b.n	80015d0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b1f      	cmp	r3, #31
 80015ce:	d9df      	bls.n	8001590 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b1f      	cmp	r3, #31
 80015d6:	d902      	bls.n	80015de <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015d8:	f06f 0302 	mvn.w	r3, #2
 80015dc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d145      	bne.n	8001670 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6810      	ldr	r0, [r2, #0]
 80015ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015f0:	2100      	movs	r1, #0
 80015f2:	4798      	blx	r3
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db37      	blt.n	800166a <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6810      	ldr	r0, [r2, #0]
 8001602:	f107 0208 	add.w	r2, r7, #8
 8001606:	2100      	movs	r1, #0
 8001608:	4798      	blx	r3
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	db28      	blt.n	8001662 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4798      	blx	r3
 8001616:	4603      	mov	r3, r0
 8001618:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800161a:	e01c      	b.n	8001656 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4798      	blx	r3
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800162e:	d80e      	bhi.n	800164e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6810      	ldr	r0, [r2, #0]
 8001638:	f107 0208 	add.w	r2, r7, #8
 800163c:	2100      	movs	r1, #0
 800163e:	4798      	blx	r3
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	da07      	bge.n	8001656 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001646:	f06f 0304 	mvn.w	r3, #4
 800164a:	613b      	str	r3, [r7, #16]
                 break;
 800164c:	e010      	b.n	8001670 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800164e:	f06f 0301 	mvn.w	r3, #1
 8001652:	613b      	str	r3, [r7, #16]
               break;
 8001654:	e00c      	b.n	8001670 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1dd      	bne.n	800161c <LAN8742_Init+0xc6>
 8001660:	e006      	b.n	8001670 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001662:	f06f 0304 	mvn.w	r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	e002      	b.n	8001670 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800166a:	f06f 0303 	mvn.w	r3, #3
 800166e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d112      	bne.n	800169c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4798      	blx	r3
 800167c:	4603      	mov	r3, r0
 800167e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001680:	bf00      	nop
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4798      	blx	r3
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001694:	d9f5      	bls.n	8001682 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	605a      	str	r2, [r3, #4]
   }

   return status;
 800169c:	693b      	ldr	r3, [r7, #16]
 }
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6810      	ldr	r0, [r2, #0]
 80016ba:	f107 020c 	add.w	r2, r7, #12
 80016be:	2101      	movs	r1, #1
 80016c0:	4798      	blx	r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da02      	bge.n	80016ce <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016c8:	f06f 0304 	mvn.w	r3, #4
 80016cc:	e06e      	b.n	80017ac <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6810      	ldr	r0, [r2, #0]
 80016d6:	f107 020c 	add.w	r2, r7, #12
 80016da:	2101      	movs	r1, #1
 80016dc:	4798      	blx	r3
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da02      	bge.n	80016ea <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016e4:	f06f 0304 	mvn.w	r3, #4
 80016e8:	e060      	b.n	80017ac <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e059      	b.n	80017ac <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6810      	ldr	r0, [r2, #0]
 8001700:	f107 020c 	add.w	r2, r7, #12
 8001704:	2100      	movs	r1, #0
 8001706:	4798      	blx	r3
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	da02      	bge.n	8001714 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800170e:	f06f 0304 	mvn.w	r3, #4
 8001712:	e04b      	b.n	80017ac <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11b      	bne.n	8001756 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <LAN8742_GetLinkState+0x90>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001732:	2302      	movs	r3, #2
 8001734:	e03a      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001740:	2303      	movs	r3, #3
 8001742:	e033      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800174e:	2304      	movs	r3, #4
 8001750:	e02c      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001752:	2305      	movs	r3, #5
 8001754:	e02a      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6810      	ldr	r0, [r2, #0]
 800175e:	f107 020c 	add.w	r2, r7, #12
 8001762:	211f      	movs	r1, #31
 8001764:	4798      	blx	r3
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	da02      	bge.n	8001772 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800176c:	f06f 0304 	mvn.w	r3, #4
 8001770:	e01c      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800177c:	2306      	movs	r3, #6
 800177e:	e015      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 031c 	and.w	r3, r3, #28
 8001786:	2b18      	cmp	r3, #24
 8001788:	d101      	bne.n	800178e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800178a:	2302      	movs	r3, #2
 800178c:	e00e      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 031c 	and.w	r3, r3, #28
 8001794:	2b08      	cmp	r3, #8
 8001796:	d101      	bne.n	800179c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001798:	2303      	movs	r3, #3
 800179a:	e007      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 031c 	and.w	r3, r3, #28
 80017a2:	2b14      	cmp	r3, #20
 80017a4:	d101      	bne.n	80017aa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017a6:	2304      	movs	r3, #4
 80017a8:	e000      	b.n	80017ac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017aa:	2305      	movs	r3, #5
    }
  }
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ba:	2003      	movs	r0, #3
 80017bc:	f000 f923 	bl	8001a06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017c0:	f002 ff66 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_Init+0x68>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	4913      	ldr	r1, [pc, #76]	; (8001820 <HAL_Init+0x6c>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_Init+0x68>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_Init+0x6c>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <HAL_Init+0x70>)
 80017f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_Init+0x74>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017fe:	200f      	movs	r0, #15
 8001800:	f7ff fc6a 	bl	80010d8 <HAL_InitTick>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e002      	b.n	8001814 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800180e:	f7ff fb09 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	58024400 	.word	0x58024400
 8001820:	0801b6bc 	.word	0x0801b6bc
 8001824:	24000004 	.word	0x24000004
 8001828:	24000000 	.word	0x24000000

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2400000c 	.word	0x2400000c
 8001850:	2400074c 	.word	0x2400074c

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	2400074c 	.word	0x2400074c

0800186c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetREVID+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0c1b      	lsrs	r3, r3, #16
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	5c001000 	.word	0x5c001000

08001884 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001894:	4904      	ldr	r1, [pc, #16]	; (80018a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	58000400 	.word	0x58000400

080018ac <__NVIC_SetPriorityGrouping>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <__NVIC_SetPriorityGrouping+0x40>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x40>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	05fa0000 	.word	0x05fa0000

080018f4 <__NVIC_GetPriorityGrouping>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	; (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff4c 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2a:	f7ff ff63 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	6978      	ldr	r0, [r7, #20]
 8001a36:	f7ff ffb3 	bl	80019a0 <NVIC_EncodePriority>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff82 	bl	800194c <__NVIC_SetPriority>
}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff56 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a70:	f3bf 8f5f 	dmb	sy
}
 8001a74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_MPU_Disable+0x28>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_MPU_Disable+0x28>)
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a80:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_MPU_Disable+0x2c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00
 8001a98:	e000ed90 	.word	0xe000ed90

08001a9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_MPU_Enable+0x38>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_MPU_Enable+0x3c>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_MPU_Enable+0x3c>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001aba:	f3bf 8f4f 	dsb	sy
}
 8001abe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ac0:	f3bf 8f6f 	isb	sy
}
 8001ac4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed90 	.word	0xe000ed90
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	785a      	ldrb	r2, [r3, #1]
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_MPU_ConfigRegion+0x84>)
 8001aea:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d029      	beq.n	8001b48 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001af4:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_MPU_ConfigRegion+0x84>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7b1b      	ldrb	r3, [r3, #12]
 8001b00:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7adb      	ldrb	r3, [r3, #11]
 8001b06:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7a9b      	ldrb	r3, [r3, #10]
 8001b0e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7b5b      	ldrb	r3, [r3, #13]
 8001b16:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7b9b      	ldrb	r3, [r3, #14]
 8001b1e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7bdb      	ldrb	r3, [r3, #15]
 8001b26:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7a5b      	ldrb	r3, [r3, #9]
 8001b2e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7a1b      	ldrb	r3, [r3, #8]
 8001b36:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b38:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b42:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b44:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b46:	e005      	b.n	8001b54 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_MPU_ConfigRegion+0x84>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_MPU_ConfigRegion+0x84>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed90 	.word	0xe000ed90

08001b64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0cf      	b.n	8001d16 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d106      	bne.n	8001b8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2223      	movs	r2, #35	; 0x23
 8001b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff f965 	bl	8000e58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b64      	ldr	r3, [pc, #400]	; (8001d20 <HAL_ETH_Init+0x1bc>)
 8001b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b94:	4a62      	ldr	r2, [pc, #392]	; (8001d20 <HAL_ETH_Init+0x1bc>)
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b9e:	4b60      	ldr	r3, [pc, #384]	; (8001d20 <HAL_ETH_Init+0x1bc>)
 8001ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7a1b      	ldrb	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d103      	bne.n	8001bbc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fe65 	bl	8001884 <HAL_SYSCFG_ETHInterfaceSelect>
 8001bba:	e003      	b.n	8001bc4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001bbc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001bc0:	f7ff fe60 	bl	8001884 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001bc4:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <HAL_ETH_Init+0x1c0>)
 8001bc6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be0:	f7ff fe38 	bl	8001854 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001be6:	e011      	b.n	8001c0c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001be8:	f7ff fe34 	bl	8001854 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bf6:	d909      	bls.n	8001c0c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	22e0      	movs	r2, #224	; 0xe0
 8001c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e084      	b.n	8001d16 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1e4      	bne.n	8001be8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 ff24 	bl	8002a6c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001c24:	f002 feae 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <HAL_ETH_Init+0x1c4>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	0c9a      	lsrs	r2, r3, #18
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3a01      	subs	r2, #1
 8001c38:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f001 f95b 	bl	8002ef8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001c4e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c5e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	22e0      	movs	r2, #224	; 0xe0
 8001c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e049      	b.n	8001d16 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_ETH_Init+0x1c8>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6952      	ldr	r2, [r2, #20]
 8001c96:	0051      	lsls	r1, r2, #1
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ca2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f001 f9c3 	bl	8003032 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f001 fa09 	bl	80030c4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	3305      	adds	r3, #5
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	021a      	lsls	r2, r3, #8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	061a      	lsls	r2, r3, #24
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	3302      	adds	r3, #2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	3301      	adds	r3, #1
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cf0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001cfe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2210      	movs	r2, #16
 8001d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58000400 	.word	0x58000400
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	ffff8001 	.word	0xffff8001

08001d30 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d179      	bne.n	8001e36 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2223      	movs	r2, #35	; 0x23
 8001d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_ETH_Start_IT+0x110>)
 8001d5e:	430b      	orrs	r3, r1
 8001d60:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_ETH_Start_IT+0x114>)
 8001d72:	430b      	orrs	r3, r1
 8001d74:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f9c3 	bl	800210a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0202 	orr.w	r2, r2, #2
 8001d92:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dd0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ddc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001e04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e08:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e14:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001e20:	430b      	orrs	r3, r1
 8001e22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e26:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2223      	movs	r2, #35	; 0x23
 8001e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
  }
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	0c020060 	.word	0x0c020060
 8001e44:	0c20c000 	.word	0x0c20c000

08001e48 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e56:	2b23      	cmp	r3, #35	; 0x23
 8001e58:	d13f      	bne.n	8001eda <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2223      	movs	r2, #35	; 0x23
 8001e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e96:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0202 	bic.w	r2, r2, #2
 8001ecc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
  }
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e03a      	b.n	8001f82 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f12:	2b23      	cmp	r3, #35	; 0x23
 8001f14:	d134      	bne.n	8001f80 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f001 f92c 	bl	8003180 <ETH_Prepare_Tx_Descriptors>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	f043 0202 	orr.w	r2, r3, #2
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e01f      	b.n	8001f82 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f42:	f3bf 8f4f 	dsb	sy
}
 8001f46:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d904      	bls.n	8001f64 <HAL_ETH_Transmit_IT+0x7c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	1f1a      	subs	r2, r3, #4
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3106      	adds	r1, #6
 8001f70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f78:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
  }
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b088      	sub	sp, #32
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0a5      	b.n	8002102 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fbc:	2b23      	cmp	r3, #35	; 0x23
 8001fbe:	d001      	beq.n	8001fc4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e09e      	b.n	8002102 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	3212      	adds	r2, #18
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fda:	f1c3 0304 	rsb	r3, r3, #4
 8001fde:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fe0:	e067      	b.n	80020b2 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <HAL_ETH_ReadData+0x88>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d03d      	beq.n	800208e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002068:	461a      	mov	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f006 fd73 	bl	8008b58 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	441a      	add	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3301      	adds	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d902      	bls.n	80020a0 <HAL_ETH_ReadData+0x116>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b04      	subs	r3, #4
 800209e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	3212      	adds	r2, #18
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db06      	blt.n	80020c8 <HAL_ETH_ReadData+0x13e>
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d202      	bcs.n	80020c8 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d08c      	beq.n	8001fe2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	441a      	add	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f814 	bl	800210a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
}
 8002102:	4618      	mov	r0, r3
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b088      	sub	sp, #32
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002116:	2301      	movs	r3, #1
 8002118:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800211e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	3212      	adds	r2, #18
 8002126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002130:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002132:	e03b      	b.n	80021ac <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d112      	bne.n	8002162 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4618      	mov	r0, r3
 8002142:	f006 fcb9 	bl	8008ab8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	74fb      	strb	r3, [r7, #19]
 8002150:	e007      	b.n	8002162 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	461a      	mov	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	461a      	mov	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d021      	beq.n	80021ac <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002168:	f3bf 8f5f 	dmb	sy
}
 800216c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	e003      	b.n	8002188 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8002186:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d902      	bls.n	800219a <ETH_UpdateDescriptor+0x90>
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3b04      	subs	r3, #4
 8002198:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	3212      	adds	r2, #18
 80021a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a4:	617b      	str	r3, [r7, #20]
      desccount--;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <ETH_UpdateDescriptor+0xae>
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1bd      	bne.n	8002134 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d00d      	beq.n	80021de <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ca:	461a      	mov	r2, r3
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80021de:	bf00      	nop
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3318      	adds	r3, #24
 80021f2:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002204:	e03f      	b.n	8002286 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002206:	2301      	movs	r3, #1
 8002208:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3b01      	subs	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	3304      	adds	r3, #4
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	3301      	adds	r3, #1
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800222e:	7bbb      	ldrb	r3, [r7, #14]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d028      	beq.n	8002286 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68d9      	ldr	r1, [r3, #12]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db1b      	blt.n	8002282 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3304      	adds	r3, #4
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	f006 fbf8 	bl	8008a4c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	3304      	adds	r3, #4
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	2200      	movs	r2, #0
 8002268:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	3301      	adds	r3, #1
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002280:	e001      	b.n	8002286 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_ETH_ReleaseTxPacket+0xac>
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1b9      	bne.n	8002206 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ac:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d115      	bne.n	80022e4 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d10b      	bne.n	80022e4 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	461a      	mov	r2, r3
 80022d6:	f248 0340 	movw	r3, #32832	; 0x8040
 80022da:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f006 fc70 	bl	8008bc4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ec:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d115      	bne.n	8002324 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10b      	bne.n	8002324 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002314:	461a      	mov	r2, r3
 8002316:	f248 0301 	movw	r3, #32769	; 0x8001
 800231a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f006 fc6c 	bl	8008bfc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002338:	d153      	bne.n	80023e2 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002342:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800234e:	d148      	bne.n	80023e2 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f043 0208 	orr.w	r2, r3, #8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002374:	d11e      	bne.n	80023b4 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002382:	f241 1302 	movw	r3, #4354	; 0x1102
 8002386:	4013      	ands	r3, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002396:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023a6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	22e0      	movs	r2, #224	; 0xe0
 80023ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80023b2:	e013      	b.n	80023dc <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023bc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80023c0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d2:	461a      	mov	r2, r3
 80023d4:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80023d8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f86d 	bl	80024bc <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80023ea:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d019      	beq.n	8002434 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f043 0210 	orr.w	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	22e0      	movs	r2, #224	; 0xe0
 8002422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f848 	bl	80024bc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b10      	cmp	r3, #16
 8002442:	d10f      	bne.n	8002464 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800244c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f83a 	bl	80024d0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b20      	cmp	r3, #32
 8002472:	d10f      	bne.n	8002494 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f82c 	bl	80024e4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_ETH_IRQHandler+0x21c>)
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_ETH_IRQHandler+0x21c>)
 80024a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f825 	bl	80024f8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	58000080 	.word	0x58000080

080024bc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e03e      	b.n	80025ac <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002536:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	055b      	lsls	r3, r3, #21
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f043 030c 	orr.w	r3, r3, #12
 800255a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800256e:	f7ff f971 	bl	8001854 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002574:	e009      	b.n	800258a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002576:	f7ff f96d 	bl	8001854 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002584:	d901      	bls.n	800258a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e010      	b.n	80025ac <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ed      	bne.n	8002576 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e03c      	b.n	8002650 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025de:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	055b      	lsls	r3, r3, #21
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f023 030c 	bic.w	r3, r3, #12
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_ETH_WritePHYRegister+0xa4>)
 8002616:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800261a:	4a0f      	ldr	r2, [pc, #60]	; (8002658 <HAL_ETH_WritePHYRegister+0xa4>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002622:	f7ff f917 	bl	8001854 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002628:	e009      	b.n	800263e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800262a:	f7ff f913 	bl	8001854 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002638:	d901      	bls.n	800263e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e008      	b.n	8002650 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ed      	bne.n	800262a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40028000 	.word	0x40028000

0800265c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e1c3      	b.n	80029f8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 020c 	and.w	r2, r3, #12
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf14      	ite	ne
 80026d2:	2301      	movne	r3, #1
 80026d4:	2300      	moveq	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80026fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf14      	ite	ne
 8002756:	2301      	movne	r3, #1
 8002758:	2300      	moveq	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf0c      	ite	eq
 800278a:	2301      	moveq	r3, #1
 800278c:	2300      	movne	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf14      	ite	ne
 80027be:	2301      	movne	r3, #1
 80027c0:	2300      	moveq	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80027ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bf14      	ite	ne
 80027f2:	2301      	movne	r3, #1
 80027f4:	2300      	moveq	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0e5b      	lsrs	r3, r3, #25
 80028ba:	f003 021f 	and.w	r2, r3, #31
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	b29a      	uxth	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002984:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002994:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e00b      	b.n	8002a30 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d105      	bne.n	8002a2e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f8c5 	bl	8002bb4 <ETH_SetMACConfig>

    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e00b      	b.n	8002a64 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d105      	bne.n	8002a62 <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f9c7 	bl	8002dec <ETH_SetDMAConfig>

    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a86:	f001 ff7d 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 8002a8a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d908      	bls.n	8002aa6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d804      	bhi.n	8002aa6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e027      	b.n	8002af6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d908      	bls.n	8002ac0 <HAL_ETH_SetMDIOClockRange+0x54>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d204      	bcs.n	8002ac0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e01a      	b.n	8002af6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d303      	bcc.n	8002ad0 <HAL_ETH_SetMDIOClockRange+0x64>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d911      	bls.n	8002af4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d908      	bls.n	8002aea <HAL_ETH_SetMDIOClockRange+0x7e>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d804      	bhi.n	8002aea <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e005      	b.n	8002af6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e000      	b.n	8002af6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002af4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	01312cff 	.word	0x01312cff
 8002b0c:	02160ebf 	.word	0x02160ebf
 8002b10:	03938700 	.word	0x03938700
 8002b14:	05f5e0ff 	.word	0x05f5e0ff
 8002b18:	08f0d17f 	.word	0x08f0d17f

08002b1c <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e039      	b.n	8002ba4 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	78db      	ldrb	r3, [r3, #3]
 8002b3a:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002b3c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	791b      	ldrb	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8002b44:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	7a1b      	ldrb	r3, [r3, #8]
 8002b4a:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8002b4c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	795b      	ldrb	r3, [r3, #5]
 8002b52:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8002b54:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	7a52      	ldrb	r2, [r2, #9]
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ETH_SetMACFilterConfig+0x46>
 8002b5e:	2220      	movs	r2, #32
 8002b60:	e000      	b.n	8002b64 <HAL_ETH_SetMACFilterConfig+0x48>
 8002b62:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002b64:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	79db      	ldrb	r3, [r3, #7]
 8002b6a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002b6c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	799b      	ldrb	r3, [r3, #6]
 8002b72:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002b74:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	789b      	ldrb	r3, [r3, #2]
 8002b7a:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002b7c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002b84:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_ETH_SetMACFilterConfig+0x94>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	7ffff800 	.word	0x7ffff800

08002bb4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002bc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	791b      	ldrb	r3, [r3, #4]
 8002bcc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002bce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	7b1b      	ldrb	r3, [r3, #12]
 8002bd4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002bd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	7b5b      	ldrb	r3, [r3, #13]
 8002bdc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002bde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	7b9b      	ldrb	r3, [r3, #14]
 8002be4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002be6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	7bdb      	ldrb	r3, [r3, #15]
 8002bec:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002bee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	7c12      	ldrb	r2, [r2, #16]
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	d102      	bne.n	8002bfe <ETH_SetMACConfig+0x4a>
 8002bf8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002bfc:	e000      	b.n	8002c00 <ETH_SetMACConfig+0x4c>
 8002bfe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c00:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	7c52      	ldrb	r2, [r2, #17]
 8002c06:	2a00      	cmp	r2, #0
 8002c08:	d102      	bne.n	8002c10 <ETH_SetMACConfig+0x5c>
 8002c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c0e:	e000      	b.n	8002c12 <ETH_SetMACConfig+0x5e>
 8002c10:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	7c9b      	ldrb	r3, [r3, #18]
 8002c18:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c1a:	431a      	orrs	r2, r3
               macconf->Speed |
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c20:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002c26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	7f1b      	ldrb	r3, [r3, #28]
 8002c2c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	7f5b      	ldrb	r3, [r3, #29]
 8002c34:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	7f92      	ldrb	r2, [r2, #30]
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	d102      	bne.n	8002c46 <ETH_SetMACConfig+0x92>
 8002c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c44:	e000      	b.n	8002c48 <ETH_SetMACConfig+0x94>
 8002c46:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c48:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	7fdb      	ldrb	r3, [r3, #31]
 8002c4e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	d102      	bne.n	8002c62 <ETH_SetMACConfig+0xae>
 8002c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c60:	e000      	b.n	8002c64 <ETH_SetMACConfig+0xb0>
 8002c62:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c64:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c72:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002c74:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <ETH_SetMACConfig+0x22c>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	68f9      	ldr	r1, [r7, #12]
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c9e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ca0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ca8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002caa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002cb2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002cb4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002cbc:	2a00      	cmp	r2, #0
 8002cbe:	d102      	bne.n	8002cc6 <ETH_SetMACConfig+0x112>
 8002cc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cc4:	e000      	b.n	8002cc8 <ETH_SetMACConfig+0x114>
 8002cc6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002cc8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <ETH_SetMACConfig+0x230>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <ETH_SetMACConfig+0x234>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	68f9      	ldr	r1, [r7, #12]
 8002d06:	430b      	orrs	r3, r1
 8002d08:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d10:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d16:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d1e:	2a00      	cmp	r2, #0
 8002d20:	d101      	bne.n	8002d26 <ETH_SetMACConfig+0x172>
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	e000      	b.n	8002d28 <ETH_SetMACConfig+0x174>
 8002d26:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002d28:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d3a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	430b      	orrs	r3, r1
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002d50:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002d58:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f023 0103 	bic.w	r1, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002d7e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002d9a:	2a00      	cmp	r2, #0
 8002d9c:	d101      	bne.n	8002da2 <ETH_SetMACConfig+0x1ee>
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	e000      	b.n	8002da4 <ETH_SetMACConfig+0x1f0>
 8002da2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002da4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002dac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002db6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002dc4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	00048083 	.word	0x00048083
 8002de4:	c0f88000 	.word	0xc0f88000
 8002de8:	fffffef0 	.word	0xfffffef0

08002dec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <ETH_SetDMAConfig+0xf8>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	6811      	ldr	r1, [r2, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e12:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	791b      	ldrb	r3, [r3, #4]
 8002e18:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e1e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	7b1b      	ldrb	r3, [r3, #12]
 8002e24:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <ETH_SetDMAConfig+0xfc>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	68f9      	ldr	r1, [r7, #12]
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e44:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	7b5b      	ldrb	r3, [r3, #13]
 8002e4a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <ETH_SetDMAConfig+0x100>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	68f9      	ldr	r1, [r7, #12]
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e70:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	7d1b      	ldrb	r3, [r3, #20]
 8002e7c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	7f5b      	ldrb	r3, [r3, #29]
 8002e84:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e92:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <ETH_SetDMAConfig+0x104>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	68f9      	ldr	r1, [r7, #12]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ea6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	7f1b      	ldrb	r3, [r3, #28]
 8002eae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <ETH_SetDMAConfig+0x108>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ed4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	ffff87fd 	.word	0xffff87fd
 8002ee8:	ffff2ffe 	.word	0xffff2ffe
 8002eec:	fffec000 	.word	0xfffec000
 8002ef0:	ffc0efef 	.word	0xffc0efef
 8002ef4:	7fc0ffff 	.word	0x7fc0ffff

08002ef8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0a4      	sub	sp, #144	; 0x90
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f06:	2300      	movs	r3, #0
 8002f08:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002f50:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002f54:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002f72:	2300      	movs	r3, #0
 8002f74:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002f90:	2320      	movs	r3, #32
 8002f92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002fa2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fde6 	bl	8002bb4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fec:	2301      	movs	r3, #1
 8002fee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003002:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003006:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800300c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003010:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003018:	f44f 7306 	mov.w	r3, #536	; 0x218
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fee1 	bl	8002dec <ETH_SetDMAConfig>
}
 800302a:	bf00      	nop
 800302c:	3790      	adds	r7, #144	; 0x90
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e01d      	b.n	800307c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68d9      	ldr	r1, [r3, #12]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	3206      	adds	r2, #6
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3301      	adds	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d9de      	bls.n	8003040 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	461a      	mov	r2, r3
 8003092:	2303      	movs	r3, #3
 8003094:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e023      	b.n	800311a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6919      	ldr	r1, [r3, #16]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2200      	movs	r2, #0
 80030ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2200      	movs	r2, #0
 8003106:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	3212      	adds	r2, #18
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3301      	adds	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d9d8      	bls.n	80030d2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003146:	461a      	mov	r2, r3
 8003148:	2303      	movs	r3, #3
 800314a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800316e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003180:	b480      	push	{r7}
 8003182:	b08d      	sub	sp, #52	; 0x34
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3318      	adds	r3, #24
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031aa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031c2:	d007      	beq.n	80031d4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	3304      	adds	r3, #4
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80031d4:	2302      	movs	r3, #2
 80031d6:	e259      	b.n	800368c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d044      	beq.n	800326e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <ETH_Prepare_Tx_Descriptors+0x240>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031f0:	431a      	orrs	r2, r3
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003210:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d027      	beq.n	800326e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	b29a      	uxth	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	431a      	orrs	r2, r3
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800325c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800326c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00e      	beq.n	8003298 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003280:	4013      	ands	r3, r2
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	6992      	ldr	r2, [r2, #24]
 8003286:	431a      	orrs	r2, r3
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d036      	beq.n	800331e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80032bc:	f3bf 8f5f 	dmb	sy
}
 80032c0:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	3301      	adds	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d902      	bls.n	80032e0 <ETH_Prepare_Tx_Descriptors+0x160>
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	3b04      	subs	r3, #4
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e8:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	3301      	adds	r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032fc:	d10f      	bne.n	800331e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003306:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003308:	f3bf 8f5f 	dmb	sy
}
 800330c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800331a:	2302      	movs	r3, #2
 800331c:	e1b6      	b.n	800368c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	3301      	adds	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003334:	4013      	ands	r3, r2
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	6852      	ldr	r2, [r2, #4]
 800333a:	431a      	orrs	r2, r3
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800335e:	4013      	ands	r3, r2
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	6852      	ldr	r2, [r2, #4]
 8003364:	0412      	lsls	r2, r2, #16
 8003366:	431a      	orrs	r2, r3
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	e008      	b.n	8003380 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	2200      	movs	r2, #0
 8003372:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800337a:	4013      	ands	r3, r2
 800337c:	6a3a      	ldr	r2, [r7, #32]
 800337e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d021      	beq.n	80033d0 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	04db      	lsls	r3, r3, #19
 800339a:	431a      	orrs	r2, r3
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <ETH_Prepare_Tx_Descriptors+0x24c>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	69d2      	ldr	r2, [r2, #28]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	e02e      	b.n	800341e <ETH_Prepare_Tx_Descriptors+0x29e>
 80033c0:	ffff0000 	.word	0xffff0000
 80033c4:	ffffc000 	.word	0xffffc000
 80033c8:	c000ffff 	.word	0xc000ffff
 80033cc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <ETH_Prepare_Tx_Descriptors+0x444>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	6852      	ldr	r2, [r2, #4]
 80033dc:	431a      	orrs	r2, r3
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	431a      	orrs	r2, r3
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	431a      	orrs	r2, r3
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003454:	f3bf 8f5f 	dmb	sy
}
 8003458:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80da 	beq.w	8003628 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	431a      	orrs	r2, r3
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003486:	e0cf      	b.n	8003628 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	3301      	adds	r3, #1
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	2b03      	cmp	r3, #3
 800349e:	d902      	bls.n	80034a6 <ETH_Prepare_Tx_Descriptors+0x326>
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	3b04      	subs	r3, #4
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ae:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c8:	d007      	beq.n	80034da <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	3304      	adds	r3, #4
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d029      	beq.n	800352e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e6:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ec:	e019      	b.n	8003522 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80034ee:	f3bf 8f5f 	dmb	sy
}
 80034f2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	3301      	adds	r3, #1
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2b03      	cmp	r3, #3
 800350a:	d902      	bls.n	8003512 <ETH_Prepare_Tx_Descriptors+0x392>
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	3b04      	subs	r3, #4
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	3301      	adds	r3, #1
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	429a      	cmp	r2, r3
 8003528:	d3e1      	bcc.n	80034ee <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	e0ae      	b.n	800368c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	3301      	adds	r3, #1
 8003532:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <ETH_Prepare_Tx_Descriptors+0x448>)
 800354a:	4013      	ands	r3, r2
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	6852      	ldr	r2, [r2, #4]
 8003550:	431a      	orrs	r2, r3
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003574:	4013      	ands	r3, r2
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	6852      	ldr	r2, [r2, #4]
 800357a:	0412      	lsls	r2, r2, #16
 800357c:	431a      	orrs	r2, r3
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	e008      	b.n	8003596 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	2200      	movs	r2, #0
 8003588:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003590:	4013      	ands	r3, r2
 8003592:	6a3a      	ldr	r2, [r7, #32]
 8003594:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d018      	beq.n	80035d4 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <ETH_Prepare_Tx_Descriptors+0x450>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	69d2      	ldr	r2, [r2, #28]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	e020      	b.n	8003604 <ETH_Prepare_Tx_Descriptors+0x484>
 80035c2:	bf00      	nop
 80035c4:	ffff8000 	.word	0xffff8000
 80035c8:	ffffc000 	.word	0xffffc000
 80035cc:	c000ffff 	.word	0xc000ffff
 80035d0:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <ETH_Prepare_Tx_Descriptors+0x518>)
 80035da:	4013      	ands	r3, r2
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	6852      	ldr	r2, [r2, #4]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	431a      	orrs	r2, r3
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	3301      	adds	r3, #1
 8003608:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800360a:	f3bf 8f5f 	dmb	sy
}
 800360e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f47f af2b 	bne.w	8003488 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	e005      	b.n	8003652 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	3304      	adds	r3, #4
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003672:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003674:	b672      	cpsid	i
}
 8003676:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4413      	add	r3, r2
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003686:	b662      	cpsie	i
}
 8003688:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3734      	adds	r7, #52	; 0x34
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	ffff8000 	.word	0xffff8000

0800369c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036aa:	4b89      	ldr	r3, [pc, #548]	; (80038d0 <HAL_GPIO_Init+0x234>)
 80036ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036ae:	e194      	b.n	80039da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2101      	movs	r1, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8186 	beq.w	80039d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d005      	beq.n	80036e0 <HAL_GPIO_Init+0x44>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d130      	bne.n	8003742 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003716:	2201      	movs	r2, #1
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 0201 	and.w	r2, r3, #1
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b03      	cmp	r3, #3
 800374c:	d017      	beq.n	800377e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	2203      	movs	r2, #3
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d123      	bne.n	80037d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	08da      	lsrs	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3208      	adds	r2, #8
 8003792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3208      	adds	r2, #8
 80037cc:	69b9      	ldr	r1, [r7, #24]
 80037ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2203      	movs	r2, #3
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80e0 	beq.w	80039d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_GPIO_Init+0x238>)
 8003816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800381a:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <HAL_GPIO_Init+0x238>)
 800381c:	f043 0302 	orr.w	r3, r3, #2
 8003820:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_GPIO_Init+0x238>)
 8003826:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003832:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <HAL_GPIO_Init+0x23c>)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	3302      	adds	r3, #2
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a20      	ldr	r2, [pc, #128]	; (80038dc <HAL_GPIO_Init+0x240>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d052      	beq.n	8003904 <HAL_GPIO_Init+0x268>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_GPIO_Init+0x244>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d031      	beq.n	80038ca <HAL_GPIO_Init+0x22e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_GPIO_Init+0x248>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d02b      	beq.n	80038c6 <HAL_GPIO_Init+0x22a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_GPIO_Init+0x24c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d025      	beq.n	80038c2 <HAL_GPIO_Init+0x226>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <HAL_GPIO_Init+0x250>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01f      	beq.n	80038be <HAL_GPIO_Init+0x222>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_GPIO_Init+0x254>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d019      	beq.n	80038ba <HAL_GPIO_Init+0x21e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_GPIO_Init+0x258>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <HAL_GPIO_Init+0x21a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_GPIO_Init+0x25c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00d      	beq.n	80038b2 <HAL_GPIO_Init+0x216>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a18      	ldr	r2, [pc, #96]	; (80038fc <HAL_GPIO_Init+0x260>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <HAL_GPIO_Init+0x212>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <HAL_GPIO_Init+0x264>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_GPIO_Init+0x20e>
 80038a6:	2309      	movs	r3, #9
 80038a8:	e02d      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038aa:	230a      	movs	r3, #10
 80038ac:	e02b      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038ae:	2308      	movs	r3, #8
 80038b0:	e029      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038b2:	2307      	movs	r3, #7
 80038b4:	e027      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038b6:	2306      	movs	r3, #6
 80038b8:	e025      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038ba:	2305      	movs	r3, #5
 80038bc:	e023      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038be:	2304      	movs	r3, #4
 80038c0:	e021      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038c2:	2303      	movs	r3, #3
 80038c4:	e01f      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e01d      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e01b      	b.n	8003906 <HAL_GPIO_Init+0x26a>
 80038ce:	bf00      	nop
 80038d0:	58000080 	.word	0x58000080
 80038d4:	58024400 	.word	0x58024400
 80038d8:	58000400 	.word	0x58000400
 80038dc:	58020000 	.word	0x58020000
 80038e0:	58020400 	.word	0x58020400
 80038e4:	58020800 	.word	0x58020800
 80038e8:	58020c00 	.word	0x58020c00
 80038ec:	58021000 	.word	0x58021000
 80038f0:	58021400 	.word	0x58021400
 80038f4:	58021800 	.word	0x58021800
 80038f8:	58021c00 	.word	0x58021c00
 80038fc:	58022000 	.word	0x58022000
 8003900:	58022400 	.word	0x58022400
 8003904:	2300      	movs	r3, #0
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f002 0203 	and.w	r2, r2, #3
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	4093      	lsls	r3, r2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003916:	4938      	ldr	r1, [pc, #224]	; (80039f8 <HAL_GPIO_Init+0x35c>)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	3302      	adds	r3, #2
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800394a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f47f ae63 	bne.w	80036b0 <HAL_GPIO_Init+0x14>
  }
}
 80039ea:	bf00      	nop
 80039ec:	bf00      	nop
 80039ee:	3724      	adds	r7, #36	; 0x24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	58000400 	.word	0x58000400

080039fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_PWREx_ConfigSupply+0x70>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d00a      	beq.n	8003a26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a10:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <HAL_PWREx_ConfigSupply+0x70>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d001      	beq.n	8003a22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e01f      	b.n	8003a62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e01d      	b.n	8003a62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_PWREx_ConfigSupply+0x70>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f023 0207 	bic.w	r2, r3, #7
 8003a2e:	490f      	ldr	r1, [pc, #60]	; (8003a6c <HAL_PWREx_ConfigSupply+0x70>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a36:	f7fd ff0d 	bl	8001854 <HAL_GetTick>
 8003a3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a3c:	e009      	b.n	8003a52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a3e:	f7fd ff09 	bl	8001854 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a4c:	d901      	bls.n	8003a52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e007      	b.n	8003a62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_PWREx_ConfigSupply+0x70>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5e:	d1ee      	bne.n	8003a3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	58024800 	.word	0x58024800

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	; 0x30
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f000 bc48 	b.w	8004314 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8088 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a92:	4b99      	ldr	r3, [pc, #612]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a9c:	4b96      	ldr	r3, [pc, #600]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d007      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x48>
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	2b18      	cmp	r3, #24
 8003aac:	d111      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62>
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	4b8f      	ldr	r3, [pc, #572]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d06d      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x130>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d169      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f000 bc21 	b.w	8004314 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x7a>
 8003adc:	4b86      	ldr	r3, [pc, #536]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a85      	ldr	r2, [pc, #532]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e02e      	b.n	8003b48 <HAL_RCC_OscConfig+0xd8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x9c>
 8003af2:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a80      	ldr	r2, [pc, #512]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b7e      	ldr	r3, [pc, #504]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7d      	ldr	r2, [pc, #500]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xd8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0xc0>
 8003b16:	4b78      	ldr	r3, [pc, #480]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a77      	ldr	r2, [pc, #476]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b75      	ldr	r3, [pc, #468]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a74      	ldr	r2, [pc, #464]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xd8>
 8003b30:	4b71      	ldr	r3, [pc, #452]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a70      	ldr	r2, [pc, #448]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b6e      	ldr	r3, [pc, #440]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6d      	ldr	r2, [pc, #436]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fe80 	bl	8001854 <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd fe7c 	bl	8001854 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e3d4      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b6a:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xe8>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fe6c 	bl	8001854 <HAL_GetTick>
 8003b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd fe68 	bl	8001854 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e3c0      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b92:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x110>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 80ca 	beq.w	8003d44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb0:	4b51      	ldr	r3, [pc, #324]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bba:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x166>
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	2b18      	cmp	r3, #24
 8003bca:	d156      	bne.n	8003c7a <HAL_RCC_OscConfig+0x20a>
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d151      	bne.n	8003c7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd6:	4b48      	ldr	r3, [pc, #288]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_RCC_OscConfig+0x17e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e392      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bee:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0219 	bic.w	r2, r3, #25
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	493f      	ldr	r1, [pc, #252]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fe28 	bl	8001854 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fd fe24 	bl	8001854 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e37c      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c1a:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	f7fd fe21 	bl	800186c <HAL_GetREVID>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d817      	bhi.n	8003c64 <HAL_RCC_OscConfig+0x1f4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d108      	bne.n	8003c4e <HAL_RCC_OscConfig+0x1de>
 8003c3c:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c44:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4c:	e07a      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	031b      	lsls	r3, r3, #12
 8003c5c:	4926      	ldr	r1, [pc, #152]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c62:	e06f      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	4921      	ldr	r1, [pc, #132]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c78:	e064      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d047      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c82:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 0219 	bic.w	r2, r3, #25
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	491a      	ldr	r1, [pc, #104]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fd fdde 	bl	8001854 <HAL_GetTick>
 8003c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fd fdda 	bl	8001854 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e332      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	f7fd fdd7 	bl	800186c <HAL_GetREVID>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d819      	bhi.n	8003cfc <HAL_RCC_OscConfig+0x28c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d108      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x272>
 8003cd0:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003cd8:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cde:	6053      	str	r3, [r2, #4]
 8003ce0:	e030      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	031b      	lsls	r3, r3, #12
 8003cf0:	4901      	ldr	r1, [pc, #4]	; (8003cf8 <HAL_RCC_OscConfig+0x288>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
 8003cf6:	e025      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	4b9a      	ldr	r3, [pc, #616]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	4997      	ldr	r1, [pc, #604]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
 8003d10:	e018      	b.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d12:	4b95      	ldr	r3, [pc, #596]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a94      	ldr	r2, [pc, #592]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fd fd99 	bl	8001854 <HAL_GetTick>
 8003d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d26:	f7fd fd95 	bl	8001854 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e2ed      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d38:	4b8b      	ldr	r3, [pc, #556]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a9 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d5c:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d007      	beq.n	8003d78 <HAL_RCC_OscConfig+0x308>
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b18      	cmp	r3, #24
 8003d6c:	d13a      	bne.n	8003de4 <HAL_RCC_OscConfig+0x374>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d135      	bne.n	8003de4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d78:	4b7b      	ldr	r3, [pc, #492]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_OscConfig+0x320>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e2c1      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d90:	f7fd fd6c 	bl	800186c <HAL_GetREVID>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d817      	bhi.n	8003dce <HAL_RCC_OscConfig+0x35e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0x348>
 8003da6:	4b70      	ldr	r3, [pc, #448]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003dae:	4a6e      	ldr	r2, [pc, #440]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003db4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003db6:	e075      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003db8:	4b6b      	ldr	r3, [pc, #428]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	069b      	lsls	r3, r3, #26
 8003dc6:	4968      	ldr	r1, [pc, #416]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dcc:	e06a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dce:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	4962      	ldr	r1, [pc, #392]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003de2:	e05f      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d042      	beq.n	8003e72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dec:	4b5e      	ldr	r3, [pc, #376]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5d      	ldr	r2, [pc, #372]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd fd2c 	bl	8001854 <HAL_GetTick>
 8003dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e00:	f7fd fd28 	bl	8001854 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e280      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e12:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e1e:	f7fd fd25 	bl	800186c <HAL_GetREVID>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d817      	bhi.n	8003e5c <HAL_RCC_OscConfig+0x3ec>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d108      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3d6>
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e3c:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e42:	6053      	str	r3, [r2, #4]
 8003e44:	e02e      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
 8003e46:	4b48      	ldr	r3, [pc, #288]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	069b      	lsls	r3, r3, #26
 8003e54:	4944      	ldr	r1, [pc, #272]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
 8003e5a:	e023      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
 8003e5c:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	493f      	ldr	r1, [pc, #252]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
 8003e70:	e018      	b.n	8003ea4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fce9 	bl	8001854 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e86:	f7fd fce5 	bl	8001854 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e23d      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d036      	beq.n	8003f1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d019      	beq.n	8003eec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fd fcc6 	bl	8001854 <HAL_GetTick>
 8003ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ecc:	f7fd fcc2 	bl	8001854 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e21a      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x45c>
 8003eea:	e018      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fd fcac 	bl	8001854 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fd fca8 	bl	8001854 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e200      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d039      	beq.n	8003f9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01c      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd fc89 	bl	8001854 <HAL_GetTick>
 8003f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f46:	f7fd fc85 	bl	8001854 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1dd      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_OscConfig+0x4f8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x4d6>
 8003f64:	e01b      	b.n	8003f9e <HAL_RCC_OscConfig+0x52e>
 8003f66:	bf00      	nop
 8003f68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f6c:	4b9b      	ldr	r3, [pc, #620]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a9a      	ldr	r2, [pc, #616]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f78:	f7fd fc6c 	bl	8001854 <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f80:	f7fd fc68 	bl	8001854 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e1c0      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f92:	4b92      	ldr	r3, [pc, #584]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8081 	beq.w	80040ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fac:	4b8c      	ldr	r3, [pc, #560]	; (80041e0 <HAL_RCC_OscConfig+0x770>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a8b      	ldr	r2, [pc, #556]	; (80041e0 <HAL_RCC_OscConfig+0x770>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fc4c 	bl	8001854 <HAL_GetTick>
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fd fc48 	bl	8001854 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e1a0      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd2:	4b83      	ldr	r3, [pc, #524]	; (80041e0 <HAL_RCC_OscConfig+0x770>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x584>
 8003fe6:	4b7d      	ldr	r3, [pc, #500]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a7c      	ldr	r2, [pc, #496]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	e02d      	b.n	8004050 <HAL_RCC_OscConfig+0x5e0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCC_OscConfig+0x5a6>
 8003ffc:	4b77      	ldr	r3, [pc, #476]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a76      	ldr	r2, [pc, #472]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
 8004008:	4b74      	ldr	r3, [pc, #464]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	4a73      	ldr	r2, [pc, #460]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	6713      	str	r3, [r2, #112]	; 0x70
 8004014:	e01c      	b.n	8004050 <HAL_RCC_OscConfig+0x5e0>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b05      	cmp	r3, #5
 800401c:	d10c      	bne.n	8004038 <HAL_RCC_OscConfig+0x5c8>
 800401e:	4b6f      	ldr	r3, [pc, #444]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a6e      	ldr	r2, [pc, #440]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004024:	f043 0304 	orr.w	r3, r3, #4
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b6c      	ldr	r3, [pc, #432]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a6b      	ldr	r2, [pc, #428]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
 8004036:	e00b      	b.n	8004050 <HAL_RCC_OscConfig+0x5e0>
 8004038:	4b68      	ldr	r3, [pc, #416]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a67      	ldr	r2, [pc, #412]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a64      	ldr	r2, [pc, #400]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800404a:	f023 0304 	bic.w	r3, r3, #4
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd fbfc 	bl	8001854 <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800405e:	e00a      	b.n	8004076 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004060:	f7fd fbf8 	bl	8001854 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e14e      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004076:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ee      	beq.n	8004060 <HAL_RCC_OscConfig+0x5f0>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fd fbe6 	bl	8001854 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fd fbe2 	bl	8001854 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e138      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040a2:	4b4e      	ldr	r3, [pc, #312]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1ee      	bne.n	800408c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 812d 	beq.w	8004312 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040b8:	4b48      	ldr	r3, [pc, #288]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040c0:	2b18      	cmp	r3, #24
 80040c2:	f000 80bd 	beq.w	8004240 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	f040 809e 	bne.w	800420c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b42      	ldr	r3, [pc, #264]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a41      	ldr	r2, [pc, #260]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fbba 	bl	8001854 <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fd fbb6 	bl	8001854 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e10e      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f6:	4b39      	ldr	r3, [pc, #228]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004106:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <HAL_RCC_OscConfig+0x774>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004112:	0112      	lsls	r2, r2, #4
 8004114:	430a      	orrs	r2, r1
 8004116:	4931      	ldr	r1, [pc, #196]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	628b      	str	r3, [r1, #40]	; 0x28
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	3b01      	subs	r3, #1
 8004122:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	3b01      	subs	r3, #1
 800412c:	025b      	lsls	r3, r3, #9
 800412e:	b29b      	uxth	r3, r3
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	3b01      	subs	r3, #1
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	3b01      	subs	r3, #1
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800414c:	4923      	ldr	r1, [pc, #140]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004152:	4b22      	ldr	r3, [pc, #136]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	4a21      	ldr	r2, [pc, #132]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004162:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <HAL_RCC_OscConfig+0x778>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800416a:	00d2      	lsls	r2, r2, #3
 800416c:	491b      	ldr	r1, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f023 020c 	bic.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	4917      	ldr	r1, [pc, #92]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f023 0202 	bic.w	r2, r3, #2
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	4912      	ldr	r1, [pc, #72]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	4a10      	ldr	r2, [pc, #64]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a2:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	4a07      	ldr	r2, [pc, #28]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a04      	ldr	r2, [pc, #16]	; (80041dc <HAL_RCC_OscConfig+0x76c>)
 80041cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fd fb3f 	bl	8001854 <HAL_GetTick>
 80041d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d8:	e011      	b.n	80041fe <HAL_RCC_OscConfig+0x78e>
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
 80041e0:	58024800 	.word	0x58024800
 80041e4:	fffffc0c 	.word	0xfffffc0c
 80041e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fd fb32 	bl	8001854 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e08a      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041fe:	4b47      	ldr	r3, [pc, #284]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x77c>
 800420a:	e082      	b.n	8004312 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420c:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 8004212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fb1c 	bl	8001854 <HAL_GetTick>
 800421c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd fb18 	bl	8001854 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e070      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004232:	4b3a      	ldr	r3, [pc, #232]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x7b0>
 800423e:	e068      	b.n	8004312 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004246:	4b35      	ldr	r3, [pc, #212]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2b01      	cmp	r3, #1
 8004252:	d031      	beq.n	80042b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 0203 	and.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d12a      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d122      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d11a      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	0a5b      	lsrs	r3, r3, #9
 8004286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d111      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d108      	bne.n	80042b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0e1b      	lsrs	r3, r3, #24
 80042aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e02b      	b.n	8004314 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042bc:	4b17      	ldr	r3, [pc, #92]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	08db      	lsrs	r3, r3, #3
 80042c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d01f      	beq.n	8004312 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	4a11      	ldr	r2, [pc, #68]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042de:	f7fd fab9 	bl	8001854 <HAL_GetTick>
 80042e2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042e4:	bf00      	nop
 80042e6:	f7fd fab5 	bl	8001854 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d0f9      	beq.n	80042e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_OscConfig+0x8b0>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042fe:	00d2      	lsls	r2, r2, #3
 8004300:	4906      	ldr	r1, [pc, #24]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 8004302:	4313      	orrs	r3, r2
 8004304:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <HAL_RCC_OscConfig+0x8ac>)
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3730      	adds	r7, #48	; 0x30
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	58024400 	.word	0x58024400
 8004320:	ffff0007 	.word	0xffff0007

08004324 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e19c      	b.n	8004672 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b8a      	ldr	r3, [pc, #552]	; (8004564 <HAL_RCC_ClockConfig+0x240>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d910      	bls.n	8004368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b87      	ldr	r3, [pc, #540]	; (8004564 <HAL_RCC_ClockConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 020f 	bic.w	r2, r3, #15
 800434e:	4985      	ldr	r1, [pc, #532]	; (8004564 <HAL_RCC_ClockConfig+0x240>)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b83      	ldr	r3, [pc, #524]	; (8004564 <HAL_RCC_ClockConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e184      	b.n	8004672 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d010      	beq.n	8004396 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	4b7b      	ldr	r3, [pc, #492]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004380:	429a      	cmp	r2, r3
 8004382:	d908      	bls.n	8004396 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004384:	4b78      	ldr	r3, [pc, #480]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	4975      	ldr	r1, [pc, #468]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004392:	4313      	orrs	r3, r2
 8004394:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d010      	beq.n	80043c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	4b70      	ldr	r3, [pc, #448]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d908      	bls.n	80043c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043b2:	4b6d      	ldr	r3, [pc, #436]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	496a      	ldr	r1, [pc, #424]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d010      	beq.n	80043f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699a      	ldr	r2, [r3, #24]
 80043d4:	4b64      	ldr	r3, [pc, #400]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043dc:	429a      	cmp	r2, r3
 80043de:	d908      	bls.n	80043f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043e0:	4b61      	ldr	r3, [pc, #388]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	495e      	ldr	r1, [pc, #376]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800440a:	429a      	cmp	r2, r3
 800440c:	d908      	bls.n	8004420 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800440e:	4b56      	ldr	r3, [pc, #344]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4953      	ldr	r1, [pc, #332]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 800441c:	4313      	orrs	r3, r2
 800441e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d010      	beq.n	800444e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	4b4d      	ldr	r3, [pc, #308]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	429a      	cmp	r2, r3
 800443a:	d908      	bls.n	800444e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443c:	4b4a      	ldr	r3, [pc, #296]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f023 020f 	bic.w	r2, r3, #15
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4947      	ldr	r1, [pc, #284]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 800444a:	4313      	orrs	r3, r2
 800444c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d055      	beq.n	8004506 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800445a:	4b43      	ldr	r3, [pc, #268]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	4940      	ldr	r1, [pc, #256]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004468:	4313      	orrs	r3, r2
 800446a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d107      	bne.n	8004484 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004474:	4b3c      	ldr	r3, [pc, #240]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d121      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0f6      	b.n	8004672 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d107      	bne.n	800449c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800448c:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d115      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0ea      	b.n	8004672 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044a4:	4b30      	ldr	r3, [pc, #192]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d109      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0de      	b.n	8004672 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b4:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0d6      	b.n	8004672 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044c4:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f023 0207 	bic.w	r2, r3, #7
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4925      	ldr	r1, [pc, #148]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d6:	f7fd f9bd 	bl	8001854 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044dc:	e00a      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044de:	f7fd f9b9 	bl	8001854 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e0be      	b.n	8004672 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	429a      	cmp	r2, r3
 8004504:	d1eb      	bne.n	80044de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	429a      	cmp	r2, r3
 8004520:	d208      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f023 020f 	bic.w	r2, r3, #15
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	490e      	ldr	r1, [pc, #56]	; (8004568 <HAL_RCC_ClockConfig+0x244>)
 8004530:	4313      	orrs	r3, r2
 8004532:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_ClockConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d214      	bcs.n	800456c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <HAL_RCC_ClockConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 020f 	bic.w	r2, r3, #15
 800454a:	4906      	ldr	r1, [pc, #24]	; (8004564 <HAL_RCC_ClockConfig+0x240>)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_RCC_ClockConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e086      	b.n	8004672 <HAL_RCC_ClockConfig+0x34e>
 8004564:	52002000 	.word	0x52002000
 8004568:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d010      	beq.n	800459a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004584:	429a      	cmp	r2, r3
 8004586:	d208      	bcs.n	800459a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004588:	4b3c      	ldr	r3, [pc, #240]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	4939      	ldr	r1, [pc, #228]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 8004596:	4313      	orrs	r3, r2
 8004598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d208      	bcs.n	80045c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045b6:	4b31      	ldr	r3, [pc, #196]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	492e      	ldr	r1, [pc, #184]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	4b28      	ldr	r3, [pc, #160]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d208      	bcs.n	80045f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	4922      	ldr	r1, [pc, #136]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d010      	beq.n	8004624 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800460e:	429a      	cmp	r2, r3
 8004610:	d208      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004612:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	4917      	ldr	r1, [pc, #92]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 8004620:	4313      	orrs	r3, r2
 8004622:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004624:	f000 f834 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b14      	ldr	r3, [pc, #80]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	4912      	ldr	r1, [pc, #72]	; (8004680 <HAL_RCC_ClockConfig+0x35c>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
 8004640:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004642:	4b0e      	ldr	r3, [pc, #56]	; (800467c <HAL_RCC_ClockConfig+0x358>)
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	4a0d      	ldr	r2, [pc, #52]	; (8004680 <HAL_RCC_ClockConfig+0x35c>)
 800464c:	5cd3      	ldrb	r3, [r2, r3]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_RCC_ClockConfig+0x360>)
 800465a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800465c:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <HAL_RCC_ClockConfig+0x364>)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <HAL_RCC_ClockConfig+0x368>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc fd36 	bl	80010d8 <HAL_InitTick>
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	58024400 	.word	0x58024400
 8004680:	0801b6bc 	.word	0x0801b6bc
 8004684:	24000004 	.word	0x24000004
 8004688:	24000000 	.word	0x24000000
 800468c:	24000008 	.word	0x24000008

08004690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004696:	4bb3      	ldr	r3, [pc, #716]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800469e:	2b18      	cmp	r3, #24
 80046a0:	f200 8155 	bhi.w	800494e <HAL_RCC_GetSysClockFreq+0x2be>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	08004711 	.word	0x08004711
 80046b0:	0800494f 	.word	0x0800494f
 80046b4:	0800494f 	.word	0x0800494f
 80046b8:	0800494f 	.word	0x0800494f
 80046bc:	0800494f 	.word	0x0800494f
 80046c0:	0800494f 	.word	0x0800494f
 80046c4:	0800494f 	.word	0x0800494f
 80046c8:	0800494f 	.word	0x0800494f
 80046cc:	08004737 	.word	0x08004737
 80046d0:	0800494f 	.word	0x0800494f
 80046d4:	0800494f 	.word	0x0800494f
 80046d8:	0800494f 	.word	0x0800494f
 80046dc:	0800494f 	.word	0x0800494f
 80046e0:	0800494f 	.word	0x0800494f
 80046e4:	0800494f 	.word	0x0800494f
 80046e8:	0800494f 	.word	0x0800494f
 80046ec:	0800473d 	.word	0x0800473d
 80046f0:	0800494f 	.word	0x0800494f
 80046f4:	0800494f 	.word	0x0800494f
 80046f8:	0800494f 	.word	0x0800494f
 80046fc:	0800494f 	.word	0x0800494f
 8004700:	0800494f 	.word	0x0800494f
 8004704:	0800494f 	.word	0x0800494f
 8004708:	0800494f 	.word	0x0800494f
 800470c:	08004743 	.word	0x08004743
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004710:	4b94      	ldr	r3, [pc, #592]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800471c:	4b91      	ldr	r3, [pc, #580]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	4a90      	ldr	r2, [pc, #576]	; (8004968 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800472e:	e111      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004730:	4b8d      	ldr	r3, [pc, #564]	; (8004968 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004732:	61bb      	str	r3, [r7, #24]
      break;
 8004734:	e10e      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004736:	4b8d      	ldr	r3, [pc, #564]	; (800496c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004738:	61bb      	str	r3, [r7, #24]
      break;
 800473a:	e10b      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800473c:	4b8c      	ldr	r3, [pc, #560]	; (8004970 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800473e:	61bb      	str	r3, [r7, #24]
      break;
 8004740:	e108      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004742:	4b88      	ldr	r3, [pc, #544]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800474c:	4b85      	ldr	r3, [pc, #532]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004756:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004758:	4b82      	ldr	r3, [pc, #520]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004762:	4b80      	ldr	r3, [pc, #512]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004766:	08db      	lsrs	r3, r3, #3
 8004768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80e1 	beq.w	8004948 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b02      	cmp	r3, #2
 800478a:	f000 8083 	beq.w	8004894 <HAL_RCC_GetSysClockFreq+0x204>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f200 80a1 	bhi.w	80048d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x114>
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d056      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0x1c0>
 80047a2:	e099      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a4:	4b6f      	ldr	r3, [pc, #444]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02d      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047b0:	4b6c      	ldr	r3, [pc, #432]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	08db      	lsrs	r3, r3, #3
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	4a6b      	ldr	r2, [pc, #428]	; (8004968 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
 80047c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b62      	ldr	r3, [pc, #392]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004974 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800480a:	e087      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004978 <HAL_RCC_GetSysClockFreq+0x2e8>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b51      	ldr	r3, [pc, #324]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004832:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004974 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800484e:	e065      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800497c <HAL_RCC_GetSysClockFreq+0x2ec>
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	4b40      	ldr	r3, [pc, #256]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	ed97 6a02 	vldr	s12, [r7, #8]
 8004876:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004974 <HAL_RCC_GetSysClockFreq+0x2e4>
 800487a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004892:	e043      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004980 <HAL_RCC_GetSysClockFreq+0x2f0>
 80048a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004974 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048d6:	e021      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800497c <HAL_RCC_GetSysClockFreq+0x2ec>
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ea:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80048fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004974 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800491a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800491c:	4b11      	ldr	r3, [pc, #68]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	0a5b      	lsrs	r3, r3, #9
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	3301      	adds	r3, #1
 8004928:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004934:	edd7 6a07 	vldr	s13, [r7, #28]
 8004938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004940:	ee17 3a90 	vmov	r3, s15
 8004944:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004946:	e005      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
      break;
 800494c:	e002      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004950:	61bb      	str	r3, [r7, #24]
      break;
 8004952:	bf00      	nop
  }

  return sysclockfreq;
 8004954:	69bb      	ldr	r3, [r7, #24]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	58024400 	.word	0x58024400
 8004968:	03d09000 	.word	0x03d09000
 800496c:	003d0900 	.word	0x003d0900
 8004970:	007a1200 	.word	0x007a1200
 8004974:	46000000 	.word	0x46000000
 8004978:	4c742400 	.word	0x4c742400
 800497c:	4a742400 	.word	0x4a742400
 8004980:	4af42400 	.word	0x4af42400

08004984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800498a:	f7ff fe81 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 800498e:	4602      	mov	r2, r0
 8004990:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	0a1b      	lsrs	r3, r3, #8
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	490f      	ldr	r1, [pc, #60]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800499c:	5ccb      	ldrb	r3, [r1, r3]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80049b2:	5cd3      	ldrb	r3, [r2, r3]
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	4a07      	ldr	r2, [pc, #28]	; (80049dc <HAL_RCC_GetHCLKFreq+0x58>)
 80049c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049c2:	4a07      	ldr	r2, [pc, #28]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCC_GetHCLKFreq+0x58>)
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	58024400 	.word	0x58024400
 80049d8:	0801b6bc 	.word	0x0801b6bc
 80049dc:	24000004 	.word	0x24000004
 80049e0:	24000000 	.word	0x24000000

080049e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049e8:	f7ff ffcc 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4904      	ldr	r1, [pc, #16]	; (8004a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	0801b6bc 	.word	0x0801b6bc

08004a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a14:	f7ff ffb6 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4904      	ldr	r1, [pc, #16]	; (8004a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	58024400 	.word	0x58024400
 8004a38:	0801b6bc 	.word	0x0801b6bc

08004a3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	223f      	movs	r2, #63	; 0x3f
 8004a4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <HAL_RCC_GetClockConfig+0x7c>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0207 	and.w	r2, r3, #7
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004a58:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <HAL_RCC_GetClockConfig+0x7c>)
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004a64:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <HAL_RCC_GetClockConfig+0x7c>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 020f 	and.w	r2, r3, #15
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <HAL_RCC_GetClockConfig+0x7c>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <HAL_RCC_GetClockConfig+0x7c>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_GetClockConfig+0x7c>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_RCC_GetClockConfig+0x7c>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_RCC_GetClockConfig+0x80>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 020f 	and.w	r2, r3, #15
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	601a      	str	r2, [r3, #0]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	52002000 	.word	0x52002000

08004ac0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b0ca      	sub	sp, #296	; 0x128
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004ae4:	2500      	movs	r5, #0
 8004ae6:	ea54 0305 	orrs.w	r3, r4, r5
 8004aea:	d049      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004af6:	d02f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004af8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004afc:	d828      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b02:	d01a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b08:	d822      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b12:	d007      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b14:	e01c      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b16:	4bb8      	ldr	r3, [pc, #736]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	4ab7      	ldr	r2, [pc, #732]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b22:	e01a      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b28:	3308      	adds	r3, #8
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fc8f 	bl	8006450 <RCCEx_PLL2_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b38:	e00f      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b3e:	3328      	adds	r3, #40	; 0x28
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 fd36 	bl	80065b4 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b4e:	e004      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b56:	e000      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b62:	4ba5      	ldr	r3, [pc, #660]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b70:	4aa1      	ldr	r2, [pc, #644]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	6513      	str	r3, [r2, #80]	; 0x50
 8004b76:	e003      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004b8c:	f04f 0900 	mov.w	r9, #0
 8004b90:	ea58 0309 	orrs.w	r3, r8, r9
 8004b94:	d047      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d82a      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bbd 	.word	0x08004bbd
 8004bac:	08004bcb 	.word	0x08004bcb
 8004bb0:	08004be1 	.word	0x08004be1
 8004bb4:	08004bff 	.word	0x08004bff
 8004bb8:	08004bff 	.word	0x08004bff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bbc:	4b8e      	ldr	r3, [pc, #568]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a8d      	ldr	r2, [pc, #564]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bc8:	e01a      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bce:	3308      	adds	r3, #8
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fc3c 	bl	8006450 <RCCEx_PLL2_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bde:	e00f      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be4:	3328      	adds	r3, #40	; 0x28
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fce3 	bl	80065b4 <RCCEx_PLL3_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bf4:	e004      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c08:	4b7b      	ldr	r3, [pc, #492]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0c:	f023 0107 	bic.w	r1, r3, #7
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	4a78      	ldr	r2, [pc, #480]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6513      	str	r3, [r2, #80]	; 0x50
 8004c1c:	e003      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004c32:	f04f 0b00 	mov.w	fp, #0
 8004c36:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c3a:	d04c      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c46:	d030      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4c:	d829      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c50:	d02d      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004c52:	2bc0      	cmp	r3, #192	; 0xc0
 8004c54:	d825      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c56:	2b80      	cmp	r3, #128	; 0x80
 8004c58:	d018      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004c5a:	2b80      	cmp	r3, #128	; 0x80
 8004c5c:	d821      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004c62:	2b40      	cmp	r3, #64	; 0x40
 8004c64:	d007      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004c66:	e01c      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c68:	4b63      	ldr	r3, [pc, #396]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	4a62      	ldr	r2, [pc, #392]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c74:	e01c      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 fbe6 	bl	8006450 <RCCEx_PLL2_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c8a:	e011      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c90:	3328      	adds	r3, #40	; 0x28
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 fc8d 	bl	80065b4 <RCCEx_PLL3_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004cb8:	4b4f      	ldr	r3, [pc, #316]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	4a4c      	ldr	r2, [pc, #304]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6513      	str	r3, [r2, #80]	; 0x50
 8004ccc:	e003      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004ce2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004cec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	d053      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d02:	d035      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004d04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d08:	d82e      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d0e:	d031      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004d10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d14:	d828      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d1a:	d01a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d20:	d822      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d2a:	d007      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004d2c:	e01c      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d2e:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4a31      	ldr	r2, [pc, #196]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d3a:	e01c      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d40:	3308      	adds	r3, #8
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fb83 	bl	8006450 <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d50:	e011      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d56:	3328      	adds	r3, #40	; 0x28
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 fc2a 	bl	80065b4 <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d66:	e006      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d8e:	4a1a      	ldr	r2, [pc, #104]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6593      	str	r3, [r2, #88]	; 0x58
 8004d94:	e003      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004daa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004db4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d056      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dca:	d038      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd0:	d831      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004dd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dd6:	d034      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ddc:	d82b      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004de2:	d01d      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004de8:	d825      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004df4:	e01f      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dfc:	4ba2      	ldr	r3, [pc, #648]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	4aa1      	ldr	r2, [pc, #644]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e08:	e01c      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0e:	3308      	adds	r3, #8
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fb1c 	bl	8006450 <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e1e:	e011      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e24:	3328      	adds	r3, #40	; 0x28
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fbc3 	bl	80065b4 <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e34:	e006      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e3c:	e002      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e4c:	4b8e      	ldr	r3, [pc, #568]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e5c:	4a8a      	ldr	r2, [pc, #552]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	6593      	str	r3, [r2, #88]	; 0x58
 8004e62:	e003      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	d03a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e92:	2b30      	cmp	r3, #48	; 0x30
 8004e94:	d01f      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e96:	2b30      	cmp	r3, #48	; 0x30
 8004e98:	d819      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d815      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d019      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d111      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eaa:	4b77      	ldr	r3, [pc, #476]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	4a76      	ldr	r2, [pc, #472]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004eb6:	e011      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fac5 	bl	8006450 <RCCEx_PLL2_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ecc:	e006      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ed4:	e002      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004edc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ee4:	4b68      	ldr	r3, [pc, #416]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	4a65      	ldr	r2, [pc, #404]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ef8:	e003      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004efe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004f0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f12:	2300      	movs	r3, #0
 8004f14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	d051      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f2c:	d035      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f32:	d82e      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f38:	d031      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004f3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f3e:	d828      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f44:	d01a      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4a:	d822      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d007      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004f56:	e01c      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f58:	4b4b      	ldr	r3, [pc, #300]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a4a      	ldr	r2, [pc, #296]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f64:	e01c      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 fa6e 	bl	8006450 <RCCEx_PLL2_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f7a:	e011      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f80:	3328      	adds	r3, #40	; 0x28
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f001 fb15 	bl	80065b4 <RCCEx_PLL3_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f90:	e006      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f98:	e002      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fa8:	4b37      	ldr	r3, [pc, #220]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb6:	4a34      	ldr	r2, [pc, #208]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6513      	str	r3, [r2, #80]	; 0x50
 8004fbc:	e003      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fdc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	d056      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff0:	d033      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff6:	d82c      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ffc:	d02f      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005002:	d826      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005004:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005008:	d02b      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800500a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800500e:	d820      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005014:	d012      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501a:	d81a      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d022      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d115      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502a:	3308      	adds	r3, #8
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f001 fa0e 	bl	8006450 <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800503a:	e015      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005040:	3328      	adds	r3, #40	; 0x28
 8005042:	2101      	movs	r1, #1
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fab5 	bl	80065b4 <RCCEx_PLL3_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005050:	e00a      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800505a:	bf00      	nop
 800505c:	e004      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800505e:	bf00      	nop
 8005060:	e002      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10d      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005074:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800507e:	4a02      	ldr	r2, [pc, #8]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005080:	430b      	orrs	r3, r1
 8005082:	6513      	str	r3, [r2, #80]	; 0x50
 8005084:	e006      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80050a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d055      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050c0:	d033      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80050c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050c6:	d82c      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d02f      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d826      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050d8:	d02b      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80050da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050de:	d820      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e4:	d012      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80050e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ea:	d81a      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d022      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80050f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f4:	d115      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fa:	3308      	adds	r3, #8
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 f9a6 	bl	8006450 <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800510a:	e015      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005110:	3328      	adds	r3, #40	; 0x28
 8005112:	2101      	movs	r1, #1
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fa4d 	bl	80065b4 <RCCEx_PLL3_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005120:	e00a      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005128:	e006      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800512a:	bf00      	nop
 800512c:	e004      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005140:	4ba3      	ldr	r3, [pc, #652]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005150:	4a9f      	ldr	r2, [pc, #636]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005152:	430b      	orrs	r3, r1
 8005154:	6593      	str	r3, [r2, #88]	; 0x58
 8005156:	e003      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800516c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005176:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800517a:	460b      	mov	r3, r1
 800517c:	4313      	orrs	r3, r2
 800517e:	d037      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518a:	d00e      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800518c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005190:	d816      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d018      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519a:	d111      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800519c:	4b8c      	ldr	r3, [pc, #560]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	4a8b      	ldr	r2, [pc, #556]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80051a8:	e00f      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ae:	3308      	adds	r3, #8
 80051b0:	2101      	movs	r1, #1
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 f94c 	bl	8006450 <RCCEx_PLL2_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80051be:	e004      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051c6:	e000      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80051c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051d2:	4b7f      	ldr	r3, [pc, #508]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	4a7b      	ldr	r2, [pc, #492]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e2:	430b      	orrs	r3, r1
 80051e4:	6513      	str	r3, [r2, #80]	; 0x50
 80051e6:	e003      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80051fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005200:	2300      	movs	r3, #0
 8005202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005206:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800520a:	460b      	mov	r3, r1
 800520c:	4313      	orrs	r3, r2
 800520e:	d039      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	2b03      	cmp	r3, #3
 8005218:	d81c      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	0800525d 	.word	0x0800525d
 8005224:	08005231 	.word	0x08005231
 8005228:	0800523f 	.word	0x0800523f
 800522c:	0800525d 	.word	0x0800525d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005230:	4b67      	ldr	r3, [pc, #412]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	4a66      	ldr	r2, [pc, #408]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800523c:	e00f      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005242:	3308      	adds	r3, #8
 8005244:	2102      	movs	r1, #2
 8005246:	4618      	mov	r0, r3
 8005248:	f001 f902 	bl	8006450 <RCCEx_PLL2_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005252:	e004      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800525c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005266:	4b5a      	ldr	r3, [pc, #360]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	f023 0103 	bic.w	r1, r3, #3
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005274:	4a56      	ldr	r2, [pc, #344]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005276:	430b      	orrs	r3, r1
 8005278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800527a:	e003      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005280:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005294:	2300      	movs	r3, #0
 8005296:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800529a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f000 809f 	beq.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a6:	4b4b      	ldr	r3, [pc, #300]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4a      	ldr	r2, [pc, #296]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052b2:	f7fc facf 	bl	8001854 <HAL_GetTick>
 80052b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ba:	e00b      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fc faca 	bl	8001854 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b64      	cmp	r3, #100	; 0x64
 80052ca:	d903      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052d2:	e005      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052d4:	4b3f      	ldr	r3, [pc, #252]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0ed      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80052e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d179      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052e8:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052f4:	4053      	eors	r3, r2
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d015      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052fe:	4b34      	ldr	r3, [pc, #208]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800530a:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a30      	ldr	r2, [pc, #192]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005316:	4b2e      	ldr	r3, [pc, #184]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a2d      	ldr	r2, [pc, #180]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800531c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005322:	4a2b      	ldr	r2, [pc, #172]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005328:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005336:	d118      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fc fa8c 	bl	8001854 <HAL_GetTick>
 800533c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005340:	e00d      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fc fa87 	bl	8001854 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800534c:	1ad2      	subs	r2, r2, r3
 800534e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005352:	429a      	cmp	r2, r3
 8005354:	d903      	bls.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800535c:	e005      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800535e:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0eb      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800536a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800536e:	2b00      	cmp	r3, #0
 8005370:	d129      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005382:	d10e      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005384:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800538c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005390:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005394:	091a      	lsrs	r2, r3, #4
 8005396:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005398:	4013      	ands	r3, r2
 800539a:	4a0d      	ldr	r2, [pc, #52]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800539c:	430b      	orrs	r3, r1
 800539e:	6113      	str	r3, [r2, #16]
 80053a0:	e005      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053ac:	6113      	str	r3, [r2, #16]
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053be:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70
 80053c4:	e00e      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80053ce:	e009      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80053d0:	58024400 	.word	0x58024400
 80053d4:	58024800 	.word	0x58024800
 80053d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	f002 0301 	and.w	r3, r2, #1
 80053f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053fe:	460b      	mov	r3, r1
 8005400:	4313      	orrs	r3, r2
 8005402:	f000 8089 	beq.w	8005518 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540c:	2b28      	cmp	r3, #40	; 0x28
 800540e:	d86b      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	080054f1 	.word	0x080054f1
 800541c:	080054e9 	.word	0x080054e9
 8005420:	080054e9 	.word	0x080054e9
 8005424:	080054e9 	.word	0x080054e9
 8005428:	080054e9 	.word	0x080054e9
 800542c:	080054e9 	.word	0x080054e9
 8005430:	080054e9 	.word	0x080054e9
 8005434:	080054e9 	.word	0x080054e9
 8005438:	080054bd 	.word	0x080054bd
 800543c:	080054e9 	.word	0x080054e9
 8005440:	080054e9 	.word	0x080054e9
 8005444:	080054e9 	.word	0x080054e9
 8005448:	080054e9 	.word	0x080054e9
 800544c:	080054e9 	.word	0x080054e9
 8005450:	080054e9 	.word	0x080054e9
 8005454:	080054e9 	.word	0x080054e9
 8005458:	080054d3 	.word	0x080054d3
 800545c:	080054e9 	.word	0x080054e9
 8005460:	080054e9 	.word	0x080054e9
 8005464:	080054e9 	.word	0x080054e9
 8005468:	080054e9 	.word	0x080054e9
 800546c:	080054e9 	.word	0x080054e9
 8005470:	080054e9 	.word	0x080054e9
 8005474:	080054e9 	.word	0x080054e9
 8005478:	080054f1 	.word	0x080054f1
 800547c:	080054e9 	.word	0x080054e9
 8005480:	080054e9 	.word	0x080054e9
 8005484:	080054e9 	.word	0x080054e9
 8005488:	080054e9 	.word	0x080054e9
 800548c:	080054e9 	.word	0x080054e9
 8005490:	080054e9 	.word	0x080054e9
 8005494:	080054e9 	.word	0x080054e9
 8005498:	080054f1 	.word	0x080054f1
 800549c:	080054e9 	.word	0x080054e9
 80054a0:	080054e9 	.word	0x080054e9
 80054a4:	080054e9 	.word	0x080054e9
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	080054e9 	.word	0x080054e9
 80054b0:	080054e9 	.word	0x080054e9
 80054b4:	080054e9 	.word	0x080054e9
 80054b8:	080054f1 	.word	0x080054f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c0:	3308      	adds	r3, #8
 80054c2:	2101      	movs	r1, #1
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 ffc3 	bl	8006450 <RCCEx_PLL2_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80054d0:	e00f      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d6:	3328      	adds	r3, #40	; 0x28
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 f86a 	bl	80065b4 <RCCEx_PLL3_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80054e6:	e004      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054ee:	e000      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80054f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054fa:	4bbf      	ldr	r3, [pc, #764]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005508:	4abb      	ldr	r2, [pc, #748]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800550a:	430b      	orrs	r3, r1
 800550c:	6553      	str	r3, [r2, #84]	; 0x54
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005514:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f002 0302 	and.w	r3, r2, #2
 8005524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005528:	2300      	movs	r3, #0
 800552a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800552e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005532:	460b      	mov	r3, r1
 8005534:	4313      	orrs	r3, r2
 8005536:	d041      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800553e:	2b05      	cmp	r3, #5
 8005540:	d824      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005595 	.word	0x08005595
 800554c:	08005561 	.word	0x08005561
 8005550:	08005577 	.word	0x08005577
 8005554:	08005595 	.word	0x08005595
 8005558:	08005595 	.word	0x08005595
 800555c:	08005595 	.word	0x08005595
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005564:	3308      	adds	r3, #8
 8005566:	2101      	movs	r1, #1
 8005568:	4618      	mov	r0, r3
 800556a:	f000 ff71 	bl	8006450 <RCCEx_PLL2_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005574:	e00f      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557a:	3328      	adds	r3, #40	; 0x28
 800557c:	2101      	movs	r1, #1
 800557e:	4618      	mov	r0, r3
 8005580:	f001 f818 	bl	80065b4 <RCCEx_PLL3_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800558a:	e004      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005592:	e000      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800559e:	4b96      	ldr	r3, [pc, #600]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f023 0107 	bic.w	r1, r3, #7
 80055a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ac:	4a92      	ldr	r2, [pc, #584]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055ae:	430b      	orrs	r3, r1
 80055b0:	6553      	str	r3, [r2, #84]	; 0x54
 80055b2:	e003      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f002 0304 	and.w	r3, r2, #4
 80055c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d044      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d825      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	0800563d 	.word	0x0800563d
 80055f4:	08005609 	.word	0x08005609
 80055f8:	0800561f 	.word	0x0800561f
 80055fc:	0800563d 	.word	0x0800563d
 8005600:	0800563d 	.word	0x0800563d
 8005604:	0800563d 	.word	0x0800563d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560c:	3308      	adds	r3, #8
 800560e:	2101      	movs	r1, #1
 8005610:	4618      	mov	r0, r3
 8005612:	f000 ff1d 	bl	8006450 <RCCEx_PLL2_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800561c:	e00f      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005622:	3328      	adds	r3, #40	; 0x28
 8005624:	2101      	movs	r1, #1
 8005626:	4618      	mov	r0, r3
 8005628:	f000 ffc4 	bl	80065b4 <RCCEx_PLL3_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005632:	e004      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800563a:	e000      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800563c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005646:	4b6c      	ldr	r3, [pc, #432]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	f023 0107 	bic.w	r1, r3, #7
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005656:	4a68      	ldr	r2, [pc, #416]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005658:	430b      	orrs	r3, r1
 800565a:	6593      	str	r3, [r2, #88]	; 0x58
 800565c:	e003      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f002 0320 	and.w	r3, r2, #32
 8005672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800567c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d055      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005692:	d033      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005698:	d82c      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569e:	d02f      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a4:	d826      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056aa:	d02b      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80056ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056b0:	d820      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b6:	d012      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80056b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056bc:	d81a      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d022      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80056c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c6:	d115      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056cc:	3308      	adds	r3, #8
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 febd 	bl	8006450 <RCCEx_PLL2_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056dc:	e015      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e2:	3328      	adds	r3, #40	; 0x28
 80056e4:	2102      	movs	r1, #2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 ff64 	bl	80065b4 <RCCEx_PLL3_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056f2:	e00a      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056fa:	e006      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056fc:	bf00      	nop
 80056fe:	e004      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005700:	bf00      	nop
 8005702:	e002      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005704:	bf00      	nop
 8005706:	e000      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005712:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	4a35      	ldr	r2, [pc, #212]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005724:	430b      	orrs	r3, r1
 8005726:	6553      	str	r3, [r2, #84]	; 0x54
 8005728:	e003      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800572e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800573e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005742:	2300      	movs	r3, #0
 8005744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005748:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800574c:	460b      	mov	r3, r1
 800574e:	4313      	orrs	r3, r2
 8005750:	d058      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800575a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800575e:	d033      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005760:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005764:	d82c      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576a:	d02f      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800576c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005770:	d826      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005772:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005776:	d02b      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800577c:	d820      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800577e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005782:	d012      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005788:	d81a      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d022      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005792:	d115      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005798:	3308      	adds	r3, #8
 800579a:	2100      	movs	r1, #0
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fe57 	bl	8006450 <RCCEx_PLL2_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80057a8:	e015      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ae:	3328      	adds	r3, #40	; 0x28
 80057b0:	2102      	movs	r1, #2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fefe 	bl	80065b4 <RCCEx_PLL3_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80057be:	e00a      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057c6:	e006      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80057c8:	bf00      	nop
 80057ca:	e004      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80057cc:	bf00      	nop
 80057ce:	e002      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80057d0:	bf00      	nop
 80057d2:	e000      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80057d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10e      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ee:	4a02      	ldr	r2, [pc, #8]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057f0:	430b      	orrs	r3, r1
 80057f2:	6593      	str	r3, [r2, #88]	; 0x58
 80057f4:	e006      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005800:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800581a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800581e:	460b      	mov	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	d055      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005828:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800582c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005830:	d033      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005832:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005836:	d82c      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583c:	d02f      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800583e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005842:	d826      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005844:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005848:	d02b      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800584a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800584e:	d820      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005854:	d012      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585a:	d81a      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d022      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005864:	d115      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	3308      	adds	r3, #8
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fdee 	bl	8006450 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800587a:	e015      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	3328      	adds	r3, #40	; 0x28
 8005882:	2102      	movs	r1, #2
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fe95 	bl	80065b4 <RCCEx_PLL3_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005890:	e00a      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005898:	e006      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800589a:	bf00      	nop
 800589c:	e004      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800589e:	bf00      	nop
 80058a0:	e002      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058a2:	bf00      	nop
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058b0:	4ba1      	ldr	r3, [pc, #644]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058c0:	4a9d      	ldr	r2, [pc, #628]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058c2:	430b      	orrs	r3, r1
 80058c4:	6593      	str	r3, [r2, #88]	; 0x58
 80058c6:	e003      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f002 0308 	and.w	r3, r2, #8
 80058dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80058ea:	460b      	mov	r3, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	d01e      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fc:	d10c      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	3328      	adds	r3, #40	; 0x28
 8005904:	2102      	movs	r1, #2
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fe54 	bl	80065b4 <RCCEx_PLL3_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005918:	4b87      	ldr	r3, [pc, #540]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800591a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005928:	4a83      	ldr	r2, [pc, #524]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800592a:	430b      	orrs	r3, r1
 800592c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	f002 0310 	and.w	r3, r2, #16
 800593a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800593e:	2300      	movs	r3, #0
 8005940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005944:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005948:	460b      	mov	r3, r1
 800594a:	4313      	orrs	r3, r2
 800594c:	d01e      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595a:	d10c      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005960:	3328      	adds	r3, #40	; 0x28
 8005962:	2102      	movs	r1, #2
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fe25 	bl	80065b4 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005976:	4b70      	ldr	r3, [pc, #448]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005986:	4a6c      	ldr	r2, [pc, #432]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005988:	430b      	orrs	r3, r1
 800598a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80059a6:	460b      	mov	r3, r1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d03e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059b8:	d022      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80059ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059be:	d81b      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80059c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c8:	d00b      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80059ca:	e015      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d0:	3308      	adds	r3, #8
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fd3b 	bl	8006450 <RCCEx_PLL2_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059e0:	e00f      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e6:	3328      	adds	r3, #40	; 0x28
 80059e8:	2102      	movs	r1, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fde2 	bl	80065b4 <RCCEx_PLL3_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059f6:	e004      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059fe:	e000      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a0a:	4b4b      	ldr	r3, [pc, #300]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a1a:	4a47      	ldr	r2, [pc, #284]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a20:	e003      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005a36:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a38:	2300      	movs	r3, #0
 8005a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005a40:	460b      	mov	r3, r1
 8005a42:	4313      	orrs	r3, r2
 8005a44:	d03b      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a52:	d01f      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005a54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a58:	d818      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5e:	d003      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a64:	d007      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005a66:	e011      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a68:	4b33      	ldr	r3, [pc, #204]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	4a32      	ldr	r2, [pc, #200]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a74:	e00f      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7a:	3328      	adds	r3, #40	; 0x28
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fd98 	bl	80065b4 <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a8a:	e004      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a92:	e000      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a9e:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	6553      	str	r3, [r2, #84]	; 0x54
 8005ab4:	e003      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005aca:	673b      	str	r3, [r7, #112]	; 0x70
 8005acc:	2300      	movs	r3, #0
 8005ace:	677b      	str	r3, [r7, #116]	; 0x74
 8005ad0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	d034      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae8:	d007      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005aea:	e011      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005af8:	e00e      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	3308      	adds	r3, #8
 8005b00:	2102      	movs	r1, #2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fca4 	bl	8006450 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b0e:	e003      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10d      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2e:	4a02      	ldr	r2, [pc, #8]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b34:	e006      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005b36:	bf00      	nop
 8005b38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b52:	2300      	movs	r3, #0
 8005b54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b56:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	d00c      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b64:	3328      	adds	r3, #40	; 0x28
 8005b66:	2102      	movs	r1, #2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fd23 	bl	80065b4 <RCCEx_PLL3_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005b86:	663b      	str	r3, [r7, #96]	; 0x60
 8005b88:	2300      	movs	r3, #0
 8005b8a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005b90:	460b      	mov	r3, r1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	d038      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba2:	d018      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba8:	d811      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bae:	d014      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb4:	d80b      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d011      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbe:	d106      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc0:	4bc3      	ldr	r3, [pc, #780]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4ac2      	ldr	r2, [pc, #776]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005bcc:	e008      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bd4:	e004      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e002      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e000      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005be8:	4bb9      	ldr	r3, [pc, #740]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bf8:	4ab5      	ldr	r2, [pc, #724]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6553      	str	r3, [r2, #84]	; 0x54
 8005bfe:	e003      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005c14:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c16:	2300      	movs	r3, #0
 8005c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4313      	orrs	r3, r2
 8005c22:	d009      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c24:	4baa      	ldr	r3, [pc, #680]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c32:	4aa7      	ldr	r2, [pc, #668]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005c44:	653b      	str	r3, [r7, #80]	; 0x50
 8005c46:	2300      	movs	r3, #0
 8005c48:	657b      	str	r3, [r7, #84]	; 0x54
 8005c4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4313      	orrs	r3, r2
 8005c52:	d00a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005c54:	4b9e      	ldr	r3, [pc, #632]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c64:	4a9a      	ldr	r2, [pc, #616]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c78:	2300      	movs	r3, #0
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005c80:	460b      	mov	r3, r1
 8005c82:	4313      	orrs	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c86:	4b92      	ldr	r3, [pc, #584]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c94:	4a8e      	ldr	r2, [pc, #568]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c96:	430b      	orrs	r3, r1
 8005c98:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca8:	2300      	movs	r3, #0
 8005caa:	647b      	str	r3, [r7, #68]	; 0x44
 8005cac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	d00e      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cb6:	4b86      	ldr	r3, [pc, #536]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	4a85      	ldr	r2, [pc, #532]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cc0:	6113      	str	r3, [r2, #16]
 8005cc2:	4b83      	ldr	r3, [pc, #524]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cc4:	6919      	ldr	r1, [r3, #16]
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cce:	4a80      	ldr	r2, [pc, #512]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005cea:	460b      	mov	r3, r1
 8005cec:	4313      	orrs	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005cf0:	4b77      	ldr	r3, [pc, #476]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	4a74      	ldr	r2, [pc, #464]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d00:	430b      	orrs	r3, r1
 8005d02:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005d10:	633b      	str	r3, [r7, #48]	; 0x30
 8005d12:	2300      	movs	r3, #0
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
 8005d16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	d00a      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d20:	4b6b      	ldr	r3, [pc, #428]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d24:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d30:	4a67      	ldr	r2, [pc, #412]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d32:	430b      	orrs	r3, r1
 8005d34:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	2100      	movs	r1, #0
 8005d40:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	d011      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d56:	3308      	adds	r3, #8
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fb78 	bl	8006450 <RCCEx_PLL2_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	2100      	movs	r1, #0
 8005d80:	6239      	str	r1, [r7, #32]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
 8005d88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	d011      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d96:	3308      	adds	r3, #8
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fb58 	bl	8006450 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	61b9      	str	r1, [r7, #24]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d011      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	2102      	movs	r1, #2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fb38 	bl	8006450 <RCCEx_PLL2_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6139      	str	r1, [r7, #16]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	d011      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e16:	3328      	adds	r3, #40	; 0x28
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fbca 	bl	80065b4 <RCCEx_PLL3_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	2100      	movs	r1, #0
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	d011      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e56:	3328      	adds	r3, #40	; 0x28
 8005e58:	2101      	movs	r1, #1
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fbaa 	bl	80065b4 <RCCEx_PLL3_Config>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	2100      	movs	r1, #0
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	d011      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e96:	3328      	adds	r3, #40	; 0x28
 8005e98:	2102      	movs	r1, #2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fb8a 	bl	80065b4 <RCCEx_PLL3_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005eb6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed0:	58024400 	.word	0x58024400

08005ed4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ed8:	f7fe fd54 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 8005edc:	4602      	mov	r2, r0
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	4904      	ldr	r1, [pc, #16]	; (8005efc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005eea:	5ccb      	ldrb	r3, [r1, r3]
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	58024400 	.word	0x58024400
 8005efc:	0801b6bc 	.word	0x0801b6bc

08005f00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b089      	sub	sp, #36	; 0x24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f08:	4ba1      	ldr	r3, [pc, #644]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005f12:	4b9f      	ldr	r3, [pc, #636]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	0b1b      	lsrs	r3, r3, #12
 8005f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f1e:	4b9c      	ldr	r3, [pc, #624]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	091b      	lsrs	r3, r3, #4
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005f2a:	4b99      	ldr	r3, [pc, #612]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	08db      	lsrs	r3, r3, #3
 8005f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8111 	beq.w	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f000 8083 	beq.w	800605c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	f200 80a1 	bhi.w	80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d056      	beq.n	8006018 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005f6a:	e099      	b.n	80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6c:	4b88      	ldr	r3, [pc, #544]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02d      	beq.n	8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f78:	4b85      	ldr	r3, [pc, #532]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a84      	ldr	r2, [pc, #528]	; (8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa2:	4b7b      	ldr	r3, [pc, #492]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fd2:	e087      	b.n	80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800619c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe6:	4b6a      	ldr	r3, [pc, #424]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006016:	e065      	b.n	80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602a:	4b59      	ldr	r3, [pc, #356]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603a:	ed97 6a03 	vldr	s12, [r7, #12]
 800603e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800605a:	e043      	b.n	80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606e:	4b48      	ldr	r3, [pc, #288]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006082:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609e:	e021      	b.n	80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b2:	4b37      	ldr	r3, [pc, #220]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80060e4:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	0a5b      	lsrs	r3, r3, #9
 80060ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800610a:	ee17 2a90 	vmov	r2, s15
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006112:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	0c1b      	lsrs	r3, r3, #16
 8006118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800612c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006138:	ee17 2a90 	vmov	r2, s15
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	0e1b      	lsrs	r3, r3, #24
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800615a:	edd7 6a07 	vldr	s13, [r7, #28]
 800615e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006166:	ee17 2a90 	vmov	r2, s15
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800616e:	e008      	b.n	8006182 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
}
 8006182:	bf00      	nop
 8006184:	3724      	adds	r7, #36	; 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
 8006194:	03d09000 	.word	0x03d09000
 8006198:	46000000 	.word	0x46000000
 800619c:	4c742400 	.word	0x4c742400
 80061a0:	4a742400 	.word	0x4a742400
 80061a4:	4af42400 	.word	0x4af42400

080061a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b089      	sub	sp, #36	; 0x24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061b0:	4ba1      	ldr	r3, [pc, #644]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80061ba:	4b9f      	ldr	r3, [pc, #636]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	0d1b      	lsrs	r3, r3, #20
 80061c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80061c6:	4b9c      	ldr	r3, [pc, #624]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80061d2:	4b99      	ldr	r3, [pc, #612]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	08db      	lsrs	r3, r3, #3
 80061d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8111 	beq.w	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	f000 8083 	beq.w	8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b02      	cmp	r3, #2
 8006202:	f200 80a1 	bhi.w	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d056      	beq.n	80062c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006212:	e099      	b.n	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006214:	4b88      	ldr	r3, [pc, #544]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02d      	beq.n	800627c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006220:	4b85      	ldr	r3, [pc, #532]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	08db      	lsrs	r3, r3, #3
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	4a84      	ldr	r2, [pc, #528]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
 8006230:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624a:	4b7b      	ldr	r3, [pc, #492]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	ed97 6a03 	vldr	s12, [r7, #12]
 800625e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006276:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800627a:	e087      	b.n	800638c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006286:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800628a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628e:	4b6a      	ldr	r3, [pc, #424]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629e:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062be:	e065      	b.n	800638c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d2:	4b59      	ldr	r3, [pc, #356]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006302:	e043      	b.n	800638c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800644c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006316:	4b48      	ldr	r3, [pc, #288]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006326:	ed97 6a03 	vldr	s12, [r7, #12]
 800632a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800632e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006346:	e021      	b.n	800638c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635a:	4b37      	ldr	r3, [pc, #220]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636a:	ed97 6a03 	vldr	s12, [r7, #12]
 800636e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800638a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800638c:	4b2a      	ldr	r3, [pc, #168]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	0a5b      	lsrs	r3, r3, #9
 8006392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b2:	ee17 2a90 	vmov	r2, s15
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	0c1b      	lsrs	r3, r3, #16
 80063c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e0:	ee17 2a90 	vmov	r2, s15
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80063e8:	4b13      	ldr	r3, [pc, #76]	; (8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	0e1b      	lsrs	r3, r3, #24
 80063ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006402:	edd7 6a07 	vldr	s13, [r7, #28]
 8006406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640e:	ee17 2a90 	vmov	r2, s15
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006416:	e008      	b.n	800642a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
}
 800642a:	bf00      	nop
 800642c:	3724      	adds	r7, #36	; 0x24
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	58024400 	.word	0x58024400
 800643c:	03d09000 	.word	0x03d09000
 8006440:	46000000 	.word	0x46000000
 8006444:	4c742400 	.word	0x4c742400
 8006448:	4a742400 	.word	0x4a742400
 800644c:	4af42400 	.word	0x4af42400

08006450 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800645e:	4b53      	ldr	r3, [pc, #332]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d101      	bne.n	800646e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e099      	b.n	80065a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800646e:	4b4f      	ldr	r3, [pc, #316]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a4e      	ldr	r2, [pc, #312]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006474:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647a:	f7fb f9eb 	bl	8001854 <HAL_GetTick>
 800647e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006480:	e008      	b.n	8006494 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006482:	f7fb f9e7 	bl	8001854 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e086      	b.n	80065a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006494:	4b45      	ldr	r3, [pc, #276]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1f0      	bne.n	8006482 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064a0:	4b42      	ldr	r3, [pc, #264]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	493f      	ldr	r1, [pc, #252]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	628b      	str	r3, [r1, #40]	; 0x28
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	025b      	lsls	r3, r3, #9
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	3b01      	subs	r3, #1
 80064de:	061b      	lsls	r3, r3, #24
 80064e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064e4:	4931      	ldr	r1, [pc, #196]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80064ea:	4b30      	ldr	r3, [pc, #192]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	492d      	ldr	r1, [pc, #180]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80064fc:	4b2b      	ldr	r3, [pc, #172]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	f023 0220 	bic.w	r2, r3, #32
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	4928      	ldr	r1, [pc, #160]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800650e:	4b27      	ldr	r3, [pc, #156]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	4a26      	ldr	r2, [pc, #152]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006514:	f023 0310 	bic.w	r3, r3, #16
 8006518:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800651a:	4b24      	ldr	r3, [pc, #144]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 800651c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800651e:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <RCCEx_PLL2_Config+0x160>)
 8006520:	4013      	ands	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	69d2      	ldr	r2, [r2, #28]
 8006526:	00d2      	lsls	r2, r2, #3
 8006528:	4920      	ldr	r1, [pc, #128]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800652e:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006534:	f043 0310 	orr.w	r3, r3, #16
 8006538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d106      	bne.n	800654e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006540:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800654a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800654c:	e00f      	b.n	800656e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d106      	bne.n	8006562 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006554:	4b15      	ldr	r3, [pc, #84]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 800655a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800655e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006560:	e005      	b.n	800656e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	4a11      	ldr	r2, [pc, #68]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800656c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a0e      	ldr	r2, [pc, #56]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657a:	f7fb f96b 	bl	8001854 <HAL_GetTick>
 800657e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006580:	e008      	b.n	8006594 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006582:	f7fb f967 	bl	8001854 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e006      	b.n	80065a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <RCCEx_PLL2_Config+0x15c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f0      	beq.n	8006582 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	58024400 	.word	0x58024400
 80065b0:	ffff0007 	.word	0xffff0007

080065b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065c2:	4b53      	ldr	r3, [pc, #332]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d101      	bne.n	80065d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e099      	b.n	8006706 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80065d2:	4b4f      	ldr	r3, [pc, #316]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a4e      	ldr	r2, [pc, #312]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80065d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065de:	f7fb f939 	bl	8001854 <HAL_GetTick>
 80065e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065e4:	e008      	b.n	80065f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065e6:	f7fb f935 	bl	8001854 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e086      	b.n	8006706 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065f8:	4b45      	ldr	r3, [pc, #276]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f0      	bne.n	80065e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006604:	4b42      	ldr	r3, [pc, #264]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	051b      	lsls	r3, r3, #20
 8006612:	493f      	ldr	r1, [pc, #252]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006614:	4313      	orrs	r3, r2
 8006616:	628b      	str	r3, [r1, #40]	; 0x28
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	3b01      	subs	r3, #1
 800661e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	3b01      	subs	r3, #1
 8006628:	025b      	lsls	r3, r3, #9
 800662a:	b29b      	uxth	r3, r3
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	3b01      	subs	r3, #1
 8006634:	041b      	lsls	r3, r3, #16
 8006636:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	3b01      	subs	r3, #1
 8006642:	061b      	lsls	r3, r3, #24
 8006644:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006648:	4931      	ldr	r1, [pc, #196]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 800664a:	4313      	orrs	r3, r2
 800664c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800664e:	4b30      	ldr	r3, [pc, #192]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	492d      	ldr	r1, [pc, #180]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 800665c:	4313      	orrs	r3, r2
 800665e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006660:	4b2b      	ldr	r3, [pc, #172]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	4928      	ldr	r1, [pc, #160]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 800666e:	4313      	orrs	r3, r2
 8006670:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006672:	4b27      	ldr	r3, [pc, #156]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	4a26      	ldr	r2, [pc, #152]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800667c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800667e:	4b24      	ldr	r3, [pc, #144]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006682:	4b24      	ldr	r3, [pc, #144]	; (8006714 <RCCEx_PLL3_Config+0x160>)
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	69d2      	ldr	r2, [r2, #28]
 800668a:	00d2      	lsls	r2, r2, #3
 800668c:	4920      	ldr	r1, [pc, #128]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 800668e:	4313      	orrs	r3, r2
 8006690:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006692:	4b1f      	ldr	r3, [pc, #124]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 8006698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800669c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066a4:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	4a19      	ldr	r2, [pc, #100]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066b0:	e00f      	b.n	80066d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d106      	bne.n	80066c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	4a14      	ldr	r2, [pc, #80]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066c4:	e005      	b.n	80066d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80066c6:	4b12      	ldr	r3, [pc, #72]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	4a11      	ldr	r2, [pc, #68]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80066d2:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a0e      	ldr	r2, [pc, #56]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066de:	f7fb f8b9 	bl	8001854 <HAL_GetTick>
 80066e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066e4:	e008      	b.n	80066f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066e6:	f7fb f8b5 	bl	8001854 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e006      	b.n	8006706 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <RCCEx_PLL3_Config+0x15c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0f0      	beq.n	80066e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
 8006714:	ffff0007 	.word	0xffff0007

08006718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e049      	b.n	80067be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f841 	bl	80067c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f000 fa00 	bl	8006b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
	...

080067dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d001      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e054      	b.n	800689e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a26      	ldr	r2, [pc, #152]	; (80068ac <HAL_TIM_Base_Start_IT+0xd0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d022      	beq.n	800685c <HAL_TIM_Base_Start_IT+0x80>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681e:	d01d      	beq.n	800685c <HAL_TIM_Base_Start_IT+0x80>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a22      	ldr	r2, [pc, #136]	; (80068b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d018      	beq.n	800685c <HAL_TIM_Base_Start_IT+0x80>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d013      	beq.n	800685c <HAL_TIM_Base_Start_IT+0x80>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00e      	beq.n	800685c <HAL_TIM_Base_Start_IT+0x80>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_TIM_Base_Start_IT+0xe0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d009      	beq.n	800685c <HAL_TIM_Base_Start_IT+0x80>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d004      	beq.n	800685c <HAL_TIM_Base_Start_IT+0x80>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d115      	bne.n	8006888 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_TIM_Base_Start_IT+0xec>)
 8006864:	4013      	ands	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b06      	cmp	r3, #6
 800686c:	d015      	beq.n	800689a <HAL_TIM_Base_Start_IT+0xbe>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006874:	d011      	beq.n	800689a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0201 	orr.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006886:	e008      	b.n	800689a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	e000      	b.n	800689c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40010400 	.word	0x40010400
 80068c0:	40001800 	.word	0x40001800
 80068c4:	40014000 	.word	0x40014000
 80068c8:	00010007 	.word	0x00010007

080068cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0202 	mvn.w	r2, #2
 80068f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f905 	bl	8006b1e <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8f7 	bl	8006b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f908 	bl	8006b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b04      	cmp	r3, #4
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b04      	cmp	r3, #4
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0204 	mvn.w	r2, #4
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f8db 	bl	8006b1e <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8cd 	bl	8006b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f8de 	bl	8006b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b08      	cmp	r3, #8
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0208 	mvn.w	r2, #8
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2204      	movs	r2, #4
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f8b1 	bl	8006b1e <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8a3 	bl	8006b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8b4 	bl	8006b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	2b10      	cmp	r3, #16
 80069dc:	d122      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2b10      	cmp	r3, #16
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0210 	mvn.w	r2, #16
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2208      	movs	r2, #8
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f887 	bl	8006b1e <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f879 	bl	8006b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f88a 	bl	8006b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10e      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0201 	mvn.w	r2, #1
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fa f9d2 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5a:	2b80      	cmp	r3, #128	; 0x80
 8006a5c:	d10e      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b80      	cmp	r3, #128	; 0x80
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f914 	bl	8006ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8a:	d10e      	bne.n	8006aaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d107      	bne.n	8006aaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f907 	bl	8006cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d10e      	bne.n	8006ad6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d107      	bne.n	8006ad6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f838 	bl	8006b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d10e      	bne.n	8006b02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d107      	bne.n	8006b02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f06f 0220 	mvn.w	r2, #32
 8006afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f8c7 	bl	8006c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a40      	ldr	r2, [pc, #256]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7a:	d00f      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a3d      	ldr	r2, [pc, #244]	; (8006c74 <TIM_Base_SetConfig+0x118>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3c      	ldr	r2, [pc, #240]	; (8006c78 <TIM_Base_SetConfig+0x11c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3b      	ldr	r2, [pc, #236]	; (8006c7c <TIM_Base_SetConfig+0x120>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3a      	ldr	r2, [pc, #232]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d108      	bne.n	8006bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a2f      	ldr	r2, [pc, #188]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d01b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2c      	ldr	r2, [pc, #176]	; (8006c74 <TIM_Base_SetConfig+0x118>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d017      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2b      	ldr	r2, [pc, #172]	; (8006c78 <TIM_Base_SetConfig+0x11c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d013      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <TIM_Base_SetConfig+0x120>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a29      	ldr	r2, [pc, #164]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a28      	ldr	r2, [pc, #160]	; (8006c84 <TIM_Base_SetConfig+0x128>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a27      	ldr	r2, [pc, #156]	; (8006c88 <TIM_Base_SetConfig+0x12c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_Base_SetConfig+0x9a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <TIM_Base_SetConfig+0x130>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <TIM_Base_SetConfig+0x114>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00f      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <TIM_Base_SetConfig+0x124>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a11      	ldr	r2, [pc, #68]	; (8006c84 <TIM_Base_SetConfig+0x128>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <TIM_Base_SetConfig+0x12c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_Base_SetConfig+0xf8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0f      	ldr	r2, [pc, #60]	; (8006c8c <TIM_Base_SetConfig+0x130>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d103      	bne.n	8006c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	615a      	str	r2, [r3, #20]
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e042      	b.n	8006d64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fa f987 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2224      	movs	r2, #36	; 0x24
 8006cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0201 	bic.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f8ba 	bl	8006e88 <UART_SetConfig>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e022      	b.n	8006d64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fe16 	bl	8007958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fe9d 	bl	8007a9c <UART_CheckIdleState>
 8006d62:	4603      	mov	r3, r0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d17b      	bne.n	8006e7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_UART_Transmit+0x26>
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e074      	b.n	8006e80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2221      	movs	r2, #33	; 0x21
 8006da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006da6:	f7fa fd55 	bl	8001854 <HAL_GetTick>
 8006daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	88fa      	ldrh	r2, [r7, #6]
 8006db8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc4:	d108      	bne.n	8006dd8 <HAL_UART_Transmit+0x6c>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	e003      	b.n	8006de0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006de0:	e030      	b.n	8006e44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2200      	movs	r2, #0
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 feff 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e03d      	b.n	8006e80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	e007      	b.n	8006e32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1c8      	bne.n	8006de2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	2140      	movs	r1, #64	; 0x40
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fec8 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e006      	b.n	8006e80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e000      	b.n	8006e80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
  }
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e8c:	b092      	sub	sp, #72	; 0x48
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4bbe      	ldr	r3, [pc, #760]	; (80071b0 <UART_SetConfig+0x328>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4ab3      	ldr	r2, [pc, #716]	; (80071b4 <UART_SetConfig+0x32c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	4baf      	ldr	r3, [pc, #700]	; (80071b8 <UART_SetConfig+0x330>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	f023 010f 	bic.w	r1, r3, #15
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4aa6      	ldr	r2, [pc, #664]	; (80071bc <UART_SetConfig+0x334>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d177      	bne.n	8007018 <UART_SetConfig+0x190>
 8006f28:	4ba5      	ldr	r3, [pc, #660]	; (80071c0 <UART_SetConfig+0x338>)
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f30:	2b28      	cmp	r3, #40	; 0x28
 8006f32:	d86d      	bhi.n	8007010 <UART_SetConfig+0x188>
 8006f34:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <UART_SetConfig+0xb4>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006fe1 	.word	0x08006fe1
 8006f40:	08007011 	.word	0x08007011
 8006f44:	08007011 	.word	0x08007011
 8006f48:	08007011 	.word	0x08007011
 8006f4c:	08007011 	.word	0x08007011
 8006f50:	08007011 	.word	0x08007011
 8006f54:	08007011 	.word	0x08007011
 8006f58:	08007011 	.word	0x08007011
 8006f5c:	08006fe9 	.word	0x08006fe9
 8006f60:	08007011 	.word	0x08007011
 8006f64:	08007011 	.word	0x08007011
 8006f68:	08007011 	.word	0x08007011
 8006f6c:	08007011 	.word	0x08007011
 8006f70:	08007011 	.word	0x08007011
 8006f74:	08007011 	.word	0x08007011
 8006f78:	08007011 	.word	0x08007011
 8006f7c:	08006ff1 	.word	0x08006ff1
 8006f80:	08007011 	.word	0x08007011
 8006f84:	08007011 	.word	0x08007011
 8006f88:	08007011 	.word	0x08007011
 8006f8c:	08007011 	.word	0x08007011
 8006f90:	08007011 	.word	0x08007011
 8006f94:	08007011 	.word	0x08007011
 8006f98:	08007011 	.word	0x08007011
 8006f9c:	08006ff9 	.word	0x08006ff9
 8006fa0:	08007011 	.word	0x08007011
 8006fa4:	08007011 	.word	0x08007011
 8006fa8:	08007011 	.word	0x08007011
 8006fac:	08007011 	.word	0x08007011
 8006fb0:	08007011 	.word	0x08007011
 8006fb4:	08007011 	.word	0x08007011
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	08007001 	.word	0x08007001
 8006fc0:	08007011 	.word	0x08007011
 8006fc4:	08007011 	.word	0x08007011
 8006fc8:	08007011 	.word	0x08007011
 8006fcc:	08007011 	.word	0x08007011
 8006fd0:	08007011 	.word	0x08007011
 8006fd4:	08007011 	.word	0x08007011
 8006fd8:	08007011 	.word	0x08007011
 8006fdc:	08007009 	.word	0x08007009
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e222      	b.n	800742e <UART_SetConfig+0x5a6>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e21e      	b.n	800742e <UART_SetConfig+0x5a6>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e21a      	b.n	800742e <UART_SetConfig+0x5a6>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffe:	e216      	b.n	800742e <UART_SetConfig+0x5a6>
 8007000:	2320      	movs	r3, #32
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007006:	e212      	b.n	800742e <UART_SetConfig+0x5a6>
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700e:	e20e      	b.n	800742e <UART_SetConfig+0x5a6>
 8007010:	2380      	movs	r3, #128	; 0x80
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007016:	e20a      	b.n	800742e <UART_SetConfig+0x5a6>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a69      	ldr	r2, [pc, #420]	; (80071c4 <UART_SetConfig+0x33c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d130      	bne.n	8007084 <UART_SetConfig+0x1fc>
 8007022:	4b67      	ldr	r3, [pc, #412]	; (80071c0 <UART_SetConfig+0x338>)
 8007024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	2b05      	cmp	r3, #5
 800702c:	d826      	bhi.n	800707c <UART_SetConfig+0x1f4>
 800702e:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <UART_SetConfig+0x1ac>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	0800704d 	.word	0x0800704d
 8007038:	08007055 	.word	0x08007055
 800703c:	0800705d 	.word	0x0800705d
 8007040:	08007065 	.word	0x08007065
 8007044:	0800706d 	.word	0x0800706d
 8007048:	08007075 	.word	0x08007075
 800704c:	2300      	movs	r3, #0
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e1ec      	b.n	800742e <UART_SetConfig+0x5a6>
 8007054:	2304      	movs	r3, #4
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e1e8      	b.n	800742e <UART_SetConfig+0x5a6>
 800705c:	2308      	movs	r3, #8
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e1e4      	b.n	800742e <UART_SetConfig+0x5a6>
 8007064:	2310      	movs	r3, #16
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e1e0      	b.n	800742e <UART_SetConfig+0x5a6>
 800706c:	2320      	movs	r3, #32
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007072:	e1dc      	b.n	800742e <UART_SetConfig+0x5a6>
 8007074:	2340      	movs	r3, #64	; 0x40
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707a:	e1d8      	b.n	800742e <UART_SetConfig+0x5a6>
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007082:	e1d4      	b.n	800742e <UART_SetConfig+0x5a6>
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a4f      	ldr	r2, [pc, #316]	; (80071c8 <UART_SetConfig+0x340>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d130      	bne.n	80070f0 <UART_SetConfig+0x268>
 800708e:	4b4c      	ldr	r3, [pc, #304]	; (80071c0 <UART_SetConfig+0x338>)
 8007090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	2b05      	cmp	r3, #5
 8007098:	d826      	bhi.n	80070e8 <UART_SetConfig+0x260>
 800709a:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <UART_SetConfig+0x218>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070b9 	.word	0x080070b9
 80070a4:	080070c1 	.word	0x080070c1
 80070a8:	080070c9 	.word	0x080070c9
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070e1 	.word	0x080070e1
 80070b8:	2300      	movs	r3, #0
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e1b6      	b.n	800742e <UART_SetConfig+0x5a6>
 80070c0:	2304      	movs	r3, #4
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c6:	e1b2      	b.n	800742e <UART_SetConfig+0x5a6>
 80070c8:	2308      	movs	r3, #8
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e1ae      	b.n	800742e <UART_SetConfig+0x5a6>
 80070d0:	2310      	movs	r3, #16
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e1aa      	b.n	800742e <UART_SetConfig+0x5a6>
 80070d8:	2320      	movs	r3, #32
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e1a6      	b.n	800742e <UART_SetConfig+0x5a6>
 80070e0:	2340      	movs	r3, #64	; 0x40
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e1a2      	b.n	800742e <UART_SetConfig+0x5a6>
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ee:	e19e      	b.n	800742e <UART_SetConfig+0x5a6>
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a35      	ldr	r2, [pc, #212]	; (80071cc <UART_SetConfig+0x344>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d130      	bne.n	800715c <UART_SetConfig+0x2d4>
 80070fa:	4b31      	ldr	r3, [pc, #196]	; (80071c0 <UART_SetConfig+0x338>)
 80070fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	2b05      	cmp	r3, #5
 8007104:	d826      	bhi.n	8007154 <UART_SetConfig+0x2cc>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <UART_SetConfig+0x284>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	08007125 	.word	0x08007125
 8007110:	0800712d 	.word	0x0800712d
 8007114:	08007135 	.word	0x08007135
 8007118:	0800713d 	.word	0x0800713d
 800711c:	08007145 	.word	0x08007145
 8007120:	0800714d 	.word	0x0800714d
 8007124:	2300      	movs	r3, #0
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712a:	e180      	b.n	800742e <UART_SetConfig+0x5a6>
 800712c:	2304      	movs	r3, #4
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007132:	e17c      	b.n	800742e <UART_SetConfig+0x5a6>
 8007134:	2308      	movs	r3, #8
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e178      	b.n	800742e <UART_SetConfig+0x5a6>
 800713c:	2310      	movs	r3, #16
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e174      	b.n	800742e <UART_SetConfig+0x5a6>
 8007144:	2320      	movs	r3, #32
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e170      	b.n	800742e <UART_SetConfig+0x5a6>
 800714c:	2340      	movs	r3, #64	; 0x40
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e16c      	b.n	800742e <UART_SetConfig+0x5a6>
 8007154:	2380      	movs	r3, #128	; 0x80
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e168      	b.n	800742e <UART_SetConfig+0x5a6>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <UART_SetConfig+0x348>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d142      	bne.n	80071ec <UART_SetConfig+0x364>
 8007166:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <UART_SetConfig+0x338>)
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	2b05      	cmp	r3, #5
 8007170:	d838      	bhi.n	80071e4 <UART_SetConfig+0x35c>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <UART_SetConfig+0x2f0>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	08007191 	.word	0x08007191
 800717c:	08007199 	.word	0x08007199
 8007180:	080071a1 	.word	0x080071a1
 8007184:	080071a9 	.word	0x080071a9
 8007188:	080071d5 	.word	0x080071d5
 800718c:	080071dd 	.word	0x080071dd
 8007190:	2300      	movs	r3, #0
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e14a      	b.n	800742e <UART_SetConfig+0x5a6>
 8007198:	2304      	movs	r3, #4
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e146      	b.n	800742e <UART_SetConfig+0x5a6>
 80071a0:	2308      	movs	r3, #8
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e142      	b.n	800742e <UART_SetConfig+0x5a6>
 80071a8:	2310      	movs	r3, #16
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e13e      	b.n	800742e <UART_SetConfig+0x5a6>
 80071b0:	cfff69f3 	.word	0xcfff69f3
 80071b4:	58000c00 	.word	0x58000c00
 80071b8:	11fff4ff 	.word	0x11fff4ff
 80071bc:	40011000 	.word	0x40011000
 80071c0:	58024400 	.word	0x58024400
 80071c4:	40004400 	.word	0x40004400
 80071c8:	40004800 	.word	0x40004800
 80071cc:	40004c00 	.word	0x40004c00
 80071d0:	40005000 	.word	0x40005000
 80071d4:	2320      	movs	r3, #32
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e128      	b.n	800742e <UART_SetConfig+0x5a6>
 80071dc:	2340      	movs	r3, #64	; 0x40
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e124      	b.n	800742e <UART_SetConfig+0x5a6>
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e120      	b.n	800742e <UART_SetConfig+0x5a6>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4acb      	ldr	r2, [pc, #812]	; (8007520 <UART_SetConfig+0x698>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d176      	bne.n	80072e4 <UART_SetConfig+0x45c>
 80071f6:	4bcb      	ldr	r3, [pc, #812]	; (8007524 <UART_SetConfig+0x69c>)
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071fe:	2b28      	cmp	r3, #40	; 0x28
 8007200:	d86c      	bhi.n	80072dc <UART_SetConfig+0x454>
 8007202:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <UART_SetConfig+0x380>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	080072ad 	.word	0x080072ad
 800720c:	080072dd 	.word	0x080072dd
 8007210:	080072dd 	.word	0x080072dd
 8007214:	080072dd 	.word	0x080072dd
 8007218:	080072dd 	.word	0x080072dd
 800721c:	080072dd 	.word	0x080072dd
 8007220:	080072dd 	.word	0x080072dd
 8007224:	080072dd 	.word	0x080072dd
 8007228:	080072b5 	.word	0x080072b5
 800722c:	080072dd 	.word	0x080072dd
 8007230:	080072dd 	.word	0x080072dd
 8007234:	080072dd 	.word	0x080072dd
 8007238:	080072dd 	.word	0x080072dd
 800723c:	080072dd 	.word	0x080072dd
 8007240:	080072dd 	.word	0x080072dd
 8007244:	080072dd 	.word	0x080072dd
 8007248:	080072bd 	.word	0x080072bd
 800724c:	080072dd 	.word	0x080072dd
 8007250:	080072dd 	.word	0x080072dd
 8007254:	080072dd 	.word	0x080072dd
 8007258:	080072dd 	.word	0x080072dd
 800725c:	080072dd 	.word	0x080072dd
 8007260:	080072dd 	.word	0x080072dd
 8007264:	080072dd 	.word	0x080072dd
 8007268:	080072c5 	.word	0x080072c5
 800726c:	080072dd 	.word	0x080072dd
 8007270:	080072dd 	.word	0x080072dd
 8007274:	080072dd 	.word	0x080072dd
 8007278:	080072dd 	.word	0x080072dd
 800727c:	080072dd 	.word	0x080072dd
 8007280:	080072dd 	.word	0x080072dd
 8007284:	080072dd 	.word	0x080072dd
 8007288:	080072cd 	.word	0x080072cd
 800728c:	080072dd 	.word	0x080072dd
 8007290:	080072dd 	.word	0x080072dd
 8007294:	080072dd 	.word	0x080072dd
 8007298:	080072dd 	.word	0x080072dd
 800729c:	080072dd 	.word	0x080072dd
 80072a0:	080072dd 	.word	0x080072dd
 80072a4:	080072dd 	.word	0x080072dd
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e0bc      	b.n	800742e <UART_SetConfig+0x5a6>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e0b8      	b.n	800742e <UART_SetConfig+0x5a6>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e0b4      	b.n	800742e <UART_SetConfig+0x5a6>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e0b0      	b.n	800742e <UART_SetConfig+0x5a6>
 80072cc:	2320      	movs	r3, #32
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e0ac      	b.n	800742e <UART_SetConfig+0x5a6>
 80072d4:	2340      	movs	r3, #64	; 0x40
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072da:	e0a8      	b.n	800742e <UART_SetConfig+0x5a6>
 80072dc:	2380      	movs	r3, #128	; 0x80
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e2:	e0a4      	b.n	800742e <UART_SetConfig+0x5a6>
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a8f      	ldr	r2, [pc, #572]	; (8007528 <UART_SetConfig+0x6a0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d130      	bne.n	8007350 <UART_SetConfig+0x4c8>
 80072ee:	4b8d      	ldr	r3, [pc, #564]	; (8007524 <UART_SetConfig+0x69c>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d826      	bhi.n	8007348 <UART_SetConfig+0x4c0>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <UART_SetConfig+0x478>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007319 	.word	0x08007319
 8007304:	08007321 	.word	0x08007321
 8007308:	08007329 	.word	0x08007329
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e086      	b.n	800742e <UART_SetConfig+0x5a6>
 8007320:	2304      	movs	r3, #4
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e082      	b.n	800742e <UART_SetConfig+0x5a6>
 8007328:	2308      	movs	r3, #8
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e07e      	b.n	800742e <UART_SetConfig+0x5a6>
 8007330:	2310      	movs	r3, #16
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e07a      	b.n	800742e <UART_SetConfig+0x5a6>
 8007338:	2320      	movs	r3, #32
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e076      	b.n	800742e <UART_SetConfig+0x5a6>
 8007340:	2340      	movs	r3, #64	; 0x40
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007346:	e072      	b.n	800742e <UART_SetConfig+0x5a6>
 8007348:	2380      	movs	r3, #128	; 0x80
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e06e      	b.n	800742e <UART_SetConfig+0x5a6>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a75      	ldr	r2, [pc, #468]	; (800752c <UART_SetConfig+0x6a4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d130      	bne.n	80073bc <UART_SetConfig+0x534>
 800735a:	4b72      	ldr	r3, [pc, #456]	; (8007524 <UART_SetConfig+0x69c>)
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	2b05      	cmp	r3, #5
 8007364:	d826      	bhi.n	80073b4 <UART_SetConfig+0x52c>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <UART_SetConfig+0x4e4>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	08007385 	.word	0x08007385
 8007370:	0800738d 	.word	0x0800738d
 8007374:	08007395 	.word	0x08007395
 8007378:	0800739d 	.word	0x0800739d
 800737c:	080073a5 	.word	0x080073a5
 8007380:	080073ad 	.word	0x080073ad
 8007384:	2300      	movs	r3, #0
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738a:	e050      	b.n	800742e <UART_SetConfig+0x5a6>
 800738c:	2304      	movs	r3, #4
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007392:	e04c      	b.n	800742e <UART_SetConfig+0x5a6>
 8007394:	2308      	movs	r3, #8
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e048      	b.n	800742e <UART_SetConfig+0x5a6>
 800739c:	2310      	movs	r3, #16
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e044      	b.n	800742e <UART_SetConfig+0x5a6>
 80073a4:	2320      	movs	r3, #32
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e040      	b.n	800742e <UART_SetConfig+0x5a6>
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e03c      	b.n	800742e <UART_SetConfig+0x5a6>
 80073b4:	2380      	movs	r3, #128	; 0x80
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e038      	b.n	800742e <UART_SetConfig+0x5a6>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a5b      	ldr	r2, [pc, #364]	; (8007530 <UART_SetConfig+0x6a8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d130      	bne.n	8007428 <UART_SetConfig+0x5a0>
 80073c6:	4b57      	ldr	r3, [pc, #348]	; (8007524 <UART_SetConfig+0x69c>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d826      	bhi.n	8007420 <UART_SetConfig+0x598>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <UART_SetConfig+0x550>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073f1 	.word	0x080073f1
 80073dc:	080073f9 	.word	0x080073f9
 80073e0:	08007401 	.word	0x08007401
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007411 	.word	0x08007411
 80073ec:	08007419 	.word	0x08007419
 80073f0:	2302      	movs	r3, #2
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f6:	e01a      	b.n	800742e <UART_SetConfig+0x5a6>
 80073f8:	2304      	movs	r3, #4
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fe:	e016      	b.n	800742e <UART_SetConfig+0x5a6>
 8007400:	2308      	movs	r3, #8
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e012      	b.n	800742e <UART_SetConfig+0x5a6>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e00e      	b.n	800742e <UART_SetConfig+0x5a6>
 8007410:	2320      	movs	r3, #32
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e00a      	b.n	800742e <UART_SetConfig+0x5a6>
 8007418:	2340      	movs	r3, #64	; 0x40
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e006      	b.n	800742e <UART_SetConfig+0x5a6>
 8007420:	2380      	movs	r3, #128	; 0x80
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e002      	b.n	800742e <UART_SetConfig+0x5a6>
 8007428:	2380      	movs	r3, #128	; 0x80
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a3f      	ldr	r2, [pc, #252]	; (8007530 <UART_SetConfig+0x6a8>)
 8007434:	4293      	cmp	r3, r2
 8007436:	f040 80f8 	bne.w	800762a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800743a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800743e:	2b20      	cmp	r3, #32
 8007440:	dc46      	bgt.n	80074d0 <UART_SetConfig+0x648>
 8007442:	2b02      	cmp	r3, #2
 8007444:	f2c0 8082 	blt.w	800754c <UART_SetConfig+0x6c4>
 8007448:	3b02      	subs	r3, #2
 800744a:	2b1e      	cmp	r3, #30
 800744c:	d87e      	bhi.n	800754c <UART_SetConfig+0x6c4>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x5cc>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	080074d7 	.word	0x080074d7
 8007458:	0800754d 	.word	0x0800754d
 800745c:	080074df 	.word	0x080074df
 8007460:	0800754d 	.word	0x0800754d
 8007464:	0800754d 	.word	0x0800754d
 8007468:	0800754d 	.word	0x0800754d
 800746c:	080074ef 	.word	0x080074ef
 8007470:	0800754d 	.word	0x0800754d
 8007474:	0800754d 	.word	0x0800754d
 8007478:	0800754d 	.word	0x0800754d
 800747c:	0800754d 	.word	0x0800754d
 8007480:	0800754d 	.word	0x0800754d
 8007484:	0800754d 	.word	0x0800754d
 8007488:	0800754d 	.word	0x0800754d
 800748c:	080074ff 	.word	0x080074ff
 8007490:	0800754d 	.word	0x0800754d
 8007494:	0800754d 	.word	0x0800754d
 8007498:	0800754d 	.word	0x0800754d
 800749c:	0800754d 	.word	0x0800754d
 80074a0:	0800754d 	.word	0x0800754d
 80074a4:	0800754d 	.word	0x0800754d
 80074a8:	0800754d 	.word	0x0800754d
 80074ac:	0800754d 	.word	0x0800754d
 80074b0:	0800754d 	.word	0x0800754d
 80074b4:	0800754d 	.word	0x0800754d
 80074b8:	0800754d 	.word	0x0800754d
 80074bc:	0800754d 	.word	0x0800754d
 80074c0:	0800754d 	.word	0x0800754d
 80074c4:	0800754d 	.word	0x0800754d
 80074c8:	0800754d 	.word	0x0800754d
 80074cc:	0800753f 	.word	0x0800753f
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d037      	beq.n	8007544 <UART_SetConfig+0x6bc>
 80074d4:	e03a      	b.n	800754c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80074d6:	f7fe fcfd 	bl	8005ed4 <HAL_RCCEx_GetD3PCLK1Freq>
 80074da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074dc:	e03c      	b.n	8007558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fd0c 	bl	8005f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ec:	e034      	b.n	8007558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ee:	f107 0318 	add.w	r3, r7, #24
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fe58 	bl	80061a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074fc:	e02c      	b.n	8007558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074fe:	4b09      	ldr	r3, [pc, #36]	; (8007524 <UART_SetConfig+0x69c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d016      	beq.n	8007538 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800750a:	4b06      	ldr	r3, [pc, #24]	; (8007524 <UART_SetConfig+0x69c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	08db      	lsrs	r3, r3, #3
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	4a07      	ldr	r2, [pc, #28]	; (8007534 <UART_SetConfig+0x6ac>)
 8007516:	fa22 f303 	lsr.w	r3, r2, r3
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800751c:	e01c      	b.n	8007558 <UART_SetConfig+0x6d0>
 800751e:	bf00      	nop
 8007520:	40011400 	.word	0x40011400
 8007524:	58024400 	.word	0x58024400
 8007528:	40007800 	.word	0x40007800
 800752c:	40007c00 	.word	0x40007c00
 8007530:	58000c00 	.word	0x58000c00
 8007534:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007538:	4b9d      	ldr	r3, [pc, #628]	; (80077b0 <UART_SetConfig+0x928>)
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800753c:	e00c      	b.n	8007558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800753e:	4b9d      	ldr	r3, [pc, #628]	; (80077b4 <UART_SetConfig+0x92c>)
 8007540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007542:	e009      	b.n	8007558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800754a:	e005      	b.n	8007558 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007556:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 81de 	beq.w	800791c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	4a94      	ldr	r2, [pc, #592]	; (80077b8 <UART_SetConfig+0x930>)
 8007566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756a:	461a      	mov	r2, r3
 800756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007572:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	4613      	mov	r3, r2
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	4413      	add	r3, r2
 800757e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007580:	429a      	cmp	r2, r3
 8007582:	d305      	bcc.n	8007590 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800758a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758c:	429a      	cmp	r2, r3
 800758e:	d903      	bls.n	8007598 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007596:	e1c1      	b.n	800791c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759a:	2200      	movs	r2, #0
 800759c:	60bb      	str	r3, [r7, #8]
 800759e:	60fa      	str	r2, [r7, #12]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	4a84      	ldr	r2, [pc, #528]	; (80077b8 <UART_SetConfig+0x930>)
 80075a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2200      	movs	r2, #0
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	607a      	str	r2, [r7, #4]
 80075b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075ba:	f7f9 f801 	bl	80005c0 <__aeabi_uldivmod>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4610      	mov	r0, r2
 80075c4:	4619      	mov	r1, r3
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	020b      	lsls	r3, r1, #8
 80075d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075d4:	0202      	lsls	r2, r0, #8
 80075d6:	6979      	ldr	r1, [r7, #20]
 80075d8:	6849      	ldr	r1, [r1, #4]
 80075da:	0849      	lsrs	r1, r1, #1
 80075dc:	2000      	movs	r0, #0
 80075de:	460c      	mov	r4, r1
 80075e0:	4605      	mov	r5, r0
 80075e2:	eb12 0804 	adds.w	r8, r2, r4
 80075e6:	eb43 0905 	adc.w	r9, r3, r5
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	469a      	mov	sl, r3
 80075f2:	4693      	mov	fp, r2
 80075f4:	4652      	mov	r2, sl
 80075f6:	465b      	mov	r3, fp
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	f7f8 ffe0 	bl	80005c0 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4613      	mov	r3, r2
 8007606:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d308      	bcc.n	8007622 <UART_SetConfig+0x79a>
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007616:	d204      	bcs.n	8007622 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800761e:	60da      	str	r2, [r3, #12]
 8007620:	e17c      	b.n	800791c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007628:	e178      	b.n	800791c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007632:	f040 80c5 	bne.w	80077c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007636:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800763a:	2b20      	cmp	r3, #32
 800763c:	dc48      	bgt.n	80076d0 <UART_SetConfig+0x848>
 800763e:	2b00      	cmp	r3, #0
 8007640:	db7b      	blt.n	800773a <UART_SetConfig+0x8b2>
 8007642:	2b20      	cmp	r3, #32
 8007644:	d879      	bhi.n	800773a <UART_SetConfig+0x8b2>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <UART_SetConfig+0x7c4>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	080076d7 	.word	0x080076d7
 8007650:	080076df 	.word	0x080076df
 8007654:	0800773b 	.word	0x0800773b
 8007658:	0800773b 	.word	0x0800773b
 800765c:	080076e7 	.word	0x080076e7
 8007660:	0800773b 	.word	0x0800773b
 8007664:	0800773b 	.word	0x0800773b
 8007668:	0800773b 	.word	0x0800773b
 800766c:	080076f7 	.word	0x080076f7
 8007670:	0800773b 	.word	0x0800773b
 8007674:	0800773b 	.word	0x0800773b
 8007678:	0800773b 	.word	0x0800773b
 800767c:	0800773b 	.word	0x0800773b
 8007680:	0800773b 	.word	0x0800773b
 8007684:	0800773b 	.word	0x0800773b
 8007688:	0800773b 	.word	0x0800773b
 800768c:	08007707 	.word	0x08007707
 8007690:	0800773b 	.word	0x0800773b
 8007694:	0800773b 	.word	0x0800773b
 8007698:	0800773b 	.word	0x0800773b
 800769c:	0800773b 	.word	0x0800773b
 80076a0:	0800773b 	.word	0x0800773b
 80076a4:	0800773b 	.word	0x0800773b
 80076a8:	0800773b 	.word	0x0800773b
 80076ac:	0800773b 	.word	0x0800773b
 80076b0:	0800773b 	.word	0x0800773b
 80076b4:	0800773b 	.word	0x0800773b
 80076b8:	0800773b 	.word	0x0800773b
 80076bc:	0800773b 	.word	0x0800773b
 80076c0:	0800773b 	.word	0x0800773b
 80076c4:	0800773b 	.word	0x0800773b
 80076c8:	0800773b 	.word	0x0800773b
 80076cc:	0800772d 	.word	0x0800772d
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d02e      	beq.n	8007732 <UART_SetConfig+0x8aa>
 80076d4:	e031      	b.n	800773a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d6:	f7fd f985 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 80076da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076dc:	e033      	b.n	8007746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076de:	f7fd f997 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 80076e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076e4:	e02f      	b.n	8007746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fc08 	bl	8005f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076f4:	e027      	b.n	8007746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076f6:	f107 0318 	add.w	r3, r7, #24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fd54 	bl	80061a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007704:	e01f      	b.n	8007746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007706:	4b2d      	ldr	r3, [pc, #180]	; (80077bc <UART_SetConfig+0x934>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007712:	4b2a      	ldr	r3, [pc, #168]	; (80077bc <UART_SetConfig+0x934>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	08db      	lsrs	r3, r3, #3
 8007718:	f003 0303 	and.w	r3, r3, #3
 800771c:	4a24      	ldr	r2, [pc, #144]	; (80077b0 <UART_SetConfig+0x928>)
 800771e:	fa22 f303 	lsr.w	r3, r2, r3
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007724:	e00f      	b.n	8007746 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007726:	4b22      	ldr	r3, [pc, #136]	; (80077b0 <UART_SetConfig+0x928>)
 8007728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800772a:	e00c      	b.n	8007746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800772c:	4b21      	ldr	r3, [pc, #132]	; (80077b4 <UART_SetConfig+0x92c>)
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007730:	e009      	b.n	8007746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007738:	e005      	b.n	8007746 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80e7 	beq.w	800791c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	4a19      	ldr	r2, [pc, #100]	; (80077b8 <UART_SetConfig+0x930>)
 8007754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007758:	461a      	mov	r2, r3
 800775a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007760:	005a      	lsls	r2, r3, #1
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	441a      	add	r2, r3
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007772:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	2b0f      	cmp	r3, #15
 8007778:	d916      	bls.n	80077a8 <UART_SetConfig+0x920>
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007780:	d212      	bcs.n	80077a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	b29b      	uxth	r3, r3
 8007786:	f023 030f 	bic.w	r3, r3, #15
 800778a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	b29b      	uxth	r3, r3
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	b29a      	uxth	r2, r3
 8007798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800779a:	4313      	orrs	r3, r2
 800779c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	e0b9      	b.n	800791c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80077ae:	e0b5      	b.n	800791c <UART_SetConfig+0xa94>
 80077b0:	03d09000 	.word	0x03d09000
 80077b4:	003d0900 	.word	0x003d0900
 80077b8:	0801b6cc 	.word	0x0801b6cc
 80077bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80077c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	dc49      	bgt.n	800785c <UART_SetConfig+0x9d4>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	db7c      	blt.n	80078c6 <UART_SetConfig+0xa3e>
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d87a      	bhi.n	80078c6 <UART_SetConfig+0xa3e>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x950>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	08007863 	.word	0x08007863
 80077dc:	0800786b 	.word	0x0800786b
 80077e0:	080078c7 	.word	0x080078c7
 80077e4:	080078c7 	.word	0x080078c7
 80077e8:	08007873 	.word	0x08007873
 80077ec:	080078c7 	.word	0x080078c7
 80077f0:	080078c7 	.word	0x080078c7
 80077f4:	080078c7 	.word	0x080078c7
 80077f8:	08007883 	.word	0x08007883
 80077fc:	080078c7 	.word	0x080078c7
 8007800:	080078c7 	.word	0x080078c7
 8007804:	080078c7 	.word	0x080078c7
 8007808:	080078c7 	.word	0x080078c7
 800780c:	080078c7 	.word	0x080078c7
 8007810:	080078c7 	.word	0x080078c7
 8007814:	080078c7 	.word	0x080078c7
 8007818:	08007893 	.word	0x08007893
 800781c:	080078c7 	.word	0x080078c7
 8007820:	080078c7 	.word	0x080078c7
 8007824:	080078c7 	.word	0x080078c7
 8007828:	080078c7 	.word	0x080078c7
 800782c:	080078c7 	.word	0x080078c7
 8007830:	080078c7 	.word	0x080078c7
 8007834:	080078c7 	.word	0x080078c7
 8007838:	080078c7 	.word	0x080078c7
 800783c:	080078c7 	.word	0x080078c7
 8007840:	080078c7 	.word	0x080078c7
 8007844:	080078c7 	.word	0x080078c7
 8007848:	080078c7 	.word	0x080078c7
 800784c:	080078c7 	.word	0x080078c7
 8007850:	080078c7 	.word	0x080078c7
 8007854:	080078c7 	.word	0x080078c7
 8007858:	080078b9 	.word	0x080078b9
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	d02e      	beq.n	80078be <UART_SetConfig+0xa36>
 8007860:	e031      	b.n	80078c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007862:	f7fd f8bf 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8007866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007868:	e033      	b.n	80078d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800786a:	f7fd f8d1 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 800786e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007870:	e02f      	b.n	80078d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fb42 	bl	8005f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007880:	e027      	b.n	80078d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007882:	f107 0318 	add.w	r3, r7, #24
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fc8e 	bl	80061a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007890:	e01f      	b.n	80078d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007892:	4b2d      	ldr	r3, [pc, #180]	; (8007948 <UART_SetConfig+0xac0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800789e:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <UART_SetConfig+0xac0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	08db      	lsrs	r3, r3, #3
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	4a28      	ldr	r2, [pc, #160]	; (800794c <UART_SetConfig+0xac4>)
 80078aa:	fa22 f303 	lsr.w	r3, r2, r3
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078b0:	e00f      	b.n	80078d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80078b2:	4b26      	ldr	r3, [pc, #152]	; (800794c <UART_SetConfig+0xac4>)
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b6:	e00c      	b.n	80078d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078b8:	4b25      	ldr	r3, [pc, #148]	; (8007950 <UART_SetConfig+0xac8>)
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078bc:	e009      	b.n	80078d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c4:	e005      	b.n	80078d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078d0:	bf00      	nop
    }

    if (pclk != 0U)
 80078d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d021      	beq.n	800791c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <UART_SetConfig+0xacc>)
 80078de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e2:	461a      	mov	r2, r3
 80078e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	441a      	add	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	2b0f      	cmp	r3, #15
 8007900:	d909      	bls.n	8007916 <UART_SetConfig+0xa8e>
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007908:	d205      	bcs.n	8007916 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	b29a      	uxth	r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60da      	str	r2, [r3, #12]
 8007914:	e002      	b.n	800791c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2201      	movs	r2, #1
 8007920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2201      	movs	r2, #1
 8007928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2200      	movs	r2, #0
 8007930:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2200      	movs	r2, #0
 8007936:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007938:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800793c:	4618      	mov	r0, r3
 800793e:	3748      	adds	r7, #72	; 0x48
 8007940:	46bd      	mov	sp, r7
 8007942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	03d09000 	.word	0x03d09000
 8007950:	003d0900 	.word	0x003d0900
 8007954:	0801b6cc 	.word	0x0801b6cc

08007958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01a      	beq.n	8007a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a56:	d10a      	bne.n	8007a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	605a      	str	r2, [r3, #4]
  }
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b098      	sub	sp, #96	; 0x60
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007aac:	f7f9 fed2 	bl	8001854 <HAL_GetTick>
 8007ab0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d12f      	bne.n	8007b20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f88e 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d022      	beq.n	8007b20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aee:	653b      	str	r3, [r7, #80]	; 0x50
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af8:	647b      	str	r3, [r7, #68]	; 0x44
 8007afa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e6      	bne.n	8007ada <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e063      	b.n	8007be8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d149      	bne.n	8007bc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b36:	2200      	movs	r2, #0
 8007b38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f857 	bl	8007bf0 <UART_WaitOnFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d03c      	beq.n	8007bc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	623b      	str	r3, [r7, #32]
   return(result);
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b66:	633b      	str	r3, [r7, #48]	; 0x30
 8007b68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e6      	bne.n	8007b48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b9a:	61fa      	str	r2, [r7, #28]
 8007b9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	69b9      	ldr	r1, [r7, #24]
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e5      	bne.n	8007b7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e012      	b.n	8007be8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3758      	adds	r7, #88	; 0x58
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c00:	e049      	b.n	8007c96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d045      	beq.n	8007c96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c0a:	f7f9 fe23 	bl	8001854 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d302      	bcc.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e048      	b.n	8007cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d031      	beq.n	8007c96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d110      	bne.n	8007c62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2208      	movs	r2, #8
 8007c46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f839 	bl	8007cc0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2208      	movs	r2, #8
 8007c52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e029      	b.n	8007cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c70:	d111      	bne.n	8007c96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f81f 	bl	8007cc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e00f      	b.n	8007cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	bf0c      	ite	eq
 8007ca6:	2301      	moveq	r3, #1
 8007ca8:	2300      	movne	r3, #0
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d0a6      	beq.n	8007c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b095      	sub	sp, #84	; 0x54
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e6      	bne.n	8007cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <UART_EndRxTransfer+0xc8>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3308      	adds	r3, #8
 8007d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e5      	bne.n	8007cfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d118      	bne.n	8007d68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f023 0310 	bic.w	r3, r3, #16
 8007d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d54:	61bb      	str	r3, [r7, #24]
 8007d56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6979      	ldr	r1, [r7, #20]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	613b      	str	r3, [r7, #16]
   return(result);
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e6      	bne.n	8007d36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d7c:	bf00      	nop
 8007d7e:	3754      	adds	r7, #84	; 0x54
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	effffffe 	.word	0xeffffffe

08007d8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e027      	b.n	8007df2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2224      	movs	r2, #36	; 0x24
 8007dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007dd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e02d      	b.n	8007e72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2224      	movs	r2, #36	; 0x24
 8007e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f850 	bl	8007ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e02d      	b.n	8007eee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2224      	movs	r2, #36	; 0x24
 8007e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0201 	bic.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f812 	bl	8007ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d108      	bne.n	8007f1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f18:	e031      	b.n	8007f7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f1a:	2310      	movs	r3, #16
 8007f1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f1e:	2310      	movs	r3, #16
 8007f20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	0e5b      	lsrs	r3, r3, #25
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	0f5b      	lsrs	r3, r3, #29
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	7b3a      	ldrb	r2, [r7, #12]
 8007f46:	4911      	ldr	r1, [pc, #68]	; (8007f8c <UARTEx_SetNbDataToProcess+0x94>)
 8007f48:	5c8a      	ldrb	r2, [r1, r2]
 8007f4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f4e:	7b3a      	ldrb	r2, [r7, #12]
 8007f50:	490f      	ldr	r1, [pc, #60]	; (8007f90 <UARTEx_SetNbDataToProcess+0x98>)
 8007f52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f54:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	7b7a      	ldrb	r2, [r7, #13]
 8007f64:	4909      	ldr	r1, [pc, #36]	; (8007f8c <UARTEx_SetNbDataToProcess+0x94>)
 8007f66:	5c8a      	ldrb	r2, [r1, r2]
 8007f68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f6c:	7b7a      	ldrb	r2, [r7, #13]
 8007f6e:	4908      	ldr	r1, [pc, #32]	; (8007f90 <UARTEx_SetNbDataToProcess+0x98>)
 8007f70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f72:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f7e:	bf00      	nop
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	0801b6e4 	.word	0x0801b6e4
 8007f90:	0801b6ec 	.word	0x0801b6ec

08007f94 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8007f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9e:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007fa0:	4908      	ldr	r1, [pc, #32]	; (8007fc4 <nx_eth_phy_init+0x30>)
 8007fa2:	4809      	ldr	r0, [pc, #36]	; (8007fc8 <nx_eth_phy_init+0x34>)
 8007fa4:	f7f9 faa5 	bl	80014f2 <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8007fa8:	4807      	ldr	r0, [pc, #28]	; (8007fc8 <nx_eth_phy_init+0x34>)
 8007faa:	f7f9 fad4 	bl	8001556 <LAN8742_Init>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8007fb8:	687b      	ldr	r3, [r7, #4]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	24000010 	.word	0x24000010
 8007fc8:	24000750 	.word	0x24000750

08007fcc <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8007fd2:	4804      	ldr	r0, [pc, #16]	; (8007fe4 <nx_eth_phy_get_link_state+0x18>)
 8007fd4:	f7f9 fb67 	bl	80016a6 <LAN8742_GetLinkState>
 8007fd8:	6078      	str	r0, [r7, #4]

    return linkstate;
 8007fda:	687b      	ldr	r3, [r7, #4]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	24000750 	.word	0x24000750

08007fe8 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8007fec:	4802      	ldr	r0, [pc, #8]	; (8007ff8 <lan8742_io_init+0x10>)
 8007fee:	f7fa fd3d 	bl	8002a6c <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	240005b0 	.word	0x240005b0

08007ffc <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	68f9      	ldr	r1, [r7, #12]
 800801e:	4807      	ldr	r0, [pc, #28]	; (800803c <lan8742_io_read_reg+0x30>)
 8008020:	f7fa fa74 	bl	800250c <HAL_ETH_ReadPHYRegister>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 800802a:	f04f 33ff 	mov.w	r3, #4294967295
 800802e:	e000      	b.n	8008032 <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	240005b0 	.word	0x240005b0

08008040 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	68f9      	ldr	r1, [r7, #12]
 8008052:	4807      	ldr	r0, [pc, #28]	; (8008070 <lan8742_io_write_reg+0x30>)
 8008054:	f7fa faae 	bl	80025b4 <HAL_ETH_WritePHYRegister>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 800805e:	f04f 33ff 	mov.w	r3, #4294967295
 8008062:	e000      	b.n	8008066 <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	240005b0 	.word	0x240005b0

08008074 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008078:	f7f9 fbec 	bl	8001854 <HAL_GetTick>
 800807c:	4603      	mov	r3, r0
}
 800807e:	4618      	mov	r0, r3
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b13      	cmp	r3, #19
 8008098:	d84e      	bhi.n	8008138 <nx_stm32_eth_driver+0xb4>
 800809a:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <nx_stm32_eth_driver+0x1c>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	08008111 	.word	0x08008111
 80080a4:	080080f9 	.word	0x080080f9
 80080a8:	08008101 	.word	0x08008101
 80080ac:	08008109 	.word	0x08008109
 80080b0:	08008111 	.word	0x08008111
 80080b4:	08008111 	.word	0x08008111
 80080b8:	08008111 	.word	0x08008111
 80080bc:	08008111 	.word	0x08008111
 80080c0:	08008119 	.word	0x08008119
 80080c4:	08008121 	.word	0x08008121
 80080c8:	08008129 	.word	0x08008129
 80080cc:	08008139 	.word	0x08008139
 80080d0:	08008139 	.word	0x08008139
 80080d4:	08008139 	.word	0x08008139
 80080d8:	08008139 	.word	0x08008139
 80080dc:	08008139 	.word	0x08008139
 80080e0:	08008139 	.word	0x08008139
 80080e4:	08008139 	.word	0x08008139
 80080e8:	08008131 	.word	0x08008131
 80080ec:	080080f1 	.word	0x080080f1
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f82d 	bl	8008150 <_nx_driver_interface_attach>
    break;
 80080f6:	e026      	b.n	8008146 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f83d 	bl	8008178 <_nx_driver_initialize>
      break;
 80080fe:	e022      	b.n	8008146 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8ad 	bl	8008260 <_nx_driver_enable>
      break;
 8008106:	e01e      	b.n	8008146 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f931 	bl	8008370 <_nx_driver_disable>
      break;
 800810e:	e01a      	b.n	8008146 <nx_stm32_eth_driver+0xc2>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f957 	bl	80083c4 <_nx_driver_packet_send>
      break;
 8008116:	e016      	b.n	8008146 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fa25 	bl	8008568 <_nx_driver_multicast_join>
      break;
 800811e:	e012      	b.n	8008146 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fa37 	bl	8008594 <_nx_driver_multicast_leave>
      break;
 8008126:	e00e      	b.n	8008146 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa49 	bl	80085c0 <_nx_driver_get_status>
      break;
 800812e:	e00a      	b.n	8008146 <nx_stm32_eth_driver+0xc2>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fa5b 	bl	80085ec <_nx_driver_deferred_processing>

      break;
 8008136:	e006      	b.n	8008146 <nx_stm32_eth_driver+0xc2>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2244      	movs	r2, #68	; 0x44
 800813c:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	225a      	movs	r2, #90	; 0x5a
 8008142:	605a      	str	r2, [r3, #4]
  }
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop

08008150 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	4a05      	ldr	r2, [pc, #20]	; (8008174 <_nx_driver_interface_attach+0x24>)
 800815e:	60d3      	str	r3, [r2, #12]
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	605a      	str	r2, [r3, #4]
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	24000770 	.word	0x24000770

08008178 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UINT            status;
  CHAR           *payload_address;       /* Address of the first payload*/
  VOID           *rounded_pool_start;    /* Rounded stating address     */

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	61fb      	str	r3, [r7, #28]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	61bb      	str	r3, [r7, #24]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 800818c:	4b31      	ldr	r3, [pc, #196]	; (8008254 <_nx_driver_initialize+0xdc>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 8008192:	4b30      	ldr	r3, [pc, #192]	; (8008254 <_nx_driver_initialize+0xdc>)
 8008194:	2201      	movs	r2, #1
 8008196:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f8d3 363c 	ldr.w	r3, [r3, #1596]	; 0x63c
 800819e:	4a2d      	ldr	r2, [pc, #180]	; (8008254 <_nx_driver_initialize+0xdc>)
 80081a0:	6093      	str	r3, [r2, #8]

  /* Get the rounded start pool start. */
  rounded_pool_start = nx_driver_information.nx_driver_information_packet_pool_ptr->nx_packet_pool_start;
 80081a2:	4b2c      	ldr	r3, [pc, #176]	; (8008254 <_nx_driver_initialize+0xdc>)
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	617b      	str	r3, [r7, #20]

  /* Calculate the address of payload. */
  payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	333c      	adds	r3, #60	; 0x3c
 80081ae:	613b      	str	r3, [r7, #16]

  /* Align the address of payload. */
  payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	3303      	adds	r3, #3
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	613b      	str	r3, [r7, #16]

  /* Calculate the header size. */
  header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	4a25      	ldr	r2, [pc, #148]	; (8008258 <_nx_driver_initialize+0xe0>)
 80081c2:	6013      	str	r3, [r2, #0]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 80081c4:	4b23      	ldr	r3, [pc, #140]	; (8008254 <_nx_driver_initialize+0xdc>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 faa4 	bl	8008718 <_nx_driver_hardware_initialize>
 80081d0:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d136      	bne.n	8008246 <_nx_driver_initialize+0xce>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <_nx_driver_initialize+0xdc>)
 80081de:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80081e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 80081e8:	4b1c      	ldr	r3, [pc, #112]	; (800825c <_nx_driver_initialize+0xe4>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	4a1a      	ldr	r2, [pc, #104]	; (800825c <_nx_driver_initialize+0xe4>)
 80081f2:	6852      	ldr	r2, [r2, #4]
 80081f4:	3201      	adds	r2, #1
 80081f6:	7812      	ldrb	r2, [r2, #0]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8008200:	4b16      	ldr	r3, [pc, #88]	; (800825c <_nx_driver_initialize+0xe4>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	3302      	adds	r3, #2
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	061a      	lsls	r2, r3, #24
 800820a:	4b14      	ldr	r3, [pc, #80]	; (800825c <_nx_driver_initialize+0xe4>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	3303      	adds	r3, #3
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	041b      	lsls	r3, r3, #16
 8008214:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <_nx_driver_initialize+0xe4>)
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8008220:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8008222:	4a0e      	ldr	r2, [pc, #56]	; (800825c <_nx_driver_initialize+0xe4>)
 8008224:	6852      	ldr	r2, [r2, #4]
 8008226:	3205      	adds	r2, #5
 8008228:	7812      	ldrb	r2, [r2, #0]
 800822a:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 800822c:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2201      	movs	r2, #1
 8008236:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 8008238:	4b06      	ldr	r3, [pc, #24]	; (8008254 <_nx_driver_initialize+0xdc>)
 800823a:	2203      	movs	r2, #3
 800823c:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 8008244:	e002      	b.n	800824c <_nx_driver_initialize+0xd4>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	225a      	movs	r2, #90	; 0x5a
 800824a:	605a      	str	r2, [r3, #4]
}
 800824c:	bf00      	nop
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	24000770 	.word	0x24000770
 8008258:	240007bc 	.word	0x240007bc
 800825c:	240005b0 	.word	0x240005b0

08008260 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b0a0      	sub	sp, #128	; 0x80
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	67bb      	str	r3, [r7, #120]	; 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	677b      	str	r3, [r7, #116]	; 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8008272:	4b3d      	ldr	r3, [pc, #244]	; (8008368 <_nx_driver_enable+0x108>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d803      	bhi.n	8008282 <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	225a      	movs	r2, #90	; 0x5a
 800827e:	605a      	str	r2, [r3, #4]
    return;
 8008280:	e06e      	b.n	8008360 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8008282:	4b39      	ldr	r3, [pc, #228]	; (8008368 <_nx_driver_enable+0x108>)
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d903      	bls.n	8008292 <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2215      	movs	r2, #21
 800828e:	605a      	str	r2, [r3, #4]
    return;
 8008290:	e066      	b.n	8008360 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 8008292:	f7ff fe7f 	bl	8007f94 <nx_eth_phy_init>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	225a      	movs	r2, #90	; 0x5a
 80082a0:	605a      	str	r2, [r3, #4]
    return;
 80082a2:	e05d      	b.n	8008360 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 80082a4:	f7ff fe92 	bl	8007fcc <nx_eth_phy_get_link_state>
 80082a8:	6738      	str	r0, [r7, #112]	; 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 80082aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	dc03      	bgt.n	80082b8 <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	225a      	movs	r2, #90	; 0x5a
 80082b4:	605a      	str	r2, [r3, #4]
    return;
 80082b6:	e053      	b.n	8008360 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 80082b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ba:	3b02      	subs	r3, #2
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d823      	bhi.n	8008308 <_nx_driver_enable+0xa8>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <_nx_driver_enable+0x68>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	080082e7 	.word	0x080082e7
 80082d0:	080082f3 	.word	0x080082f3
 80082d4:	080082ff 	.word	0x080082ff
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_1000M;
      break;
#endif
case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80082d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 80082de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082e2:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80082e4:	e017      	b.n	8008316 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 80082ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082ee:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80082f0:	e011      	b.n	8008316 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80082f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 80082f8:	2300      	movs	r3, #0
 80082fa:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80082fc:	e00b      	b.n	8008316 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80082fe:	2300      	movs	r3, #0
 8008300:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8008302:	2300      	movs	r3, #0
 8008304:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8008306:	e006      	b.n	8008316 <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8008308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800830c:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 800830e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008312:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8008314:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 8008316:	f107 0308 	add.w	r3, r7, #8
 800831a:	4619      	mov	r1, r3
 800831c:	4813      	ldr	r0, [pc, #76]	; (800836c <_nx_driver_enable+0x10c>)
 800831e:	f7fa f99d 	bl	800265c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008324:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 8008326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008328:	61fb      	str	r3, [r7, #28]
    MACConf.PortSelect = 0;
#else
    MACConf.PortSelect = 1;
#endif
#endif
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 800832a:	f107 0308 	add.w	r3, r7, #8
 800832e:	4619      	mov	r1, r3
 8008330:	480e      	ldr	r0, [pc, #56]	; (800836c <_nx_driver_enable+0x10c>)
 8008332:	f7fa fb67 	bl	8002a04 <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa66 	bl	8008808 <_nx_driver_hardware_enable>
 800833c:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 800833e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8008344:	4b08      	ldr	r3, [pc, #32]	; (8008368 <_nx_driver_enable+0x108>)
 8008346:	2204      	movs	r2, #4
 8008348:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8008350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a
 8008358:	e002      	b.n	8008360 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	225a      	movs	r2, #90	; 0x5a
 800835e:	605a      	str	r2, [r3, #4]
  }
}
 8008360:	3780      	adds	r7, #128	; 0x80
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	24000770 	.word	0x24000770
 800836c:	240005b0 	.word	0x240005b0

08008370 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 800837e:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <_nx_driver_disable+0x50>)
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b04      	cmp	r3, #4
 8008384:	d003      	beq.n	800838e <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	225a      	movs	r2, #90	; 0x5a
 800838a:	605a      	str	r2, [r3, #4]
    return;
 800838c:	e014      	b.n	80083b8 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa48 	bl	8008824 <_nx_driver_hardware_disable>
 8008394:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 80083a4:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <_nx_driver_disable+0x50>)
 80083a6:	2203      	movs	r2, #3
 80083a8:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	605a      	str	r2, [r3, #4]
 80083b0:	e002      	b.n	80083b8 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	225a      	movs	r2, #90	; 0x5a
 80083b6:	605a      	str	r2, [r3, #4]
  }
}
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	24000770 	.word	0x24000770

080083c4 <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 80083d2:	4b64      	ldr	r3, [pc, #400]	; (8008564 <_nx_driver_packet_send+0x1a0>)
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d008      	beq.n	80083ec <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	225a      	movs	r2, #90	; 0x5a
 80083de:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3310      	adds	r3, #16
 80083e4:	4618      	mov	r0, r3
 80083e6:	f00e fcc1 	bl	8016d6c <_nxe_packet_transmit_release>
    return;
 80083ea:	e0b7      	b.n	800855c <_nx_driver_packet_send+0x198>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 80083f6:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80083f8:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 80083fa:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	320e      	adds	r2, #14
 8008404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	3b02      	subs	r3, #2
 800840c:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	3304      	adds	r3, #4
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	68d2      	ldr	r2, [r2, #12]
 800841e:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40
 8008426:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f8d3 3c44 	ldr.w	r3, [r3, #3140]	; 0xc44
 800842e:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	3308      	adds	r3, #8
 8008434:	430a      	orrs	r2, r1
 8008436:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f8d3 2c44 	ldr.w	r2, [r3, #3140]	; 0xc44
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	330c      	adds	r3, #12
 8008442:	0412      	lsls	r2, r2, #16
 8008444:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b05      	cmp	r3, #5
 800844c:	d003      	beq.n	8008456 <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8008452:	2b06      	cmp	r3, #6
 8008454:	d10a      	bne.n	800846c <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	330c      	adds	r3, #12
 800845a:	6819      	ldr	r1, [r3, #0]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f103 020c 	add.w	r2, r3, #12
 8008462:	f640 0306 	movw	r3, #2054	; 0x806
 8008466:	430b      	orrs	r3, r1
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	e026      	b.n	80084ba <_nx_driver_packet_send+0xf6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b07      	cmp	r3, #7
 8008472:	d10a      	bne.n	800848a <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	330c      	adds	r3, #12
 8008478:	6819      	ldr	r1, [r3, #0]
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f103 020c 	add.w	r2, r3, #12
 8008480:	f248 0335 	movw	r3, #32821	; 0x8035
 8008484:	430b      	orrs	r3, r1
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e017      	b.n	80084ba <_nx_driver_packet_send+0xf6>
  }

#ifdef FEATURE_NX_IPV6
  else if(packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008490:	2b06      	cmp	r3, #6
 8008492:	d10a      	bne.n	80084aa <_nx_driver_packet_send+0xe6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IPV6;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	330c      	adds	r3, #12
 8008498:	6819      	ldr	r1, [r3, #0]
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f103 020c 	add.w	r2, r3, #12
 80084a0:	f248 63dd 	movw	r3, #34525	; 0x86dd
 80084a4:	430b      	orrs	r3, r1
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	e007      	b.n	80084ba <_nx_driver_packet_send+0xf6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	330c      	adds	r3, #12
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	330c      	adds	r3, #12
 80084b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084b8:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	ba1a      	rev	r2, r3
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	3304      	adds	r3, #4
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3304      	adds	r3, #4
 80084ce:	ba12      	rev	r2, r2
 80084d0:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	3308      	adds	r3, #8
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3308      	adds	r3, #8
 80084dc:	ba12      	rev	r2, r2
 80084de:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	330c      	adds	r3, #12
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	330c      	adds	r3, #12
 80084ea:	ba12      	rev	r2, r2
 80084ec:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d912      	bls.n	8008520 <_nx_driver_packet_send+0x15c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	320e      	adds	r2, #14
 8008502:	609a      	str	r2, [r3, #8]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	3a0e      	subs	r2, #14
 800850c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	225a      	movs	r2, #90	; 0x5a
 8008512:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	4618      	mov	r0, r3
 800851a:	f00e fc27 	bl	8016d6c <_nxe_packet_transmit_release>
    return;
 800851e:	e01d      	b.n	800855c <_nx_driver_packet_send+0x198>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f98c 	bl	8008840 <_nx_driver_hardware_packet_send>
 8008528:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d012      	beq.n	8008556 <_nx_driver_packet_send+0x192>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	320e      	adds	r2, #14
 8008538:	609a      	str	r2, [r3, #8]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3a0e      	subs	r2, #14
 8008542:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	225a      	movs	r2, #90	; 0x5a
 8008548:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	4618      	mov	r0, r3
 8008550:	f00e fc0c 	bl	8016d6c <_nxe_packet_transmit_release>
 8008554:	e002      	b.n	800855c <_nx_driver_packet_send+0x198>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	605a      	str	r2, [r3, #4]
  }
}
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	24000770 	.word	0x24000770

08008568 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fa17 	bl	80089a4 <_nx_driver_hardware_multicast_join>
 8008576:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	225a      	movs	r2, #90	; 0x5a
 8008582:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8008584:	e002      	b.n	800858c <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	605a      	str	r2, [r3, #4]
}
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fa1d 	bl	80089dc <_nx_driver_hardware_multicast_leave>
 80085a2:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	225a      	movs	r2, #90	; 0x5a
 80085ae:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80085b0:	e002      	b.n	80085b8 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	605a      	str	r2, [r3, #4]
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fa27 	bl	8008a1c <_nx_driver_hardware_get_status>
 80085ce:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	225a      	movs	r2, #90	; 0x5a
 80085da:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80085dc:	e002      	b.n	80085e4 <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	605a      	str	r2, [r3, #4]
}
 80085e4:	bf00      	nop
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085f4:	f3ef 8310 	mrs	r3, PRIMASK
 80085f8:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 80085fa:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80085fc:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80085fe:	b672      	cpsid	i
#endif
    return(int_posture);
 8008600:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 8008602:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 8008604:	4b10      	ldr	r3, [pc, #64]	; (8008648 <_nx_driver_deferred_processing+0x5c>)
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <_nx_driver_deferred_processing+0x5c>)
 800860c:	2200      	movs	r2, #0
 800860e:	611a      	str	r2, [r3, #16]
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f383 8810 	msr	PRIMASK, r3
}
 800861a:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f003 0304 	and.w	r3, r3, #4
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 8008626:	4809      	ldr	r0, [pc, #36]	; (800864c <_nx_driver_deferred_processing+0x60>)
 8008628:	f7f9 fddd 	bl	80021e6 <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 8008636:	f000 fa23 	bl	8008a80 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	605a      	str	r2, [r3, #4]
}
 8008640:	bf00      	nop
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	24000770 	.word	0x24000770
 800864c:	240005b0 	.word	0x240005b0

08008650 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	4a2d      	ldr	r2, [pc, #180]	; (8008714 <_nx_driver_transfer_to_netx+0xc4>)
 800865e:	68d2      	ldr	r2, [r2, #12]
 8008660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	330c      	adds	r3, #12
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	330d      	adds	r3, #13
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 800867a:	4313      	orrs	r3, r2
 800867c:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 800867e:	89fb      	ldrh	r3, [r7, #14]
 8008680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008684:	d004      	beq.n	8008690 <_nx_driver_transfer_to_netx+0x40>
 8008686:	89fb      	ldrh	r3, [r7, #14]
 8008688:	f248 62dd 	movw	r2, #34525	; 0x86dd
 800868c:	4293      	cmp	r3, r2
 800868e:	d10f      	bne.n	80086b0 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	320e      	adds	r2, #14
 8008698:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	3a0e      	subs	r2, #14
 80086a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f004 fdaf 	bl	800d20c <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 80086ae:	e02d      	b.n	800870c <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 80086b0:	89fb      	ldrh	r3, [r7, #14]
 80086b2:	f640 0206 	movw	r2, #2054	; 0x806
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d10f      	bne.n	80086da <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	320e      	adds	r2, #14
 80086c2:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	3a0e      	subs	r2, #14
 80086cc:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc4b 	bl	8008f6e <_nx_arp_packet_deferred_receive>
}
 80086d8:	e018      	b.n	800870c <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 80086da:	89fb      	ldrh	r3, [r7, #14]
 80086dc:	f248 0235 	movw	r2, #32821	; 0x8035
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d10f      	bne.n	8008704 <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	320e      	adds	r2, #14
 80086ec:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	3a0e      	subs	r2, #14
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f008 fa9b 	bl	8010c38 <_nx_rarp_packet_deferred_receive>
}
 8008702:	e003      	b.n	800870c <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 8008704:	463b      	mov	r3, r7
 8008706:	4618      	mov	r0, r3
 8008708:	f00e faf8 	bl	8016cfc <_nxe_packet_release>
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	24000770 	.word	0x24000770

08008718 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08c      	sub	sp, #48	; 0x30
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 8008726:	4b34      	ldr	r3, [pc, #208]	; (80087f8 <_nx_driver_hardware_initialize+0xe0>)
 8008728:	2200      	movs	r2, #0
 800872a:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 800872c:	4b32      	ldr	r3, [pc, #200]	; (80087f8 <_nx_driver_hardware_initialize+0xe0>)
 800872e:	2200      	movs	r2, #0
 8008730:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 8008732:	4b31      	ldr	r3, [pc, #196]	; (80087f8 <_nx_driver_hardware_initialize+0xe0>)
 8008734:	2200      	movs	r2, #0
 8008736:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 8008738:	4b2f      	ldr	r3, [pc, #188]	; (80087f8 <_nx_driver_hardware_initialize+0xe0>)
 800873a:	2200      	movs	r2, #0
 800873c:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 800873e:	4b2e      	ldr	r3, [pc, #184]	; (80087f8 <_nx_driver_hardware_initialize+0xe0>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 8008746:	235a      	movs	r3, #90	; 0x5a
 8008748:	e052      	b.n	80087f0 <_nx_driver_hardware_initialize+0xd8>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800874e:	2301      	movs	r3, #1
 8008750:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008752:	2301      	movs	r3, #1
 8008754:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008756:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800875a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800875c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008762:	2300      	movs	r3, #0
 8008764:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#ifndef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008768:	2300      	movs	r3, #0
 800876a:	767b      	strb	r3, [r7, #25]
#if defined(ETH_DMASBMR_BLEN4) /* ETH AXI support*/
  dmaDefaultConf.RxOSRLimit = ETH_RX_OSR_LIMIT_3;
  dmaDefaultConf.TxOSRLimit = ETH_TX_OSR_LIMIT_3;
  dmaDefaultConf.AXIBLENMaxSize = ETH_BLEN_MAX_SIZE_16;
#else
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800876c:	2300      	movs	r3, #0
 800876e:	763b      	strb	r3, [r7, #24]
#endif
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 8008770:	2301      	movs	r3, #1
 8008772:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008776:	2300      	movs	r3, #0
 8008778:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 800877c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008780:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 8008782:	f107 030c 	add.w	r3, r7, #12
 8008786:	4619      	mov	r1, r3
 8008788:	481c      	ldr	r0, [pc, #112]	; (80087fc <_nx_driver_hardware_initialize+0xe4>)
 800878a:	f7fa f955 	bl	8002a38 <HAL_ETH_SetDMAConfig>
#ifdef STM32_ETH_PROMISCUOUS_ENABLE
  FilterConfig.PromiscuousMode = ENABLE;
#else
  FilterConfig.PromiscuousMode = DISABLE;
 800878e:	4b1c      	ldr	r3, [pc, #112]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 8008790:	2200      	movs	r2, #0
 8008792:	701a      	strb	r2, [r3, #0]
#endif
  FilterConfig.HashUnicast = DISABLE;
 8008794:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 8008796:	2200      	movs	r2, #0
 8008798:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 800879a:	4b19      	ldr	r3, [pc, #100]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 800879c:	2200      	movs	r2, #0
 800879e:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 80087a0:	4b17      	ldr	r3, [pc, #92]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 80087a6:	4b16      	ldr	r3, [pc, #88]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 80087ac:	4b14      	ldr	r3, [pc, #80]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 80087b2:	4b13      	ldr	r3, [pc, #76]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 80087b8:	4b11      	ldr	r3, [pc, #68]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 80087be:	4b10      	ldr	r3, [pc, #64]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 80087c4:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 80087ca:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <_nx_driver_hardware_initialize+0xe8>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 80087d0:	2238      	movs	r2, #56	; 0x38
 80087d2:	2100      	movs	r1, #0
 80087d4:	480b      	ldr	r0, [pc, #44]	; (8008804 <_nx_driver_hardware_initialize+0xec>)
 80087d6:	f011 fda5 	bl	801a324 <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 80087da:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <_nx_driver_hardware_initialize+0xec>)
 80087dc:	2201      	movs	r2, #1
 80087de:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 80087e0:	4b08      	ldr	r3, [pc, #32]	; (8008804 <_nx_driver_hardware_initialize+0xec>)
 80087e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80087e6:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 80087e8:	4b03      	ldr	r3, [pc, #12]	; (80087f8 <_nx_driver_hardware_initialize+0xe0>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3730      	adds	r7, #48	; 0x30
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	24000770 	.word	0x24000770
 80087fc:	240005b0 	.word	0x240005b0
 8008800:	240007f8 	.word	0x240007f8
 8008804:	240007c0 	.word	0x240007c0

08008808 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 8008810:	4803      	ldr	r0, [pc, #12]	; (8008820 <_nx_driver_hardware_enable+0x18>)
 8008812:	f7f9 fa8d 	bl	8001d30 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	240005b0 	.word	0x240005b0

08008824 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 800882c:	4803      	ldr	r0, [pc, #12]	; (800883c <_nx_driver_hardware_disable+0x18>)
 800882e:	f7f9 fb0b 	bl	8001e48 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	240005b0 	.word	0x240005b0

08008840 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b096      	sub	sp, #88	; 0x58
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	653b      	str	r3, [r7, #80]	; 0x50

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800884c:	f107 030c 	add.w	r3, r7, #12
 8008850:	2230      	movs	r2, #48	; 0x30
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f011 fd65 	bl	801a324 <memset>


  int i = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	64fb      	str	r3, [r7, #76]	; 0x4c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	657b      	str	r3, [r7, #84]	; 0x54
 8008862:	e07b      	b.n	800895c <_nx_driver_hardware_packet_send+0x11c>
  {
    if (i >= ETH_TX_DESC_CNT)
 8008864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008866:	2b03      	cmp	r3, #3
 8008868:	d901      	bls.n	800886e <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 800886a:	235a      	movs	r3, #90	; 0x5a
 800886c:	e090      	b.n	8008990 <_nx_driver_hardware_packet_send+0x150>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 800886e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008870:	6899      	ldr	r1, [r3, #8]
 8008872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008874:	4613      	mov	r3, r2
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	3358      	adds	r3, #88	; 0x58
 800887e:	443b      	add	r3, r7
 8008880:	3b4c      	subs	r3, #76	; 0x4c
 8008882:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8008884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	4619      	mov	r1, r3
 8008890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008892:	4613      	mov	r3, r2
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	3358      	adds	r3, #88	; 0x58
 800889c:	443b      	add	r3, r7
 800889e:	3b48      	subs	r3, #72	; 0x48
 80088a0:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 80088a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b0:	4413      	add	r3, r2
 80088b2:	653b      	str	r3, [r7, #80]	; 0x50

    if(i>0)
 80088b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dd11      	ble.n	80088de <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80088ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088bc:	1e5a      	subs	r2, r3, #1
 80088be:	f107 000c 	add.w	r0, r7, #12
 80088c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80088c4:	460b      	mov	r3, r1
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	440b      	add	r3, r1
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	18c1      	adds	r1, r0, r3
 80088ce:	4613      	mov	r3, r2
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	3358      	adds	r3, #88	; 0x58
 80088d8:	443b      	add	r3, r7
 80088da:	3b44      	subs	r3, #68	; 0x44
 80088dc:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 80088de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 80088e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088e8:	4613      	mov	r3, r2
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	3358      	adds	r3, #88	; 0x58
 80088f2:	443b      	add	r3, r7
 80088f4:	3b44      	subs	r3, #68	; 0x44
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80088fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088fc:	3301      	adds	r3, #1
 80088fe:	64fb      	str	r3, [r7, #76]	; 0x4c
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
 8008900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008906:	6959      	ldr	r1, [r3, #20]
 8008908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	1acb      	subs	r3, r1, r3
 800890e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008910:	647b      	str	r3, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008914:	2b00      	cmp	r3, #0
 8008916:	dd1d      	ble.n	8008954 <_nx_driver_hardware_packet_send+0x114>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800891a:	f003 021f 	and.w	r2, r3, #31
 800891e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008920:	4413      	add	r3, r2
 8008922:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8008928:	f3bf 8f4f 	dsb	sy
}
 800892c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800892e:	4a1a      	ldr	r2, [pc, #104]	; (8008998 <_nx_driver_hardware_packet_send+0x158>)
 8008930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008932:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008938:	3320      	adds	r3, #32
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800893c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800893e:	3b20      	subs	r3, #32
 8008940:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8008942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	dcf2      	bgt.n	800892e <_nx_driver_hardware_packet_send+0xee>
  __ASM volatile ("dsb 0xF":::"memory");
 8008948:	f3bf 8f4f 	dsb	sy
}
 800894c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800894e:	f3bf 8f6f 	isb	sy
}
 8008952:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008954:	bf00      	nop
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8008956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	657b      	str	r3, [r7, #84]	; 0x54
 800895c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800895e:	2b00      	cmp	r3, #0
 8008960:	d180      	bne.n	8008864 <_nx_driver_hardware_packet_send+0x24>
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <_nx_driver_hardware_packet_send+0x15c>)
 8008964:	2200      	movs	r2, #0
 8008966:	615a      	str	r2, [r3, #20]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 8008968:	4a0c      	ldr	r2, [pc, #48]	; (800899c <_nx_driver_hardware_packet_send+0x15c>)
 800896a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896c:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 800896e:	4a0b      	ldr	r2, [pc, #44]	; (800899c <_nx_driver_hardware_packet_send+0x15c>)
 8008970:	f107 030c 	add.w	r3, r7, #12
 8008974:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 8008976:	4a09      	ldr	r2, [pc, #36]	; (800899c <_nx_driver_hardware_packet_send+0x15c>)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6353      	str	r3, [r2, #52]	; 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 800897c:	4907      	ldr	r1, [pc, #28]	; (800899c <_nx_driver_hardware_packet_send+0x15c>)
 800897e:	4808      	ldr	r0, [pc, #32]	; (80089a0 <_nx_driver_hardware_packet_send+0x160>)
 8008980:	f7f9 fab2 	bl	8001ee8 <HAL_ETH_Transmit_IT>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <_nx_driver_hardware_packet_send+0x14e>
  {
    return(NX_DRIVER_ERROR);
 800898a:	235a      	movs	r3, #90	; 0x5a
 800898c:	e000      	b.n	8008990 <_nx_driver_hardware_packet_send+0x150>
  }

  return(NX_SUCCESS);
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3758      	adds	r7, #88	; 0x58
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	e000ed00 	.word	0xe000ed00
 800899c:	240007c0 	.word	0x240007c0
 80089a0:	240005b0 	.word	0x240005b0

080089a4 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 80089ac:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <_nx_driver_hardware_multicast_join+0x2c>)
 80089ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089b0:	3301      	adds	r3, #1
 80089b2:	4a07      	ldr	r2, [pc, #28]	; (80089d0 <_nx_driver_hardware_multicast_join+0x2c>)
 80089b4:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 80089b6:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <_nx_driver_hardware_multicast_join+0x30>)
 80089b8:	2201      	movs	r2, #1
 80089ba:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 80089bc:	4905      	ldr	r1, [pc, #20]	; (80089d4 <_nx_driver_hardware_multicast_join+0x30>)
 80089be:	4806      	ldr	r0, [pc, #24]	; (80089d8 <_nx_driver_hardware_multicast_join+0x34>)
 80089c0:	f7fa f8ac 	bl	8002b1c <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	24000770 	.word	0x24000770
 80089d4:	240007f8 	.word	0x240007f8
 80089d8:	240005b0 	.word	0x240005b0

080089dc <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 80089e4:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <_nx_driver_hardware_multicast_leave+0x34>)
 80089e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e8:	3b01      	subs	r3, #1
 80089ea:	4a09      	ldr	r2, [pc, #36]	; (8008a10 <_nx_driver_hardware_multicast_leave+0x34>)
 80089ec:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 80089ee:	4b08      	ldr	r3, [pc, #32]	; (8008a10 <_nx_driver_hardware_multicast_leave+0x34>)
 80089f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 80089f6:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <_nx_driver_hardware_multicast_leave+0x38>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 80089fc:	4905      	ldr	r1, [pc, #20]	; (8008a14 <_nx_driver_hardware_multicast_leave+0x38>)
 80089fe:	4806      	ldr	r0, [pc, #24]	; (8008a18 <_nx_driver_hardware_multicast_leave+0x3c>)
 8008a00:	f7fa f88c 	bl	8002b1c <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	24000770 	.word	0x24000770
 8008a14:	240007f8 	.word	0x240007f8
 8008a18:	240005b0 	.word	0x240005b0

08008a1c <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 8008a24:	f7ff fad2 	bl	8007fcc <nx_eth_phy_get_link_state>
 8008a28:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	dc04      	bgt.n	8008a3a <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if physical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	e003      	b.n	8008a42 <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if physical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	320e      	adds	r2, #14
 8008a60:	609a      	str	r2, [r3, #8]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3a0e      	subs	r2, #14
 8008a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 8008a6c:	f107 030c 	add.w	r3, r7, #12
 8008a70:	4618      	mov	r0, r3
 8008a72:	f00e f97b 	bl	8016d6c <_nxe_packet_transmit_release>
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 8008a86:	e006      	b.n	8008a96 <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 8008a88:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <_nx_driver_hardware_packet_received+0x30>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff fddd 	bl	8008650 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 8008a96:	1d3b      	adds	r3, r7, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4806      	ldr	r0, [pc, #24]	; (8008ab4 <_nx_driver_hardware_packet_received+0x34>)
 8008a9c:	f7f9 fa75 	bl	8001f8a <HAL_ETH_ReadData>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0f0      	beq.n	8008a88 <_nx_driver_hardware_packet_received+0x8>
  }
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	24000770 	.word	0x24000770
 8008ab4:	240005b0 	.word	0x240005b0

08008ab8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8008ac0:	4b23      	ldr	r3, [pc, #140]	; (8008b50 <HAL_ETH_RxAllocateCallback+0x98>)
 8008ac2:	6898      	ldr	r0, [r3, #8]
 8008ac4:	f107 010c 	add.w	r1, r7, #12
 8008ac8:	2300      	movs	r3, #0
 8008aca:	2200      	movs	r2, #0
 8008acc:	f00d ffea 	bl	8016aa4 <_nxe_packet_allocate>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d134      	bne.n	8008b40 <HAL_ETH_RxAllocateCallback+0x88>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3202      	adds	r2, #2
 8008ade:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6959      	ldr	r1, [r3, #20]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	1acb      	subs	r3, r1, r3
 8008aee:	61fa      	str	r2, [r7, #28]
 8008af0:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd1d      	ble.n	8008b34 <HAL_ETH_RxAllocateCallback+0x7c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f003 021f 	and.w	r2, r3, #31
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	4413      	add	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008b08:	f3bf 8f4f 	dsb	sy
}
 8008b0c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008b0e:	4a11      	ldr	r2, [pc, #68]	; (8008b54 <HAL_ETH_RxAllocateCallback+0x9c>)
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	3320      	adds	r3, #32
 8008b1a:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	3b20      	subs	r3, #32
 8008b20:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dcf2      	bgt.n	8008b0e <HAL_ETH_RxAllocateCallback+0x56>
  __ASM volatile ("dsb 0xF":::"memory");
 8008b28:	f3bf 8f4f 	dsb	sy
}
 8008b2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008b2e:	f3bf 8f6f 	isb	sy
}
 8008b32:	bf00      	nop
}
 8008b34:	bf00      	nop
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 8008b3e:	e002      	b.n	8008b46 <HAL_ETH_RxAllocateCallback+0x8e>
    *buff = NULL;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
}
 8008b46:	bf00      	nop
 8008b48:	3720      	adds	r7, #32
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	24000770 	.word	0x24000770
 8008b54:	e000ed00 	.word	0xe000ed00

08008b58 <HAL_ETH_RxLinkCallback>:
/*                                                                        */
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/
void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b089      	sub	sp, #36	; 0x24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - header_size;
 8008b6e:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <HAL_ETH_RxLinkCallback+0x68>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	f06f 0301 	mvn.w	r3, #1
 8008b76:	1a9b      	subs	r3, r3, r2
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	887b      	ldrh	r3, [r7, #2]
 8008b88:	441a      	add	r2, r3
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 8008b8e:	887a      	ldrh	r2, [r7, #2]
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d103      	bne.n	8008ba4 <HAL_ETH_RxLinkCallback+0x4c>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	e003      	b.n	8008bac <HAL_ETH_RxLinkCallback+0x54>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	3724      	adds	r7, #36	; 0x24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	240007bc 	.word	0x240007bc

08008bc4 <HAL_ETH_RxCpltCallback>:
}
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <HAL_ETH_RxCpltCallback+0x34>)
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <HAL_ETH_RxCpltCallback+0x34>)
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	4a07      	ldr	r2, [pc, #28]	; (8008bf8 <HAL_ETH_RxCpltCallback+0x34>)
 8008bdc:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8008be4:	4b04      	ldr	r3, [pc, #16]	; (8008bf8 <HAL_ETH_RxCpltCallback+0x34>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f003 ffb5 	bl	800cb58 <_nx_ip_driver_deferred_processing>
  }
}
 8008bee:	bf00      	nop
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	24000770 	.word	0x24000770

08008bfc <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8008c04:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <HAL_ETH_TxCpltCallback+0x34>)
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <HAL_ETH_TxCpltCallback+0x34>)
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f043 0304 	orr.w	r3, r3, #4
 8008c12:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <HAL_ETH_TxCpltCallback+0x34>)
 8008c14:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <HAL_ETH_TxCpltCallback+0x34>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f003 ff99 	bl	800cb58 <_nx_ip_driver_deferred_processing>
  }
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	24000770 	.word	0x24000770

08008c34 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d052      	beq.n	8008cec <_nx_arp_dynamic_entry_delete+0xb8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c46:	f3ef 8310 	mrs	r3, PRIMASK
 8008c4a:	613b      	str	r3, [r7, #16]
    return(posture);
 8008c4c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8008c4e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c50:	b672      	cpsid	i
    return(int_posture);
 8008c52:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8008c54:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d104      	bne.n	8008c6a <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	e014      	b.n	8008c94 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d104      	bne.n	8008c80 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	6952      	ldr	r2, [r2, #20]
 8008c7e:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	6992      	ldr	r2, [r2, #24]
 8008c88:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	6952      	ldr	r2, [r2, #20]
 8008c92:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2200      	movs	r2, #0
 8008c98:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3bec 	ldr.w	r3, [r3, #3052]	; 0xbec
 8008ca0:	1e5a      	subs	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8c3 2bec 	str.w	r2, [r3, #3052]	; 0xbec

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f383 8810 	msr	PRIMASK, r3
}
 8008cbe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 8008cc0:	e011      	b.n	8008ce6 <_nx_arp_dynamic_entry_delete+0xb2>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 8008ce0:	6978      	ldr	r0, [r7, #20]
 8008ce2:	f007 ff63 	bl	8010bac <_nx_packet_transmit_release>
        while (next_packet_ptr)
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1ea      	bne.n	8008cc2 <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3720      	adds	r7, #32
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	2100      	movs	r1, #0
 8008d08:	68b8      	ldr	r0, [r7, #8]
 8008d0a:	f011 fb0b 	bl	801a324 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a2d      	ldr	r2, [pc, #180]	; (8008dcc <_nx_arp_enable+0xd4>)
 8008d16:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1a:	091b      	lsrs	r3, r3, #4
 8008d1c:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	e00a      	b.n	8008d3a <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	3334      	adds	r3, #52	; 0x34
 8008d32:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	3301      	adds	r3, #1
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d3ef      	bcc.n	8008d24 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	61fb      	str	r3, [r7, #28]
 8008d4e:	e00a      	b.n	8008d66 <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	3b34      	subs	r3, #52	; 0x34
 8008d5e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	3301      	adds	r3, #1
 8008d64:	61fb      	str	r3, [r7, #28]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d3ef      	bcc.n	8008d50 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2234      	movs	r2, #52	; 0x34
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
 8008d78:	3b34      	subs	r3, #52	; 0x34
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	441a      	add	r2, r3
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c3 2be4 	str.w	r2, [r3, #3044]	; 0xbe4
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	f8c3 2be8 	str.w	r2, [r3, #3048]	; 0xbe8

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4a0a      	ldr	r2, [pc, #40]	; (8008dd0 <_nx_arp_enable+0xd8>)
 8008da6:	f8c3 2bfc 	str.w	r2, [r3, #3068]	; 0xbfc

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4a09      	ldr	r2, [pc, #36]	; (8008dd4 <_nx_arp_enable+0xdc>)
 8008dae:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <_nx_arp_enable+0xe0>)
 8008db6:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4a07      	ldr	r2, [pc, #28]	; (8008ddc <_nx_arp_enable+0xe4>)
 8008dbe:	f8c3 2bf8 	str.w	r2, [r3, #3064]	; 0xbf8

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8008dc2:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	4ec4ec4f 	.word	0x4ec4ec4f
 8008dd0:	080095cd 	.word	0x080095cd
 8008dd4:	080097cb 	.word	0x080097cb
 8008dd8:	08009485 	.word	0x08009485
 8008ddc:	08008de1 	.word	0x08008de1

08008de0 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	; 0x28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 80b4 	beq.w	8008f60 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 8008e02:	6a39      	ldr	r1, [r7, #32]
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7ff ff15 	bl	8008c34 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e0e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008e10:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008e12:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e14:	b672      	cpsid	i
    return(int_posture);
 8008e16:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 8008e18:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d014      	beq.n	8008e4c <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699a      	ldr	r2, [r3, #24]
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6a3a      	ldr	r2, [r7, #32]
 8008e48:	619a      	str	r2, [r3, #24]
 8008e4a:	e00b      	b.n	8008e64 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	6a3a      	ldr	r2, [r7, #32]
 8008e56:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	6a3a      	ldr	r2, [r7, #32]
 8008e5c:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6a3a      	ldr	r2, [r7, #32]
 8008e62:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d141      	bne.n	8008eee <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	6a3a      	ldr	r2, [r7, #32]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d104      	bne.n	8008e7e <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2be8 	str.w	r2, [r3, #3048]	; 0xbe8
 8008e7c:	e009      	b.n	8008e92 <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	6a3a      	ldr	r2, [r7, #32]
 8008e84:	6912      	ldr	r2, [r2, #16]
 8008e86:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	6a3a      	ldr	r2, [r7, #32]
 8008e8e:	68d2      	ldr	r2, [r2, #12]
 8008e90:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8d3 3be4 	ldr.w	r3, [r3, #3044]	; 0xbe4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	6a3a      	ldr	r2, [r7, #32]
 8008ea0:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	6a3a      	ldr	r2, [r7, #32]
 8008ea6:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a3a      	ldr	r2, [r7, #32]
 8008eac:	f8c3 2be4 	str.w	r2, [r3, #3044]	; 0xbe4
 8008eb0:	e015      	b.n	8008ede <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8d3 2be4 	ldr.w	r2, [r3, #3044]	; 0xbe4
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8d3 3be4 	ldr.w	r3, [r3, #3044]	; 0xbe4
 8008ec2:	691a      	ldr	r2, [r3, #16]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8d3 3be4 	ldr.w	r3, [r3, #3044]	; 0xbe4
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	6a3a      	ldr	r2, [r7, #32]
 8008ed2:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 3be4 	ldr.w	r3, [r3, #3044]	; 0xbe4
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
 8008eec:	e02c      	b.n	8008f48 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 8008ef4:	6a3a      	ldr	r2, [r7, #32]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d01f      	beq.n	8008f3a <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	6912      	ldr	r2, [r2, #16]
 8008f02:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	6a3a      	ldr	r2, [r7, #32]
 8008f0a:	68d2      	ldr	r2, [r2, #12]
 8008f0c:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 2be8 	ldr.w	r2, [r3, #3048]	; 0xbe8
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	6a3a      	ldr	r2, [r7, #32]
 8008f28:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	f8c3 2be8 	str.w	r2, [r3, #3048]	; 0xbe8
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 3bec 	ldr.w	r3, [r3, #3052]	; 0xbec
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8c3 2bec 	str.w	r2, [r3, #3052]	; 0xbec
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f383 8810 	msr	PRIMASK, r3
}
 8008f58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f5e:	e001      	b.n	8008f64 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 8008f60:	2317      	movs	r3, #23
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3728      	adds	r7, #40	; 0x28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b088      	sub	sp, #32
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f78:	f3ef 8310 	mrs	r3, PRIMASK
 8008f7c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008f80:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f82:	b672      	cpsid	i
    return(int_posture);
 8008f84:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8008f86:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d110      	bne.n	8008fb4 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f383 8810 	msr	PRIMASK, r3
}
 8008faa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8008fac:	6838      	ldr	r0, [r7, #0]
 8008fae:	f007 fd43 	bl	8010a38 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008fb2:	e02f      	b.n	8009014 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	; 0xbf0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d011      	beq.n	8008fe2 <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	f8c3 2bf4 	str.w	r2, [r3, #3060]	; 0xbf4
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f383 8810 	msr	PRIMASK, r3
}
 8008fe0:	e018      	b.n	8009014 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	f8c3 2bf4 	str.w	r2, [r3, #3060]	; 0xbf4
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	61da      	str	r2, [r3, #28]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f383 8810 	msr	PRIMASK, r3
}
 8009002:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 800900a:	2200      	movs	r2, #0
 800900c:	2110      	movs	r1, #16
 800900e:	4618      	mov	r0, r3
 8009010:	f00e fd14 	bl	8017a3c <_tx_event_flags_set>
    }
}
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <_nx_arp_packet_receive>:
/*                                            fixed compiler errors,      */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800901c:	b590      	push	{r4, r7, lr}
 800901e:	b097      	sub	sp, #92	; 0x5c
 8009020:	af02      	add	r7, sp, #8
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	2b1b      	cmp	r3, #27
 8009032:	d80a      	bhi.n	800904a <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009042:	6838      	ldr	r0, [r7, #0]
 8009044:	f007 fcf8 	bl	8010a38 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009048:	e217      	b.n	800947a <_nx_arp_packet_receive+0x45e>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8009050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009052:	3304      	adds	r3, #4
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009058:	3304      	adds	r3, #4
 800905a:	ba12      	rev	r2, r2
 800905c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800905e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009060:	3308      	adds	r3, #8
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009066:	3308      	adds	r3, #8
 8009068:	ba12      	rev	r2, r2
 800906a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800906c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800906e:	330c      	adds	r3, #12
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009074:	330c      	adds	r3, #12
 8009076:	ba12      	rev	r2, r2
 8009078:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800907a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907c:	3310      	adds	r3, #16
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009082:	3310      	adds	r3, #16
 8009084:	ba12      	rev	r2, r2
 8009086:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8009088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800908a:	3314      	adds	r3, #20
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009090:	3314      	adds	r3, #20
 8009092:	ba12      	rev	r2, r2
 8009094:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8009096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009098:	3318      	adds	r3, #24
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800909e:	3318      	adds	r3, #24
 80090a0:	ba12      	rev	r2, r2
 80090a2:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 80090a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090a6:	3304      	adds	r3, #4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 80090ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d00d      	beq.n	80090d0 <_nx_arp_packet_receive+0xb4>
 80090b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d00a      	beq.n	80090d0 <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 80090c8:	6838      	ldr	r0, [r7, #0]
 80090ca:	f007 fcb5 	bl	8010a38 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80090ce:	e1d4      	b.n	800947a <_nx_arp_packet_receive+0x45e>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 80090d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d2:	3308      	adds	r3, #8
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	0c1b      	lsrs	r3, r3, #16
 80090d8:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 80090da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090dc:	3308      	adds	r3, #8
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	041a      	lsls	r2, r3, #16
 80090e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e4:	330c      	adds	r3, #12
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	0c1b      	lsrs	r3, r3, #16
 80090ea:	4313      	orrs	r3, r2
 80090ec:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 80090ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f0:	330c      	adds	r3, #12
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	041a      	lsls	r2, r3, #16
 80090f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f8:	3310      	adds	r3, #16
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	0c1b      	lsrs	r3, r3, #16
 80090fe:	4313      	orrs	r3, r2
 8009100:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 8009102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f603 4234 	addw	r2, r3, #3124	; 0xc34
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d12e      	bne.n	8009186 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 800912c:	2b00      	cmp	r3, #0
 800912e:	d02a      	beq.n	8009186 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8009134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009136:	429a      	cmp	r2, r3
 8009138:	d007      	beq.n	800914a <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	2b00      	cmp	r3, #0
 800913e:	d122      	bne.n	8009186 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009146:	429a      	cmp	r2, r3
 8009148:	d11d      	bne.n	8009186 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009150:	429a      	cmp	r2, r3
 8009152:	d104      	bne.n	800915e <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8009158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800915a:	429a      	cmp	r2, r3
 800915c:	d00f      	beq.n	800917e <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00b      	beq.n	800917e <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	79db      	ldrb	r3, [r3, #7]
 800916e:	4619      	mov	r1, r3
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 800917e:	6838      	ldr	r0, [r7, #0]
 8009180:	f007 fc5a 	bl	8010a38 <_nx_packet_release>

        return;
 8009184:	e179      	b.n	800947a <_nx_arp_packet_receive+0x45e>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	2b00      	cmp	r3, #0
 800918a:	d040      	beq.n	800920e <_nx_arp_packet_receive+0x1f2>
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009192:	429a      	cmp	r2, r3
 8009194:	d13b      	bne.n	800920e <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800919e:	429a      	cmp	r2, r3
 80091a0:	d105      	bne.n	80091ae <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 80091a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d02b      	beq.n	8009206 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10a      	bne.n	80091ce <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091bc:	220a      	movs	r2, #10
 80091be:	641a      	str	r2, [r3, #64]	; 0x40

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c4:	461a      	mov	r2, r3
 80091c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f95b 	bl	8009484 <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	79db      	ldrb	r3, [r3, #7]
 80091de:	4619      	mov	r1, r3
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d006      	beq.n	8009206 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	4798      	blx	r3

                return;
 8009204:	e139      	b.n	800947a <_nx_arp_packet_receive+0x45e>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8009206:	6838      	ldr	r0, [r7, #0]
 8009208:	f007 fc16 	bl	8010a38 <_nx_packet_release>

        return;
 800920c:	e135      	b.n	800947a <_nx_arp_packet_receive+0x45e>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 800920e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009210:	2b01      	cmp	r3, #1
 8009212:	f040 8093 	bne.w	800933c <_nx_arp_packet_receive+0x320>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800921e:	429a      	cmp	r2, r3
 8009220:	f040 808c 	bne.w	800933c <_nx_arp_packet_receive+0x320>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3574 	ldr.w	r3, [r3, #1396]	; 0x574
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3578 	ldr.w	r3, [r3, #1400]	; 0x578
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8009240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009242:	3304      	adds	r3, #4
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b8e      	ldr	r3, [pc, #568]	; (8009480 <_nx_arp_packet_receive+0x464>)
 8009248:	4013      	ands	r3, r2
 800924a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800924c:	3204      	adds	r2, #4
 800924e:	f043 0302 	orr.w	r3, r3, #2
 8009252:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8009264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009266:	3308      	adds	r3, #8
 8009268:	430a      	orrs	r2, r1
 800926a:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 800927c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800927e:	330c      	adds	r3, #12
 8009280:	430a      	orrs	r2, r1
 8009282:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	0419      	lsls	r1, r3, #16
 800928c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800928e:	3310      	adds	r3, #16
 8009290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009292:	430a      	orrs	r2, r1
 8009294:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8009296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009298:	3314      	adds	r3, #20
 800929a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800929c:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 800929e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a0:	3318      	adds	r3, #24
 80092a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092a4:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80092a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a8:	3304      	adds	r3, #4
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ae:	3304      	adds	r3, #4
 80092b0:	ba12      	rev	r2, r2
 80092b2:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80092b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b6:	3308      	adds	r3, #8
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092bc:	3308      	adds	r3, #8
 80092be:	ba12      	rev	r2, r2
 80092c0:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80092c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c4:	330c      	adds	r3, #12
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ca:	330c      	adds	r3, #12
 80092cc:	ba12      	rev	r2, r2
 80092ce:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80092d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d2:	3310      	adds	r3, #16
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d8:	3310      	adds	r3, #16
 80092da:	ba12      	rev	r2, r2
 80092dc:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80092de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092e0:	3314      	adds	r3, #20
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092e6:	3314      	adds	r3, #20
 80092e8:	ba12      	rev	r2, r2
 80092ea:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80092ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ee:	3318      	adds	r3, #24
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092f4:	3318      	adds	r3, #24
 80092f6:	ba12      	rev	r2, r2
 80092f8:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	221c      	movs	r2, #28
 80092fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f103 021c 	add.w	r2, r3, #28
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8009310:	2306      	movs	r3, #6
 8009312:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 800931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931e:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009324:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932c:	f107 0208 	add.w	r2, r7, #8
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800933a:	e011      	b.n	8009360 <_nx_arp_packet_receive+0x344>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 800933c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933e:	2b01      	cmp	r3, #1
 8009340:	d107      	bne.n	8009352 <_nx_arp_packet_receive+0x336>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3574 	ldr.w	r3, [r3, #1396]	; 0x574
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
 8009350:	e006      	b.n	8009360 <_nx_arp_packet_receive+0x344>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 357c 	ldr.w	r3, [r3, #1404]	; 0x57c
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	0a1a      	lsrs	r2, r3, #8
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	4413      	add	r3, r2
 8009368:	f003 031f 	and.w	r3, r3, #31
 800936c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	2b00      	cmp	r3, #0
 8009376:	d03c      	beq.n	80093f2 <_nx_arp_packet_receive+0x3d6>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	0a1a      	lsrs	r2, r3, #8
 800937c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937e:	4413      	add	r3, r2
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8009396:	e02c      	b.n	80093f2 <_nx_arp_packet_receive+0x3d6>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8009398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939a:	6a1b      	ldr	r3, [r3, #32]
 800939c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939e:	429a      	cmp	r2, r3
 80093a0:	d117      	bne.n	80093d2 <_nx_arp_packet_receive+0x3b6>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 80093a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d127      	bne.n	80093fa <_nx_arp_packet_receive+0x3de>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 80093aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ae:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 80093b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b4:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 80093b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b8:	2200      	movs	r2, #0
 80093ba:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 80093bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093be:	2200      	movs	r2, #0
 80093c0:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 80093c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093c6:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 80093c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fa30 	bl	8009830 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 80093d0:	e014      	b.n	80093fc <_nx_arp_packet_receive+0x3e0>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 80093d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093dc:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d102      	bne.n	80093f2 <_nx_arp_packet_receive+0x3d6>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 80093f0:	e004      	b.n	80093fc <_nx_arp_packet_receive+0x3e0>
    while (arp_ptr)
 80093f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1cf      	bne.n	8009398 <_nx_arp_packet_receive+0x37c>
 80093f8:	e000      	b.n	80093fc <_nx_arp_packet_receive+0x3e0>
                break;
 80093fa:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 80093fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <_nx_arp_packet_receive+0x3ee>
    {
        _nx_packet_release(packet_ptr);
 8009404:	6838      	ldr	r0, [r7, #0]
 8009406:	f007 fb17 	bl	8010a38 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 800940a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800940c:	2b00      	cmp	r3, #0
 800940e:	d134      	bne.n	800947a <_nx_arp_packet_receive+0x45e>
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	2b00      	cmp	r3, #0
 8009414:	d031      	beq.n	800947a <_nx_arp_packet_receive+0x45e>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	0a1a      	lsrs	r2, r3, #8
 800941a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941c:	4413      	add	r3, r2
 800941e:	f003 031f 	and.w	r3, r3, #31
 8009422:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3bf8 	ldr.w	r3, [r3, #3064]	; 0xbf8
 800942a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800942c:	f502 7236 	add.w	r2, r2, #728	; 0x2d8
 8009430:	0092      	lsls	r2, r2, #2
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	440a      	add	r2, r1
 8009436:	1d11      	adds	r1, r2, #4
 8009438:	2200      	movs	r2, #0
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d11a      	bne.n	800947a <_nx_arp_packet_receive+0x45e>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009448:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8009456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800945a:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 800945c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009460:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8009462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009466:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8009468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946a:	2200      	movs	r2, #0
 800946c:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 800946e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009470:	2200      	movs	r2, #0
 8009472:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8009474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009478:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 800947a:	3754      	adds	r7, #84	; 0x54
 800947c:	46bd      	mov	sp, r7
 800947e:	bd90      	pop	{r4, r7, pc}
 8009480:	ffff0000 	.word	0xffff0000

08009484 <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08e      	sub	sp, #56	; 0x38
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <_nx_arp_packet_send+0x1c>
 8009496:	f04f 30ff 	mov.w	r0, #4294967295
 800949a:	f00f fd15 	bl	8018ec8 <_tx_thread_sleep>
 800949e:	e7fa      	b.n	8009496 <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 063c 	ldr.w	r0, [r3, #1596]	; 0x63c
 80094a6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80094aa:	2300      	movs	r3, #0
 80094ac:	222c      	movs	r2, #44	; 0x2c
 80094ae:	f006 ff23 	bl	80102f8 <_nx_packet_allocate>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f040 8083 	bne.w	80095c0 <_nx_arp_packet_send+0x13c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	635a      	str	r2, [r3, #52]	; 0x34

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	221c      	movs	r2, #28
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	3a1c      	subs	r2, #28
 80094dc:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 80094e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e6:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 80094ea:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 80094ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ee:	3304      	adds	r3, #4
 80094f0:	4a35      	ldr	r2, [pc, #212]	; (80095c8 <_nx_arp_packet_send+0x144>)
 80094f2:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8009500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009502:	3308      	adds	r3, #8
 8009504:	430a      	orrs	r2, r1
 8009506:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8009514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009516:	330c      	adds	r3, #12
 8009518:	430a      	orrs	r2, r1
 800951a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	695a      	ldr	r2, [r3, #20]
 8009520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009522:	3310      	adds	r3, #16
 8009524:	0412      	lsls	r2, r2, #16
 8009526:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8009528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952a:	3314      	adds	r3, #20
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	3318      	adds	r3, #24
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8009538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	ba1a      	rev	r2, r3
 800953e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009540:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	3304      	adds	r3, #4
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954a:	3304      	adds	r3, #4
 800954c:	ba12      	rev	r2, r2
 800954e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8009550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009552:	3308      	adds	r3, #8
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009558:	3308      	adds	r3, #8
 800955a:	ba12      	rev	r2, r2
 800955c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800955e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009560:	330c      	adds	r3, #12
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009566:	330c      	adds	r3, #12
 8009568:	ba12      	rev	r2, r2
 800956a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800956c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956e:	3310      	adds	r3, #16
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	3310      	adds	r3, #16
 8009576:	ba12      	rev	r2, r2
 8009578:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800957a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957c:	3314      	adds	r3, #20
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009582:	3314      	adds	r3, #20
 8009584:	ba12      	rev	r2, r2
 8009586:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8009588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958a:	3318      	adds	r3, #24
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009590:	3318      	adds	r3, #24
 8009592:	ba12      	rev	r2, r2
 8009594:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 800959a:	2305      	movs	r3, #5
 800959c:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80095a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095a6:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80095a8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ac:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b6:	f107 0210 	add.w	r2, r7, #16
 80095ba:	4610      	mov	r0, r2
 80095bc:	4798      	blx	r3
 80095be:	e000      	b.n	80095c2 <_nx_arp_packet_send+0x13e>
                return;
 80095c0:	bf00      	nop
}
 80095c2:	3738      	adds	r7, #56	; 0x38
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	06040001 	.word	0x06040001

080095cc <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	; 0x28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 80095da:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80095dc:	2300      	movs	r3, #0
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
 80095e0:	e0b1      	b.n	8009746 <_nx_arp_periodic_update+0x17a>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 80a7 	beq.w	800973a <_nx_arp_periodic_update+0x16e>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	1e5a      	subs	r2, r3, #1
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f040 809d 	bne.w	800973a <_nx_arp_periodic_update+0x16e>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	2b12      	cmp	r3, #18
 8009606:	f040 8088 	bne.w	800971a <_nx_arp_periodic_update+0x14e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800960a:	f3ef 8310 	mrs	r3, PRIMASK
 800960e:	613b      	str	r3, [r7, #16]
    return(posture);
 8009610:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009612:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009614:	b672      	cpsid	i
    return(int_posture);
 8009616:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 8009618:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d028      	beq.n	8009674 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	6a3a      	ldr	r2, [r7, #32]
 8009628:	429a      	cmp	r2, r3
 800962a:	d104      	bne.n	8009636 <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	e014      	b.n	8009660 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6a3a      	ldr	r2, [r7, #32]
 800963e:	429a      	cmp	r2, r3
 8009640:	d104      	bne.n	800964c <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	6a3a      	ldr	r2, [r7, #32]
 8009648:	6952      	ldr	r2, [r2, #20]
 800964a:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 8009650:	6a3a      	ldr	r2, [r7, #32]
 8009652:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8009654:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 800965a:	6a3a      	ldr	r2, [r7, #32]
 800965c:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 800965e:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 3bec 	ldr.w	r3, [r3, #3052]	; 0xbec
 8009666:	1e5a      	subs	r2, r3, #1
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8c3 2bec 	str.w	r2, [r3, #3052]	; 0xbec

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	2200      	movs	r2, #0
 8009672:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	6a3a      	ldr	r2, [r7, #32]
 800967a:	429a      	cmp	r2, r3
 800967c:	d02a      	beq.n	80096d4 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 8009682:	6a3a      	ldr	r2, [r7, #32]
 8009684:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8009686:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 800968c:	6a3a      	ldr	r2, [r7, #32]
 800968e:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8009690:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 8009698:	6a3a      	ldr	r2, [r7, #32]
 800969a:	429a      	cmp	r2, r3
 800969c:	d104      	bne.n	80096a8 <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8c3 2be8 	str.w	r2, [r3, #3048]	; 0xbe8
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 2be8 	ldr.w	r2, [r3, #3048]	; 0xbe8
                        arp_entry -> nx_arp_pool_next =
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 80096b8:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	6a3a      	ldr	r2, [r7, #32]
 80096c8:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 80096d0:	6a3a      	ldr	r2, [r7, #32]
 80096d2:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d8:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	2200      	movs	r2, #0
 80096de:	631a      	str	r2, [r3, #48]	; 0x30
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f383 8810 	msr	PRIMASK, r3
}
 80096ea:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 80096ec:	e011      	b.n	8009712 <_nx_arp_periodic_update+0x146>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	2200      	movs	r2, #0
 80096fc:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 800970c:	6978      	ldr	r0, [r7, #20]
 800970e:	f007 fa4d 	bl	8010bac <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1ea      	bne.n	80096ee <_nx_arp_periodic_update+0x122>
 8009718:	e00f      	b.n	800973a <_nx_arp_periodic_update+0x16e>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	220a      	movs	r2, #10
 8009728:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	6a19      	ldr	r1, [r3, #32]
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009732:	461a      	mov	r2, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff fea5 	bl	8009484 <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	3301      	adds	r3, #1
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 3bec 	ldr.w	r3, [r3, #3052]	; 0xbec
 800974c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974e:	429a      	cmp	r2, r3
 8009750:	f4ff af47 	bcc.w	80095e2 <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009754:	2300      	movs	r3, #0
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
 8009758:	e02f      	b.n	80097ba <_nx_arp_periodic_update+0x1ee>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	214c      	movs	r1, #76	; 0x4c
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	4413      	add	r3, r2
 8009766:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01e      	beq.n	80097ae <_nx_arp_periodic_update+0x1e2>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	214c      	movs	r1, #76	; 0x4c
 8009776:	fb01 f303 	mul.w	r3, r1, r3
 800977a:	4413      	add	r3, r2
 800977c:	f603 4374 	addw	r3, r3, #3188	; 0xc74
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d015      	beq.n	80097b2 <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	214c      	movs	r1, #76	; 0x4c
 800978c:	fb01 f303 	mul.w	r3, r1, r3
 8009790:	4413      	add	r3, r2
 8009792:	f603 4374 	addw	r3, r3, #3188	; 0xc74
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	1e5a      	subs	r2, r3, #1
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	204c      	movs	r0, #76	; 0x4c
 80097a0:	fb00 f303 	mul.w	r3, r0, r3
 80097a4:	440b      	add	r3, r1
 80097a6:	f603 4374 	addw	r3, r3, #3188	; 0xc74
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	e002      	b.n	80097b4 <_nx_arp_periodic_update+0x1e8>
            continue;
 80097ae:	bf00      	nop
 80097b0:	e000      	b.n	80097b4 <_nx_arp_periodic_update+0x1e8>
            continue;
 80097b2:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	3301      	adds	r3, #1
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0cc      	beq.n	800975a <_nx_arp_periodic_update+0x18e>
    }
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	3728      	adds	r7, #40	; 0x28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b088      	sub	sp, #32
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80097d2:	e023      	b.n	800981c <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097d4:	f3ef 8310 	mrs	r3, PRIMASK
 80097d8:	617b      	str	r3, [r7, #20]
    return(posture);
 80097da:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80097dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80097de:	b672      	cpsid	i
    return(int_posture);
 80097e0:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 80097e2:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	; 0xbf0
 80097ea:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	; 0xbf0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f8c3 2bf4 	str.w	r2, [r3, #3060]	; 0xbf4
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f383 8810 	msr	PRIMASK, r3
}
 8009812:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 8009814:	69b9      	ldr	r1, [r7, #24]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff fc00 	bl	800901c <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	; 0xbf0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1d6      	bne.n	80097d4 <_nx_arp_queue_process+0xa>
    }
}
 8009826:	bf00      	nop
 8009828:	bf00      	nop
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b090      	sub	sp, #64	; 0x40
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800983e:	f3ef 8310 	mrs	r3, PRIMASK
 8009842:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8009846:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009848:	b672      	cpsid	i
    return(int_posture);
 800984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 800984c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985a:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2200      	movs	r2, #0
 8009860:	631a      	str	r2, [r3, #48]	; 0x30
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	f383 8810 	msr	PRIMASK, r3
}
 800986c:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 800986e:	e052      	b.n	8009916 <_nx_arp_queue_send+0xe6>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 8009870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009872:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 8009874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800987a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987c:	2200      	movs	r2, #0
 800987e:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	635a      	str	r2, [r3, #52]	; 0x34

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8009898:	2300      	movs	r3, #0
 800989a:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 800989c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989e:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80098a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80098a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d917      	bls.n	80098e4 <_nx_arp_queue_send+0xb4>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 379c 	ldr.w	r3, [r3, #1948]	; 0x79c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d007      	beq.n	80098ce <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 379c 	ldr.w	r3, [r3, #1948]	; 0x79c
 80098c4:	f107 0208 	add.w	r2, r7, #8
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
 80098cc:	e023      	b.n	8009916 <_nx_arp_queue_send+0xe6>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 80098dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80098de:	f007 f965 	bl	8010bac <_nx_packet_transmit_release>
 80098e2:	e018      	b.n	8009916 <_nx_arp_queue_send+0xe6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 80098f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	4413      	add	r3, r2
 80098fe:	f1a3 0214 	sub.w	r2, r3, #20
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8009908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800990e:	f107 0208 	add.w	r2, r7, #8
 8009912:	4610      	mov	r0, r2
 8009914:	4798      	blx	r3
    while (queued_list_head)
 8009916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1a9      	bne.n	8009870 <_nx_arp_queue_send+0x40>
        }
    }
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	3740      	adds	r7, #64	; 0x40
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a09      	ldr	r2, [pc, #36]	; (8009958 <_nx_icmp_enable+0x30>)
 8009934:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a08      	ldr	r2, [pc, #32]	; (800995c <_nx_icmp_enable+0x34>)
 800993c:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a07      	ldr	r2, [pc, #28]	; (8009960 <_nx_icmp_enable+0x38>)
 8009944:	f8c3 2874 	str.w	r2, [r3, #2164]	; 0x874

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8009948:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800994a:	4618      	mov	r0, r3
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	08009a61 	.word	0x08009a61
 800995c:	080099a1 	.word	0x080099a1
 8009960:	08009abf 	.word	0x08009abf

08009964 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 8009974:	2b00      	cmp	r3, #0
 8009976:	d006      	beq.n	8009986 <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
        return;
 8009984:	e009      	b.n	800999a <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 8009994:	6838      	ldr	r0, [r7, #0]
 8009996:	f007 f84f 	bl	8010a38 <_nx_packet_release>
}
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b07      	cmp	r3, #7
 80099be:	d80a      	bhi.n	80099d6 <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 80099ce:	6838      	ldr	r0, [r7, #0]
 80099d0:	f007 f832 	bl	8010a38 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 80099d4:	e03c      	b.n	8009a50 <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099d6:	f3ef 8305 	mrs	r3, IPSR
 80099da:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80099dc:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 80099de:	4b1e      	ldr	r3, [pc, #120]	; (8009a58 <_nx_icmp_packet_receive+0xb8>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d106      	bne.n	80099f6 <_nx_icmp_packet_receive+0x56>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f203 629c 	addw	r2, r3, #1692	; 0x69c
 80099ee:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <_nx_icmp_packet_receive+0xbc>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d028      	beq.n	8009a48 <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099f6:	f3ef 8310 	mrs	r3, PRIMASK
 80099fa:	617b      	str	r3, [r7, #20]
    return(posture);
 80099fc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80099fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a00:	b672      	cpsid	i
    return(int_posture);
 8009a02:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8009a04:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 2888 	ldr.w	r2, [r3, #2184]	; 0x888
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	61da      	str	r2, [r3, #28]
 8009a1a:	e002      	b.n	8009a22 <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	f8c3 2888 	str.w	r2, [r3, #2184]	; 0x888
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f383 8810 	msr	PRIMASK, r3
}
 8009a34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2104      	movs	r1, #4
 8009a40:	4618      	mov	r0, r3
 8009a42:	f00d fffb 	bl	8017a3c <_tx_event_flags_set>
 8009a46:	e003      	b.n	8009a50 <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff ff8a 	bl	8009964 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 8009a50:	3720      	adds	r7, #32
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	2400008c 	.word	0x2400008c
 8009a5c:	24000874 	.word	0x24000874

08009a60 <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a68:	f3ef 8310 	mrs	r3, PRIMASK
 8009a6c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009a70:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a72:	b672      	cpsid	i
    return(int_posture);
 8009a74:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 8009a76:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 8009a7e:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 2888 	str.w	r2, [r3, #2184]	; 0x888
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f383 8810 	msr	PRIMASK, r3
}
 8009a92:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8009a94:	e00b      	b.n	8009aae <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8009aa6:	6979      	ldr	r1, [r7, #20]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ff5b 	bl	8009964 <_nx_icmp_packet_process>
    while (queue_head)
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1f0      	bne.n	8009a96 <_nx_icmp_queue_process+0x36>
    }
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	3720      	adds	r7, #32
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b086      	sub	sp, #24
 8009ac2:	af02      	add	r7, sp, #8
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	60fb      	str	r3, [r7, #12]
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009adc:	6838      	ldr	r0, [r7, #0]
 8009ade:	f002 fb9e 	bl	800c21e <_nx_ip_checksum_compute>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	817b      	strh	r3, [r7, #10]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 8009ae6:	897b      	ldrh	r3, [r7, #10]
 8009ae8:	43db      	mvns	r3, r3
 8009aea:	817b      	strh	r3, [r7, #10]

        /* Determine if the checksum is valid.  */
        if (checksum)
 8009aec:	897b      	ldrh	r3, [r7, #10]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d011      	beq.n	8009b16 <_nx_icmpv4_packet_process+0x58>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 8009b0e:	6838      	ldr	r0, [r7, #0]
 8009b10:	f006 ff92 	bl	8010a38 <_nx_packet_release>
            return;
 8009b14:	e01b      	b.n	8009b4e <_nx_icmpv4_packet_process+0x90>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <_nx_icmpv4_packet_process+0x6a>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f817 	bl	8009b54 <_nx_icmpv4_process_echo_reply>
 8009b26:	e012      	b.n	8009b4e <_nx_icmpv4_packet_process+0x90>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2b08      	cmp	r3, #8
 8009b2e:	d104      	bne.n	8009b3a <_nx_icmpv4_packet_process+0x7c>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f8cc 	bl	8009cd0 <_nx_icmpv4_process_echo_request>
 8009b38:	e009      	b.n	8009b4e <_nx_icmpv4_packet_process+0x90>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 8009b48:	6838      	ldr	r0, [r7, #0]
 8009b4a:	f006 ff75 	bl	8010a38 <_nx_packet_release>
    }
}
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b090      	sub	sp, #64	; 0x40
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 3604 	ldr.w	r3, [r3, #1540]	; 0x604
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 8009b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b74:	88db      	ldrh	r3, [r3, #6]
 8009b76:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8009b78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009b7a:	ba5b      	rev16	r3, r3
 8009b7c:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8009b86:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b88:	b672      	cpsid	i
    return(int_posture);
 8009b8a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 8009b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 8009b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
 8009b9c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009b9e:	4b4b      	ldr	r3, [pc, #300]	; (8009ccc <_nx_icmpv4_process_echo_reply+0x178>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	4a49      	ldr	r2, [pc, #292]	; (8009ccc <_nx_icmpv4_process_echo_reply+0x178>)
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bae:	f383 8810 	msr	PRIMASK, r3
}
 8009bb2:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 8009bb4:	e05e      	b.n	8009c74 <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 8009bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d155      	bne.n	8009c6e <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc6:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009bc8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009bca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009bcc:	b672      	cpsid	i
    return(int_posture);
 8009bce:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 8009bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d104      	bne.n	8009be6 <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8c3 288c 	str.w	r2, [r3, #2188]	; 0x88c
 8009be4:	e014      	b.n	8009c10 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 8009bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d104      	bne.n	8009bfc <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8c3 288c 	str.w	r2, [r3, #2188]	; 0x88c
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8009c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c02:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009c04:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8009c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c0c:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009c0e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
 8009c16:	1e5a      	subs	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8c3 2890 	str.w	r2, [r3, #2192]	; 0x890

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c20:	2200      	movs	r2, #0
 8009c22:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009c24:	4b29      	ldr	r3, [pc, #164]	; (8009ccc <_nx_icmpv4_process_echo_reply+0x178>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	4a28      	ldr	r2, [pc, #160]	; (8009ccc <_nx_icmpv4_process_echo_reply+0x178>)
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c30:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f383 8810 	msr	PRIMASK, r3
}
 8009c38:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	f1a3 0208 	sub.w	r2, r3, #8
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f103 0208 	add.w	r2, r3, #8
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8009c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8009c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8009c66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009c68:	f00f f9e8 	bl	801903c <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 8009c6c:	e007      	b.n	8009c7e <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c72:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	1e5a      	subs	r2, r3, #1
 8009c78:	63ba      	str	r2, [r7, #56]	; 0x38
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d19b      	bne.n	8009bb6 <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d009      	beq.n	8009c98 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009c92:	6838      	ldr	r0, [r7, #0]
 8009c94:	f006 fed0 	bl	8010a38 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c98:	f3ef 8310 	mrs	r3, PRIMASK
 8009c9c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009ca0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ca2:	b672      	cpsid	i
    return(int_posture);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8009ca8:	4b08      	ldr	r3, [pc, #32]	; (8009ccc <_nx_icmpv4_process_echo_reply+0x178>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	4a07      	ldr	r2, [pc, #28]	; (8009ccc <_nx_icmpv4_process_echo_reply+0x178>)
 8009cb0:	6013      	str	r3, [r2, #0]
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f383 8810 	msr	PRIMASK, r3
}
 8009cbc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009cbe:	f00f f983 	bl	8018fc8 <_tx_thread_system_preempt_check>
}
 8009cc2:	bf00      	nop
 8009cc4:	3740      	adds	r7, #64	; 0x40
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	2400090c 	.word	0x2400090c

08009cd0 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08c      	sub	sp, #48	; 0x30
 8009cd4:	af04      	add	r7, sp, #16
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	61fb      	str	r3, [r7, #28]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce8:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	ba5b      	rev16	r3, r3
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	885b      	ldrh	r3, [r3, #2]
 8009d0e:	617b      	str	r3, [r7, #20]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 8009d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d14:	613b      	str	r3, [r7, #16]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	0c1a      	lsrs	r2, r3, #16
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	4413      	add	r3, r2
 8009d30:	617b      	str	r3, [r7, #20]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	0c1a      	lsrs	r2, r3, #16
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	4413      	add	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	43db      	mvns	r3, r3
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	885b      	ldrh	r3, [r3, #2]
 8009d4e:	ba5b      	rev16	r3, r3
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	805a      	strh	r2, [r3, #2]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8009d60:	f107 030c 	add.w	r3, r7, #12
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f003 fb67 	bl	800d438 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	9303      	str	r3, [sp, #12]
 8009d80:	2300      	movs	r3, #0
 8009d82:	9302      	str	r3, [sp, #8]
 8009d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	2380      	movs	r3, #128	; 0x80
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f003 fad3 	bl	800d33e <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 8009d98:	bf00      	nop
 8009d9a:	3720      	adds	r7, #32
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b094      	sub	sp, #80	; 0x50
 8009da4:	af04      	add	r7, sp, #16
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	613b      	str	r3, [r7, #16]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 8100 	beq.w	8009fbe <_nx_icmpv4_send_error_message+0x21e>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 8009dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8009dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	f000 80f3 	beq.w	8009fc2 <_nx_icmpv4_send_error_message+0x222>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8009de4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009de8:	f000 80eb 	beq.w	8009fc2 <_nx_icmpv4_send_error_message+0x222>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	691a      	ldr	r2, [r3, #16]
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d10b      	bne.n	8009e16 <_nx_icmpv4_send_error_message+0x76>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	691a      	ldr	r2, [r3, #16]
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	43db      	mvns	r3, r3
 8009e08:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 8009e10:	429a      	cmp	r2, r3
 8009e12:	f000 80d8 	beq.w	8009fc6 <_nx_icmpv4_send_error_message+0x226>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f040 80d3 	bne.w	8009fca <_nx_icmpv4_send_error_message+0x22a>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 80d0 	beq.w	8009fce <_nx_icmpv4_send_error_message+0x22e>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8009e32:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009e36:	d304      	bcc.n	8009e42 <_nx_icmpv4_send_error_message+0xa2>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f280 80c6 	bge.w	8009fce <_nx_icmpv4_send_error_message+0x22e>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8009e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e44:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8009e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4a:	f000 80c0 	beq.w	8009fce <_nx_icmpv4_send_error_message+0x22e>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8009e56:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009e5a:	f000 80b8 	beq.w	8009fce <_nx_icmpv4_send_error_message+0x22e>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8d3 063c 	ldr.w	r0, [r3, #1596]	; 0x63c
 8009e64:	f107 0114 	add.w	r1, r7, #20
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2224      	movs	r2, #36	; 0x24
 8009e6c:	f006 fa44 	bl	80102f8 <_nx_packet_allocate>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f040 80ad 	bne.w	8009fd2 <_nx_icmpv4_send_error_message+0x232>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	623b      	str	r3, [r7, #32]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	0e1b      	lsrs	r3, r3, #24
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	061a      	lsls	r2, r3, #24
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	ba1a      	rev	r2, r3
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	0e1b      	lsrs	r3, r3, #24
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	61fb      	str	r3, [r7, #28]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	3302      	adds	r3, #2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009eca:	3208      	adds	r2, #8
 8009ecc:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	6899      	ldr	r1, [r3, #8]
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	440a      	add	r2, r1
 8009eda:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee0:	637b      	str	r3, [r7, #52]	; 0x34

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8009eec:	e00a      	b.n	8009f04 <_nx_icmpv4_send_error_message+0x164>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8009eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	ba1a      	rev	r2, r3
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef6:	601a      	str	r2, [r3, #0]
        src_packet++;
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	3304      	adds	r3, #4
 8009efc:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	3301      	adds	r3, #1
 8009f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d9f1      	bls.n	8009eee <_nx_icmpv4_send_error_message+0x14e>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8009f10:	e00a      	b.n	8009f28 <_nx_icmpv4_send_error_message+0x188>
    {

        *dest_packet++ = *src_packet++;
 8009f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f14:	1d13      	adds	r3, r2, #4
 8009f16:	637b      	str	r3, [r7, #52]	; 0x34
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	1d19      	adds	r1, r3, #4
 8009f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f1e:	6812      	ldr	r2, [r2, #0]
 8009f20:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8009f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f24:	3b04      	subs	r3, #4
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1f1      	bne.n	8009f12 <_nx_icmpv4_send_error_message+0x172>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f32:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009f34:	2300      	movs	r3, #0
 8009f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f38:	e00a      	b.n	8009f50 <_nx_icmpv4_send_error_message+0x1b0>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	ba1a      	rev	r2, r3
 8009f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f42:	601a      	str	r2, [r3, #0]
        src_packet++;
 8009f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f46:	3304      	adds	r3, #4
 8009f48:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d9f1      	bls.n	8009f3a <_nx_icmpv4_send_error_message+0x19a>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f103 0234 	add.w	r2, r3, #52	; 0x34
    _nx_ip_route_find(ip_ptr, src_ip,
 8009f64:	f107 0310 	add.w	r3, r7, #16
 8009f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f003 fa64 	bl	800d438 <_nx_ip_route_find>
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8009f70:	6978      	ldr	r0, [r7, #20]
                                           (UINT)pkt_ptr -> nx_packet_length,
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8009f76:	2300      	movs	r3, #0
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009f80:	f002 f94d 	bl	800c21e <_nx_ip_checksum_compute>
 8009f84:	4603      	mov	r3, r0
 8009f86:	837b      	strh	r3, [r7, #26]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 8009f88:	8b7b      	ldrh	r3, [r7, #26]
 8009f8a:	43db      	mvns	r3, r3
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	885b      	ldrh	r3, [r3, #2]
 8009f96:	ba5b      	rev16	r3, r3
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	805a      	strh	r2, [r3, #2]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8009f9e:	6979      	ldr	r1, [r7, #20]
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9302      	str	r3, [sp, #8]
 8009fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	23ff      	movs	r3, #255	; 0xff
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f003 f9c1 	bl	800d33e <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 8009fbc:	e00a      	b.n	8009fd4 <_nx_icmpv4_send_error_message+0x234>
        return;
 8009fbe:	bf00      	nop
 8009fc0:	e008      	b.n	8009fd4 <_nx_icmpv4_send_error_message+0x234>
        return;
 8009fc2:	bf00      	nop
 8009fc4:	e006      	b.n	8009fd4 <_nx_icmpv4_send_error_message+0x234>
        return;
 8009fc6:	bf00      	nop
 8009fc8:	e004      	b.n	8009fd4 <_nx_icmpv4_send_error_message+0x234>
        return;
 8009fca:	bf00      	nop
 8009fcc:	e002      	b.n	8009fd4 <_nx_icmpv4_send_error_message+0x234>
        return;
 8009fce:	bf00      	nop
 8009fd0:	e000      	b.n	8009fd4 <_nx_icmpv4_send_error_message+0x234>
        return;
 8009fd2:	bf00      	nop
}
 8009fd4:	3740      	adds	r7, #64	; 0x40
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <_nx_icmpv6_DAD_clear_NDCache_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
void _nx_icmpv6_DAD_clear_NDCache_entry(NX_IP *ip_ptr, ULONG *ip_addr)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b084      	sub	sp, #16
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]

ND_CACHE_ENTRY *NDCacheEntry;

    /* Find the ND CACHE entry.  */
    if (_nx_nd_cache_find_entry(ip_ptr, ip_addr, &NDCacheEntry) == NX_SUCCESS)
 8009fe4:	f107 030c 	add.w	r3, r7, #12
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f006 f861 	bl	80100b4 <_nx_nd_cache_find_entry>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d103      	bne.n	800a000 <_nx_icmpv6_DAD_clear_NDCache_entry+0x26>
    {

        /*lint -e{644} suppress variable might not be initialized, since "NDCacheEntry" was initialized in _nx_nd_cache_find_entry. */
        NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INVALID;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	765a      	strb	r2, [r3, #25]
    }

    return;
 8009ffe:	bf00      	nop
 800a000:	bf00      	nop
}
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <_nx_icmpv6_DAD_failure>:
/*                                                                        */
/**************************************************************************/

#ifndef NX_DISABLE_IPV6_DAD
VOID _nx_icmpv6_DAD_failure(NX_IP *ip_ptr, NXD_IPV6_ADDRESS *ipv6_address)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
UINT              ipv6_addr_index;
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */
NXD_IPV6_ADDRESS *address_ptr;

    /* Set the interface to an invalid state. */
    ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_UNKNOWN;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2200      	movs	r2, #0
 800a016:	709a      	strb	r2, [r3, #2]
    ipv6_address -> nxd_ipv6_address_valid = NX_FALSE;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]

    /* Indicate the DAD process is disabled. */
    ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit = 0;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2200      	movs	r2, #0
 800a022:	771a      	strb	r2, [r3, #28]
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */

    /* Remove address from interface. */
    if (ipv6_address == ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d105      	bne.n	800a03c <_nx_icmpv6_DAD_failure+0x34>
    {
        ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head = ipv6_address -> nxd_ipv6_address_next;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	6992      	ldr	r2, [r2, #24]
 800a038:	621a      	str	r2, [r3, #32]
            {
                address_ptr -> nxd_ipv6_address_next = ipv6_address -> nxd_ipv6_address_next;
            }
        }
    }
}
 800a03a:	e013      	b.n	800a064 <_nx_icmpv6_DAD_failure+0x5c>
        for (address_ptr = ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e00b      	b.n	800a05e <_nx_icmpv6_DAD_failure+0x56>
            if (address_ptr -> nxd_ipv6_address_next == ipv6_address)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d103      	bne.n	800a058 <_nx_icmpv6_DAD_failure+0x50>
                address_ptr -> nxd_ipv6_address_next = ipv6_address -> nxd_ipv6_address_next;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	699a      	ldr	r2, [r3, #24]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	619a      	str	r2, [r3, #24]
             address_ptr = address_ptr -> nxd_ipv6_address_next)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	60fb      	str	r3, [r7, #12]
        for (address_ptr = ipv6_address -> nxd_ipv6_address_attached -> nxd_interface_ipv6_address_list_head;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1f0      	bne.n	800a046 <_nx_icmpv6_DAD_failure+0x3e>
}
 800a064:	bf00      	nop
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <_nx_icmpv6_dest_table_add>:
/**************************************************************************/

UINT _nx_icmpv6_dest_table_add(NX_IP *ip_ptr, ULONG *destination_address,
                               NX_IPV6_DESTINATION_ENTRY **dest_entry_ptr, ULONG *next_hop,
                               ULONG path_mtu, ULONG mtu_timeout, NXD_IPV6_ADDRESS *ipv6_address)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08a      	sub	sp, #40	; 0x28
 800a074:	af02      	add	r7, sp, #8
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]

UINT i, table_size;
UINT status;

    /* Pointers must not be NULL. */
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NX_NULL) && (next_hop != NX_NULL));
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d005      	beq.n	800a090 <_nx_icmpv6_dest_table_add+0x20>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <_nx_icmpv6_dest_table_add+0x20>
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d104      	bne.n	800a09a <_nx_icmpv6_dest_table_add+0x2a>
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	f00e ff18 	bl	8018ec8 <_tx_thread_sleep>
 800a098:	e7fa      	b.n	800a090 <_nx_icmpv6_dest_table_add+0x20>

    /* Check if destination table already exist. */
    status = _nx_icmpv6_dest_table_find(ip_ptr, destination_address, dest_entry_ptr, path_mtu, mtu_timeout);
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	68b9      	ldr	r1, [r7, #8]
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f000 f8b2 	bl	800a20e <_nx_icmpv6_dest_table_find>
 800a0aa:	61b8      	str	r0, [r7, #24]

    /* Check status.  */
    if (status == NX_SUCCESS)
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d116      	bne.n	800a0e0 <_nx_icmpv6_dest_table_add+0x70>
    {

        /* Check if the next hop address is same.  */
        if (CHECK_IPV6_ADDRESSES_SAME(next_hop, (*dest_entry_ptr) -> nx_ipv6_destination_entry_next_hop))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3314      	adds	r3, #20
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6838      	ldr	r0, [r7, #0]
 800a0bc:	f005 fb53 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <_nx_icmpv6_dest_table_add+0x5a>
        {

            /* Same next hop address. Return success.  */
            return(NX_SUCCESS);
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e09d      	b.n	800a206 <_nx_icmpv6_dest_table_add+0x196>
            path_mtu = (*dest_entry_ptr) -> nx_ipv6_destination_entry_path_mtu;
            mtu_timeout = (*dest_entry_ptr) -> nx_ipv6_destination_entry_MTU_timer_tick;
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

            /* Next hop is different. Delete this destination table and add new entry.  */
            (*dest_entry_ptr) -> nx_ipv6_destination_entry_valid = 0;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]

            /* Decrease the count of available destinations. */
            ip_ptr -> nx_ipv6_destination_table_size--;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800a0d8:	1e5a      	subs	r2, r3, #1
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        }
    }

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800a0e6:	617b      	str	r3, [r7, #20]

    /* There is no invalid destination in table. */
    if (table_size == NX_IPV6_DESTINATION_TABLE_SIZE)
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	2b08      	cmp	r3, #8
 800a0ec:	d101      	bne.n	800a0f2 <_nx_icmpv6_dest_table_add+0x82>
    {
        return(NX_NOT_SUCCESSFUL);
 800a0ee:	2343      	movs	r3, #67	; 0x43
 800a0f0:	e089      	b.n	800a206 <_nx_icmpv6_dest_table_add+0x196>
    }

    /* Initialize the pointer to the table location where we will update/add information. */
    *dest_entry_ptr = NX_NULL;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]

    /* Go through the table to find an empty slot. */
    for (i = 0; i < NX_IPV6_DESTINATION_TABLE_SIZE; i++)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	e00d      	b.n	800a11a <_nx_icmpv6_dest_table_add+0xaa>
    {

        /* Is this slot empty? */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a0fe:	68f9      	ldr	r1, [r7, #12]
 800a100:	69fa      	ldr	r2, [r7, #28]
 800a102:	4613      	mov	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	00db      	lsls	r3, r3, #3
 800a10a:	440b      	add	r3, r1
 800a10c:	3390      	adds	r3, #144	; 0x90
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d006      	beq.n	800a122 <_nx_icmpv6_dest_table_add+0xb2>
    for (i = 0; i < NX_IPV6_DESTINATION_TABLE_SIZE; i++)
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	3301      	adds	r3, #1
 800a118:	61fb      	str	r3, [r7, #28]
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	2b07      	cmp	r3, #7
 800a11e:	d9ee      	bls.n	800a0fe <_nx_icmpv6_dest_table_add+0x8e>
 800a120:	e000      	b.n	800a124 <_nx_icmpv6_dest_table_add+0xb4>
        {
            /* Yes; we can use it for adding a new entry. */
            /* Have found an empty slot. */
            break;
 800a122:	bf00      	nop
        }
    }

    /* Destination is not empty so i must be less than table size. */
    NX_ASSERT(i < NX_IPV6_DESTINATION_TABLE_SIZE);
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	2b07      	cmp	r3, #7
 800a128:	d904      	bls.n	800a134 <_nx_icmpv6_dest_table_add+0xc4>
 800a12a:	f04f 30ff 	mov.w	r0, #4294967295
 800a12e:	f00e fecb 	bl	8018ec8 <_tx_thread_sleep>
 800a132:	e7fa      	b.n	800a12a <_nx_icmpv6_dest_table_add+0xba>
       matching entry, so we handle it separately.
     */

    /* Clear out any previous data from this slot. */
    /*lint -e{669} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    memset(&ip_ptr -> nx_ipv6_destination_table[i], 0, sizeof(NX_IPV6_DESTINATION_ENTRY));
 800a134:	69fa      	ldr	r2, [r7, #28]
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	3390      	adds	r3, #144	; 0x90
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4413      	add	r3, r2
 800a144:	2228      	movs	r2, #40	; 0x28
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f010 f8eb 	bl	801a324 <memset>

    /* Fill in the newly created table entry with the supplied and/or default information. */
    COPY_IPV6_ADDRESS(destination_address, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address);
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	00db      	lsls	r3, r3, #3
 800a158:	3390      	adds	r3, #144	; 0x90
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4413      	add	r3, r2
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	68b8      	ldr	r0, [r7, #8]
 800a164:	f005 fb64 	bl	800f830 <COPY_IPV6_ADDRESS>

    /* Add next hop information to the entry. */
    COPY_IPV6_ADDRESS(next_hop, ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop);
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	4613      	mov	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	33a0      	adds	r3, #160	; 0xa0
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4413      	add	r3, r2
 800a178:	3304      	adds	r3, #4
 800a17a:	4619      	mov	r1, r3
 800a17c:	6838      	ldr	r0, [r7, #0]
 800a17e:	f005 fb57 	bl	800f830 <COPY_IPV6_ADDRESS>

    /* Attempt to find the matching entry in the cache table. NetX Duo will need to know
       how to get a packet to the next hop, not just the destination! */
    status = _nx_nd_cache_find_entry(ip_ptr, next_hop, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	4613      	mov	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	33b0      	adds	r3, #176	; 0xb0
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4413      	add	r3, r2
 800a192:	3304      	adds	r3, #4
 800a194:	461a      	mov	r2, r3
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f005 ff8b 	bl	80100b4 <_nx_nd_cache_find_entry>
 800a19e:	61b8      	str	r0, [r7, #24]

    /* Did not find the matching entry. Try to add one. */
    if (status)
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d013      	beq.n	800a1ce <_nx_icmpv6_dest_table_add+0x15e>
    {
        status = _nx_nd_cache_add_entry(ip_ptr, next_hop, ipv6_address, &ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry);
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	33b0      	adds	r3, #176	; 0xb0
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f005 fd46 	bl	800fc4e <_nx_nd_cache_add_entry>
 800a1c2:	61b8      	str	r0, [r7, #24]

        /* Failed to add new entry. Return. */
        if (status)
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <_nx_icmpv6_dest_table_add+0x15e>
        {
            return(NX_NOT_SUCCESSFUL);
 800a1ca:	2343      	movs	r3, #67	; 0x43
 800a1cc:	e01b      	b.n	800a206 <_nx_icmpv6_dest_table_add+0x196>
        }
    }


    /* Validate this entry to ensure it will not be overwritten with new entries. */
    ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 1;
 800a1ce:	68f9      	ldr	r1, [r7, #12]
 800a1d0:	69fa      	ldr	r2, [r7, #28]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	440b      	add	r3, r1
 800a1dc:	3390      	adds	r3, #144	; 0x90
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]

    /* Update the count of destinations currently in the table. */
    ip_ptr -> nx_ipv6_destination_table_size++;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NX_PARAMETER_NOT_USED(path_mtu);
    NX_PARAMETER_NOT_USED(mtu_timeout);
#endif  /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

    /* Set the table location pointer to the entry we just added/updated. */
    *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	4413      	add	r3, r2
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	3390      	adds	r3, #144	; 0x90
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	441a      	add	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	601a      	str	r2, [r3, #0]

    return(NX_SUCCESS);
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <_nx_icmpv6_dest_table_find>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_icmpv6_dest_table_find(NX_IP *ip_ptr, ULONG *destination_address, NX_IPV6_DESTINATION_ENTRY **dest_entry_ptr,
                                ULONG path_mtu, ULONG mtu_timeout)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b086      	sub	sp, #24
 800a212:	af00      	add	r7, sp, #0
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	60b9      	str	r1, [r7, #8]
 800a218:	607a      	str	r2, [r7, #4]
 800a21a:	603b      	str	r3, [r7, #0]

UINT i, table_size;

    /* Destination address must be valid. */
    NX_ASSERT((destination_address != NX_NULL) && (dest_entry_ptr != NULL));
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d002      	beq.n	800a228 <_nx_icmpv6_dest_table_find+0x1a>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <_nx_icmpv6_dest_table_find+0x24>
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	f00e fe4c 	bl	8018ec8 <_tx_thread_sleep>
 800a230:	e7fa      	b.n	800a228 <_nx_icmpv6_dest_table_find+0x1a>

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800a238:	613b      	str	r3, [r7, #16]

    /* Check the destination num. */
    if (table_size == 0)
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <_nx_icmpv6_dest_table_find+0x36>
    {
        return(NX_NOT_SUCCESSFUL);
 800a240:	2343      	movs	r3, #67	; 0x43
 800a242:	e03a      	b.n	800a2ba <_nx_icmpv6_dest_table_find+0xac>
    }

    /* Initialize the return value. */
    *dest_entry_ptr = NX_NULL;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]

    /* Loop through all entries. */
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]
 800a24e:	e02d      	b.n	800a2ac <_nx_icmpv6_dest_table_find+0x9e>
    {

        /* Skip invalid entries. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800a250:	68f9      	ldr	r1, [r7, #12]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4613      	mov	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	440b      	add	r3, r1
 800a25e:	3390      	adds	r3, #144	; 0x90
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d01e      	beq.n	800a2a4 <_nx_icmpv6_dest_table_find+0x96>
        {
            continue;
        }

        /* Keep track of valid entries we have checked. */
        table_size--;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	3b01      	subs	r3, #1
 800a26a:	613b      	str	r3, [r7, #16]

        /* Check whether or not the address is the same. */
        if (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address[0], destination_address))
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	3390      	adds	r3, #144	; 0x90
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	3304      	adds	r3, #4
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	4618      	mov	r0, r3
 800a282:	f005 fa70 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00c      	beq.n	800a2a6 <_nx_icmpv6_dest_table_find+0x98>
#else
            NX_PARAMETER_NOT_USED(path_mtu);
            NX_PARAMETER_NOT_USED(mtu_timeout);
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

            *dest_entry_ptr = &ip_ptr -> nx_ipv6_destination_table[i];
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	3390      	adds	r3, #144	; 0x90
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	441a      	add	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e00a      	b.n	800a2ba <_nx_icmpv6_dest_table_find+0xac>
            continue;
 800a2a4:	bf00      	nop
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <_nx_icmpv6_dest_table_find+0xaa>
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b07      	cmp	r3, #7
 800a2b6:	d9cb      	bls.n	800a250 <_nx_icmpv6_dest_table_find+0x42>
        }
    }

    return(NX_NOT_SUCCESSFUL);
 800a2b8:	2343      	movs	r3, #67	; 0x43
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <_nx_icmpv6_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv6_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b088      	sub	sp, #32
 800a2c6:	af02      	add	r7, sp, #8
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Points to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	617b      	str	r3, [r7, #20]
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV6_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        /* Points to the IPv6 header. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	613b      	str	r3, [r7, #16]

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
                                            (UINT)packet_ptr -> nx_packet_length,
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                            (ipv6_header -> nx_ip_header_source_ip),
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f103 0108 	add.w	r1, r3, #8
                                            (ipv6_header -> nx_ip_header_destination_ip));
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	3318      	adds	r3, #24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	213a      	movs	r1, #58	; 0x3a
 800a2ec:	6838      	ldr	r0, [r7, #0]
 800a2ee:	f001 ff96 	bl	800c21e <_nx_ip_checksum_compute>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	81fb      	strh	r3, [r7, #14]

        checksum =  (USHORT)(~checksum) & NX_LOWER_16_MASK;
 800a2f6:	89fb      	ldrh	r3, [r7, #14]
 800a2f8:	43db      	mvns	r3, r3
 800a2fa:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 800a2fc:	89fb      	ldrh	r3, [r7, #14]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d011      	beq.n	800a326 <_nx_icmpv6_packet_process+0x64>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 800a31e:	6838      	ldr	r0, [r7, #0]
 800a320:	f006 fb8a 	bl	8010a38 <_nx_packet_release>
            return;
 800a324:	e03f      	b.n	800a3a6 <_nx_icmpv6_packet_process+0xe4>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_ECHO_REPLY_TYPE)
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b81      	cmp	r3, #129	; 0x81
 800a32c:	d104      	bne.n	800a338 <_nx_icmpv6_packet_process+0x76>
    {
        _nx_icmpv6_process_echo_reply(ip_ptr, packet_ptr);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f88f 	bl	800a454 <_nx_icmpv6_process_echo_reply>
 800a336:	e036      	b.n	800a3a6 <_nx_icmpv6_packet_process+0xe4>
    }
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_ECHO_REQUEST_TYPE)
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2b80      	cmp	r3, #128	; 0x80
 800a33e:	d104      	bne.n	800a34a <_nx_icmpv6_packet_process+0x88>
    {
        _nx_icmpv6_process_echo_request(ip_ptr, packet_ptr);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f976 	bl	800a634 <_nx_icmpv6_process_echo_request>
 800a348:	e02d      	b.n	800a3a6 <_nx_icmpv6_packet_process+0xe4>
    }
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b87      	cmp	r3, #135	; 0x87
 800a350:	d104      	bne.n	800a35c <_nx_icmpv6_packet_process+0x9a>
    {

        _nx_icmpv6_process_ns(ip_ptr, packet_ptr);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fbf5 	bl	800ab44 <_nx_icmpv6_process_ns>
 800a35a:	e024      	b.n	800a3a6 <_nx_icmpv6_packet_process+0xe4>
    }

#ifndef NX_DISABLE_ICMPV6_ROUTER_ADVERTISEMENT_PROCESS
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_ROUTER_ADVERTISEMENT_TYPE)
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b86      	cmp	r3, #134	; 0x86
 800a362:	d104      	bne.n	800a36e <_nx_icmpv6_packet_process+0xac>
    {

        _nx_icmpv6_process_ra(ip_ptr, packet_ptr);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fdb8 	bl	800aedc <_nx_icmpv6_process_ra>
 800a36c:	e01b      	b.n	800a3a6 <_nx_icmpv6_packet_process+0xe4>
    }
#endif
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_NEIGHBOR_ADVERTISEMENT_TYPE)
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	2b88      	cmp	r3, #136	; 0x88
 800a374:	d104      	bne.n	800a380 <_nx_icmpv6_packet_process+0xbe>
    {

        _nx_icmpv6_process_na(ip_ptr, packet_ptr);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fa47 	bl	800a80c <_nx_icmpv6_process_na>
 800a37e:	e012      	b.n	800a3a6 <_nx_icmpv6_packet_process+0xe4>
    }
#ifndef NX_DISABLE_ICMPV6_REDIRECT_PROCESS
    else if (header_ptr -> nx_icmpv6_header_type == NX_ICMPV6_REDIRECT_MESSAGE_TYPE)
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	2b89      	cmp	r3, #137	; 0x89
 800a386:	d104      	bne.n	800a392 <_nx_icmpv6_packet_process+0xd0>
    {

        _nx_icmpv6_process_redirect(ip_ptr, packet_ptr);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f001 f80e 	bl	800b3ac <_nx_icmpv6_process_redirect>
 800a390:	e009      	b.n	800a3a6 <_nx_icmpv6_packet_process+0xe4>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
#endif

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 800a3a0:	6838      	ldr	r0, [r7, #0]
 800a3a2:	f006 fb49 	bl	8010a38 <_nx_packet_release>
    }
}
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <_nx_icmpv6_perform_DAD>:
/**************************************************************************/

#ifndef NX_DISABLE_IPV6_DAD

VOID _nx_icmpv6_perform_DAD(NX_IP *ip_ptr)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	6078      	str	r0, [r7, #4]
#ifdef NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY
UINT              ipv6_addr_index;
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */

    /* Go through all addresses bound to the IP instance. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	e044      	b.n	800a444 <_nx_icmpv6_perform_DAD+0x98>
    {

        /* Check if this interface valid. */
        if (!ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head)
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	214c      	movs	r1, #76	; 0x4c
 800a3c0:	fb01 f303 	mul.w	r3, r1, r3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d035      	beq.n	800a43c <_nx_icmpv6_perform_DAD+0x90>
        {
            continue;
        }

        /* Only interested in addresses in the tentative state. */
        for (nx_ipv6_address_next = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	214c      	movs	r1, #76	; 0x4c
 800a3d6:	fb01 f303 	mul.w	r3, r1, r3
 800a3da:	4413      	add	r3, r2
 800a3dc:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	60bb      	str	r3, [r7, #8]
 800a3e4:	e026      	b.n	800a434 <_nx_icmpv6_perform_DAD+0x88>
             nx_ipv6_address_next;
             nx_ipv6_address_next = nx_ipv6_address_next -> nxd_ipv6_address_next)
        {

            /* Check the address state. */
            if (nx_ipv6_address_next -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_TENTATIVE)
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	789b      	ldrb	r3, [r3, #2]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d11f      	bne.n	800a42e <_nx_icmpv6_perform_DAD+0x82>
            {

                /* Check if the number of NS messages is used up. */
                if (nx_ipv6_address_next -> nxd_ipv6_address_DupAddrDetectTransmit)
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	7f1b      	ldrb	r3, [r3, #28]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d012      	beq.n	800a41c <_nx_icmpv6_perform_DAD+0x70>
                {

                    /* No. This interface is still under DAD.  Transmit a NS */
                    _nx_icmpv6_send_ns(ip_ptr,
                                       nx_ipv6_address_next -> nxd_ipv6_address,
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	f103 0108 	add.w	r1, r3, #8
                    _nx_icmpv6_send_ns(ip_ptr,
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	2300      	movs	r3, #0
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2200      	movs	r2, #0
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 fabd 	bl	800b988 <_nx_icmpv6_send_ns>
                                       0, nx_ipv6_address_next, 0, NX_NULL);

                    nx_ipv6_address_next -> nxd_ipv6_address_DupAddrDetectTransmit--;
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	7f1b      	ldrb	r3, [r3, #28]
 800a412:	3b01      	subs	r3, #1
 800a414:	b2da      	uxtb	r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	771a      	strb	r2, [r3, #28]
 800a41a:	e008      	b.n	800a42e <_nx_icmpv6_perform_DAD+0x82>
                {

                    /* So far we didn't get any conflict addresses back.
                       So promote the address to VALID */

                    nx_ipv6_address_next -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_VALID;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2204      	movs	r2, #4
 800a420:	709a      	strb	r2, [r3, #2]
                    _nx_icmpv6_DAD_clear_NDCache_entry(ip_ptr,
                                                       nx_ipv6_address_next -> nxd_ipv6_address);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	3308      	adds	r3, #8
                    _nx_icmpv6_DAD_clear_NDCache_entry(ip_ptr,
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fdd6 	bl	8009fda <_nx_icmpv6_DAD_clear_NDCache_entry>
             nx_ipv6_address_next = nx_ipv6_address_next -> nxd_ipv6_address_next)
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	60bb      	str	r3, [r7, #8]
        for (nx_ipv6_address_next = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1d5      	bne.n	800a3e6 <_nx_icmpv6_perform_DAD+0x3a>
 800a43a:	e000      	b.n	800a43e <_nx_icmpv6_perform_DAD+0x92>
            continue;
 800a43c:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0b7      	beq.n	800a3ba <_nx_icmpv6_perform_DAD+0xe>
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */
                }
            }
        }
    }
}
 800a44a:	bf00      	nop
 800a44c:	bf00      	nop
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <_nx_icmpv6_process_echo_reply>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

VOID _nx_icmpv6_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b092      	sub	sp, #72	; 0x48
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Check packet length. */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMPV6_ECHO))
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	2b07      	cmp	r3, #7
 800a464:	d80a      	bhi.n	800a47c <_nx_icmpv6_process_echo_reply+0x28>
    {
#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid message count.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif

        /* Invalid ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 800a474:	6838      	ldr	r0, [r7, #0]
 800a476:	f006 fadf 	bl	8010a38 <_nx_packet_release>
        return;
 800a47a:	e0d6      	b.n	800a62a <_nx_icmpv6_process_echo_reply+0x1d6>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING */

    /* Points to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Points to the ICMP echo reply message body. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr = (NX_ICMPV6_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3604 	ldr.w	r3, [r3, #1540]	; 0x604
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
#endif

    /* Discard the packet if source address is unspecified (::). */
    if (CHECK_UNSPECIFIED_ADDRESS(ipv6_header -> nx_ip_header_source_ip))
 800a496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a498:	3308      	adds	r3, #8
 800a49a:	4618      	mov	r0, r3
 800a49c:	f005 f98f 	bl	800f7be <CHECK_UNSPECIFIED_ADDRESS>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00a      	beq.n	800a4bc <_nx_icmpv6_process_echo_reply+0x68>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        /* Free the packet and return. */
        _nx_packet_release(packet_ptr);
 800a4b4:	6838      	ldr	r0, [r7, #0]
 800a4b6:	f006 fabf 	bl	8010a38 <_nx_packet_release>

        return;
 800a4ba:	e0b6      	b.n	800a62a <_nx_icmpv6_process_echo_reply+0x1d6>
    }

    /* For IPv6, if the interface IP address is not valid yet,
       do not respond to ping. */
    if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c0:	789b      	ldrb	r3, [r3, #2]
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d00a      	beq.n	800a4dc <_nx_icmpv6_process_echo_reply+0x88>


#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        /* Free the packet and return. */
        _nx_packet_release(packet_ptr);
 800a4d4:	6838      	ldr	r0, [r7, #0]
 800a4d6:	f006 faaf 	bl	8010a38 <_nx_packet_release>

        return;
 800a4da:	e0a6      	b.n	800a62a <_nx_icmpv6_process_echo_reply+0x1d6>
    }

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv6_echo_sequence_num;
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	88db      	ldrh	r3, [r3, #6]
 800a4e0:	86fb      	strh	r3, [r7, #54]	; 0x36

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 800a4e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4e4:	ba5b      	rev16	r3, r3
 800a4e6:	86fb      	strh	r3, [r7, #54]	; 0x36
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a4e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4ec:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a4f2:	b672      	cpsid	i
    return(int_posture);
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts.  */
    TX_DISABLE
 800a4f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 800a4fe:	643b      	str	r3, [r7, #64]	; 0x40
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
 800a506:	647b      	str	r3, [r7, #68]	; 0x44

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a508:	4b49      	ldr	r3, [pc, #292]	; (800a630 <_nx_icmpv6_process_echo_reply+0x1dc>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3301      	adds	r3, #1
 800a50e:	4a48      	ldr	r2, [pc, #288]	; (800a630 <_nx_icmpv6_process_echo_reply+0x1dc>)
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a518:	f383 8810 	msr	PRIMASK, r3
}
 800a51c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 800a51e:	e05d      	b.n	800a5dc <_nx_icmpv6_process_echo_reply+0x188>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if (thread_ptr -> tx_thread_suspend_info == sequence_num)
 800a520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a522:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a524:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a526:	429a      	cmp	r2, r3
 800a528:	d155      	bne.n	800a5d6 <_nx_icmpv6_process_echo_reply+0x182>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a52a:	f3ef 8310 	mrs	r3, PRIMASK
 800a52e:	623b      	str	r3, [r7, #32]
    return(posture);
 800a530:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a532:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a534:	b672      	cpsid	i
    return(int_posture);
 800a536:	69fb      	ldr	r3, [r7, #28]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 800a538:	633b      	str	r3, [r7, #48]	; 0x30

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a53e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a540:	429a      	cmp	r2, r3
 800a542:	d104      	bne.n	800a54e <_nx_icmpv6_process_echo_reply+0xfa>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 288c 	str.w	r2, [r3, #2188]	; 0x88c
 800a54c:	e014      	b.n	800a578 <_nx_icmpv6_process_echo_reply+0x124>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 800a554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a556:	429a      	cmp	r2, r3
 800a558:	d104      	bne.n	800a564 <_nx_icmpv6_process_echo_reply+0x110>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800a55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a55c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8c3 288c 	str.w	r2, [r3, #2188]	; 0x88c
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 800a568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a56a:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a56c:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a56e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800a572:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a574:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a576:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
 800a57e:	1e5a      	subs	r2, r3, #1
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8c3 2890 	str.w	r2, [r3, #2192]	; 0x890

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a588:	2200      	movs	r2, #0
 800a58a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a58c:	4b28      	ldr	r3, [pc, #160]	; (800a630 <_nx_icmpv6_process_echo_reply+0x1dc>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3301      	adds	r3, #1
 800a592:	4a27      	ldr	r2, [pc, #156]	; (800a630 <_nx_icmpv6_process_echo_reply+0x1dc>)
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	f383 8810 	msr	PRIMASK, r3
}
 800a5a0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV6_ECHO);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	f1a3 0208 	sub.w	r2, r3, #8
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV6_ECHO);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f103 0208 	add.w	r2, r3, #8
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) = packet_ptr;
 800a5ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	601a      	str	r2, [r3, #0]

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status = NX_SUCCESS;
 800a5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800a5ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a5d0:	f00e fd34 	bl	801903c <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 800a5d4:	e007      	b.n	800a5e6 <_nx_icmpv6_process_echo_reply+0x192>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800a5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5da:	643b      	str	r3, [r7, #64]	; 0x40
    while (suspended--)
 800a5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5de:	1e5a      	subs	r2, r3, #1
 800a5e0:	647a      	str	r2, [r7, #68]	; 0x44
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d19c      	bne.n	800a520 <_nx_icmpv6_process_echo_reply+0xcc>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d009      	beq.n	800a600 <_nx_icmpv6_process_echo_reply+0x1ac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800a5fa:	6838      	ldr	r0, [r7, #0]
 800a5fc:	f006 fa1c 	bl	8010a38 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a600:	f3ef 8310 	mrs	r3, PRIMASK
 800a604:	613b      	str	r3, [r7, #16]
    return(posture);
 800a606:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800a608:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a60a:	b672      	cpsid	i
    return(int_posture);
 800a60c:	68fb      	ldr	r3, [r7, #12]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a60e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 800a610:	4b07      	ldr	r3, [pc, #28]	; (800a630 <_nx_icmpv6_process_echo_reply+0x1dc>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3b01      	subs	r3, #1
 800a616:	4a06      	ldr	r2, [pc, #24]	; (800a630 <_nx_icmpv6_process_echo_reply+0x1dc>)
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f383 8810 	msr	PRIMASK, r3
}
 800a624:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a626:	f00e fccf 	bl	8018fc8 <_tx_thread_system_preempt_check>
}
 800a62a:	3748      	adds	r7, #72	; 0x48
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	2400090c 	.word	0x2400090c

0800a634 <_nx_icmpv6_process_echo_request>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

VOID _nx_icmpv6_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b092      	sub	sp, #72	; 0x48
 800a638:	af04      	add	r7, sp, #16
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
#if defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
#endif /* defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_ICMPV6_HEADER *header_ptr;
NX_IPV6_HEADER   *ipv6_header;
ULONG             hop_limit = 255;
 800a63e:	23ff      	movs	r3, #255	; 0xff
 800a640:	633b      	str	r3, [r7, #48]	; 0x30
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Check packet length. */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMPV6_ECHO))
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b07      	cmp	r3, #7
 800a648:	d80a      	bhi.n	800a660 <_nx_icmpv6_process_echo_request+0x2c>
    {
#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid message count.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif

        /* Invalid ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 800a658:	6838      	ldr	r0, [r7, #0]
 800a65a:	f006 f9ed 	bl	8010a38 <_nx_packet_release>
        return;
 800a65e:	e0d2      	b.n	800a806 <_nx_icmpv6_process_echo_request+0x1d2>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING */

    /* Points to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr  = (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Points to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if the destination address is multicast address.  */
    if (IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) & IPV6_ADDRESS_MULTICAST)
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	3318      	adds	r3, #24
 800a670:	4618      	mov	r0, r3
 800a672:	f005 f97d 	bl	800f970 <IPv6_Address_Type>
 800a676:	4603      	mov	r3, r0
 800a678:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d015      	beq.n	800a6ac <_nx_icmpv6_process_echo_request+0x78>
    {

        /* Yes, Set the interface.  */
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	627b      	str	r3, [r7, #36]	; 0x24

        /* Find a suitable outgoing address. */
        status = _nxd_ipv6_interface_find(ip_ptr, ipv6_header -> nx_ip_header_source_ip,
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	f103 0108 	add.w	r1, r3, #8
                                          &packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr, interface_ptr);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	f103 0234 	add.w	r2, r3, #52	; 0x34
        status = _nxd_ipv6_interface_find(ip_ptr, ipv6_header -> nx_ip_header_source_ip,
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f00b fbed 	bl	8015e76 <_nxd_ipv6_interface_find>
 800a69c:	6238      	str	r0, [r7, #32]

        /* Cannot find usable outgoing interface. */
        if (status != NX_SUCCESS)
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00c      	beq.n	800a6be <_nx_icmpv6_process_echo_request+0x8a>
        {

            /* Release the packet. */
            _nx_packet_release(packet_ptr);
 800a6a4:	6838      	ldr	r0, [r7, #0]
 800a6a6:	f006 f9c7 	bl	8010a38 <_nx_packet_release>

            return;
 800a6aa:	e0ac      	b.n	800a806 <_nx_icmpv6_process_echo_request+0x1d2>
    }
    else
    {

        /* Make sure the interface IP address has been validated. */
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b0:	789b      	ldrb	r3, [r3, #2]
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d003      	beq.n	800a6be <_nx_icmpv6_process_echo_request+0x8a>
        {

            /* Not validated, so release the packet and abort.*/
            _nx_packet_release(packet_ptr);
 800a6b6:	6838      	ldr	r0, [r7, #0]
 800a6b8:	f006 f9be 	bl	8010a38 <_nx_packet_release>

            return;
 800a6bc:	e0a3      	b.n	800a806 <_nx_icmpv6_process_echo_request+0x1d2>
        }
    }

    /* Discard the packet if source address is unspecified (::). */
    if (CHECK_UNSPECIFIED_ADDRESS(ipv6_header -> nx_ip_header_source_ip))
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f005 f87b 	bl	800f7be <CHECK_UNSPECIFIED_ADDRESS>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <_nx_icmpv6_process_echo_request+0xa2>
    {

        /* NULL address in the header. Release the packet and abort. */
        _nx_packet_release(packet_ptr);
 800a6ce:	6838      	ldr	r0, [r7, #0]
 800a6d0:	f006 f9b2 	bl	8010a38 <_nx_packet_release>

        return;
 800a6d4:	e097      	b.n	800a806 <_nx_icmpv6_process_echo_request+0x1d2>
    }

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
#endif

    /* Respond to echo request packet.  */

    /* Set up the destination address. */
    dest_addr.nxd_ip_version = NX_IP_VERSION_V6;
 800a6e4:	2306      	movs	r3, #6
 800a6e6:	60bb      	str	r3, [r7, #8]
    dest_addr.nxd_ip_address.v6[0] = ipv6_header -> nx_ip_header_source_ip[0];
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	60fb      	str	r3, [r7, #12]
    dest_addr.nxd_ip_address.v6[1] = ipv6_header -> nx_ip_header_source_ip[1];
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	613b      	str	r3, [r7, #16]
    dest_addr.nxd_ip_address.v6[2] = ipv6_header -> nx_ip_header_source_ip[2];
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	617b      	str	r3, [r7, #20]
    dest_addr.nxd_ip_address.v6[3] = ipv6_header -> nx_ip_header_source_ip[3];
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	61bb      	str	r3, [r7, #24]
    }
#endif /* NX_IPSEC_ENABLE */


    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv6_header_type = NX_ICMPV6_ECHO_REPLY_TYPE;
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	2281      	movs	r2, #129	; 0x81
 800a704:	701a      	strb	r2, [r3, #0]
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Take a short cut to fix the checksum. */
        checksum = header_ptr -> nx_icmpv6_header_checksum;
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	885b      	ldrh	r3, [r3, #2]
 800a70a:	83fb      	strh	r3, [r7, #30]

        /* Change to host byte order. */
        NX_CHANGE_USHORT_ENDIAN(checksum);
 800a70c:	8bfb      	ldrh	r3, [r7, #30]
 800a70e:	ba5b      	rev16	r3, r3
 800a710:	83fb      	strh	r3, [r7, #30]

        tmp = ((USHORT)(~checksum) & 0xFFFF);
 800a712:	8bfb      	ldrh	r3, [r7, #30]
 800a714:	43db      	mvns	r3, r3
 800a716:	b29b      	uxth	r3, r3
 800a718:	637b      	str	r3, [r7, #52]	; 0x34

        /* The original ICMP type is ECHO_REQUEST. */
        tmp -= (NX_ICMPV6_ECHO_REQUEST_TYPE << 8);
 800a71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800a720:	637b      	str	r3, [r7, #52]	; 0x34
        if (tmp > (ULONG)0x80000000)
 800a722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a728:	d903      	bls.n	800a732 <_nx_icmpv6_process_echo_request+0xfe>
        {
            tmp = (tmp & 0xFFFF) - 1;
 800a72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	3b01      	subs	r3, #1
 800a730:	637b      	str	r3, [r7, #52]	; 0x34
        }


        tmp += (ULONG)(header_ptr -> nx_icmpv6_header_type << 8);
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	021b      	lsls	r3, r3, #8
 800a738:	461a      	mov	r2, r3
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	4413      	add	r3, r2
 800a73e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Compute the checksum differently depending if the echo request sends to
           a multicast or unicast address.   */
        if ((IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) &
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	3318      	adds	r3, #24
 800a744:	4618      	mov	r0, r3
 800a746:	f005 f913 	bl	800f970 <IPv6_Address_Type>
 800a74a:	4603      	mov	r3, r0
 800a74c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a754:	d122      	bne.n	800a79c <_nx_icmpv6_process_echo_request+0x168>
             IPV6_ADDRESS_MULTICAST) == IPV6_ADDRESS_MULTICAST)
        {

            /* Compute the checksum for a multicast address. */
            header_ptr -> nx_icmpv6_header_checksum = 0;
 800a756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a758:	2200      	movs	r2, #0
 800a75a:	805a      	strh	r2, [r3, #2]

            tmp = _nx_ip_checksum_compute(packet_ptr,
                                          NX_PROTOCOL_ICMPV6,
                                          (UINT)packet_ptr -> nx_packet_length,
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                          packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a764:	f103 0108 	add.w	r1, r3, #8
                                          ipv6_header -> nx_ip_header_source_ip);
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	3308      	adds	r3, #8
            tmp = _nx_ip_checksum_compute(packet_ptr,
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	460b      	mov	r3, r1
 800a770:	213a      	movs	r1, #58	; 0x3a
 800a772:	6838      	ldr	r0, [r7, #0]
 800a774:	f001 fd53 	bl	800c21e <_nx_ip_checksum_compute>
 800a778:	4603      	mov	r3, r0
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34

            tmp = ~tmp;
 800a77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77e:	43db      	mvns	r3, r3
 800a780:	637b      	str	r3, [r7, #52]	; 0x34

            header_ptr -> nx_icmpv6_header_checksum = (USHORT)(tmp);
 800a782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a784:	b29a      	uxth	r2, r3
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	805a      	strh	r2, [r3, #2]

            NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv6_header_checksum);
 800a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78c:	885b      	ldrh	r3, [r3, #2]
 800a78e:	ba5b      	rev16	r3, r3
 800a790:	b29a      	uxth	r2, r3
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	805a      	strh	r2, [r3, #2]

            hop_limit = 255;
 800a796:	23ff      	movs	r3, #255	; 0xff
 800a798:	633b      	str	r3, [r7, #48]	; 0x30
 800a79a:	e01b      	b.n	800a7d4 <_nx_icmpv6_process_echo_request+0x1a0>
        }
        else
        {
            /* Compute the checksum for a unicast address. */
            hop_limit = ip_ptr -> nx_ipv6_hop_limit;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 3ecc 	ldr.w	r3, [r3, #3788]	; 0xecc
 800a7a2:	633b      	str	r3, [r7, #48]	; 0x30

            tmp = (tmp >> 16) + (tmp & 0xFFFF);
 800a7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a6:	0c1a      	lsrs	r2, r3, #16
 800a7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	637b      	str	r3, [r7, #52]	; 0x34

            /* Do it again in case of carrying */
            tmp = (tmp >> 16) + (tmp & 0xFFFF);
 800a7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b2:	0c1a      	lsrs	r2, r3, #16
 800a7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	4413      	add	r3, r2
 800a7ba:	637b      	str	r3, [r7, #52]	; 0x34
            header_ptr -> nx_icmpv6_header_checksum = (USHORT)(~tmp);
 800a7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	805a      	strh	r2, [r3, #2]
            NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv6_header_checksum);
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	885b      	ldrh	r3, [r3, #2]
 800a7cc:	ba5b      	rev16	r3, r3
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	805a      	strh	r2, [r3, #2]
    }
#endif

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
#endif

    /* Send the ICMP packet to the IP component.  */
    _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_ICMPV6,
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
                         packet_ptr -> nx_packet_length, hop_limit,
                         packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ea:	3308      	adds	r3, #8
    _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_ICMPV6,
 800a7ec:	f107 0208 	add.w	r2, r7, #8
 800a7f0:	3204      	adds	r2, #4
 800a7f2:	9202      	str	r2, [sp, #8]
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	223a      	movs	r2, #58	; 0x3a
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f004 fa84 	bl	800ed0e <_nx_ipv6_packet_send>
                         dest_addr.nxd_ip_address.v6);
}
 800a806:	3738      	adds	r7, #56	; 0x38
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <_nx_icmpv6_process_na>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_process_na(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a80c:	b5b0      	push	{r4, r5, r7, lr}
 800a80e:	b09a      	sub	sp, #104	; 0x68
 800a810:	af04      	add	r7, sp, #16
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]

ND_CACHE_ENTRY   *nd_entry = NX_NULL;
 800a816:	2300      	movs	r3, #0
 800a818:	623b      	str	r3, [r7, #32]

/*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
NX_ICMPV6_ND     *nd_ptr = (NX_ICMPV6_ND *)(packet_ptr -> nx_packet_prepend_ptr);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
NX_ICMPV6_OPTION *option_ptr = NX_NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	657b      	str	r3, [r7, #84]	; 0x54
INT               error = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	653b      	str	r3, [r7, #80]	; 0x50
INT               lla_same = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Take care of endian-ness. */
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800a82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82e:	3308      	adds	r3, #8
 800a830:	4618      	mov	r0, r3
 800a832:	f005 f95d 	bl	800faf0 <_nx_ipv6_address_change_endian>
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800a836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	ba1a      	rev	r2, r3
 800a83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83e:	605a      	str	r2, [r3, #4]

    /* Validate the neighbor advertisement message. */
    if (_nx_icmpv6_validate_neighbor_message(packet_ptr) != NX_SUCCESS)
 800a840:	6838      	ldr	r0, [r7, #0]
 800a842:	f001 fb45 	bl	800bed0 <_nx_icmpv6_validate_neighbor_message>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <_nx_icmpv6_process_na+0x46>
    {
        error = 1;
 800a84c:	2301      	movs	r3, #1
 800a84e:	653b      	str	r3, [r7, #80]	; 0x50
 800a850:	e073      	b.n	800a93a <_nx_icmpv6_process_na+0x12e>
    else
    {

        /* Points to the IPv6 header. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Find the option field. */
        /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
        option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(nd_ptr, sizeof(NX_ICMPV6_ND));
 800a858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85a:	3318      	adds	r3, #24
 800a85c:	657b      	str	r3, [r7, #84]	; 0x54
        option_length = (UINT)packet_ptr -> nx_packet_length - (UINT)sizeof(NX_ICMPV6_ND);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a862:	3b18      	subs	r3, #24
 800a864:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Find the TLLA option */
        while (option_length > 0)
 800a866:	e010      	b.n	800a88a <_nx_icmpv6_process_na+0x7e>
        {
            /* Check if this is a Target LLA option. */
            if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_TRG_LINK_ADDR)
 800a868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d010      	beq.n	800a892 <_nx_icmpv6_process_na+0x86>
            {
                break;
            }

            /* Get the next option. */
            option_length -= ((UINT)(option_ptr -> nx_icmpv6_option_length) << 3);
 800a870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a872:	785b      	ldrb	r3, [r3, #1]
 800a874:	00db      	lsls	r3, r3, #3
 800a876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	64bb      	str	r3, [r7, #72]	; 0x48

            /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
            option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800a87c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a87e:	785b      	ldrb	r3, [r3, #1]
 800a880:	00db      	lsls	r3, r3, #3
 800a882:	461a      	mov	r2, r3
 800a884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a886:	4413      	add	r3, r2
 800a888:	657b      	str	r3, [r7, #84]	; 0x54
        while (option_length > 0)
 800a88a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1eb      	bne.n	800a868 <_nx_icmpv6_process_na+0x5c>
 800a890:	e000      	b.n	800a894 <_nx_icmpv6_process_na+0x88>
                break;
 800a892:	bf00      	nop
        }

        /* Check for no option included. */
        if (option_length == 0)
 800a894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <_nx_icmpv6_process_na+0x92>
        {

            option_ptr = NX_NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Determine the NA packet destination type. */
        /* Is the destination a multicast address? */
        if ((ipv6_header_ptr -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a8a6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800a8aa:	d104      	bne.n	800a8b6 <_nx_icmpv6_process_na+0xaa>
        {

            /* Yes; Were there any options in the NA packet? */
            if (!option_ptr)
 800a8ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <_nx_icmpv6_process_na+0xaa>
            {

                /* No, this is an invalid NA packet (No TLLA). */
                error = 1;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	653b      	str	r3, [r7, #80]	; 0x50

#ifndef NX_DISABLE_IPV6_DAD

        /* Find the same address as target address in IPv6 address structure.
           Assume target address is 4-byte aligned.*/
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a8ba:	e02c      	b.n	800a916 <_nx_icmpv6_process_na+0x10a>
        {

            if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address,
 800a8bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8be:	015b      	lsls	r3, r3, #5
 800a8c0:	3318      	adds	r3, #24
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	441a      	add	r2, r3
                                          nd_ptr -> nx_icmpv6_nd_targetAddress))
 800a8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8c8:	3308      	adds	r3, #8
            if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address,
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f004 ff4a 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d01b      	beq.n	800a910 <_nx_icmpv6_process_na+0x104>
            {
                if (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_TENTATIVE)
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8dc:	015b      	lsls	r3, r3, #5
 800a8de:	4413      	add	r3, r2
 800a8e0:	3312      	adds	r3, #18
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d11a      	bne.n	800a91e <_nx_icmpv6_process_na+0x112>
                {

                    /* Sender sends a NS in response to a DAD request we sent out.
                       Mark DAD failure. */
                    _nx_icmpv6_DAD_failure(ip_ptr, &ip_ptr -> nx_ipv6_address[i]);
 800a8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ea:	015b      	lsls	r3, r3, #5
 800a8ec:	3310      	adds	r3, #16
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7ff fb87 	bl	800a008 <_nx_icmpv6_DAD_failure>

#ifndef NX_DISABLE_ICMP_INFO

                    /* Increment the ICMP invalid packet error. */
                    ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

                    /* Release the packet and we are done. */
                    _nx_packet_release(packet_ptr);
 800a908:	6838      	ldr	r0, [r7, #0]
 800a90a:	f006 f895 	bl	8010a38 <_nx_packet_release>
                    return;
 800a90e:	e116      	b.n	800ab3e <_nx_icmpv6_process_na+0x332>
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 800a910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a912:	3301      	adds	r3, #1
 800a914:	647b      	str	r3, [r7, #68]	; 0x44
 800a916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d9cf      	bls.n	800a8bc <_nx_icmpv6_process_na+0xb0>
 800a91c:	e000      	b.n	800a920 <_nx_icmpv6_process_na+0x114>
                }

                break;
 800a91e:	bf00      	nop
            }
        }
#endif /* NX_DISABLE_IPV6_DAD */

        /* Find the ND entry */
        if (_nx_nd_cache_find_entry(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress, &nd_entry) != NX_SUCCESS)
 800a920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a922:	3308      	adds	r3, #8
 800a924:	f107 0220 	add.w	r2, r7, #32
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f005 fbc2 	bl	80100b4 <_nx_nd_cache_find_entry>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <_nx_icmpv6_process_na+0x12e>
        {
            /* The entry does not exist, it indicates that we are not
               expecting this NA.  So silently ignore this packet,
               according to RFC 2461 7.2.5 */
            error = 1;
 800a936:	2301      	movs	r3, #1
 800a938:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Do not process the NA any further if any errors detected. */
    if (error)
 800a93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00a      	beq.n	800a956 <_nx_icmpv6_process_na+0x14a>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        /* Release the packet and we are done. */
        _nx_packet_release(packet_ptr);
 800a94e:	6838      	ldr	r0, [r7, #0]
 800a950:	f006 f872 	bl	8010a38 <_nx_packet_release>
        return;
 800a954:	e0f3      	b.n	800ab3e <_nx_icmpv6_process_na+0x332>
    }

    /* Check whether or not supplied LLA is the same as the cached one */
    if (option_ptr)
 800a956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01d      	beq.n	800a998 <_nx_icmpv6_process_na+0x18c>

    /* Compare the link-layer address. */
    USHORT *new_lla, *lla;

        /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
        new_lla = (USHORT *)&option_ptr -> nx_icmpv6_option_data;
 800a95c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95e:	3302      	adds	r3, #2
 800a960:	637b      	str	r3, [r7, #52]	; 0x34

        /*lint -e{927} suppress cast of pointer to pointer, since it is necessary  */
        /*lint -e{644} suppress variable might not be initialized, since "nd_entry" was initialized in _nx_nd_cache_find_entry. */
        lla = (USHORT *)nd_entry -> nx_nd_cache_mac_addr;
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	3310      	adds	r3, #16
 800a966:	633b      	str	r3, [r7, #48]	; 0x30
        if ((new_lla[0] == lla[0]) && (new_lla[1] == lla[1]) && (new_lla[2] == lla[2])) /* lgtm[cpp/overflow-buffer] */
 800a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96a:	881a      	ldrh	r2, [r3, #0]
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d111      	bne.n	800a998 <_nx_icmpv6_process_na+0x18c>
 800a974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a976:	3302      	adds	r3, #2
 800a978:	881a      	ldrh	r2, [r3, #0]
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	3302      	adds	r3, #2
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	429a      	cmp	r2, r3
 800a982:	d109      	bne.n	800a998 <_nx_icmpv6_process_na+0x18c>
 800a984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a986:	3304      	adds	r3, #4
 800a988:	881a      	ldrh	r2, [r3, #0]
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	3304      	adds	r3, #4
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d101      	bne.n	800a998 <_nx_icmpv6_process_na+0x18c>
        {

            /* No change in LLA. */
            lla_same = 1;
 800a994:	2301      	movs	r3, #1
 800a996:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    }

    /* Determine if the entry is a router. */
    if (nd_ptr -> nx_icmpv6_nd_flag & 0x80000000)
 800a998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da14      	bge.n	800a9ca <_nx_icmpv6_process_na+0x1be>
    {

        /* Yes; Does the corresonding ND entry have the IsRouter flag set? */
        if (nd_entry -> nx_nd_cache_is_router == NX_NULL)
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d142      	bne.n	800aa2e <_nx_icmpv6_process_na+0x222>

        NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;

            /* No; Find the default router entry. */
            rt_entry =
                _nxd_ipv6_find_default_router_from_address(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress);
 800a9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f00b f9b4 	bl	8015d1c <_nxd_ipv6_find_default_router_from_address>
 800a9b4:	62f8      	str	r0, [r7, #44]	; 0x2c

            /* Check the default router.  */
            if (rt_entry)
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d038      	beq.n	800aa2e <_nx_icmpv6_process_na+0x222>
            {

                /* Set the IsRouter flag in the ND entry. */
                nd_entry -> nx_nd_cache_is_router = rt_entry;
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c0:	625a      	str	r2, [r3, #36]	; 0x24

                /* Set this link as the corresponding ND entry. */
                rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr = (VOID *)nd_entry;
 800a9c2:	6a3a      	ldr	r2, [r7, #32]
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	619a      	str	r2, [r3, #24]
 800a9c8:	e031      	b.n	800aa2e <_nx_icmpv6_process_na+0x222>
        /*
         * The neighbor advertisement message indicates that it is not a router.
         * However if our ND cache still marks it as a router, that means the neighbor is
         * no longer acting as a router, and we shall clean up our records.
         */
        if (nd_entry -> nx_nd_cache_is_router)
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d02d      	beq.n	800aa2e <_nx_icmpv6_process_na+0x222>
        {

        NXD_ADDRESS router_address;
        UINT        clear_router_flag = 1;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	643b      	str	r3, [r7, #64]	; 0x40

            /* Only if the TLLA option indicates the TLLA is unchanged! */
            if (option_ptr && !lla_same)
 800a9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <_nx_icmpv6_process_na+0x1e6>
 800a9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d107      	bne.n	800a9f2 <_nx_icmpv6_process_na+0x1e6>
            {

                /* And only if the override bit not is set. */
                if ((nd_ptr -> nx_icmpv6_nd_flag & 0x20000000) == 0)
 800a9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <_nx_icmpv6_process_na+0x1e6>
                {
                    clear_router_flag = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Did we decide to clear the router status of this cache entry? */
            if (clear_router_flag)
 800a9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d01a      	beq.n	800aa2e <_nx_icmpv6_process_na+0x222>

                /* Yes, Ok to clear the cache entry router status! */

                /* The IsRouter points to the entry in the default router table.
                   We first remove the link between the router table entry and the nd cache entry. */
                nd_entry -> nx_nd_cache_is_router -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	619a      	str	r2, [r3, #24]


                /* Remove the entry from the default router list. */
                router_address.nxd_ip_version = NX_IP_VERSION_V6;
 800aa00:	2306      	movs	r3, #6
 800aa02:	60fb      	str	r3, [r7, #12]
                router_address.nxd_ip_address.v6[0] = nd_ptr -> nx_icmpv6_nd_targetAddress[0];
 800aa04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	613b      	str	r3, [r7, #16]
                router_address.nxd_ip_address.v6[1] = nd_ptr -> nx_icmpv6_nd_targetAddress[1];
 800aa0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	617b      	str	r3, [r7, #20]
                router_address.nxd_ip_address.v6[2] = nd_ptr -> nx_icmpv6_nd_targetAddress[2];
 800aa10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	61bb      	str	r3, [r7, #24]
                router_address.nxd_ip_address.v6[3] = nd_ptr -> nx_icmpv6_nd_targetAddress[3];
 800aa16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	61fb      	str	r3, [r7, #28]

                /* We must remove the entry from the default router list. */
                _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
 800aa1c:	f107 030c 	add.w	r3, r7, #12
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f00a ff44 	bl	80158b0 <_nxd_ipv6_default_router_delete>

                /* Set the router flag to NULL. */
                nd_entry -> nx_nd_cache_is_router = NX_NULL;
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	625a      	str	r2, [r3, #36]	; 0x24
    /*
     * An ND entry exists.  If the cache entry is in incomplete state,
     * add the NA contains LLA option, if the NA is unsolicitated,
     * add the LLA to the cache in STALE state.
     */
    if ((nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_INCOMPLETE) ||
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	7e5b      	ldrb	r3, [r3, #25]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d003      	beq.n	800aa3e <_nx_icmpv6_process_na+0x232>
        (nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_CREATED))
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	7e5b      	ldrb	r3, [r3, #25]
    if ((nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_INCOMPLETE) ||
 800aa3a:	2b06      	cmp	r3, #6
 800aa3c:	d12f      	bne.n	800aa9e <_nx_icmpv6_process_na+0x292>
    {

        /* Find the target link layer options. */
        if (option_ptr)
 800aa3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d028      	beq.n	800aa96 <_nx_icmpv6_process_na+0x28a>
        {

            /* If the solicitation flag is set, set state to REACHABLE; if not,
               set state to STALE.*/
            /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            _nx_nd_cache_add(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress,
 800aa44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa46:	f103 0008 	add.w	r0, r3, #8
                             packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached,
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4e:	685c      	ldr	r4, [r3, #4]
                             (CHAR *)&option_ptr -> nx_icmpv6_option_data, 0,
 800aa50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa52:	1c9d      	adds	r5, r3, #2
                             nd_ptr -> nx_icmpv6_nd_flag & 0x40000000 ? ND_CACHE_STATE_REACHABLE : ND_CACHE_STATE_STALE,
 800aa54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
            _nx_nd_cache_add(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress,
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <_nx_icmpv6_process_na+0x258>
 800aa60:	2302      	movs	r3, #2
 800aa62:	e000      	b.n	800aa66 <_nx_icmpv6_process_na+0x25a>
 800aa64:	2303      	movs	r3, #3
                             packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr, &nd_entry);
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	6b52      	ldr	r2, [r2, #52]	; 0x34
            _nx_nd_cache_add(ip_ptr, nd_ptr -> nx_icmpv6_nd_targetAddress,
 800aa6a:	f107 0120 	add.w	r1, r7, #32
 800aa6e:	9103      	str	r1, [sp, #12]
 800aa70:	9202      	str	r2, [sp, #8]
 800aa72:	9301      	str	r3, [sp, #4]
 800aa74:	2300      	movs	r3, #0
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	462b      	mov	r3, r5
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	4601      	mov	r1, r0
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f005 f85e 	bl	800fb40 <_nx_nd_cache_add>

            /* Any queued packets?. */
            if (nd_entry -> nx_nd_cache_packet_waiting_head)
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d004      	beq.n	800aa96 <_nx_icmpv6_process_na+0x28a>
            {

                /* Send the queued packets out. */
                _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 f8b9 	bl	800bc08 <_nx_icmpv6_send_queued_packets>
            }
        }

        /* All done. Release the packet and return.  */
        _nx_packet_release(packet_ptr);
 800aa96:	6838      	ldr	r0, [r7, #0]
 800aa98:	f005 ffce 	bl	8010a38 <_nx_packet_release>
        return;
 800aa9c:	e04f      	b.n	800ab3e <_nx_icmpv6_process_na+0x332>
    }

    /* When we get there, we have an ND entry that has valid (REACHABLE) LLA. */

    if ((nd_ptr -> nx_icmpv6_nd_flag & 0x20000000) == 0 && option_ptr && (!lla_same))
 800aa9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d110      	bne.n	800aacc <_nx_icmpv6_process_na+0x2c0>
 800aaaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00d      	beq.n	800aacc <_nx_icmpv6_process_na+0x2c0>
 800aab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d10a      	bne.n	800aacc <_nx_icmpv6_process_na+0x2c0>
        /*
         * Override bit is clear.
         * If the link layer address is different from the one in our cache entry,
         * and the entry is REACHABLE, update the entry to STALE.
         */
        if (nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	7e5b      	ldrb	r3, [r3, #25]
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d13b      	bne.n	800ab36 <_nx_icmpv6_process_na+0x32a>
        {

            nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	2203      	movs	r2, #3
 800aac2:	765a      	strb	r2, [r3, #25]
            nd_entry -> nx_nd_cache_timer_tick = 0;
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	2200      	movs	r2, #0
 800aac8:	61da      	str	r2, [r3, #28]
        if (nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 800aaca:	e034      	b.n	800ab36 <_nx_icmpv6_process_na+0x32a>
    else
    {

        /* Processing according to RFC2461 7.2.5. */
        /* If LLA is supplied and is different from cache value, update the cache. */
        if (option_ptr && !lla_same)
 800aacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d016      	beq.n	800ab00 <_nx_icmpv6_process_na+0x2f4>
 800aad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d113      	bne.n	800ab00 <_nx_icmpv6_process_na+0x2f4>
        {
        USHORT *new_lla, *lla;

            /*lint -e{929} -e{927} suppress cast of pointer to pointer, since it is necessary  */
            new_lla = (USHORT *)&option_ptr -> nx_icmpv6_option_data;
 800aad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aada:	3302      	adds	r3, #2
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28

            /*lint -e{927} suppress cast of pointer to pointer, since it is necessary  */
            lla = (USHORT *)nd_entry -> nx_nd_cache_mac_addr;
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	3310      	adds	r3, #16
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
            lla[0] = new_lla[0];
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	881a      	ldrh	r2, [r3, #0]
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	801a      	strh	r2, [r3, #0]
            lla[1] = new_lla[1]; /* lgtm[cpp/overflow-buffer] */
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	3302      	adds	r3, #2
 800aaf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf2:	8852      	ldrh	r2, [r2, #2]
 800aaf4:	801a      	strh	r2, [r3, #0]
            lla[2] = new_lla[2]; /* lgtm[cpp/overflow-buffer] */
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	3304      	adds	r3, #4
 800aafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aafc:	8892      	ldrh	r2, [r2, #4]
 800aafe:	801a      	strh	r2, [r3, #0]
        }
        if (nd_ptr -> nx_icmpv6_nd_flag & 0x40000000) /* S bit is set, force cache entry to REACHABLE */
 800ab00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d008      	beq.n	800ab1e <_nx_icmpv6_process_na+0x312>
        {

            nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_REACHABLE;
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	765a      	strb	r2, [r3, #25]
            nd_entry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_reachable_timer;
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	f8d2 2ec8 	ldr.w	r2, [r2, #3784]	; 0xec8
 800ab1a:	61da      	str	r2, [r3, #28]
 800ab1c:	e00b      	b.n	800ab36 <_nx_icmpv6_process_na+0x32a>
        }
        else if (option_ptr && (!lla_same)) /* S bit is clear and either TLLA is not supplied or it is different. */
 800ab1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d008      	beq.n	800ab36 <_nx_icmpv6_process_na+0x32a>
 800ab24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d105      	bne.n	800ab36 <_nx_icmpv6_process_na+0x32a>
        {
            nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	765a      	strb	r2, [r3, #25]
            nd_entry -> nx_nd_cache_timer_tick = 0;
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	2200      	movs	r2, #0
 800ab34:	61da      	str	r2, [r3, #28]
        }
    }

    _nx_packet_release(packet_ptr);
 800ab36:	6838      	ldr	r0, [r7, #0]
 800ab38:	f005 ff7e 	bl	8010a38 <_nx_packet_release>
    return;
 800ab3c:	bf00      	nop
}
 800ab3e:	3758      	adds	r7, #88	; 0x58
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bdb0      	pop	{r4, r5, r7, pc}

0800ab44 <_nx_icmpv6_process_ns>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_process_ns(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b09e      	sub	sp, #120	; 0x78
 800ab48:	af04      	add	r7, sp, #16
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
UINT              source_unspecified;
UINT              error;
UINT              option_length;
NX_ICMPV6_HEADER *header_ptr;
NX_IPV6_HEADER   *ipv6_header;
UINT              SLLA_changed = NX_FALSE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG             dest_address[4];


    /* Initialize local variable: assume source address is specified. */
    source_unspecified = NX_FALSE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	663b      	str	r3, [r7, #96]	; 0x60

    /* Assume there is no error. */
    error = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get a pointer to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Get a pointer to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab64:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get a pointer to the Neighbor Discovery message. */
    /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
    nd_ptr = (NX_ICMPV6_ND *)header_ptr;
 800ab66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab68:	643b      	str	r3, [r7, #64]	; 0x40

    /* Convert target address to host byte order. */
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800ab6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f004 ffbe 	bl	800faf0 <_nx_ipv6_address_change_endian>

    /* Convert flag field to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800ab74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	ba1a      	rev	r2, r3
 800ab7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab7c:	605a      	str	r2, [r3, #4]


    /* Validate the packet. */
    if (_nx_icmpv6_validate_neighbor_message(packet_ptr) != NX_SUCCESS)
 800ab7e:	6838      	ldr	r0, [r7, #0]
 800ab80:	f001 f9a6 	bl	800bed0 <_nx_icmpv6_validate_neighbor_message>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <_nx_icmpv6_process_ns+0x4a>
    {
        error = 1;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Find whether or not sender is unspecified.  If sender is unspecified,
       the sender is performing DAD process. */
    if (CHECK_UNSPECIFIED_ADDRESS(ipv6_header -> nx_ip_header_source_ip))
 800ab8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab90:	3308      	adds	r3, #8
 800ab92:	4618      	mov	r0, r3
 800ab94:	f004 fe13 	bl	800f7be <CHECK_UNSPECIFIED_ADDRESS>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <_nx_icmpv6_process_ns+0x5e>
    {

        /* Mark the packet source as nonsolicited. */
        source_unspecified = NX_TRUE;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	663b      	str	r3, [r7, #96]	; 0x60

    /* Find the appropriate interface to send the packet out on, based
       on the destination address. */

    /* Get a pointer to the first ipv6 address in the interface address list. */
    interface_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba6:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (!error)
 800aba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d114      	bne.n	800abd8 <_nx_icmpv6_process_ns+0x94>
    {

        /* Loop to match IP addresses.  */
        while (interface_addr != NX_NULL)
 800abae:	e00e      	b.n	800abce <_nx_icmpv6_process_ns+0x8a>
        {

            /* Does the current address in the IP interface list match the one in the
               ND message header? */
            if ((CHECK_IPV6_ADDRESSES_SAME(interface_addr -> nxd_ipv6_address,
 800abb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb2:	f103 0208 	add.w	r2, r3, #8
                                           nd_ptr -> nx_icmpv6_nd_targetAddress)))
 800abb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb8:	3308      	adds	r3, #8
            if ((CHECK_IPV6_ADDRESSES_SAME(interface_addr -> nxd_ipv6_address,
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f004 fdd2 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d106      	bne.n	800abd6 <_nx_icmpv6_process_ns+0x92>
                /* We're done matching. */
                break;
            }

            /* Get next IPv6 address in the interface address list.  */
            interface_addr = interface_addr -> nxd_ipv6_address_next;
 800abc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (interface_addr != NX_NULL)
 800abce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1ed      	bne.n	800abb0 <_nx_icmpv6_process_ns+0x6c>
 800abd4:	e000      	b.n	800abd8 <_nx_icmpv6_process_ns+0x94>
                break;
 800abd6:	bf00      	nop
        }
    }

    if (error || (interface_addr == NX_NULL))
 800abd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d102      	bne.n	800abe4 <_nx_icmpv6_process_ns+0xa0>
 800abde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <_nx_icmpv6_process_ns+0xb6>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        /* An error occurred.  Release the packet. */
        _nx_packet_release(packet_ptr);
 800abf2:	6838      	ldr	r0, [r7, #0]
 800abf4:	f005 ff20 	bl	8010a38 <_nx_packet_release>

        return;
 800abf8:	e16b      	b.n	800aed2 <_nx_icmpv6_process_ns+0x38e>
    }

    /* Have find a valid address.  */
    packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = interface_addr;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abfe:	635a      	str	r2, [r3, #52]	; 0x34
     *
     * So first, we need to find out whether or not the source IP address is
     *  the unspecified address.
     */

    if (source_unspecified == NX_TRUE)
 800ac00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d10b      	bne.n	800ac1e <_nx_icmpv6_process_ns+0xda>

        /* The sender is in DAD process. */

#ifndef NX_DISABLE_IPV6_DAD
        /* The sender is doing a DAD on the same address as we have... */
        if (interface_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_TENTATIVE)
 800ac06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac08:	789b      	ldrb	r3, [r3, #2]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d107      	bne.n	800ac1e <_nx_icmpv6_process_ns+0xda>
        {

            /* Our interface address is in tentative state.  Therefore interface
               address is also invalid.  */
            _nx_icmpv6_DAD_failure(ip_ptr, interface_addr);
 800ac0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7ff f9f9 	bl	800a008 <_nx_icmpv6_DAD_failure>

            _nx_packet_release(packet_ptr);
 800ac16:	6838      	ldr	r0, [r7, #0]
 800ac18:	f005 ff0e 	bl	8010a38 <_nx_packet_release>
            return;
 800ac1c:	e159      	b.n	800aed2 <_nx_icmpv6_process_ns+0x38e>
           we have a valid address.  In this case, we should send a response */
    }

    /* Get a pointer to the ICMPv6 options. */
    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(header_ptr, sizeof(NX_ICMPV6_ND));
 800ac1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac20:	3318      	adds	r3, #24
 800ac22:	667b      	str	r3, [r7, #100]	; 0x64

    /* We'll need to keep track of option data to parse the options. */
    option_length = (UINT)packet_ptr -> nx_packet_length - (UINT)sizeof(NX_ICMPV6_ND);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	3b18      	subs	r3, #24
 800ac2a:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Walk through the ICMPv6 options, if any. */
    while (option_length > 0)
 800ac2c:	e095      	b.n	800ad5a <_nx_icmpv6_process_ns+0x216>
    {

        /* Handle the source link-layer address option for a solicited NS request. */
        if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_SRC_LINK_ADDR)
 800ac2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	f040 8084 	bne.w	800ad40 <_nx_icmpv6_process_ns+0x1fc>
               valid (not unspecified.) Therefore we should add
               the source link layer address to our neighbor cache. */

            /* Is the source IP address is not in our ND cache? */

            status = _nx_nd_cache_find_entry(ip_ptr, ipv6_header -> nx_ip_header_source_ip, &nd_entry);
 800ac38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	f107 0210 	add.w	r2, r7, #16
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f005 fa36 	bl	80100b4 <_nx_nd_cache_find_entry>
 800ac48:	63b8      	str	r0, [r7, #56]	; 0x38

            if (status != NX_SUCCESS)
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d016      	beq.n	800ac7e <_nx_icmpv6_process_ns+0x13a>
            {

                /* Yes, this NS fills in the mac address so the LLA is changed. */
                SLLA_changed = NX_TRUE;
 800ac50:	2301      	movs	r3, #1
 800ac52:	657b      	str	r3, [r7, #84]	; 0x54

                /* No, so we create a cache entry. */
                /*lint -e{929} suppress cast from pointer to pointer, since it is necessary  */
                /*lint -e{826} suppress cast of pointer to pointer, since it is necessary  */
                /*lint -e{740} suppress unusual cast of pointer, since it is necessary  */
                _nx_nd_cache_add(ip_ptr, ipv6_header -> nx_ip_header_source_ip,
 800ac54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac56:	f103 0108 	add.w	r1, r3, #8
                                 interface_addr -> nxd_ipv6_address_attached,
 800ac5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac5c:	685a      	ldr	r2, [r3, #4]
                                 (CHAR *)&option_ptr -> nx_icmpv6_option_data, 0, ND_CACHE_STATE_STALE,
 800ac5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac60:	1c98      	adds	r0, r3, #2
                _nx_nd_cache_add(ip_ptr, ipv6_header -> nx_ip_header_source_ip,
 800ac62:	f107 0310 	add.w	r3, r7, #16
 800ac66:	9303      	str	r3, [sp, #12]
 800ac68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac6a:	9302      	str	r3, [sp, #8]
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	2300      	movs	r3, #0
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	4603      	mov	r3, r0
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f004 ff62 	bl	800fb40 <_nx_nd_cache_add>
 800ac7c:	e060      	b.n	800ad40 <_nx_icmpv6_process_ns+0x1fc>
            /* Entry already exists.  If the mac address is the same, do not update the entry. Otherwise,
               update the entry and set the state to STALE (RFC2461 7.2.3) */
            ULONG mac_msw, mac_lsw, new_msw, new_lsw;

            /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
            UCHAR *new_mac = (UCHAR *)&option_ptr -> nx_icmpv6_option_data;
 800ac7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac80:	3302      	adds	r3, #2
 800ac82:	637b      	str	r3, [r7, #52]	; 0x34

                /*lint -e{644} suppress variable might not be initialized, since "nd_entry" was initialized in _nx_nd_cache_find_entry. */
                mac_msw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[0]) << 8) | (nd_entry -> nx_nd_cache_mac_addr[1]);
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	7c1b      	ldrb	r3, [r3, #16]
 800ac88:	021b      	lsls	r3, r3, #8
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	7c52      	ldrb	r2, [r2, #17]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	633b      	str	r3, [r7, #48]	; 0x30
                mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	7c9b      	ldrb	r3, [r3, #18]
 800ac96:	061a      	lsls	r2, r3, #24
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	7cdb      	ldrb	r3, [r3, #19]
 800ac9c:	041b      	lsls	r3, r3, #16
 800ac9e:	431a      	orrs	r2, r3
                          ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[4]) << 8) | nd_entry -> nx_nd_cache_mac_addr[5];
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	7d1b      	ldrb	r3, [r3, #20]
 800aca4:	021b      	lsls	r3, r3, #8
                mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800aca6:	4313      	orrs	r3, r2
                          ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[4]) << 8) | nd_entry -> nx_nd_cache_mac_addr[5];
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	7d52      	ldrb	r2, [r2, #21]
                mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800acac:	4313      	orrs	r3, r2
 800acae:	62fb      	str	r3, [r7, #44]	; 0x2c
                new_msw = ((ULONG)(new_mac[0]) << 8) | (new_mac[1]);
 800acb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	021b      	lsls	r3, r3, #8
 800acb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acb8:	3201      	adds	r2, #1
 800acba:	7812      	ldrb	r2, [r2, #0]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	62bb      	str	r3, [r7, #40]	; 0x28
                new_lsw = ((ULONG)(new_mac[2]) << 24) | ((ULONG)(new_mac[3]) << 16) | ((ULONG)(new_mac[4]) << 8) | new_mac[5]; /* lgtm[cpp/overflow-buffer] */
 800acc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc2:	3302      	adds	r3, #2
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	061a      	lsls	r2, r3, #24
 800acc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acca:	3303      	adds	r3, #3
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	041b      	lsls	r3, r3, #16
 800acd0:	431a      	orrs	r2, r3
 800acd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd4:	3304      	adds	r3, #4
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	021b      	lsls	r3, r3, #8
 800acda:	4313      	orrs	r3, r2
 800acdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acde:	3205      	adds	r2, #5
 800ace0:	7812      	ldrb	r2, [r2, #0]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
                if ((mac_msw != new_msw) || (mac_lsw != new_lsw)) /* If the new MAC is different from what we have in the table. */
 800ace6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	429a      	cmp	r2, r3
 800acec:	d103      	bne.n	800acf6 <_nx_icmpv6_process_ns+0x1b2>
 800acee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d01b      	beq.n	800ad2e <_nx_icmpv6_process_ns+0x1ea>
                {

                    /* This NS changes the cache entry mac address, so the LLA is changed. */
                    SLLA_changed = NX_TRUE;
 800acf6:	2301      	movs	r3, #1
 800acf8:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Set the mac address. */
                    for (i = 0; i < 6; i++)
 800acfa:	2300      	movs	r3, #0
 800acfc:	653b      	str	r3, [r7, #80]	; 0x50
 800acfe:	e00c      	b.n	800ad1a <_nx_icmpv6_process_ns+0x1d6>
                    {
                        nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 800ad00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad04:	4413      	add	r3, r2
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	7819      	ldrb	r1, [r3, #0]
 800ad0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad0c:	4413      	add	r3, r2
 800ad0e:	3310      	adds	r3, #16
 800ad10:	460a      	mov	r2, r1
 800ad12:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < 6; i++)
 800ad14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad16:	3301      	adds	r3, #1
 800ad18:	653b      	str	r3, [r7, #80]	; 0x50
 800ad1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad1c:	2b05      	cmp	r3, #5
 800ad1e:	d9ef      	bls.n	800ad00 <_nx_icmpv6_process_ns+0x1bc>
                    }

                    /* Set the state to STALE.  */
                    nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	2203      	movs	r2, #3
 800ad24:	765a      	strb	r2, [r3, #25]

                    /* Set the interface. */
                    nd_entry -> nx_nd_cache_interface_ptr = interface_addr -> nxd_ipv6_address_attached;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad2a:	6852      	ldr	r2, [r2, #4]
 800ad2c:	621a      	str	r2, [r3, #32]
                }

                if (nd_entry -> nx_nd_cache_packet_waiting_head) /* There are packets waiting to be transmitted */
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d004      	beq.n	800ad40 <_nx_icmpv6_process_ns+0x1fc>
                {

                    /* Ok to transmit the packets now. */
                    _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 ff64 	bl	800bc08 <_nx_icmpv6_send_queued_packets>
                }
            }
        }

        option_length -= ((UINT)(option_ptr -> nx_icmpv6_option_length) << 3);
 800ad40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad42:	785b      	ldrb	r3, [r3, #1]
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	65bb      	str	r3, [r7, #88]	; 0x58

        /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
        option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800ad4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad4e:	785b      	ldrb	r3, [r3, #1]
 800ad50:	00db      	lsls	r3, r3, #3
 800ad52:	461a      	mov	r2, r3
 800ad54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad56:	4413      	add	r3, r2
 800ad58:	667b      	str	r3, [r7, #100]	; 0x64
    while (option_length > 0)
 800ad5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f47f af66 	bne.w	800ac2e <_nx_icmpv6_process_ns+0xea>
    }

    /* We may need to reset a reachable timer if there is no new LLA involved.
       Did we change the cache LLA? */
    if (SLLA_changed == NX_FALSE)
 800ad62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d113      	bne.n	800ad90 <_nx_icmpv6_process_ns+0x24c>

    ND_CACHE_ENTRY *nd_entry;

        /* Verify the source of the NS packet in our ND cache, in case
           we have not already done so. */
        if (_nx_nd_cache_find_entry(ip_ptr, ipv6_header -> nx_ip_header_source_ip, &nd_entry) == NX_SUCCESS)
 800ad68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	f107 020c 	add.w	r2, r7, #12
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f005 f99e 	bl	80100b4 <_nx_nd_cache_find_entry>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d108      	bne.n	800ad90 <_nx_icmpv6_process_ns+0x24c>
        {

            /* Yes, is it currently in a reachable state? */
            /*lint -e{644} suppress variable might not be initialized, since "nd_entry" was initialized in _nx_nd_cache_find_entry. */
            if (nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	7e5b      	ldrb	r3, [r3, #25]
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d104      	bne.n	800ad90 <_nx_icmpv6_process_ns+0x24c>
            {
                /* Ok to update the timer. */
                nd_entry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_reachable_timer;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	f8d2 2ec8 	ldr.w	r2, [r2, #3784]	; 0xec8
 800ad8e:	61da      	str	r2, [r3, #28]
     * Adjust the packet, eliminate the option part.  At this point, the packet prepend_ptr points to the
     *    beginning of the ICMP message. The size of the ICMP message includes ICMP NA and the target
     *    link layer address option field (8 bytes).
     */
    packet_ptr -> nx_packet_append_ptr =
        packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV6_ND) + 8;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f103 0220 	add.w	r2, r3, #32
    packet_ptr -> nx_packet_append_ptr =
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	60da      	str	r2, [r3, #12]

    packet_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND) + 8;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2220      	movs	r2, #32
 800ada0:	625a      	str	r2, [r3, #36]	; 0x24

    if (source_unspecified == NX_TRUE)
 800ada2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d104      	bne.n	800adb2 <_nx_icmpv6_process_ns+0x26e>
    {

        /* Response to an unsolicited NS: clear the S bit.*/
        nd_ptr -> nx_icmpv6_nd_flag = (0x20000000);
 800ada8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adaa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800adae:	605a      	str	r2, [r3, #4]
 800adb0:	e003      	b.n	800adba <_nx_icmpv6_process_ns+0x276>
    }
    else
    {
        /* Response to a normal NS: set the S bit.*/
        nd_ptr -> nx_icmpv6_nd_flag = (0x60000000);
 800adb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800adb8:	605a      	str	r2, [r3, #4]
    }

    NX_CHANGE_ULONG_ENDIAN(nd_ptr -> nx_icmpv6_nd_flag);
 800adba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	ba1a      	rev	r2, r3
 800adc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc2:	605a      	str	r2, [r3, #4]

    /* nd_ptr -> targetAddress has been converted to host byte order.
       We need to convert it back to network byte order. */
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800adc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc6:	3308      	adds	r3, #8
 800adc8:	4618      	mov	r0, r3
 800adca:	f004 fe91 	bl	800faf0 <_nx_ipv6_address_change_endian>

    header_ptr -> nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_ADVERTISEMENT_TYPE;
 800adce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add0:	2288      	movs	r2, #136	; 0x88
 800add2:	701a      	strb	r2, [r3, #0]
    header_ptr -> nx_icmpv6_header_code = 0;
 800add4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add6:	2200      	movs	r2, #0
 800add8:	705a      	strb	r2, [r3, #1]
    header_ptr -> nx_icmpv6_header_checksum = 0;
 800adda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800addc:	2200      	movs	r2, #0
 800adde:	805a      	strh	r2, [r3, #2]

    if (source_unspecified == NX_TRUE)
 800ade0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d108      	bne.n	800adf8 <_nx_icmpv6_process_ns+0x2b4>
    {

        /* Sender uses unspecified address.  So we send NA to all node multicast address. */
        /* RFC2461 7.2.4 */
        dest_address[0] = 0xFF020000;
 800ade6:	4b3c      	ldr	r3, [pc, #240]	; (800aed8 <_nx_icmpv6_process_ns+0x394>)
 800ade8:	617b      	str	r3, [r7, #20]
        dest_address[1] = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	61bb      	str	r3, [r7, #24]
        dest_address[2] = 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	61fb      	str	r3, [r7, #28]
        dest_address[3] = 0x00000001;
 800adf2:	2301      	movs	r3, #1
 800adf4:	623b      	str	r3, [r7, #32]
 800adf6:	e007      	b.n	800ae08 <_nx_icmpv6_process_ns+0x2c4>
    }
    else
    {

        /* Set the packet destination IP address */
        COPY_IPV6_ADDRESS(ipv6_header -> nx_ip_header_source_ip,
 800adf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adfa:	3308      	adds	r3, #8
 800adfc:	f107 0214 	add.w	r2, r7, #20
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f004 fd14 	bl	800f830 <COPY_IPV6_ADDRESS>
    /*
        Fill in the options.  Since we are using the same packet,
        the option_ptr is already pointing to the option field.
     */
    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(header_ptr, sizeof(NX_ICMPV6_ND));
 800ae08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae0a:	3318      	adds	r3, #24
 800ae0c:	667b      	str	r3, [r7, #100]	; 0x64
    option_ptr -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_TRG_LINK_ADDR;
 800ae0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae10:	2202      	movs	r2, #2
 800ae12:	701a      	strb	r2, [r3, #0]
    option_ptr -> nx_icmpv6_option_length = 1;
 800ae14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae16:	2201      	movs	r2, #1
 800ae18:	705a      	strb	r2, [r3, #1]
    mac_addr = &option_ptr -> nx_icmpv6_option_data;
 800ae1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae1c:	3302      	adds	r3, #2
 800ae1e:	63fb      	str	r3, [r7, #60]	; 0x3c

    mac_addr[0] = (USHORT)(interface_addr -> nxd_ipv6_address_attached -> nx_interface_physical_address_msw);
 800ae20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae2a:	801a      	strh	r2, [r3, #0]
    mac_addr[1] = (USHORT)((interface_addr -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0xFFFF0000) >> 16); /* lgtm[cpp/overflow-buffer] */
 800ae2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	0c1a      	lsrs	r2, r3, #16
 800ae34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae36:	3302      	adds	r3, #2
 800ae38:	b292      	uxth	r2, r2
 800ae3a:	801a      	strh	r2, [r3, #0]
    mac_addr[2] = (USHORT)(interface_addr -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0x0000FFFF); /* lgtm[cpp/overflow-buffer] */
 800ae3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	691a      	ldr	r2, [r3, #16]
 800ae42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae44:	3304      	adds	r3, #4
 800ae46:	b292      	uxth	r2, r2
 800ae48:	801a      	strh	r2, [r3, #0]

    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800ae4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	ba5b      	rev16	r3, r3
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae54:	801a      	strh	r2, [r3, #0]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]); /* lgtm[cpp/overflow-buffer] */
 800ae56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae58:	3302      	adds	r3, #2
 800ae5a:	881a      	ldrh	r2, [r3, #0]
 800ae5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5e:	3302      	adds	r3, #2
 800ae60:	ba52      	rev16	r2, r2
 800ae62:	b292      	uxth	r2, r2
 800ae64:	801a      	strh	r2, [r3, #0]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]); /* lgtm[cpp/overflow-buffer] */
 800ae66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae68:	3304      	adds	r3, #4
 800ae6a:	881a      	ldrh	r2, [r3, #0]
 800ae6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6e:	3304      	adds	r3, #4
 800ae70:	ba52      	rev16	r2, r2
 800ae72:	b292      	uxth	r2, r2
 800ae74:	801a      	strh	r2, [r3, #0]
    {

        /* Compute the checksum. */
        header_ptr -> nx_icmpv6_header_checksum =
            _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
                                    (UINT)packet_ptr -> nx_packet_length,
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                    interface_addr -> nxd_ipv6_address,
 800ae7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae7c:	f103 0108 	add.w	r1, r3, #8
            _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_ICMPV6,
 800ae80:	f107 0314 	add.w	r3, r7, #20
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	460b      	mov	r3, r1
 800ae88:	213a      	movs	r1, #58	; 0x3a
 800ae8a:	6838      	ldr	r0, [r7, #0]
 800ae8c:	f001 f9c7 	bl	800c21e <_nx_ip_checksum_compute>
 800ae90:	4603      	mov	r3, r0
 800ae92:	461a      	mov	r2, r3
        header_ptr -> nx_icmpv6_header_checksum =
 800ae94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae96:	805a      	strh	r2, [r3, #2]
                                    dest_address);

        /* Write the checksum to the ICMPv6 header. */
        header_ptr -> nx_icmpv6_header_checksum = (USHORT)(~(header_ptr -> nx_icmpv6_header_checksum));
 800ae98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae9a:	885b      	ldrh	r3, [r3, #2]
 800ae9c:	43db      	mvns	r3, r3
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea2:	805a      	strh	r2, [r3, #2]

        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv6_header_checksum);
 800aea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea6:	885b      	ldrh	r3, [r3, #2]
 800aea8:	ba5b      	rev16	r3, r3
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeae:	805a      	strh	r2, [r3, #2]
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */
    /* Send out the NA reply. */
    _nx_ipv6_packet_send(ip_ptr, packet_ptr,
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
                         NX_PROTOCOL_ICMPV6,
                         packet_ptr -> nx_packet_length,
                         255 /* NA message must have hop limit 255 */,
                         interface_addr -> nxd_ipv6_address,
 800aeb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeb6:	3308      	adds	r3, #8
    _nx_ipv6_packet_send(ip_ptr, packet_ptr,
 800aeb8:	f107 0214 	add.w	r2, r7, #20
 800aebc:	9202      	str	r2, [sp, #8]
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	23ff      	movs	r3, #255	; 0xff
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	460b      	mov	r3, r1
 800aec6:	223a      	movs	r2, #58	; 0x3a
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f003 ff1f 	bl	800ed0e <_nx_ipv6_packet_send>
                         dest_address);

    /* (Let the driver release the packet.) */
    return;
 800aed0:	bf00      	nop
}
 800aed2:	3768      	adds	r7, #104	; 0x68
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	ff020000 	.word	0xff020000

0800aedc <_nx_icmpv6_process_ra>:
/*                                            change notification,        */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_process_ra(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b0a6      	sub	sp, #152	; 0x98
 800aee0:	af04      	add	r7, sp, #16
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the ND cache table entry to NULL */
    nd_entry = NX_NULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Get a pointer to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	673b      	str	r3, [r7, #112]	; 0x70

    /* If the RA message is invalid, we simply return. */
    if (_nx_icmpv6_validate_ra(packet_ptr) != NX_SUCCESS)
 800aef0:	6838      	ldr	r0, [r7, #0]
 800aef2:	f001 f88b 	bl	800c00c <_nx_icmpv6_validate_ra>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00a      	beq.n	800af12 <_nx_icmpv6_process_ra+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        _nx_packet_release(packet_ptr);
 800af0a:	6838      	ldr	r0, [r7, #0]
 800af0c:	f005 fd94 	bl	8010a38 <_nx_packet_release>
        return;
 800af10:	e249      	b.n	800b3a6 <_nx_icmpv6_process_ra+0x4ca>
    }

    /* Get a pointer to the router advertisement packet structure. */
    /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
    ra_ptr = (NX_ICMPV6_RA *)header_ptr;
 800af12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af14:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If router advertisement flag callback is set, invoke the callback function. */
    if (ip_ptr -> nx_icmpv6_ra_flag_callback)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d007      	beq.n	800af30 <_nx_icmpv6_process_ra+0x54>
    {
        ip_ptr -> nx_icmpv6_ra_flag_callback(ip_ptr, (UINT)ra_ptr -> nx_icmpv6_ra_flag);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 800af26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af28:	7952      	ldrb	r2, [r2, #5]
 800af2a:	4611      	mov	r1, r2
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	4798      	blx	r3
    }

    /* Set a pointer to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af34:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Obtain the pointer to the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	667b      	str	r3, [r7, #100]	; 0x64
    /* (1) Determine if this message comes from a periodic refresh
       or this is in response to a router solicitation.
       This is a periodic refresh if the destination address is an all-router multicast address.
     */

    if (ra_ptr -> nx_icmpv6_ra_router_lifetime == 0)
 800af3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af40:	88db      	ldrh	r3, [r3, #6]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d113      	bne.n	800af6e <_nx_icmpv6_process_ra+0x92>

        /* This router is no long valid.  */

        /* Copy the source address from the IPv6 header to a router address data
           which we will use to delete it from the router table. */
        router_address.nxd_ip_version = NX_IP_VERSION_V6;
 800af46:	2306      	movs	r3, #6
 800af48:	61bb      	str	r3, [r7, #24]
        router_address.nxd_ip_address.v6[0] = ipv6_header -> nx_ip_header_source_ip[0];
 800af4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	61fb      	str	r3, [r7, #28]
        router_address.nxd_ip_address.v6[1] = ipv6_header -> nx_ip_header_source_ip[1];
 800af50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	623b      	str	r3, [r7, #32]
        router_address.nxd_ip_address.v6[2] = ipv6_header -> nx_ip_header_source_ip[2];
 800af56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	627b      	str	r3, [r7, #36]	; 0x24
        router_address.nxd_ip_address.v6[3] = ipv6_header -> nx_ip_header_source_ip[3];
 800af5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	62bb      	str	r3, [r7, #40]	; 0x28


        /* Delete it from our default router table.*/
        _nxd_ipv6_default_router_delete(ip_ptr, &router_address);
 800af62:	f107 0318 	add.w	r3, r7, #24
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f00a fca1 	bl	80158b0 <_nxd_ipv6_default_router_delete>
    }

    /* Does the RA packet have a valid retrans_timer? */
    if (ra_ptr -> nx_icmpv6_ra_retrans_time)
 800af6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d01b      	beq.n	800afae <_nx_icmpv6_process_ra+0xd2>
    {
        /* Pickup the retrans_time value.*/
        time_val = ra_ptr -> nx_icmpv6_ra_retrans_time;
 800af76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Byte swapping. */
        NX_CHANGE_ULONG_ENDIAN(time_val);
 800af7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af7e:	ba1b      	rev	r3, r3
 800af80:	663b      	str	r3, [r7, #96]	; 0x60

        /* Yes; Reset our re-trans timer. */
        /* Conver timer ticks (in ms) into IP fast timeout value. */
        ip_ptr -> nx_ipv6_retrans_timer_ticks = time_val * NX_IP_FAST_TIMER_RATE / 1000;
 800af82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	461a      	mov	r2, r3
 800af8e:	4b9d      	ldr	r3, [pc, #628]	; (800b204 <_nx_icmpv6_process_ra+0x328>)
 800af90:	fba3 2302 	umull	r2, r3, r3, r2
 800af94:	099a      	lsrs	r2, r3, #6
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8c3 2ec4 	str.w	r2, [r3, #3780]	; 0xec4

        /* If the retrans_timer is smaller than tick resolution, set it to 1.  */
        if (ip_ptr -> nx_ipv6_retrans_timer_ticks == 0)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 3ec4 	ldr.w	r3, [r3, #3780]	; 0xec4
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d103      	bne.n	800afae <_nx_icmpv6_process_ra+0xd2>
        {
            ip_ptr -> nx_ipv6_retrans_timer_ticks = 1;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f8c3 2ec4 	str.w	r2, [r3, #3780]	; 0xec4
        }
    }

    /* Does the router advertisement have a valid reachable time? */
    if (ra_ptr -> nx_icmpv6_ra_reachable_time)
 800afae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d016      	beq.n	800afe4 <_nx_icmpv6_process_ra+0x108>
    {


        /* Yes; set a local variable to store it. */
        time_val = ra_ptr -> nx_icmpv6_ra_reachable_time;
 800afb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	663b      	str	r3, [r7, #96]	; 0x60

        /* Byte swapping. */
        NX_CHANGE_ULONG_ENDIAN(time_val);
 800afbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afbe:	ba1b      	rev	r3, r3
 800afc0:	663b      	str	r3, [r7, #96]	; 0x60

        /* Convert reachable timer to seconds. */
        ip_ptr -> nx_ipv6_reachable_timer = time_val / 1000;
 800afc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afc4:	4a8f      	ldr	r2, [pc, #572]	; (800b204 <_nx_icmpv6_process_ra+0x328>)
 800afc6:	fba2 2303 	umull	r2, r3, r2, r3
 800afca:	099a      	lsrs	r2, r3, #6
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8c3 2ec8 	str.w	r2, [r3, #3784]	; 0xec8

        /* In case the reachable timer is less than 1 second, set reachable timer to 1 second. */
        if (ip_ptr -> nx_ipv6_reachable_timer == 0)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 3ec8 	ldr.w	r3, [r3, #3784]	; 0xec8
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d103      	bne.n	800afe4 <_nx_icmpv6_process_ra+0x108>
        {
            ip_ptr -> nx_ipv6_reachable_timer = 1;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f8c3 2ec8 	str.w	r2, [r3, #3784]	; 0xec8
        }
    }

    if (IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip) & IPV6_ALL_NODE_MCAST)
 800afe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afe6:	3318      	adds	r3, #24
 800afe8:	4618      	mov	r0, r3
 800afea:	f004 fcc1 	bl	800f970 <IPv6_Address_Type>
 800afee:	4603      	mov	r3, r0
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d003      	beq.n	800b000 <_nx_icmpv6_process_ra+0x124>
    {

        /* The destination address points to all-nodes (unsolicited) multicast.  Therefore this
           is a periodic refresh. */
        router_type = NX_IPV6_ROUTE_TYPE_UNSOLICITATED;
 800aff8:	2302      	movs	r3, #2
 800affa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800affe:	e002      	b.n	800b006 <_nx_icmpv6_process_ra+0x12a>
    }
    else
    {
        router_type = NX_IPV6_ROUTE_TYPE_SOLICITATED;
 800b000:	2301      	movs	r3, #1
 800b002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }

    /* (2) Process option field */
    packet_length = (INT)packet_ptr -> nx_packet_length - (INT)sizeof(NX_ICMPV6_RA);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	3b10      	subs	r3, #16
 800b00c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(ra_ptr, sizeof(NX_ICMPV6_RA));
 800b010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b012:	3310      	adds	r3, #16
 800b014:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Going through the rest of the packet options. */
    while (packet_length > 0)
 800b016:	e18b      	b.n	800b330 <_nx_icmpv6_process_ra+0x454>
    {

        /* If there are prefix info options, we pick the last one. */

        /* Is the current option a prefix option? */
        if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_PREFIX_INFO)
 800b018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	f040 80f5 	bne.w	800b20c <_nx_icmpv6_process_ra+0x330>
        {

            /* Validate option length before cast to avoid OOB access. */
            if ((UINT)(option_ptr -> nx_icmpv6_option_length << 3) < sizeof(NX_ICMPV6_OPTION_PREFIX))
 800b022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b024:	785b      	ldrb	r3, [r3, #1]
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	2b1f      	cmp	r3, #31
 800b02a:	d80a      	bhi.n	800b042 <_nx_icmpv6_process_ra+0x166>
            {
#ifndef NX_DISABLE_ICMP_INFO

                /* Increment the ICMP invalid packet error. */
                ip_ptr -> nx_ip_icmp_invalid_packets++;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

                _nx_packet_release(packet_ptr);
 800b03a:	6838      	ldr	r0, [r7, #0]
 800b03c:	f005 fcfc 	bl	8010a38 <_nx_packet_release>
                return;
 800b040:	e1b1      	b.n	800b3a6 <_nx_icmpv6_process_ra+0x4ca>
            }

            /* Yes, set a local pointer to the option. */
            /*lint -e{929} -e{826} -e{740} suppress cast of pointer to pointer, since it is necessary  */
            prefix_ptr = (NX_ICMPV6_OPTION_PREFIX *)option_ptr;
 800b042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b044:	647b      	str	r3, [r7, #68]	; 0x44

            /* Take care of the endian-ness of the prefix address. */
            NX_IPV6_ADDRESS_CHANGE_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix);
 800b046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b048:	3310      	adds	r3, #16
 800b04a:	4618      	mov	r0, r3
 800b04c:	f004 fd50 	bl	800faf0 <_nx_ipv6_address_change_endian>

            /* Is this a link local address (prefix)?  */
            if ((prefix_ptr -> nx_icmpv6_option_prefix[0] & (ULONG)0xFFC00000) == (ULONG)0xFE800000)
 800b050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	4b6c      	ldr	r3, [pc, #432]	; (800b208 <_nx_icmpv6_process_ra+0x32c>)
 800b056:	4013      	ands	r3, r2
 800b058:	f113 7fc0 	cmn.w	r3, #25165824	; 0x1800000
 800b05c:	d10f      	bne.n	800b07e <_nx_icmpv6_process_ra+0x1a2>
            {

                /* Yes.  Ignore (skip) this option, as per  RFC 4861 6.3.4
                   and RFC 4862 5.5.3, and continue. */
                packet_length -= (option_ptr -> nx_icmpv6_option_length << 3);
 800b05e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b060:	785b      	ldrb	r3, [r3, #1]
 800b062:	00db      	lsls	r3, r3, #3
 800b064:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Get the next option. */
                /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
                option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800b06e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b070:	785b      	ldrb	r3, [r3, #1]
 800b072:	00db      	lsls	r3, r3, #3
 800b074:	461a      	mov	r2, r3
 800b076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b078:	4413      	add	r3, r2
 800b07a:	67bb      	str	r3, [r7, #120]	; 0x78

                continue;
 800b07c:	e158      	b.n	800b330 <_nx_icmpv6_process_ra+0x454>
            }

            /* So far the prefix information is valid.
               So take care of the endian-ness. */
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime);
 800b07e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	ba1a      	rev	r2, r3
 800b084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b086:	605a      	str	r2, [r3, #4]
            NX_CHANGE_ULONG_ENDIAN(prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime);
 800b088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	ba1a      	rev	r2, r3
 800b08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b090:	609a      	str	r2, [r3, #8]

            /* Does the prefix have a valid lifetime? */
            if (prefix_ptr -> nx_icmpv6_option_prefix_preferred_lifetime > prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime)
 800b092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d90f      	bls.n	800b0be <_nx_icmpv6_process_ra+0x1e2>
            {

                /* Ignore this option, according to RFC 4862 5.5.3(c) and continue. */
                packet_length -= (option_ptr -> nx_icmpv6_option_length << 3);
 800b09e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0a0:	785b      	ldrb	r3, [r3, #1]
 800b0a2:	00db      	lsls	r3, r3, #3
 800b0a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Get a pointer to the next option. Abort processing the current option any further. */
                /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
                option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800b0ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0b0:	785b      	ldrb	r3, [r3, #1]
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0b8:	4413      	add	r3, r2
 800b0ba:	67bb      	str	r3, [r7, #120]	; 0x78

                continue;
 800b0bc:	e138      	b.n	800b330 <_nx_icmpv6_process_ra+0x454>
            }

            /* Determine whether or not the on-link flag is set. */
            /* Ignore the prefix information option when it is link-local. Page 55, Section 6.3.4, RFC 4861. */
            if (prefix_ptr -> nx_icmpv6_option_prefix_flag & 0x80)
 800b0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0c0:	78db      	ldrb	r3, [r3, #3]
 800b0c2:	b25b      	sxtb	r3, r3
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f280 8124 	bge.w	800b312 <_nx_icmpv6_process_ra+0x436>
            {

                /* This prefix option contains onlink prefix information. */
                /* The following process follows RFC 4861 6.3.4 */

                prefix_length = prefix_ptr -> nx_icmpv6_option_prefix_length;
 800b0ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0cc:	789b      	ldrb	r3, [r3, #2]
 800b0ce:	643b      	str	r3, [r7, #64]	; 0x40

                if (prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime == 0)
 800b0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d107      	bne.n	800b0e8 <_nx_icmpv6_process_ra+0x20c>
                {

                    /* Invalidate the prefix list entry, RFC 4861 6.3.4, p55. */
                    /* Stateless address with this prefix is deleted when prefix is deleted. */
                    _nx_ipv6_prefix_list_delete(ip_ptr, prefix_ptr -> nx_icmpv6_option_prefix, prefix_length);
 800b0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0da:	3310      	adds	r3, #16
 800b0dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f004 f8d7 	bl	800f294 <_nx_ipv6_prefix_list_delete>
 800b0e6:	e114      	b.n	800b312 <_nx_icmpv6_process_ra+0x436>
                else
                {

                    /* This prefix is onlink, and valid_lifetime is non-zero.
                       So add the prefix to our list. RFC 4861 6.3.4 p55.*/
                    status = _nx_ipv6_prefix_list_add_entry(ip_ptr, prefix_ptr -> nx_icmpv6_option_prefix,
 800b0e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ea:	f103 0110 	add.w	r1, r3, #16
 800b0ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f004 f81e 	bl	800f136 <_nx_ipv6_prefix_list_add_entry>
 800b0fa:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                            (ULONG)prefix_length, prefix_ptr -> nx_icmpv6_option_prefix_valid_lifetime);

                    /* Check for "A" bit. */
                    if ((prefix_ptr -> nx_icmpv6_option_prefix_flag & 0x40) &&
 800b0fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0fe:	78db      	ldrb	r3, [r3, #3]
 800b100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	f000 8104 	beq.w	800b312 <_nx_icmpv6_process_ra+0x436>
                        (prefix_ptr -> nx_icmpv6_option_prefix_length == (128 - NX_IPV6_HOST_ID_LENGTH)) &&
 800b10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b10c:	789b      	ldrb	r3, [r3, #2]
                    if ((prefix_ptr -> nx_icmpv6_option_prefix_flag & 0x40) &&
 800b10e:	2b40      	cmp	r3, #64	; 0x40
 800b110:	f040 80ff 	bne.w	800b312 <_nx_icmpv6_process_ra+0x436>
                        (prefix_ptr -> nx_icmpv6_option_prefix_length == (128 - NX_IPV6_HOST_ID_LENGTH)) &&
 800b114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b116:	2b00      	cmp	r3, #0
 800b118:	f040 80fb 	bne.w	800b312 <_nx_icmpv6_process_ra+0x436>
                        (status == NX_SUCCESS))
                    {
                    /* The autonomous flag is set */

                    /* Set first_unused to be an invalid entry. */
                    UINT              first_unused = NX_MAX_IPV6_ADDRESSES;
 800b11c:	2303      	movs	r3, #3
 800b11e:	677b      	str	r3, [r7, #116]	; 0x74
                           addresses formed by address autoconfiguration.  Towards the end of 5.5.3(d),
                           the RFC explains that the search may still lead to address conflict (by not
                           searching for addresses configured manually or via DHCP.  Therefore this
                           implemenation chooses to search the entire IPv6 global address, in order to
                           avoid conflict IP addresses. */
                        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 800b120:	2300      	movs	r3, #0
 800b122:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b124:	e00d      	b.n	800b142 <_nx_icmpv6_process_ra+0x266>
                        {

                            if (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid == NX_FALSE)
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b12a:	015b      	lsls	r3, r3, #5
 800b12c:	4413      	add	r3, r2
 800b12e:	3310      	adds	r3, #16
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d102      	bne.n	800b13c <_nx_icmpv6_process_ra+0x260>
                            {

                                /* Found the first unused entry. */
                                first_unused = i;
 800b136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b138:	677b      	str	r3, [r7, #116]	; 0x74
                                break;
 800b13a:	e005      	b.n	800b148 <_nx_icmpv6_process_ra+0x26c>
                        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 800b13c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b13e:	3301      	adds	r3, #1
 800b140:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b144:	2b02      	cmp	r3, #2
 800b146:	d9ee      	bls.n	800b126 <_nx_icmpv6_process_ra+0x24a>
                            }
                        }

                        if ((first_unused != NX_MAX_IPV6_ADDRESSES)
 800b148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	f000 80e1 	beq.w	800b312 <_nx_icmpv6_process_ra+0x436>
                        {

                            /* If there are no global addresses with such a prefix, and there is an unused entry,
                               a new global address is formed. RFC 4862 5.5.3(d), p18 */

                            ipv6_address = &ip_ptr -> nx_ipv6_address[first_unused];
 800b150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b152:	015b      	lsls	r3, r3, #5
 800b154:	3310      	adds	r3, #16
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	4413      	add	r3, r2
 800b15a:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Find 64-bit interface ID. See RFC 4291 */
                            word2 = if_ptr -> nx_interface_physical_address_msw << 16 |
 800b15c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	041a      	lsls	r2, r3, #16
                                ((if_ptr -> nx_interface_physical_address_lsw & 0xFF000000) >> 16) | 0xFF;
 800b162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	0c1b      	lsrs	r3, r3, #16
 800b168:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                            word2 = if_ptr -> nx_interface_physical_address_msw << 16 |
 800b16c:	4313      	orrs	r3, r2
 800b16e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800b172:	63bb      	str	r3, [r7, #56]	; 0x38

                            /* Fix the 2nd lower-order bit of the 1st byte */
                            word2 = (word2 & 0xFDFFFFFF) | (~(word2 | 0xFDFFFFFF));
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
 800b17a:	63bb      	str	r3, [r7, #56]	; 0x38
                            word3 = (if_ptr -> nx_interface_physical_address_lsw & 0x00FFFFFF) | 0xFE000000;
 800b17c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b184:	f043 437e 	orr.w	r3, r3, #4261412864	; 0xfe000000
 800b188:	637b      	str	r3, [r7, #52]	; 0x34

                            ipv6_address -> nxd_ipv6_address_valid = NX_TRUE;
 800b18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18c:	2201      	movs	r2, #1
 800b18e:	701a      	strb	r2, [r3, #0]
                            ipv6_address -> nxd_ipv6_address_type = NX_IP_VERSION_V6;
 800b190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b192:	2206      	movs	r2, #6
 800b194:	705a      	strb	r2, [r3, #1]

                            ipv6_address -> nxd_ipv6_address_attached = if_ptr;
 800b196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b198:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b19a:	605a      	str	r2, [r3, #4]
                            ipv6_address -> nxd_ipv6_address[0] = prefix_ptr -> nx_icmpv6_option_prefix[0];
 800b19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b19e:	691a      	ldr	r2, [r3, #16]
 800b1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a2:	609a      	str	r2, [r3, #8]
                            ipv6_address -> nxd_ipv6_address[1] = prefix_ptr -> nx_icmpv6_option_prefix[1];
 800b1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a6:	695a      	ldr	r2, [r3, #20]
 800b1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1aa:	60da      	str	r2, [r3, #12]
                            ipv6_address -> nxd_ipv6_address[2] = word2;
 800b1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1b0:	611a      	str	r2, [r3, #16]
                            ipv6_address -> nxd_ipv6_address[3] = word3;
 800b1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1b6:	615a      	str	r2, [r3, #20]

                            ipv6_address -> nxd_ipv6_address_next = if_ptr -> nxd_interface_ipv6_address_list_head;
 800b1b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1ba:	6a1a      	ldr	r2, [r3, #32]
 800b1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1be:	619a      	str	r2, [r3, #24]
                            if_ptr -> nxd_interface_ipv6_address_list_head = ipv6_address;
 800b1c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1c4:	621a      	str	r2, [r3, #32]

#ifndef NX_DISABLE_IPV6_DAD
                            /* Set the address to Tentative, so the stack can start DAD process. */
                            ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_TENTATIVE;
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	709a      	strb	r2, [r3, #2]
                            ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_VALID;
#endif /* NX_DISABLE_IPV6_DAD */

                            /* Join the solicited-node multicast group */
                            /* FF02::1:FFXX:XXXX */
                            SET_SOLICITED_NODE_MULTICAST_ADDRESS(address, ipv6_address -> nxd_ipv6_address);
 800b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ce:	f103 0208 	add.w	r2, r3, #8
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f004 fb47 	bl	800f86c <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
                            _nx_ipv6_multicast_join(ip_ptr, address, ipv6_address -> nxd_ipv6_address_attached);
 800b1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	f107 0308 	add.w	r3, r7, #8
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f003 fae3 	bl	800e7b4 <_nx_ipv6_multicast_join>

                            ipv6_address -> nxd_ipv6_address_prefix_length = (UCHAR)prefix_length;
 800b1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f4:	70da      	strb	r2, [r3, #3]
                            ipv6_address -> nxd_ipv6_address_ConfigurationMethod = NX_IPV6_ADDRESS_BASED_ON_INTERFACE;
 800b1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f8:	2204      	movs	r2, #4
 800b1fa:	775a      	strb	r2, [r3, #29]
#ifndef NX_DISABLE_IPV6_DAD
                            ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit = NX_IPV6_DAD_TRANSMITS - 1;
 800b1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fe:	2202      	movs	r2, #2
 800b200:	771a      	strb	r2, [r3, #28]
 800b202:	e086      	b.n	800b312 <_nx_icmpv6_process_ra+0x436>
 800b204:	10624dd3 	.word	0x10624dd3
 800b208:	ffc00000 	.word	0xffc00000
                        }
                    }
                }
            }
        }
        else if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_SRC_LINK_ADDR)
 800b20c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d17e      	bne.n	800b312 <_nx_icmpv6_process_ra+0x436>
        {

            status = _nx_nd_cache_find_entry(ip_ptr, ipv6_header -> nx_ip_header_source_ip, &nd_entry);
 800b214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b216:	3308      	adds	r3, #8
 800b218:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f004 ff48 	bl	80100b4 <_nx_nd_cache_find_entry>
 800b224:	65f8      	str	r0, [r7, #92]	; 0x5c

            /* Find the IP address from our local nd cache. */
            if (status != NX_SUCCESS)
 800b226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d014      	beq.n	800b256 <_nx_icmpv6_process_ra+0x37a>
            {

                /* If the source IP address is not in our nd cache, add it. */
                /*lint -e{929} -e{826} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                _nx_nd_cache_add(ip_ptr, ipv6_header -> nx_ip_header_source_ip, if_ptr,
 800b22c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b22e:	f103 0108 	add.w	r1, r3, #8
                                 (CHAR *)&option_ptr -> nx_icmpv6_option_data, 0, ND_CACHE_STATE_STALE,
 800b232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b234:	1c98      	adds	r0, r3, #2
                                 packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr, &nd_entry);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                _nx_nd_cache_add(ip_ptr, ipv6_header -> nx_ip_header_source_ip, if_ptr,
 800b23a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b23e:	9203      	str	r2, [sp, #12]
 800b240:	9302      	str	r3, [sp, #8]
 800b242:	2303      	movs	r3, #3
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	2300      	movs	r3, #0
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	4603      	mov	r3, r0
 800b24c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f004 fc76 	bl	800fb40 <_nx_nd_cache_add>
 800b254:	e05d      	b.n	800b312 <_nx_icmpv6_process_ra+0x436>
            /* This entry already exists.  If the mac address is the same, do not update the entry.
               Otherwise, update the entry and set the state to STALE (RFC2461 7.2.3) */
            ULONG mac_msw, mac_lsw, new_msw, new_lsw;

            /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
            UCHAR *new_mac = (UCHAR *)&option_ptr -> nx_icmpv6_option_data;
 800b256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b258:	3302      	adds	r3, #2
 800b25a:	65bb      	str	r3, [r7, #88]	; 0x58

                /* build two MAC addresses for comparison. */
                /*lint --e{613} -e{644} suppress possible use of null pointer, since "nd_entry" was set to none NULL by _nx_nd_cache_find_entry. */
                mac_msw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[0]) << 8) | (nd_entry -> nx_nd_cache_mac_addr[1]);
 800b25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25e:	7c1b      	ldrb	r3, [r3, #16]
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b264:	7c52      	ldrb	r2, [r2, #17]
 800b266:	4313      	orrs	r3, r2
 800b268:	657b      	str	r3, [r7, #84]	; 0x54
                mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	7c9b      	ldrb	r3, [r3, #18]
 800b26e:	061a      	lsls	r2, r3, #24
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	7cdb      	ldrb	r3, [r3, #19]
 800b274:	041b      	lsls	r3, r3, #16
 800b276:	431a      	orrs	r2, r3
                    ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[4]) << 8) | nd_entry -> nx_nd_cache_mac_addr[5];
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27a:	7d1b      	ldrb	r3, [r3, #20]
 800b27c:	021b      	lsls	r3, r3, #8
                mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800b27e:	4313      	orrs	r3, r2
                    ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[4]) << 8) | nd_entry -> nx_nd_cache_mac_addr[5];
 800b280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b282:	7d52      	ldrb	r2, [r2, #21]
                mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800b284:	4313      	orrs	r3, r2
 800b286:	653b      	str	r3, [r7, #80]	; 0x50
                new_msw = ((ULONG)(new_mac[0]) << 8) | (new_mac[1]);
 800b288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b290:	3201      	adds	r2, #1
 800b292:	7812      	ldrb	r2, [r2, #0]
 800b294:	4313      	orrs	r3, r2
 800b296:	64fb      	str	r3, [r7, #76]	; 0x4c
                new_lsw = ((ULONG)(new_mac[2]) << 24) | ((ULONG)(new_mac[3]) << 16) | ((ULONG)(new_mac[4]) << 8) | new_mac[5]; /* lgtm[cpp/overflow-buffer] */
 800b298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b29a:	3302      	adds	r3, #2
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	061a      	lsls	r2, r3, #24
 800b2a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2a2:	3303      	adds	r3, #3
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	041b      	lsls	r3, r3, #16
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2b6:	3205      	adds	r2, #5
 800b2b8:	7812      	ldrb	r2, [r2, #0]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	64bb      	str	r3, [r7, #72]	; 0x48
                if ((mac_msw != new_msw) || (mac_lsw != new_lsw))
 800b2be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d103      	bne.n	800b2ce <_nx_icmpv6_process_ra+0x3f2>
 800b2c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d018      	beq.n	800b300 <_nx_icmpv6_process_ra+0x424>

                    /* Router updates its MAC address.  We update our entry as well, and place the
                       entry into STALE state for a quick address check. */

                    /* Set the mac address. */
                    for (i = 0; i < 6; i++)
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2d2:	e00c      	b.n	800b2ee <_nx_icmpv6_process_ra+0x412>
                    {
                        nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 800b2d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2d8:	4413      	add	r3, r2
 800b2da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2dc:	7819      	ldrb	r1, [r3, #0]
 800b2de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2e0:	4413      	add	r3, r2
 800b2e2:	3310      	adds	r3, #16
 800b2e4:	460a      	mov	r2, r1
 800b2e6:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < 6; i++)
 800b2e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2f0:	2b05      	cmp	r3, #5
 800b2f2:	d9ef      	bls.n	800b2d4 <_nx_icmpv6_process_ra+0x3f8>
                    }

                    /* Set the state to STALE.  */
                    nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	2203      	movs	r2, #3
 800b2f8:	765a      	strb	r2, [r3, #25]

                    /* Set the interface. */
                    nd_entry -> nx_nd_cache_interface_ptr = if_ptr;
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2fe:	621a      	str	r2, [r3, #32]
                }


                /* Since we received source LLA, we shall transmit any packets that are pending
                   address resolution of this target. */
                if (nd_entry -> nx_nd_cache_packet_waiting_head) /* There are packets waiting to be transmitted */
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	2b00      	cmp	r3, #0
 800b306:	d004      	beq.n	800b312 <_nx_icmpv6_process_ra+0x436>
                {

                    _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fc7b 	bl	800bc08 <_nx_icmpv6_send_queued_packets>
                                      packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
        }
#endif

        /* Update the amount of packet option data remaining. */
        packet_length -= (option_ptr -> nx_icmpv6_option_length << 3);
 800b312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b314:	785b      	ldrb	r3, [r3, #1]
 800b316:	00db      	lsls	r3, r3, #3
 800b318:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Get a pointer to the next option. */
        /*lint -e{923} suppress cast between pointer and ULONG , since it is necessary  */
        option_ptr  = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, ((option_ptr -> nx_icmpv6_option_length) << 3));
 800b322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b324:	785b      	ldrb	r3, [r3, #1]
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	461a      	mov	r2, r3
 800b32a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b32c:	4413      	add	r3, r2
 800b32e:	67bb      	str	r3, [r7, #120]	; 0x78
    while (packet_length > 0)
 800b330:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b334:	2b00      	cmp	r3, #0
 800b336:	f73f ae6f 	bgt.w	800b018 <_nx_icmpv6_process_ra+0x13c>
    }

    /* All options are processed.  No errors encountered.  */

    /* (3) Add this entry to the routing table. */
    if (ra_ptr -> nx_icmpv6_ra_router_lifetime)
 800b33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b33c:	88db      	ldrh	r3, [r3, #6]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d02b      	beq.n	800b39a <_nx_icmpv6_process_ra+0x4be>
    {

        NX_CHANGE_USHORT_ENDIAN(ra_ptr -> nx_icmpv6_ra_router_lifetime);
 800b342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b344:	88db      	ldrh	r3, [r3, #6]
 800b346:	ba5b      	rev16	r3, r3
 800b348:	b29a      	uxth	r2, r3
 800b34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b34c:	80da      	strh	r2, [r3, #6]

        /* Add the router into our default router table. */
        _nxd_ipv6_default_router_add_internal(ip_ptr, ipv6_header -> nx_ip_header_source_ip,     /* Next Hop address */
 800b34e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b350:	f103 0108 	add.w	r1, r3, #8
                                              ra_ptr -> nx_icmpv6_ra_router_lifetime, if_ptr,
 800b354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b356:	88db      	ldrh	r3, [r3, #6]
        _nxd_ipv6_default_router_add_internal(ip_ptr, ipv6_header -> nx_ip_header_source_ip,     /* Next Hop address */
 800b358:	461a      	mov	r2, r3
 800b35a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f00a f9d5 	bl	8015718 <_nxd_ipv6_default_router_add_internal>
        /* Link router entry and its corresponding nd_entry.
           Note that at this point, nd_entry may not be valid.
           When a packet is transmitted using this router, and the nd_entry is invalid (NX_NULL)
           ipv6 send routine shall use neighbor discovery process to find the address. */
        /*lint -e{644} suppress variable might not be initialized, since "rt_entry" was initialized in _nxd_ipv6_default_router_add_internal. */
        if (rt_entry && nd_entry)
 800b36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b370:	2b00      	cmp	r3, #0
 800b372:	d008      	beq.n	800b386 <_nx_icmpv6_process_ra+0x4aa>
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	2b00      	cmp	r3, #0
 800b378:	d005      	beq.n	800b386 <_nx_icmpv6_process_ra+0x4aa>
        {
            rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr = (void *)nd_entry;
 800b37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b37e:	619a      	str	r2, [r3, #24]
            nd_entry -> nx_nd_cache_is_router = rt_entry;
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b384:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (ra_ptr -> nx_icmpv6_ra_hop_limit)
 800b386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b388:	791b      	ldrb	r3, [r3, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d005      	beq.n	800b39a <_nx_icmpv6_process_ra+0x4be>
        {
            ip_ptr -> nx_ipv6_hop_limit = ra_ptr -> nx_icmpv6_ra_hop_limit;
 800b38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b390:	791b      	ldrb	r3, [r3, #4]
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8c3 2ecc 	str.w	r2, [r3, #3788]	; 0xecc
    }

#ifndef NX_DISABLE_ICMPV6_ROUTER_SOLICITATION

    /* Received a valid RS... Stop RA if it is still running. */
    if_ptr -> nx_ipv6_rtr_solicitation_count = 0;
 800b39a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b39c:	2200      	movs	r2, #0
 800b39e:	62da      	str	r2, [r3, #44]	; 0x2c

#endif

    /* release packet and return. */
    _nx_packet_release(packet_ptr);
 800b3a0:	6838      	ldr	r0, [r7, #0]
 800b3a2:	f005 fb49 	bl	8010a38 <_nx_packet_release>
}
 800b3a6:	3788      	adds	r7, #136	; 0x88
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <_nx_icmpv6_process_redirect>:
/**************************************************************************/

#ifndef NX_DISABLE_ICMPV6_REDIRECT_PROCESS

VOID _nx_icmpv6_process_redirect(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b0a0      	sub	sp, #128	; 0x80
 800b3b0:	af04      	add	r7, sp, #16
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
NX_ICMPV6_REDIRECT_MESSAGE   *redirect_ptr;
NX_IPV6_HEADER               *ip_header;
UINT                          status;
ULONG                         source_address_type;
ULONG                         router_address[4];
ULONG                         error = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	66fb      	str	r3, [r7, #108]	; 0x6c
ND_CACHE_ENTRY               *nd_entry = NX_NULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	61bb      	str	r3, [r7, #24]
ND_CACHE_ENTRY               *NDCacheEntry = NX_NULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMPV6_REDIRECT_MESSAGE))
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	2b27      	cmp	r3, #39	; 0x27
 800b3c8:	d80a      	bhi.n	800b3e0 <_nx_icmpv6_process_redirect+0x34>
    {
#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid message count.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif

        /* Invalid ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 800b3d8:	6838      	ldr	r0, [r7, #0]
 800b3da:	f005 fb2d 	bl	8010a38 <_nx_packet_release>
        return;
 800b3de:	e1bf      	b.n	800b760 <_nx_icmpv6_process_redirect+0x3b4>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING */

    /* Get interface pointer. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Initialize the MTU. */
    mtu = interface_ptr -> nx_interface_ip_mtu_size;
 800b3e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ec:	65bb      	str	r3, [r7, #88]	; 0x58
    mtu_timeout = NX_WAIT_FOREVER;
 800b3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Locate the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header = (NX_IPV6_HEADER *)(packet_ptr -> nx_packet_ip_header);
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	653b      	str	r3, [r7, #80]	; 0x50

    /* Locate the redirect message. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    redirect_ptr = (NX_ICMPV6_REDIRECT_MESSAGE *)(packet_ptr -> nx_packet_prepend_ptr);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* RFC 2461 4.5 the IPv6 and ICMPv6 header fields. */

    /* Convert the destination and target address to host byte order. */
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(redirect_ptr -> nx_icmpv6_redirect_target_address);
 800b400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b402:	3308      	adds	r3, #8
 800b404:	4618      	mov	r0, r3
 800b406:	f004 fb73 	bl	800faf0 <_nx_ipv6_address_change_endian>
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(redirect_ptr -> nx_icmpv6_redirect_destination_address);
 800b40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b40c:	3318      	adds	r3, #24
 800b40e:	4618      	mov	r0, r3
 800b410:	f004 fb6e 	bl	800faf0 <_nx_ipv6_address_change_endian>

    /* Verify that sender address is link-local address. */
    source_address_type = IPv6_Address_Type(ip_header -> nx_ip_header_source_ip);
 800b414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b416:	3308      	adds	r3, #8
 800b418:	4618      	mov	r0, r3
 800b41a:	f004 faa9 	bl	800f970 <IPv6_Address_Type>
 800b41e:	64b8      	str	r0, [r7, #72]	; 0x48
    if ((source_address_type & 0xFF) != IPV6_ADDRESS_LINKLOCAL)
 800b420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b01      	cmp	r3, #1
 800b426:	d002      	beq.n	800b42e <_nx_icmpv6_process_redirect+0x82>
    {
        error = 1;
 800b428:	2301      	movs	r3, #1
 800b42a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b42c:	e00d      	b.n	800b44a <_nx_icmpv6_process_redirect+0x9e>
    }
    /* Verify that hop limit is 255 */
    else if ((ip_header -> nx_ip_header_word_1 & 0xFF) != 0xFF)
 800b42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2bff      	cmp	r3, #255	; 0xff
 800b436:	d002      	beq.n	800b43e <_nx_icmpv6_process_redirect+0x92>
    {
        error = 1;
 800b438:	2301      	movs	r3, #1
 800b43a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b43c:	e005      	b.n	800b44a <_nx_icmpv6_process_redirect+0x9e>
    }
    /* Verifty that ICMP code is zero. */
    else if (redirect_ptr -> nx_icmpv6_redirect_icmpv6_header.nx_icmpv6_header_code != 0)
 800b43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b440:	785b      	ldrb	r3, [r3, #1]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <_nx_icmpv6_process_redirect+0x9e>
    {
        error = 1;
 800b446:	2301      	movs	r3, #1
 800b448:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* The IP source address of the redirect is the same as the current first-hop
       router for the specified ICMP destination address. */

    /* First look for redirect in the destination table. */
    if (_nxd_ipv6_destination_table_find_next_hop(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_destination_address,
 800b44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b44c:	3318      	adds	r3, #24
 800b44e:	f107 021c 	add.w	r2, r7, #28
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f00a fb23 	bl	8015aa0 <_nxd_ipv6_destination_table_find_next_hop>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10e      	bne.n	800b47e <_nx_icmpv6_process_redirect+0xd2>
                                                  router_address) == NX_SUCCESS)
    {

        /* Make sure the source is the current 1st hop router. */
        if (!CHECK_IPV6_ADDRESSES_SAME(router_address, ip_header -> nx_ip_header_source_ip))
 800b460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b462:	f103 0208 	add.w	r2, r3, #8
 800b466:	f107 031c 	add.w	r3, r7, #28
 800b46a:	4611      	mov	r1, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f004 f97a 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10f      	bne.n	800b498 <_nx_icmpv6_process_redirect+0xec>
        {
            error = 1;
 800b478:	2301      	movs	r3, #1
 800b47a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b47c:	e00c      	b.n	800b498 <_nx_icmpv6_process_redirect+0xec>
        }
    }
    /* Next check if the redirect is the default router. */
    /* Suppress cast of pointer to pointer, since it is necessary  */
    else if (_nxd_ipv6_router_lookup(ip_ptr, interface_ptr, router_address, /*lint -e{929}*/ (void **)&NDCacheEntry))
 800b47e:	f107 0314 	add.w	r3, r7, #20
 800b482:	f107 021c 	add.w	r2, r7, #28
 800b486:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f00a fe9e 	bl	80161ca <_nxd_ipv6_router_lookup>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <_nx_icmpv6_process_redirect+0xec>
    {
        /* No default router. */
        error = 1;
 800b494:	2301      	movs	r3, #1
 800b496:	66fb      	str	r3, [r7, #108]	; 0x6c
    }

    /* Make sure the source is the current 1st hop router. */
    if (!CHECK_IPV6_ADDRESSES_SAME(ip_header -> nx_ip_header_source_ip, router_address))
 800b498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b49a:	3308      	adds	r3, #8
 800b49c:	f107 021c 	add.w	r2, r7, #28
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f004 f95f 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <_nx_icmpv6_process_redirect+0x108>
    {
        error = 1;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4b2:	e024      	b.n	800b4fe <_nx_icmpv6_process_redirect+0x152>
    }
    /* The destination address field may not be multicast. */
    else if (IPv6_Address_Type(redirect_ptr -> nx_icmpv6_redirect_destination_address) & IPV6_ADDRESS_MULTICAST)
 800b4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b6:	3318      	adds	r3, #24
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f004 fa59 	bl	800f970 <IPv6_Address_Type>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <_nx_icmpv6_process_redirect+0x122>
    {
        error = 1;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4cc:	e017      	b.n	800b4fe <_nx_icmpv6_process_redirect+0x152>
    }
    /* Is target address is different from destination address?  */
    else if (!(CHECK_IPV6_ADDRESSES_SAME(redirect_ptr -> nx_icmpv6_redirect_destination_address,
 800b4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d0:	f103 0218 	add.w	r2, r3, #24
                                         redirect_ptr -> nx_icmpv6_redirect_target_address)))
 800b4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d6:	3308      	adds	r3, #8
    else if (!(CHECK_IPV6_ADDRESSES_SAME(redirect_ptr -> nx_icmpv6_redirect_destination_address,
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f004 f943 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <_nx_icmpv6_process_redirect+0x152>
    {

        /* Yes, so the target is a router, therefore the target address must be link-local.*/
        if ((IPv6_Address_Type(redirect_ptr -> nx_icmpv6_redirect_target_address) & IPV6_ADDRESS_LINKLOCAL) == 0)
 800b4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f004 fa40 	bl	800f970 <IPv6_Address_Type>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <_nx_icmpv6_process_redirect+0x152>
        {
            /* It isn't. */
            error = 1;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
    }

    /* Release the packet if it fails these validation checks. */
    if (error)
 800b4fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00a      	beq.n	800b51a <_nx_icmpv6_process_redirect+0x16e>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        _nx_packet_release(packet_ptr);
 800b512:	6838      	ldr	r0, [r7, #0]
 800b514:	f005 fa90 	bl	8010a38 <_nx_packet_release>
        return;
 800b518:	e122      	b.n	800b760 <_nx_icmpv6_process_redirect+0x3b4>
    }

    /* If there are additional options, it could be TLLA or the redirected header. */
    if (packet_ptr -> nx_packet_length - sizeof(NX_ICMPV6_REDIRECT_MESSAGE))
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	2b28      	cmp	r3, #40	; 0x28
 800b520:	f000 80cf 	beq.w	800b6c2 <_nx_icmpv6_process_redirect+0x316>
    {

        /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
        option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(redirect_ptr, sizeof(NX_ICMPV6_REDIRECT_MESSAGE));
 800b524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b526:	3328      	adds	r3, #40	; 0x28
 800b528:	667b      	str	r3, [r7, #100]	; 0x64
        packet_length = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV6_REDIRECT_MESSAGE);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	3b28      	subs	r3, #40	; 0x28
 800b530:	663b      	str	r3, [r7, #96]	; 0x60

        /* Validate option fields. */
        if (_nx_icmpv6_validate_options(option_ptr, (INT)packet_length, 0) == NX_NOT_SUCCESSFUL)
 800b532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b534:	2200      	movs	r2, #0
 800b536:	4619      	mov	r1, r3
 800b538:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b53a:	f000 fd35 	bl	800bfa8 <_nx_icmpv6_validate_options>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b43      	cmp	r3, #67	; 0x43
 800b542:	f040 80ba 	bne.w	800b6ba <_nx_icmpv6_process_redirect+0x30e>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error. */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

            _nx_packet_release(packet_ptr);
 800b554:	6838      	ldr	r0, [r7, #0]
 800b556:	f005 fa6f 	bl	8010a38 <_nx_packet_release>
            return;
 800b55a:	e101      	b.n	800b760 <_nx_icmpv6_process_redirect+0x3b4>

        while (packet_length)
        {

            /* The packet contains target link layer address. */
            if (option_ptr -> nx_icmpv6_option_type == ICMPV6_OPTION_TYPE_TRG_LINK_ADDR)
 800b55c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2b02      	cmp	r3, #2
 800b562:	f040 809e 	bne.w	800b6a2 <_nx_icmpv6_process_redirect+0x2f6>
            {
                status = _nx_nd_cache_find_entry(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address, &nd_entry);
 800b566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b568:	3308      	adds	r3, #8
 800b56a:	f107 0218 	add.w	r2, r7, #24
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f004 fd9f 	bl	80100b4 <_nx_nd_cache_find_entry>
 800b576:	6478      	str	r0, [r7, #68]	; 0x44


                if (status != NX_SUCCESS)
 800b578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d033      	beq.n	800b5e6 <_nx_icmpv6_process_redirect+0x23a>
                {

                    /* The entry is not found in the ND cache table.  Simply add it, and we are done. */
                    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    if (_nx_nd_cache_add(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address,
 800b57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b580:	f103 0108 	add.w	r1, r3, #8
                                         interface_ptr,
                                         (CHAR *)&option_ptr -> nx_icmpv6_option_data, 0, ND_CACHE_STATE_STALE,
 800b584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b586:	1c98      	adds	r0, r3, #2
                                         packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr, &nd_entry) == NX_SUCCESS)
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    if (_nx_nd_cache_add(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address,
 800b58c:	f107 0218 	add.w	r2, r7, #24
 800b590:	9203      	str	r2, [sp, #12]
 800b592:	9302      	str	r3, [sp, #8]
 800b594:	2303      	movs	r3, #3
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	2300      	movs	r3, #0
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	4603      	mov	r3, r0
 800b59e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f004 facd 	bl	800fb40 <_nx_nd_cache_add>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d17a      	bne.n	800b6a2 <_nx_icmpv6_process_redirect+0x2f6>
                    {

                        /* If the destination and target addresses are different, the redirect is to a router. */
                        if (!CHECK_IPV6_ADDRESSES_SAME(redirect_ptr -> nx_icmpv6_redirect_target_address,
 800b5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ae:	f103 0208 	add.w	r2, r3, #8
                                                       redirect_ptr -> nx_icmpv6_redirect_destination_address))
 800b5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b4:	3318      	adds	r3, #24
                        if (!CHECK_IPV6_ADDRESSES_SAME(redirect_ptr -> nx_icmpv6_redirect_target_address,
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	f004 f8d4 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d16e      	bne.n	800b6a2 <_nx_icmpv6_process_redirect+0x2f6>
                        {

                            /* We need to fill in the IsRouter field in the cache entry
                               with the default router. */
                            _nxd_ipv6_default_router_add_internal(ip_ptr,
                                                                  redirect_ptr -> nx_icmpv6_redirect_target_address, /* TLLA in Redirect ICMPv6 options */
 800b5c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5c6:	f103 0108 	add.w	r1, r3, #8
                            _nxd_ipv6_default_router_add_internal(ip_ptr,
 800b5ca:	f107 0310 	add.w	r3, r7, #16
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f00a f89d 	bl	8015718 <_nxd_ipv6_default_router_add_internal>
                                                                  NX_IPV6_ROUTE_TYPE_UNSOLICITATED, &rt_entry);

                            /* And cross link this entry with the entry in the router list. */
                            /*lint -e{644} suppress variable might not be initialized, since "rt_entry" was initialized in _nxd_ipv6_default_router_add_internal. */
                            /*lint -e{613} suppress possible use of null pointer, since "nd_entry" was set in _nx_nd_cache_add. */
                            nd_entry -> nx_nd_cache_is_router = rt_entry;
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	625a      	str	r2, [r3, #36]	; 0x24
 800b5e4:	e05d      	b.n	800b6a2 <_nx_icmpv6_process_redirect+0x2f6>
                /* This entry already exists.  If the mac address is the same, do not update the entry. Otherwise,
                   update the entry and set the state to STALE (RFC2461 7.2.3) */
                ULONG mac_msw, mac_lsw, new_msw, new_lsw;

                /*lint -e{928} suppress cast of pointer to pointer, since it is necessary  */
                UCHAR *new_mac = (UCHAR *)&option_ptr -> nx_icmpv6_option_data;
 800b5e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5e8:	3302      	adds	r3, #2
 800b5ea:	643b      	str	r3, [r7, #64]	; 0x40


                    mac_msw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[0]) << 8) | (nd_entry -> nx_nd_cache_mac_addr[1]);
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	7c1b      	ldrb	r3, [r3, #16]
 800b5f0:	021b      	lsls	r3, r3, #8
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	7c52      	ldrb	r2, [r2, #17]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    new_msw = ((ULONG)(new_mac[0]) << 8) | (new_mac[1]);
 800b5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	021b      	lsls	r3, r3, #8
 800b600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b602:	3201      	adds	r2, #1
 800b604:	7812      	ldrb	r2, [r2, #0]
 800b606:	4313      	orrs	r3, r2
 800b608:	63bb      	str	r3, [r7, #56]	; 0x38
                    mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	7c9b      	ldrb	r3, [r3, #18]
 800b60e:	061a      	lsls	r2, r3, #24
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	7cdb      	ldrb	r3, [r3, #19]
 800b614:	041b      	lsls	r3, r3, #16
 800b616:	431a      	orrs	r2, r3
                        ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[4]) << 8) | nd_entry -> nx_nd_cache_mac_addr[5];
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	7d1b      	ldrb	r3, [r3, #20]
 800b61c:	021b      	lsls	r3, r3, #8
                    mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800b61e:	4313      	orrs	r3, r2
                        ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[4]) << 8) | nd_entry -> nx_nd_cache_mac_addr[5];
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	7d52      	ldrb	r2, [r2, #21]
                    mac_lsw = ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[2]) << 24) | ((ULONG)(nd_entry -> nx_nd_cache_mac_addr[3]) << 16) |
 800b624:	4313      	orrs	r3, r2
 800b626:	637b      	str	r3, [r7, #52]	; 0x34
                    new_lsw = ((ULONG)(new_mac[2]) << 24) | ((ULONG)(new_mac[3]) << 16) | ((ULONG)(new_mac[4]) << 8) | new_mac[5]; /* lgtm[cpp/overflow-buffer] */
 800b628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62a:	3302      	adds	r3, #2
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	061a      	lsls	r2, r3, #24
 800b630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b632:	3303      	adds	r3, #3
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	041b      	lsls	r3, r3, #16
 800b638:	431a      	orrs	r2, r3
 800b63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63c:	3304      	adds	r3, #4
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	021b      	lsls	r3, r3, #8
 800b642:	4313      	orrs	r3, r2
 800b644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b646:	3205      	adds	r2, #5
 800b648:	7812      	ldrb	r2, [r2, #0]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	633b      	str	r3, [r7, #48]	; 0x30

                    if ((mac_msw != new_msw) || (mac_lsw != new_lsw)) /* If the new MAC is different. */
 800b64e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	429a      	cmp	r2, r3
 800b654:	d103      	bne.n	800b65e <_nx_icmpv6_process_redirect+0x2b2>
 800b656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d018      	beq.n	800b690 <_nx_icmpv6_process_redirect+0x2e4>
                    {

                        /* Update the MAC address. */
                        for (i = 0; i < 6; i++)
 800b65e:	2300      	movs	r3, #0
 800b660:	66bb      	str	r3, [r7, #104]	; 0x68
 800b662:	e00c      	b.n	800b67e <_nx_icmpv6_process_redirect+0x2d2>
                        {
                            nd_entry -> nx_nd_cache_mac_addr[i] = new_mac[i];
 800b664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b668:	4413      	add	r3, r2
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	7819      	ldrb	r1, [r3, #0]
 800b66e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b670:	4413      	add	r3, r2
 800b672:	3310      	adds	r3, #16
 800b674:	460a      	mov	r2, r1
 800b676:	701a      	strb	r2, [r3, #0]
                        for (i = 0; i < 6; i++)
 800b678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b67a:	3301      	adds	r3, #1
 800b67c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b67e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b680:	2b05      	cmp	r3, #5
 800b682:	d9ef      	bls.n	800b664 <_nx_icmpv6_process_redirect+0x2b8>
                        }

                        /* Set the state to STALE.  */
                        nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	2203      	movs	r2, #3
 800b688:	765a      	strb	r2, [r3, #25]

                        /* Set the interface. */
                        nd_entry -> nx_nd_cache_interface_ptr = interface_ptr;
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b68e:	621a      	str	r2, [r3, #32]
                    }

                    /* If there are packets chained on the entry waiting to be transmitted:  */
                    if (nd_entry -> nx_nd_cache_packet_waiting_head) /* There are packets waiting to be transmitted */
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b694:	2b00      	cmp	r3, #0
 800b696:	d004      	beq.n	800b6a2 <_nx_icmpv6_process_redirect+0x2f6>
                    {
                        _nx_icmpv6_send_queued_packets(ip_ptr, nd_entry);
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fab3 	bl	800bc08 <_nx_icmpv6_send_queued_packets>
                    mtu_timeout = NX_PATH_MTU_INCREASE_WAIT_INTERVAL_TICKS;
                }
            }
#endif  /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

            option_length = (UINT)(option_ptr -> nx_icmpv6_option_length << 3);
 800b6a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6a4:	785b      	ldrb	r3, [r3, #1]
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            packet_length -= option_length;
 800b6aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	663b      	str	r3, [r7, #96]	; 0x60

            /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
            option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option_ptr, option_length);
 800b6b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b6:	4413      	add	r3, r2
 800b6b8:	667b      	str	r3, [r7, #100]	; 0x64
        while (packet_length)
 800b6ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f47f af4d 	bne.w	800b55c <_nx_icmpv6_process_redirect+0x1b0>
     * If the packet contains target link layer address, we should have added the link layer address
     * to the ND cache, and the next block is not executed.
     * However if the packet does not contain target link layer address (thus nd_cache is NULL at
     * this point, we create an entry.
     */
    if (nd_entry == NX_NULL)
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d123      	bne.n	800b710 <_nx_icmpv6_process_redirect+0x364>
    {
        status = _nx_nd_cache_find_entry(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address, &nd_entry);
 800b6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	f107 0218 	add.w	r2, r7, #24
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f004 fcee 	bl	80100b4 <_nx_nd_cache_find_entry>
 800b6d8:	6478      	str	r0, [r7, #68]	; 0x44

        if (status != NX_SUCCESS)
 800b6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d017      	beq.n	800b710 <_nx_icmpv6_process_redirect+0x364>
        {
            if (_nx_nd_cache_add_entry(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address,
 800b6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e2:	f103 0108 	add.w	r1, r3, #8
                                       packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr, &nd_entry) != NX_SUCCESS)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
            if (_nx_nd_cache_add_entry(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address,
 800b6ea:	f107 0318 	add.w	r3, r7, #24
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f004 faad 	bl	800fc4e <_nx_nd_cache_add_entry>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <_nx_icmpv6_process_redirect+0x364>
            {

#ifndef NX_DISABLE_ICMP_INFO

                /* Increment the ICMP invalid packet error. */
                ip_ptr -> nx_ip_icmp_invalid_packets++;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

                /* Release the packet. */
                _nx_packet_release(packet_ptr);
 800b708:	6838      	ldr	r0, [r7, #0]
 800b70a:	f005 f995 	bl	8010a38 <_nx_packet_release>

                return;
 800b70e:	e027      	b.n	800b760 <_nx_icmpv6_process_redirect+0x3b4>
        }
    }

    /* Find/update existing entry or add a new one for this router in the destination table.
       A new entry will be assigned default path MTU and MTU timeout values.  */
    status = _nx_icmpv6_dest_table_add(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_destination_address,
 800b710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b712:	f103 0118 	add.w	r1, r3, #24
                                       &dest_entry_ptr, redirect_ptr -> nx_icmpv6_redirect_target_address,
 800b716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b718:	f103 0008 	add.w	r0, r3, #8
                                       mtu, mtu_timeout,
                                       packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    status = _nx_icmpv6_dest_table_add(ip_ptr, redirect_ptr -> nx_icmpv6_redirect_destination_address,
 800b720:	f107 020c 	add.w	r2, r7, #12
 800b724:	9302      	str	r3, [sp, #8]
 800b726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	4603      	mov	r3, r0
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7fe fc9d 	bl	800a070 <_nx_icmpv6_dest_table_add>
 800b736:	6478      	str	r0, [r7, #68]	; 0x44
    if (status)
 800b738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00a      	beq.n	800b754 <_nx_icmpv6_process_redirect+0x3a8>
    {

#ifndef NX_DISABLE_ICMP_INFO
        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 800b744:	1c5a      	adds	r2, r3, #1
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
#endif /* NX_DISABLE_ICMP_INFO */

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 800b74c:	6838      	ldr	r0, [r7, #0]
 800b74e:	f005 f973 	bl	8010a38 <_nx_packet_release>

        return;
 800b752:	e005      	b.n	800b760 <_nx_icmpv6_process_redirect+0x3b4>
    }

    /* Cross link the nd_entry. */
    /*lint -e{644} suppress variable might not be initialized, since "dest_entry_ptr" was initialized _nx_icmpv6_dest_table_find or _nx_icmpv6_dest_table_add. */
    dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry = nd_entry;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	625a      	str	r2, [r3, #36]	; 0x24

    /* Release the packet. */
    _nx_packet_release(packet_ptr);
 800b75a:	6838      	ldr	r0, [r7, #0]
 800b75c:	f005 f96c 	bl	8010a38 <_nx_packet_release>
}
 800b760:	3770      	adds	r7, #112	; 0x70
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <_nx_icmpv6_send_error_message>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b092      	sub	sp, #72	; 0x48
 800b76a:	af04      	add	r7, sp, #16
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	607a      	str	r2, [r7, #4]
 800b772:	603b      	str	r3, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv6 error message if ICMPv6 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 80fc 	beq.w	800b978 <_nx_icmpv6_send_error_message+0x212>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_source_ip);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b784:	3308      	adds	r3, #8
 800b786:	627b      	str	r3, [r7, #36]	; 0x24

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    dest_ip = (((NX_IPV6_HEADER *)(offending_packet -> nx_packet_ip_header)) -> nx_ip_header_destination_ip);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78c:	3318      	adds	r3, #24
 800b78e:	623b      	str	r3, [r7, #32]

    if (CHECK_UNSPECIFIED_ADDRESS(src_ip))
 800b790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b792:	f004 f814 	bl	800f7be <CHECK_UNSPECIFIED_ADDRESS>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f040 80ef 	bne.w	800b97c <_nx_icmpv6_send_error_message+0x216>
         */
        return;
    }

    /* Allocate a packet to build the ICMPv6 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8d3 063c 	ldr.w	r0, [r3, #1596]	; 0x63c
 800b7a4:	f107 0110 	add.w	r1, r7, #16
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	2238      	movs	r2, #56	; 0x38
 800b7ac:	f004 fda4 	bl	80102f8 <_nx_packet_allocate>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f040 80e4 	bne.w	800b980 <_nx_icmpv6_send_error_message+0x21a>
        /* Error getting packet, so just get out!  */
        return;
    }

    /* Check to see if the packet has enough room to fill with the ICMPv6 error header.  */
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < sizeof(NX_ICMPV6_ERROR))
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	695a      	ldr	r2, [r3, #20]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	2b07      	cmp	r3, #7
 800b7c4:	d804      	bhi.n	800b7d0 <_nx_icmpv6_send_error_message+0x6a>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(pkt_ptr);
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f005 f935 	bl	8010a38 <_nx_packet_release>
        return;
 800b7ce:	e0d8      	b.n	800b982 <_nx_icmpv6_send_error_message+0x21c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv6. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	2206      	movs	r2, #6
 800b7d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Setup the size of the ICMPv6 NA message */

    /* Size of the message is ICMPv6 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv6_error = (NX_ICMPV6_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	61fb      	str	r3, [r7, #28]
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	0e1b      	lsrs	r3, r3, #24
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	701a      	strb	r2, [r3, #0]
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	0c1b      	lsrs	r3, r3, #16
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	705a      	strb	r2, [r3, #1]
    icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum = 0;
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	805a      	strh	r2, [r3, #2]

    icmpv6_error -> nx_icmpv6_error_pointer = error_pointer;
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv6_error -> nx_icmpv6_error_pointer);
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	ba1a      	rev	r2, r3
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	605a      	str	r2, [r3, #4]

    /* Figure out how many bytes we should copy from the offending packet not including ethernet
       frame header. */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    bytes_to_copy = (UINT)(offending_packet -> nx_packet_append_ptr - offending_packet -> nx_packet_ip_header);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	68da      	ldr	r2, [r3, #12]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	637b      	str	r3, [r7, #52]	; 0x34

    /* Check that the number of bytes to copy does not exceed the minimum size ICMPv6 message
       as per RFC 2460. */
    if ((bytes_to_copy + sizeof(NX_ICMPV6_ERROR) + sizeof(NX_IPV6_HEADER)) >= NX_MINIMUM_IPV6_PATH_MTU)
 800b814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b816:	3330      	adds	r3, #48	; 0x30
 800b818:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b81c:	d302      	bcc.n	800b824 <_nx_icmpv6_send_error_message+0xbe>
    {

        /* Subtract size of IPv6 and ICMPv6 headers from the ICMPv6 error message packet. */
        bytes_to_copy = (UINT)(NX_MINIMUM_IPV6_PATH_MTU - (sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR)));
 800b81e:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800b822:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Check how much of the offending packet data will fit in the allocated packet, leaving
       room for the Physical frame header, IPv6 header and ICMPv6 header of the error message. */
    payload = pkt_ptr -> nx_packet_pool_owner -> nx_packet_pool_payload_size;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82a:	61bb      	str	r3, [r7, #24]

    if (((INT)((bytes_to_copy + sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR) + NX_PHYSICAL_HEADER) - payload)) > 0)
 800b82c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	3340      	adds	r3, #64	; 0x40
 800b834:	2b00      	cmp	r3, #0
 800b836:	dd02      	ble.n	800b83e <_nx_icmpv6_send_error_message+0xd8>
    {

        bytes_to_copy = (UINT)(payload - (sizeof(NX_IPV6_HEADER) + sizeof(NX_ICMPV6_ERROR) + NX_PHYSICAL_HEADER));
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	3b40      	subs	r3, #64	; 0x40
 800b83c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv6 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV6_ERROR);
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b842:	3208      	adds	r2, #8
 800b844:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	6899      	ldr	r1, [r3, #8]
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	440a      	add	r2, r1
 800b852:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b858:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv6_error, sizeof(NX_ICMPV6_ERROR));
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	3308      	adds	r3, #8
 800b85e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Endian swap the incoming IPv6 header (10 ULONGs = 40 bytes)
       to network byte order. */
    for (i = 0; i < 10; i++)
 800b860:	2300      	movs	r3, #0
 800b862:	633b      	str	r3, [r7, #48]	; 0x30
 800b864:	e00a      	b.n	800b87c <_nx_icmpv6_send_error_message+0x116>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	ba1a      	rev	r2, r3
 800b86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86e:	601a      	str	r2, [r3, #0]
        src_packet++;
 800b870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b872:	3304      	adds	r3, #4
 800b874:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = 0; i < 10; i++)
 800b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b878:	3301      	adds	r3, #1
 800b87a:	633b      	str	r3, [r7, #48]	; 0x30
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	2b09      	cmp	r3, #9
 800b880:	d9f1      	bls.n	800b866 <_nx_icmpv6_send_error_message+0x100>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b886:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Copy the data from the received packet to the ICMPv6 error packet. */
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 800b888:	e00a      	b.n	800b8a0 <_nx_icmpv6_send_error_message+0x13a>
    {

        *dest_packet++ = *src_packet++;
 800b88a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b88c:	1d13      	adds	r3, r2, #4
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	1d19      	adds	r1, r3, #4
 800b894:	62b9      	str	r1, [r7, #40]	; 0x28
 800b896:	6812      	ldr	r2, [r2, #0]
 800b898:	601a      	str	r2, [r3, #0]
    for (; (INT)bytes_to_copy > 0; bytes_to_copy -= 4)
 800b89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89c:	3b04      	subs	r3, #4
 800b89e:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dcf1      	bgt.n	800b88a <_nx_icmpv6_send_error_message+0x124>
    }

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Endian swap the IPv6 header back to host byte order. */
    for (i = 0; i < 10; i++)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	633b      	str	r3, [r7, #48]	; 0x30
 800b8b0:	e00a      	b.n	800b8c8 <_nx_icmpv6_send_error_message+0x162>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	ba1a      	rev	r2, r3
 800b8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ba:	601a      	str	r2, [r3, #0]
        src_packet++;
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	3304      	adds	r3, #4
 800b8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = 0; i < 10; i++)
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	633b      	str	r3, [r7, #48]	; 0x30
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	d9f1      	bls.n	800b8b2 <_nx_icmpv6_send_error_message+0x14c>
    }

    /* If we received the packet through a Multicast address, we pick an outgoing address
       based on multicast scope (RFC 3484, 3.1) */
    if (IPv6_Address_Type(dest_ip) & IPV6_ADDRESS_MULTICAST)
 800b8ce:	6a38      	ldr	r0, [r7, #32]
 800b8d0:	f004 f84e 	bl	800f970 <IPv6_Address_Type>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00f      	beq.n	800b8fe <_nx_icmpv6_send_error_message+0x198>
    {

        if (_nxd_ipv6_interface_find(ip_ptr, dest_ip,
                                     &pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr,
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
        if (_nxd_ipv6_interface_find(ip_ptr, dest_ip,
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6a39      	ldr	r1, [r7, #32]
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f00a fac4 	bl	8015e76 <_nxd_ipv6_interface_find>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <_nx_icmpv6_send_error_message+0x1a0>
                                     NX_NULL))
        {

            /* Cannot find usable outgoing interface. */
            _nx_packet_release(pkt_ptr);
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f005 f89e 	bl	8010a38 <_nx_packet_release>
            return;
 800b8fc:	e041      	b.n	800b982 <_nx_icmpv6_send_error_message+0x21c>
    else
    {

        /* If this ICMPv6 error message is a response to a packet sent to link local or global address,
           use the corresponding interface address as sender's address. */
        pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = offending_packet -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b904:	635a      	str	r2, [r3, #52]	; 0x34

    /*
       Check if a suitable outoing address was found, and the
       outgoing address is not valid:
     */
    if ((pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr == NX_NULL) ||
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d004      	beq.n	800b918 <_nx_icmpv6_send_error_message+0x1b2>
        (pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID))
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b912:	789b      	ldrb	r3, [r3, #2]
    if ((pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr == NX_NULL) ||
 800b914:	2b04      	cmp	r3, #4
 800b916:	d004      	beq.n	800b922 <_nx_icmpv6_send_error_message+0x1bc>
    {

        /* No good. Drop the packet and return. */
        _nx_packet_release(pkt_ptr);
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f005 f88c 	bl	8010a38 <_nx_packet_release>
        return;
 800b920:	e02f      	b.n	800b982 <_nx_icmpv6_send_error_message+0x21c>
#if defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        /* Compute the check sum */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6,
 800b922:	6938      	ldr	r0, [r7, #16]
                                           (UINT)pkt_ptr -> nx_packet_length,
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                           pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b92c:	f103 0108 	add.w	r1, r3, #8
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6,
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	460b      	mov	r3, r1
 800b936:	213a      	movs	r1, #58	; 0x3a
 800b938:	f000 fc71 	bl	800c21e <_nx_ip_checksum_compute>
 800b93c:	4603      	mov	r3, r0
 800b93e:	82fb      	strh	r3, [r7, #22]
                                           src_ip);

        icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum = (USHORT)(~checksum);
 800b940:	8afb      	ldrh	r3, [r7, #22]
 800b942:	43db      	mvns	r3, r3
 800b944:	b29a      	uxth	r2, r3
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv6_error -> nx_icmpv6_error_header.nx_icmpv6_header_checksum);
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	885b      	ldrh	r3, [r3, #2]
 800b94e:	ba5b      	rev16	r3, r3
 800b950:	b29a      	uxth	r2, r3
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	805a      	strh	r2, [r3, #2]
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Transmit the packet.  The hop limit is set to 255. */
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
 800b956:	6939      	ldr	r1, [r7, #16]
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	6a58      	ldr	r0, [r3, #36]	; 0x24
                         pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b960:	3308      	adds	r3, #8
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
 800b962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b964:	9202      	str	r2, [sp, #8]
 800b966:	9301      	str	r3, [sp, #4]
 800b968:	23ff      	movs	r3, #255	; 0xff
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	4603      	mov	r3, r0
 800b96e:	223a      	movs	r2, #58	; 0x3a
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f003 f9cc 	bl	800ed0e <_nx_ipv6_packet_send>
                         src_ip);

    return;
 800b976:	e004      	b.n	800b982 <_nx_icmpv6_send_error_message+0x21c>
        return;
 800b978:	bf00      	nop
 800b97a:	e002      	b.n	800b982 <_nx_icmpv6_send_error_message+0x21c>
        return;
 800b97c:	bf00      	nop
 800b97e:	e000      	b.n	800b982 <_nx_icmpv6_send_error_message+0x21c>
        return;
 800b980:	bf00      	nop
}
 800b982:	3738      	adds	r7, #56	; 0x38
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <_nx_icmpv6_send_ns>:
                        ULONG                 *neighbor_IP_address,
                        INT                    send_slla,
                        NXD_IPV6_ADDRESS      *outgoing_address,
                        INT                    sendUnicast,
                        ND_CACHE_ENTRY        *NDCacheEntry)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b09c      	sub	sp, #112	; 0x70
 800b98c:	af04      	add	r7, sp, #16
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
 800b994:	603b      	str	r3, [r7, #0]
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv6_ICMP_PACKET, NX_NO_WAIT))
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8d3 063c 	ldr.w	r0, [r3, #1596]	; 0x63c
 800b99c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	2238      	movs	r2, #56	; 0x38
 800b9a4:	f004 fca8 	bl	80102f8 <_nx_packet_allocate>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f040 8123 	bne.w	800bbf6 <_nx_icmpv6_send_ns+0x26e>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv6 packet. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 800b9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b2:	2206      	movs	r2, #6
 800b9b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Setup the size of the ICMPv6 NS message */
    pkt_ptr -> nx_packet_length = sizeof(NX_ICMPV6_ND);
 800b9b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ba:	2218      	movs	r2, #24
 800b9bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Add 8 more bytes if sending source link layer address. */
    if (send_slla)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <_nx_icmpv6_send_ns+0x46>
    {
        pkt_ptr -> nx_packet_length += 8;
 800b9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ca:	3208      	adds	r2, #8
 800b9cc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Check to see if the packet has enough room to fill with NS.  */
    if ((UINT)(pkt_ptr -> nx_packet_data_end - pkt_ptr -> nx_packet_prepend_ptr) < pkt_ptr -> nx_packet_length)
 800b9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9d0:	695a      	ldr	r2, [r3, #20]
 800b9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d204      	bcs.n	800b9ec <_nx_icmpv6_send_ns+0x64>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(pkt_ptr);
 800b9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f005 f827 	bl	8010a38 <_nx_packet_release>
        return;
 800b9ea:	e107      	b.n	800bbfc <_nx_icmpv6_send_ns+0x274>
    }

    /* Setup the append pointer to the end of the message. */
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800b9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ee:	6899      	ldr	r1, [r3, #8]
 800b9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f6:	440a      	add	r2, r1
 800b9f8:	60da      	str	r2, [r3, #12]

    /* Set up the ND message in the buffer. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    nd_ptr = (NX_ICMPV6_ND *)(pkt_ptr -> nx_packet_prepend_ptr);
 800b9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	65bb      	str	r3, [r7, #88]	; 0x58
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_type = NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE;
 800ba00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba02:	2287      	movs	r2, #135	; 0x87
 800ba04:	701a      	strb	r2, [r3, #0]
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_code = 0;
 800ba06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba08:	2200      	movs	r2, #0
 800ba0a:	705a      	strb	r2, [r3, #1]
    nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_checksum = 0;
 800ba0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba0e:	2200      	movs	r2, #0
 800ba10:	805a      	strh	r2, [r3, #2]
    nd_ptr -> nx_icmpv6_nd_flag = 0;
 800ba12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba14:	2200      	movs	r2, #0
 800ba16:	605a      	str	r2, [r3, #4]

    /* copy the target IP address */
    COPY_IPV6_ADDRESS(neighbor_IP_address, nd_ptr -> nx_icmpv6_nd_targetAddress);
 800ba18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	68b8      	ldr	r0, [r7, #8]
 800ba20:	f003 ff06 	bl	800f830 <COPY_IPV6_ADDRESS>

    /* Convert the IP address to network byte order. */
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(nd_ptr -> nx_icmpv6_nd_targetAddress);
 800ba24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba26:	3308      	adds	r3, #8
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f004 f861 	bl	800faf0 <_nx_ipv6_address_change_endian>

    if (sendUnicast)
 800ba2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d006      	beq.n	800ba42 <_nx_icmpv6_send_ns+0xba>
    {

        COPY_IPV6_ADDRESS(neighbor_IP_address, dest_address);
 800ba34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba38:	4619      	mov	r1, r3
 800ba3a:	68b8      	ldr	r0, [r7, #8]
 800ba3c:	f003 fef8 	bl	800f830 <COPY_IPV6_ADDRESS>
 800ba40:	e005      	b.n	800ba4e <_nx_icmpv6_send_ns+0xc6>

        /* Set up the next hop address, which is the target host's Solicited-Node
           Multicast Address.  The address is formed by taking the last 24 bits of
           the target IP address, in the form of:
           0xFF02:0000:0000:0000:0000:0001:FFxx:xxxx */
        SET_SOLICITED_NODE_MULTICAST_ADDRESS(dest_address, neighbor_IP_address);
 800ba42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba46:	68b9      	ldr	r1, [r7, #8]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f003 ff0f 	bl	800f86c <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
    }

    /* Set up source IP address to use for this packet.
       If the global address is not valid yet, we use the unspecified address (::)
       Otherwise the global address is used */
    if (outgoing_address -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	789b      	ldrb	r3, [r3, #2]
 800ba52:	2b04      	cmp	r3, #4
 800ba54:	d103      	bne.n	800ba5e <_nx_icmpv6_send_ns+0xd6>
    {

        src_address = outgoing_address -> nxd_ipv6_address;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	3308      	adds	r3, #8
 800ba5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba5c:	e001      	b.n	800ba62 <_nx_icmpv6_send_ns+0xda>
    }
    else
    {

        /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
        src_address = (ULONG *)_nx_ipv6_unspecified_address;
 800ba5e:	4b69      	ldr	r3, [pc, #420]	; (800bc04 <_nx_icmpv6_send_ns+0x27c>)
 800ba60:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = outgoing_address;
 800ba62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	635a      	str	r2, [r3, #52]	; 0x34

    /* outgoing_address -> nxd_ipv6_address_attached can not be NULL. */
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached != NX_NULL);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d104      	bne.n	800ba7a <_nx_icmpv6_send_ns+0xf2>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	f00d fa28 	bl	8018ec8 <_tx_thread_sleep>
 800ba78:	e7fa      	b.n	800ba70 <_nx_icmpv6_send_ns+0xe8>

    if (send_slla)  /* Need to send SLLA option */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d036      	beq.n	800baee <_nx_icmpv6_send_ns+0x166>

    USHORT           *mac_addr;
    NX_ICMPV6_OPTION *nd_options;

        /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
        nd_options = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(nd_ptr, sizeof(NX_ICMPV6_ND));
 800ba80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba82:	3318      	adds	r3, #24
 800ba84:	657b      	str	r3, [r7, #84]	; 0x54

        /* Fill in the options field */
        nd_options -> nx_icmpv6_option_type = 1;
 800ba86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba88:	2201      	movs	r2, #1
 800ba8a:	701a      	strb	r2, [r3, #0]
        nd_options -> nx_icmpv6_option_length = 1;
 800ba8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba8e:	2201      	movs	r2, #1
 800ba90:	705a      	strb	r2, [r3, #1]

        /* Fill in the source MAC address */
        mac_addr = &nd_options ->  nx_icmpv6_option_data;
 800ba92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba94:	3302      	adds	r3, #2
 800ba96:	653b      	str	r3, [r7, #80]	; 0x50
        mac_addr[0] = (USHORT)(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_physical_address_msw);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baa2:	801a      	strh	r2, [r3, #0]
        mac_addr[1] = (USHORT)((outgoing_address -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0xFFFF0000) >> 16); /* lgtm[cpp/overflow-buffer] */
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	0c1a      	lsrs	r2, r3, #16
 800baac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baae:	3302      	adds	r3, #2
 800bab0:	b292      	uxth	r2, r2
 800bab2:	801a      	strh	r2, [r3, #0]
        mac_addr[2] = (USHORT)(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_physical_address_lsw & 0x0000FFFF); /* lgtm[cpp/overflow-buffer] */
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	691a      	ldr	r2, [r3, #16]
 800baba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800babc:	3304      	adds	r3, #4
 800babe:	b292      	uxth	r2, r2
 800bac0:	801a      	strh	r2, [r3, #0]

        /* Byte swapping. */
        NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800bac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	ba5b      	rev16	r3, r3
 800bac8:	b29a      	uxth	r2, r3
 800baca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bacc:	801a      	strh	r2, [r3, #0]
        NX_CHANGE_USHORT_ENDIAN(mac_addr[1]); /* lgtm[cpp/overflow-buffer] */
 800bace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad0:	3302      	adds	r3, #2
 800bad2:	881a      	ldrh	r2, [r3, #0]
 800bad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad6:	3302      	adds	r3, #2
 800bad8:	ba52      	rev16	r2, r2
 800bada:	b292      	uxth	r2, r2
 800badc:	801a      	strh	r2, [r3, #0]
        NX_CHANGE_USHORT_ENDIAN(mac_addr[2]); /* lgtm[cpp/overflow-buffer] */
 800bade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae0:	3304      	adds	r3, #4
 800bae2:	881a      	ldrh	r2, [r3, #0]
 800bae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae6:	3304      	adds	r3, #4
 800bae8:	ba52      	rev16	r2, r2
 800baea:	b292      	uxth	r2, r2
 800baec:	801a      	strh	r2, [r3, #0]
#if defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        /* Compute checksum.  The return value is already in network byte order */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6, (UINT)pkt_ptr -> nx_packet_length, src_address, dest_address);
 800baee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800baf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bafc:	213a      	movs	r1, #58	; 0x3a
 800bafe:	f000 fb8e 	bl	800c21e <_nx_ip_checksum_compute>
 800bb02:	4603      	mov	r3, r0
 800bb04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        checksum = (USHORT)(~checksum);
 800bb08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb0c:	43db      	mvns	r3, r3
 800bb0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        /* Byte swapping. */
        NX_CHANGE_USHORT_ENDIAN(checksum);
 800bb12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb16:	ba5b      	rev16	r3, r3
 800bb18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        nd_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_checksum = checksum;
 800bb1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bb22:	805a      	strh	r2, [r3, #2]
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Add IPv6 header. */
    if (_nx_ipv6_header_add(ip_ptr, &pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length,
 800bb24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb28:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9303      	str	r3, [sp, #12]
 800bb30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bb34:	9302      	str	r3, [sp, #8]
 800bb36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	23ff      	movs	r3, #255	; 0xff
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	223a      	movs	r2, #58	; 0x3a
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f002 fd9f 	bl	800e686 <_nx_ipv6_header_add>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d155      	bne.n	800bbfa <_nx_icmpv6_send_ns+0x272>
        /* Failed to add header. */
        return;
    }

    /* Build the driver request. */
    driver_request.nx_ip_driver_ptr                  = ip_ptr;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	62fb      	str	r3, [r7, #44]	; 0x2c
    driver_request.nx_ip_driver_command              = NX_LINK_PACKET_SEND;
 800bb52:	2300      	movs	r3, #0
 800bb54:	617b      	str	r3, [r7, #20]
    driver_request.nx_ip_driver_packet               = pkt_ptr;
 800bb56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb58:	627b      	str	r3, [r7, #36]	; 0x24
    driver_request.nx_ip_driver_interface            = outgoing_address -> nxd_ipv6_address_attached;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	633b      	str	r3, [r7, #48]	; 0x30
    if (sendUnicast)
 800bb60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d01e      	beq.n	800bba4 <_nx_icmpv6_send_ns+0x21c>
    {
    UCHAR *mac_addr;
        mac_addr = NDCacheEntry -> nx_nd_cache_mac_addr;
 800bb66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb68:	3310      	adds	r3, #16
 800bb6a:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Set unicast destination MAC. */
        driver_request.nx_ip_driver_physical_address_msw = ((ULONG)mac_addr[0] << 8) | mac_addr[1];
 800bb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	021b      	lsls	r3, r3, #8
 800bb72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb74:	3201      	adds	r2, #1
 800bb76:	7812      	ldrb	r2, [r2, #0]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	61fb      	str	r3, [r7, #28]
        driver_request.nx_ip_driver_physical_address_lsw =
            ((ULONG)mac_addr[2] << 24) | ((ULONG)mac_addr[3] << 16) | ((ULONG)mac_addr[4] << 8) | mac_addr[5];
 800bb7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb7e:	3302      	adds	r3, #2
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	061a      	lsls	r2, r3, #24
 800bb84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb86:	3303      	adds	r3, #3
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	041b      	lsls	r3, r3, #16
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb90:	3304      	adds	r3, #4
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	021b      	lsls	r3, r3, #8
 800bb96:	4313      	orrs	r3, r2
 800bb98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb9a:	3205      	adds	r2, #5
 800bb9c:	7812      	ldrb	r2, [r2, #0]
 800bb9e:	4313      	orrs	r3, r2
        driver_request.nx_ip_driver_physical_address_lsw =
 800bba0:	623b      	str	r3, [r7, #32]
 800bba2:	e004      	b.n	800bbae <_nx_icmpv6_send_ns+0x226>
    }
    else
    {

        /*lint -e{644} suppress variable might not be initialized, since dest_address was initialized. */
        driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 800bba4:	f243 3333 	movw	r3, #13107	; 0x3333
 800bba8:	61fb      	str	r3, [r7, #28]
        driver_request.nx_ip_driver_physical_address_lsw = dest_address[3];
 800bbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbac:	623b      	str	r3, [r7, #32]
    }

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP packet sent count.  */
    ip_ptr -> nx_ip_total_packets_sent++;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

    /* Increment the IP bytes sent count.  */
    ip_ptr -> nx_ip_total_bytes_sent +=  pkt_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 800bbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Driver entry must not be NULL. */
    NX_ASSERT(outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry != NX_NULL);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d104      	bne.n	800bbe6 <_nx_icmpv6_send_ns+0x25e>
 800bbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe0:	f00d f972 	bl	8018ec8 <_tx_thread_sleep>
 800bbe4:	e7fa      	b.n	800bbdc <_nx_icmpv6_send_ns+0x254>

    /* Send the IP packet out on the network via the attached driver.  */
    (outgoing_address -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbec:	f107 0214 	add.w	r2, r7, #20
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
 800bbf4:	e002      	b.n	800bbfc <_nx_icmpv6_send_ns+0x274>
                return;
 800bbf6:	bf00      	nop
 800bbf8:	e000      	b.n	800bbfc <_nx_icmpv6_send_ns+0x274>
        return;
 800bbfa:	bf00      	nop
}
 800bbfc:	3760      	adds	r7, #96	; 0x60
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	0801b6f4 	.word	0x0801b6f4

0800bc08 <_nx_icmpv6_send_queued_packets>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv6_send_queued_packets(NX_IP *ip_ptr, ND_CACHE_ENTRY *nd_entry)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b092      	sub	sp, #72	; 0x48
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
#endif  /* NX_DISABLE_FRAGMENTATION */

TX_INTERRUPT_SAVE_AREA

    /* nd_entry must not be NX_NULL. */
    NX_ASSERT(nd_entry != NX_NULL);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d104      	bne.n	800bc22 <_nx_icmpv6_send_queued_packets+0x1a>
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	f00d f954 	bl	8018ec8 <_tx_thread_sleep>
 800bc20:	e7fa      	b.n	800bc18 <_nx_icmpv6_send_queued_packets+0x10>

    /* The packet waiting head must not be NX_NULL. */
    NX_ASSERT(nd_entry -> nx_nd_cache_packet_waiting_head != NX_NULL);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d104      	bne.n	800bc34 <_nx_icmpv6_send_queued_packets+0x2c>
 800bc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2e:	f00d f94b 	bl	8018ec8 <_tx_thread_sleep>
 800bc32:	e7fa      	b.n	800bc2a <_nx_icmpv6_send_queued_packets+0x22>

    /*lint --e{613} suppress possible use of null pointer, since "nd_entry" must not be null. */
    queued_list_head = nd_entry -> nx_nd_cache_packet_waiting_head;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc38:	647b      	str	r3, [r7, #68]	; 0x44

    mac_addr = nd_entry -> nx_nd_cache_mac_addr;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	3310      	adds	r3, #16
 800bc3e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Build the driver request packet.  */
    driver_request.nx_ip_driver_physical_address_msw =  ((ULONG)(mac_addr[0]) << 8)  | mac_addr[1];
 800bc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	021b      	lsls	r3, r3, #8
 800bc46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc48:	3201      	adds	r2, #1
 800bc4a:	7812      	ldrb	r2, [r2, #0]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_lsw =  ((ULONG)(mac_addr[2]) << 24) | ((ULONG)(mac_addr[3]) << 16) | ((ULONG)(mac_addr[4]) << 8) | mac_addr[5];
 800bc50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc52:	3302      	adds	r3, #2
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	061a      	lsls	r2, r3, #24
 800bc58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc5a:	3303      	adds	r3, #3
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	041b      	lsls	r3, r3, #16
 800bc60:	431a      	orrs	r2, r3
 800bc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc64:	3304      	adds	r3, #4
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	021b      	lsls	r3, r3, #8
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc6e:	3205      	adds	r2, #5
 800bc70:	7812      	ldrb	r2, [r2, #0]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	617b      	str	r3, [r7, #20]
    driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60bb      	str	r3, [r7, #8]
    driver_request.nx_ip_driver_interface            =  nd_entry -> nx_nd_cache_interface_ptr;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	627b      	str	r3, [r7, #36]	; 0x24
    driver_request.nx_ip_driver_status               =  NX_SUCCESS;
 800bc84:	2300      	movs	r3, #0
 800bc86:	60fb      	str	r3, [r7, #12]

    /* Loop through all the queued packets. */
    while (queued_list_head)
 800bc88:	e032      	b.n	800bcf0 <_nx_icmpv6_send_queued_packets+0xe8>
    {

        /* Set a pointer to the start of the queue. */
        ip_packet_ptr = queued_list_head;
 800bc8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc8c:	63bb      	str	r3, [r7, #56]	; 0x38
        queued_list_head = queued_list_head -> nx_packet_queue_next;
 800bc8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	647b      	str	r3, [r7, #68]	; 0x44

        /* Clear the packet's queue next pointer */
        ip_packet_ptr -> nx_packet_queue_next = NX_NULL;
 800bc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc96:	2200      	movs	r2, #0
 800bc98:	61da      	str	r2, [r3, #28]

        /* Add this packet to the driver request (to send). */
        driver_request.nx_ip_driver_packet = ip_packet_ptr;
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9c:	61bb      	str	r3, [r7, #24]

        /* Set the next hop MTU.  */
        next_hop_mtu = driver_request.nx_ip_driver_interface -> nx_interface_ip_mtu_size;
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca2:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif  /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

        /* Does the packet payload exceed next hop MTU?  */
        if (ip_packet_ptr -> nx_packet_length > next_hop_mtu)
 800bca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d206      	bcs.n	800bcbc <_nx_icmpv6_send_queued_packets+0xb4>
        {
#ifndef NX_DISABLE_FRAGMENTATION

            /* Yes; ok to fragment the packet payload. */
            _nx_ipv6_fragment_process(&driver_request, next_hop_mtu);
 800bcae:	f107 0308 	add.w	r3, r7, #8
 800bcb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f002 fb26 	bl	800e306 <_nx_ipv6_fragment_process>
 800bcba:	e019      	b.n	800bcf0 <_nx_icmpv6_send_queued_packets+0xe8>
            /* The packet requires no fragmentation. Proceed with sending the packet. */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  ip_packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, ip_packet_ptr);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (ip_packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 800bce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce8:	f107 0208 	add.w	r2, r7, #8
 800bcec:	4610      	mov	r0, r2
 800bcee:	4798      	blx	r3
    while (queued_list_head)
 800bcf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1c9      	bne.n	800bc8a <_nx_icmpv6_send_queued_packets+0x82>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcf6:	f3ef 8310 	mrs	r3, PRIMASK
 800bcfa:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd00:	b672      	cpsid	i
    return(int_posture);
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        }
    }

    TX_DISABLE
 800bd04:	63fb      	str	r3, [r7, #60]	; 0x3c
       This situation happens when we receive the LLA (link local address) through
       unsoliciated RA (router advertisement message. In this situation,
       the entry is in STALE state, and a packet has been transmitted,
       so the entry needs to be in DELAY state.
     */
    if (nd_entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	7e5b      	ldrb	r3, [r3, #25]
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d105      	bne.n	800bd1a <_nx_icmpv6_send_queued_packets+0x112>
    {

        nd_entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_DELAY;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2204      	movs	r2, #4
 800bd12:	765a      	strb	r2, [r3, #25]

        /* Start the Delay first probe timer */
        nd_entry -> nx_nd_cache_timer_tick = NX_DELAY_FIRST_PROBE_TIME;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2205      	movs	r2, #5
 800bd18:	61da      	str	r2, [r3, #28]
 800bd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	f383 8810 	msr	PRIMASK, r3
}
 800bd24:	bf00      	nop
    }
    TX_RESTORE

    /* Clean up the nd_entry */
    nd_entry -> nx_nd_cache_packet_waiting_head = NX_NULL;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	629a      	str	r2, [r3, #40]	; 0x28
    nd_entry -> nx_nd_cache_packet_waiting_tail = NX_NULL;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clean up the queue length variable. */
    nd_entry -> nx_nd_cache_packet_waiting_queue_length = 0;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2200      	movs	r2, #0
 800bd36:	769a      	strb	r2, [r3, #26]
}
 800bd38:	bf00      	nop
 800bd3a:	3748      	adds	r7, #72	; 0x48
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <_nx_icmpv6_send_rs>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmpv6_send_rs(NX_IP *ip_ptr, UINT if_index)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08c      	sub	sp, #48	; 0x30
 800bd44:	af04      	add	r7, sp, #16
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
NX_ICMPV6_RS     *rs_ptr;
NX_ICMPV6_OPTION *rs_options;


    /* Do not send RS packet if ICMPv6 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv6_packet_process == NX_NULL)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <_nx_icmpv6_send_rs+0x18>
    {
        return(NX_NOT_SUCCESSFUL);
 800bd54:	2343      	movs	r3, #67	; 0x43
 800bd56:	e0b5      	b.n	800bec4 <_nx_icmpv6_send_rs+0x184>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &pkt_ptr, (NX_ICMP_PACKET + sizeof(NX_ICMPV6_RS) + 8), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 063c 	ldr.w	r0, [r3, #1596]	; 0x63c
 800bd5e:	f107 010c 	add.w	r1, r7, #12
 800bd62:	2300      	movs	r3, #0
 800bd64:	2248      	movs	r2, #72	; 0x48
 800bd66:	f004 fac7 	bl	80102f8 <_nx_packet_allocate>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <_nx_icmpv6_send_rs+0x34>
                                    &pkt_ptr, (NX_ICMP_PACKET + sizeof(NX_ICMPV6_RS) + 8), NX_NO_WAIT))
            {

                /* Error getting packet, so just get out!  */
                return(NX_NOT_SUCCESSFUL);
 800bd70:	2343      	movs	r3, #67	; 0x43
 800bd72:	e0a7      	b.n	800bec4 <_nx_icmpv6_send_rs+0x184>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Find a valid IPv6 address. */
    if (_nxd_ipv6_interface_find(ip_ptr, (ULONG *)_nx_ipv6_all_router_address,
                                 &pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr,
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f103 0134 	add.w	r1, r3, #52	; 0x34
    if (_nxd_ipv6_interface_find(ip_ptr, (ULONG *)_nx_ipv6_all_router_address,
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	224c      	movs	r2, #76	; 0x4c
 800bd7e:	fb02 f303 	mul.w	r3, r2, r3
 800bd82:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	4413      	add	r3, r2
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	460a      	mov	r2, r1
 800bd8e:	494f      	ldr	r1, [pc, #316]	; (800becc <_nx_icmpv6_send_rs+0x18c>)
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f00a f870 	bl	8015e76 <_nxd_ipv6_interface_find>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d005      	beq.n	800bda8 <_nx_icmpv6_send_rs+0x68>
                                 &ip_ptr -> nx_ip_interface[if_index]))
    {
        _nx_packet_release(pkt_ptr);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f004 fe4a 	bl	8010a38 <_nx_packet_release>
        return(NX_NOT_SUCCESSFUL);
 800bda4:	2343      	movs	r3, #67	; 0x43
 800bda6:	e08d      	b.n	800bec4 <_nx_icmpv6_send_rs+0x184>
    }

    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2206      	movs	r2, #6
 800bdac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Set the size of the ICMPv6 router solicitation message. */
    /* Size of the message is ICMPv6 + options, which is 8 bytes. */
    pkt_ptr -> nx_packet_length = (sizeof(NX_ICMPV6_RS) + 8);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2210      	movs	r2, #16
 800bdb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the prepend pointer. */
    pkt_ptr -> nx_packet_prepend_ptr -= pkt_ptr -> nx_packet_length;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6899      	ldr	r1, [r3, #8]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbe:	425a      	negs	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	440a      	add	r2, r1
 800bdc4:	609a      	str	r2, [r3, #8]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    rs_ptr = (NX_ICMPV6_RS *)(pkt_ptr -> nx_packet_prepend_ptr);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	61fb      	str	r3, [r7, #28]
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_type = NX_ICMPV6_ROUTER_SOLICITATION_TYPE;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	2285      	movs	r2, #133	; 0x85
 800bdd0:	701a      	strb	r2, [r3, #0]
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_code = 0;
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	705a      	strb	r2, [r3, #1]
    rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_checksum = 0;
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	2200      	movs	r2, #0
 800bddc:	805a      	strh	r2, [r3, #2]
    rs_ptr -> nx_icmpv6_rs_reserved = 0;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	2200      	movs	r2, #0
 800bde2:	605a      	str	r2, [r3, #4]

    /* Get a pointer to the Option header in the ICMPv6 header. */
    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    rs_options = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(rs_ptr, sizeof(NX_ICMPV6_RS));
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	3308      	adds	r3, #8
 800bde8:	61bb      	str	r3, [r7, #24]

    /* Fill in the options field */
    rs_options -> nx_icmpv6_option_type = ICMPV6_OPTION_TYPE_SRC_LINK_ADDR;
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	2201      	movs	r2, #1
 800bdee:	701a      	strb	r2, [r3, #0]
    rs_options -> nx_icmpv6_option_length = 1;
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	705a      	strb	r2, [r3, #1]

    /* Fill in the source mac address. */
    mac_addr = &rs_options -> nx_icmpv6_option_data;
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	3302      	adds	r3, #2
 800bdfa:	617b      	str	r3, [r7, #20]
    mac_addr[0] = (USHORT)(ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_msw);
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	214c      	movs	r1, #76	; 0x4c
 800be02:	fb01 f303 	mul.w	r3, r1, r3
 800be06:	4413      	add	r3, r2
 800be08:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	b29a      	uxth	r2, r3
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	801a      	strh	r2, [r3, #0]
    mac_addr[1] = (USHORT)((ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0xFFFF0000) >> 16); /* lgtm[cpp/overflow-buffer] */
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	214c      	movs	r1, #76	; 0x4c
 800be1a:	fb01 f303 	mul.w	r3, r1, r3
 800be1e:	4413      	add	r3, r2
 800be20:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	0c1a      	lsrs	r2, r3, #16
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	3302      	adds	r3, #2
 800be2c:	b292      	uxth	r2, r2
 800be2e:	801a      	strh	r2, [r3, #0]
    mac_addr[2] = (USHORT)(ip_ptr -> nx_ip_interface[if_index].nx_interface_physical_address_lsw & 0x0000FFFF); /* lgtm[cpp/overflow-buffer] */
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	214c      	movs	r1, #76	; 0x4c
 800be36:	fb01 f303 	mul.w	r3, r1, r3
 800be3a:	4413      	add	r3, r2
 800be3c:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	3304      	adds	r3, #4
 800be46:	b292      	uxth	r2, r2
 800be48:	801a      	strh	r2, [r3, #0]

    /* Byte swapping. */
    NX_CHANGE_USHORT_ENDIAN(mac_addr[0]);
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	ba5b      	rev16	r3, r3
 800be50:	b29a      	uxth	r2, r3
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	801a      	strh	r2, [r3, #0]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[1]); /* lgtm[cpp/overflow-buffer] */
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	3302      	adds	r3, #2
 800be5a:	881a      	ldrh	r2, [r3, #0]
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	3302      	adds	r3, #2
 800be60:	ba52      	rev16	r2, r2
 800be62:	b292      	uxth	r2, r2
 800be64:	801a      	strh	r2, [r3, #0]
    NX_CHANGE_USHORT_ENDIAN(mac_addr[2]); /* lgtm[cpp/overflow-buffer] */
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	3304      	adds	r3, #4
 800be6a:	881a      	ldrh	r2, [r3, #0]
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	3304      	adds	r3, #4
 800be70:	ba52      	rev16	r2, r2
 800be72:	b292      	uxth	r2, r2
 800be74:	801a      	strh	r2, [r3, #0]
#endif /* defined(NX_DISABLE_ICMPV6_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute checksum.  The returned value is already in network byte order. */
        /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6,
 800be76:	68f8      	ldr	r0, [r7, #12]
                                           (UINT)pkt_ptr -> nx_packet_length,
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                           pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be80:	3308      	adds	r3, #8
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_PROTOCOL_ICMPV6,
 800be82:	4912      	ldr	r1, [pc, #72]	; (800becc <_nx_icmpv6_send_rs+0x18c>)
 800be84:	9100      	str	r1, [sp, #0]
 800be86:	213a      	movs	r1, #58	; 0x3a
 800be88:	f000 f9c9 	bl	800c21e <_nx_ip_checksum_compute>
 800be8c:	4603      	mov	r3, r0
 800be8e:	827b      	strh	r3, [r7, #18]
                                           (ULONG *)_nx_ipv6_all_router_address);

        checksum = (USHORT)(~checksum);
 800be90:	8a7b      	ldrh	r3, [r7, #18]
 800be92:	43db      	mvns	r3, r3
 800be94:	827b      	strh	r3, [r7, #18]

        /* Byte swapping. */
        NX_CHANGE_USHORT_ENDIAN(checksum);
 800be96:	8a7b      	ldrh	r3, [r7, #18]
 800be98:	ba5b      	rev16	r3, r3
 800be9a:	827b      	strh	r3, [r7, #18]

        rs_ptr -> nx_icmpv6_rs_icmpv6_header.nx_icmpv6_header_checksum = checksum;
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	8a7a      	ldrh	r2, [r7, #18]
 800bea0:	805a      	strh	r2, [r3, #2]
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM;
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /*lint -e{929} suppress cast of pointer to pointer, since it is necessary  */
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
 800bea2:	68f9      	ldr	r1, [r7, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                         pkt_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address,
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beac:	3308      	adds	r3, #8
    _nx_ipv6_packet_send(ip_ptr, pkt_ptr, NX_PROTOCOL_ICMPV6, pkt_ptr -> nx_packet_length, 255,
 800beae:	4807      	ldr	r0, [pc, #28]	; (800becc <_nx_icmpv6_send_rs+0x18c>)
 800beb0:	9002      	str	r0, [sp, #8]
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	23ff      	movs	r3, #255	; 0xff
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	4613      	mov	r3, r2
 800beba:	223a      	movs	r2, #58	; 0x3a
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f002 ff26 	bl	800ed0e <_nx_ipv6_packet_send>
                         (ULONG *)_nx_ipv6_all_router_address);

    return(NX_SUCCESS);
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3720      	adds	r7, #32
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	0801b704 	.word	0x0801b704

0800bed0 <_nx_icmpv6_validate_neighbor_message>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_icmpv6_validate_neighbor_message(NX_PACKET *packet_ptr)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b08a      	sub	sp, #40	; 0x28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
ULONG             dest_address_type;


    /* Points to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bedc:	623b      	str	r3, [r7, #32]
     * 7.1.1: Validation of Neighbor Solicitations
     * 7.1.2: Validation of Neighbor Advertisements
     */

    /* Hop limit must be 255, I.e., the packet could not possibly have been forwarded by a router. */
    if ((ipv6_header -> nx_ip_header_word_1 & 0xFF) != 0xFF)
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2bff      	cmp	r3, #255	; 0xff
 800bee6:	d001      	beq.n	800beec <_nx_icmpv6_validate_neighbor_message+0x1c>
    {
        return(NX_NOT_SUCCESSFUL);
 800bee8:	2343      	movs	r3, #67	; 0x43
 800beea:	e059      	b.n	800bfa0 <_nx_icmpv6_validate_neighbor_message+0xd0>
    }

    /* Points to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    nd_header_ptr = (NX_ICMPV6_ND *)packet_ptr -> nx_packet_prepend_ptr;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	61fb      	str	r3, [r7, #28]

    /* ICMP code must be 0 */
    if (nd_header_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_code != 0)
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <_nx_icmpv6_validate_neighbor_message+0x2e>
    {
        return(NX_NOT_SUCCESSFUL);
 800befa:	2343      	movs	r3, #67	; 0x43
 800befc:	e050      	b.n	800bfa0 <_nx_icmpv6_validate_neighbor_message+0xd0>
    }

    /* ICMP length (derived from the IP Length) is 24 or more. */
    if (packet_ptr -> nx_packet_length < 24)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf02:	2b17      	cmp	r3, #23
 800bf04:	d801      	bhi.n	800bf0a <_nx_icmpv6_validate_neighbor_message+0x3a>
    {
        return(NX_NOT_SUCCESSFUL);
 800bf06:	2343      	movs	r3, #67	; 0x43
 800bf08:	e04a      	b.n	800bfa0 <_nx_icmpv6_validate_neighbor_message+0xd0>
    }

    /* Target Address must not be a multicast address. */
    if ((nd_header_ptr -> nx_icmpv6_nd_targetAddress[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bf12:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800bf16:	d101      	bne.n	800bf1c <_nx_icmpv6_validate_neighbor_message+0x4c>
    {
        return(NX_NOT_SUCCESSFUL);
 800bf18:	2343      	movs	r3, #67	; 0x43
 800bf1a:	e041      	b.n	800bfa0 <_nx_icmpv6_validate_neighbor_message+0xd0>
    }

    /* Find out the destination IP address type.  */
    dest_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip);
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	3318      	adds	r3, #24
 800bf20:	4618      	mov	r0, r3
 800bf22:	f003 fd25 	bl	800f970 <IPv6_Address_Type>
 800bf26:	61b8      	str	r0, [r7, #24]

    option_check = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	627b      	str	r3, [r7, #36]	; 0x24

    if (nd_header_ptr -> nx_icmpv6_nd_header.nx_icmpv6_header_type == NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE)
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	2b87      	cmp	r3, #135	; 0x87
 800bf32:	d113      	bne.n	800bf5c <_nx_icmpv6_validate_neighbor_message+0x8c>
    {

        /* Find out the source IP address type.  */
        source_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_source_ip);
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	3308      	adds	r3, #8
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f003 fd19 	bl	800f970 <IPv6_Address_Type>
 800bf3e:	6178      	str	r0, [r7, #20]

        /* If the IP source address is the unspecified address, the IP destination address
           is a solicated-node multicast address. */
        if (source_address_type == IPV6_ADDRESS_UNSPECIFIED)
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf46:	d118      	bne.n	800bf7a <_nx_icmpv6_validate_neighbor_message+0xaa>
        {

            if ((dest_address_type & IPV6_SOLICITED_NODE_MCAST) != IPV6_SOLICITED_NODE_MCAST)
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <_nx_icmpv6_validate_neighbor_message+0x86>
            {
                return(NX_NOT_SUCCESSFUL);
 800bf52:	2343      	movs	r3, #67	; 0x43
 800bf54:	e024      	b.n	800bfa0 <_nx_icmpv6_validate_neighbor_message+0xd0>
            }

            /* if the IP source address is the unspecified address, it must not contain
               source link-layer address option in the message. */
            option_check = NX_NO_SLLA;
 800bf56:	2301      	movs	r3, #1
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
 800bf5a:	e00e      	b.n	800bf7a <_nx_icmpv6_validate_neighbor_message+0xaa>
    else
    {

        /* If the IP Destination Address is a multicast address, the
           Solicted flag must be zero. */
        if (((ipv6_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000) &&
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bf64:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800bf68:	d107      	bne.n	800bf7a <_nx_icmpv6_validate_neighbor_message+0xaa>
            nd_header_ptr -> nx_icmpv6_nd_flag & 0x40000000)
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
        if (((ipv6_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000) &&
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <_nx_icmpv6_validate_neighbor_message+0xaa>
        {

            return(NX_NOT_SUCCESSFUL);
 800bf76:	2343      	movs	r3, #67	; 0x43
 800bf78:	e012      	b.n	800bfa0 <_nx_icmpv6_validate_neighbor_message+0xd0>
        }
    }

    /* Locate the option field. */
    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    option_ptr    = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(nd_header_ptr, sizeof(NX_ICMPV6_ND));
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	3318      	adds	r3, #24
 800bf7e:	613b      	str	r3, [r7, #16]
    option_length = (UINT)(packet_ptr -> nx_packet_length - sizeof(NX_ICMPV6_ND));
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf84:	3b18      	subs	r3, #24
 800bf86:	60fb      	str	r3, [r7, #12]

    /* Validate option fields if there are any. */
    if (option_length)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <_nx_icmpv6_validate_neighbor_message+0xce>
    {
        return(_nx_icmpv6_validate_options(option_ptr, (INT)option_length, (INT)option_check));
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf92:	4619      	mov	r1, r3
 800bf94:	6938      	ldr	r0, [r7, #16]
 800bf96:	f000 f807 	bl	800bfa8 <_nx_icmpv6_validate_options>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	e000      	b.n	800bfa0 <_nx_icmpv6_validate_neighbor_message+0xd0>
    }

    return(NX_SUCCESS);
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3728      	adds	r7, #40	; 0x28
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <_nx_icmpv6_validate_options>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_icmpv6_validate_options(NX_ICMPV6_OPTION *option, INT length, INT additional_check)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]

UINT option_len;

    /* Parse all option headers from the ICMPv6 header. */
    while (length > 0)
 800bfb4:	e01a      	b.n	800bfec <_nx_icmpv6_validate_options+0x44>
    {
        /* Verify that the option length is not zero. */
        if (option -> nx_icmpv6_option_length == 0)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <_nx_icmpv6_validate_options+0x1a>
        {
            return(NX_NOT_SUCCESSFUL);
 800bfbe:	2343      	movs	r3, #67	; 0x43
 800bfc0:	e01d      	b.n	800bffe <_nx_icmpv6_validate_options+0x56>
        }

        /* Also check for NO SOURCE LINK LAYER ADDRESS.  */
        if ((additional_check == NX_NO_SLLA) &&
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d105      	bne.n	800bfd4 <_nx_icmpv6_validate_options+0x2c>
            (option -> nx_icmpv6_option_type == 1))
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	781b      	ldrb	r3, [r3, #0]
        if ((additional_check == NX_NO_SLLA) &&
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d101      	bne.n	800bfd4 <_nx_icmpv6_validate_options+0x2c>
        {

            return(NX_NOT_SUCCESSFUL);
 800bfd0:	2343      	movs	r3, #67	; 0x43
 800bfd2:	e014      	b.n	800bffe <_nx_icmpv6_validate_options+0x56>
        }

        /* Get the next option. */
        option_len = ((UINT)option -> nx_icmpv6_option_length) << 3;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	785b      	ldrb	r3, [r3, #1]
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	617b      	str	r3, [r7, #20]
        length -= (INT)option_len;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	60bb      	str	r3, [r7, #8]

        /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
        option = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(option, option_len);
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	4413      	add	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]
    while (length > 0)
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	dce1      	bgt.n	800bfb6 <_nx_icmpv6_validate_options+0xe>
    }

    if (length < 0)
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	da01      	bge.n	800bffc <_nx_icmpv6_validate_options+0x54>
    {

        /* Invalid packet length. */
        return(NX_NOT_SUCCESSFUL);
 800bff8:	2343      	movs	r3, #67	; 0x43
 800bffa:	e000      	b.n	800bffe <_nx_icmpv6_validate_options+0x56>
    }

    return(NX_SUCCESS);
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	371c      	adds	r7, #28
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr
	...

0800c00c <_nx_icmpv6_validate_ra>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_icmpv6_validate_ra(NX_PACKET *packet_ptr)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
ULONG             source_address_type, dest_address_type;


    /* Set a pointer to he ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV6_RA *)packet_ptr -> nx_packet_prepend_ptr;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	61fb      	str	r3, [r7, #28]

    /* Set a pointer to the IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01e:	61bb      	str	r3, [r7, #24]

    source_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_source_ip);
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	3308      	adds	r3, #8
 800c024:	4618      	mov	r0, r3
 800c026:	f003 fca3 	bl	800f970 <IPv6_Address_Type>
 800c02a:	6178      	str	r0, [r7, #20]
    dest_address_type = IPv6_Address_Type(ipv6_header -> nx_ip_header_destination_ip);
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	3318      	adds	r3, #24
 800c030:	4618      	mov	r0, r3
 800c032:	f003 fc9d 	bl	800f970 <IPv6_Address_Type>
 800c036:	6138      	str	r0, [r7, #16]

    /* Validate the IP header information. */

    /*  The source address must be the link local router address. RFC2461 4.2 */
    if ((source_address_type & IPV6_ADDRESS_LINKLOCAL) != IPV6_ADDRESS_LINKLOCAL)
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <_nx_icmpv6_validate_ra+0x3a>
    {

        return(NX_NOT_SUCCESSFUL);
 800c042:	2343      	movs	r3, #67	; 0x43
 800c044:	e028      	b.n	800c098 <_nx_icmpv6_validate_ra+0x8c>
    }

    /* IP destination address must be multicast address or solicited sender link local address. */
    if ((dest_address_type  != (ULONG)(IPV6_ADDRESS_LINKLOCAL | IPV6_ADDRESS_UNICAST)) &&
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	4a15      	ldr	r2, [pc, #84]	; (800c0a0 <_nx_icmpv6_validate_ra+0x94>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d005      	beq.n	800c05a <_nx_icmpv6_validate_ra+0x4e>
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	4a14      	ldr	r2, [pc, #80]	; (800c0a4 <_nx_icmpv6_validate_ra+0x98>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d001      	beq.n	800c05a <_nx_icmpv6_validate_ra+0x4e>
        (dest_address_type  != (ULONG)(IPV6_ALL_NODE_MCAST | IPV6_ADDRESS_MULTICAST)))
    {

        return(NX_NOT_SUCCESSFUL);
 800c056:	2343      	movs	r3, #67	; 0x43
 800c058:	e01e      	b.n	800c098 <_nx_icmpv6_validate_ra+0x8c>
    }

    /*  The IP header hop limit must be 255 */
    if ((ipv6_header -> nx_ip_header_word_1 & 0xFF) != 0xFF)
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2bff      	cmp	r3, #255	; 0xff
 800c062:	d001      	beq.n	800c068 <_nx_icmpv6_validate_ra+0x5c>
    {

        return(NX_NOT_SUCCESSFUL);
 800c064:	2343      	movs	r3, #67	; 0x43
 800c066:	e017      	b.n	800c098 <_nx_icmpv6_validate_ra+0x8c>
    }

    /* Validate ICMP fields */
    if (header_ptr -> nx_icmpv6_ra_icmpv6_header.nx_icmpv6_header_code != 0)
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	785b      	ldrb	r3, [r3, #1]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d001      	beq.n	800c074 <_nx_icmpv6_validate_ra+0x68>
    {

        return(NX_NOT_SUCCESSFUL);
 800c070:	2343      	movs	r3, #67	; 0x43
 800c072:	e011      	b.n	800c098 <_nx_icmpv6_validate_ra+0x8c>
    }

    /* Locate the option field. */
    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    option_ptr = (NX_ICMPV6_OPTION *)NX_UCHAR_POINTER_ADD(header_ptr, sizeof(NX_ICMPV6_RA));
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	3310      	adds	r3, #16
 800c078:	60fb      	str	r3, [r7, #12]
    option_length = (INT)(packet_ptr -> nx_packet_length - sizeof(NX_ICMPV6_RA));
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07e:	3b10      	subs	r3, #16
 800c080:	60bb      	str	r3, [r7, #8]

    /* Check for options (if there is a non zero option length ICMPv6 header field). */
    if (option_length)
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d006      	beq.n	800c096 <_nx_icmpv6_validate_ra+0x8a>
    {

        /* Validate option field(s). */
        return(_nx_icmpv6_validate_options(option_ptr, option_length, NX_NULL));
 800c088:	2200      	movs	r2, #0
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f7ff ff8b 	bl	800bfa8 <_nx_icmpv6_validate_options>
 800c092:	4603      	mov	r3, r0
 800c094:	e000      	b.n	800c098 <_nx_icmpv6_validate_ra+0x8c>
    }

    return(NX_SUCCESS);
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3720      	adds	r7, #32
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	80000001 	.word	0x80000001
 800c0a4:	40000010 	.word	0x40000010

0800c0a8 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b087      	sub	sp, #28
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	4a18      	ldr	r2, [pc, #96]	; (800c118 <_nx_igmp_multicast_check+0x70>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d101      	bne.n	800c0c0 <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e025      	b.n	800c10c <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	617b      	str	r3, [r7, #20]
 800c0c4:	e01e      	b.n	800c104 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 800c0c6:	68f9      	ldr	r1, [r7, #12]
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	440b      	add	r3, r1
 800c0d4:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d10e      	bne.n	800c0fe <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 800c0e0:	68f9      	ldr	r1, [r7, #12]
 800c0e2:	697a      	ldr	r2, [r7, #20]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4413      	add	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	440b      	add	r3, r1
 800c0ee:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 800c0f2:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d101      	bne.n	800c0fe <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e006      	b.n	800c10c <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	3301      	adds	r3, #1
 800c102:	617b      	str	r3, [r7, #20]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b06      	cmp	r3, #6
 800c108:	d9dd      	bls.n	800c0c6 <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	371c      	adds	r7, #28
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	e0000001 	.word	0xe0000001

0800c11c <_nx_invalidate_destination_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_invalidate_destination_entry(NX_IP *ip_ptr, ULONG *next_hop_ip)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]

UINT i, table_size;

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c12c:	60bb      	str	r3, [r7, #8]

    /* Check if there have been any destinations in the table. */
    if (table_size == 0)
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d03d      	beq.n	800c1b0 <_nx_invalidate_destination_entry+0x94>
    {
        return;
    }

    /* Loop through the whole table to match the IP address. */
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800c134:	2300      	movs	r3, #0
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	e033      	b.n	800c1a2 <_nx_invalidate_destination_entry+0x86>
    {

        /* Skip over empty slots. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800c13a:	6879      	ldr	r1, [r7, #4]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	440b      	add	r3, r1
 800c148:	3390      	adds	r3, #144	; 0x90
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d024      	beq.n	800c19a <_nx_invalidate_destination_entry+0x7e>
        {
            continue;
        }

        /* Keep track of valid entries we have checked. */
        table_size--;
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	3b01      	subs	r3, #1
 800c154:	60bb      	str	r3, [r7, #8]

        /* Match the supplied next hop with the table entry next hop. */
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop_ip))
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	33a0      	adds	r3, #160	; 0xa0
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4413      	add	r3, r2
 800c166:	3304      	adds	r3, #4
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f003 fafb 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d012      	beq.n	800c19c <_nx_invalidate_destination_entry+0x80>
        {

            /* A matching entry is found.  Mark the entry as invalid. */
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4613      	mov	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	440b      	add	r3, r1
 800c184:	3390      	adds	r3, #144	; 0x90
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]

            /* Decrease the count of available destinations. */
            ip_ptr -> nx_ipv6_destination_table_size--;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c190:	1e5a      	subs	r2, r3, #1
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
 800c198:	e000      	b.n	800c19c <_nx_invalidate_destination_entry+0x80>
            continue;
 800c19a:	bf00      	nop
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d005      	beq.n	800c1b4 <_nx_invalidate_destination_entry+0x98>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2b07      	cmp	r3, #7
 800c1ac:	d9c5      	bls.n	800c13a <_nx_invalidate_destination_entry+0x1e>
        }
    }

    return;
 800c1ae:	e001      	b.n	800c1b4 <_nx_invalidate_destination_entry+0x98>
        return;
 800c1b0:	bf00      	nop
 800c1b2:	e000      	b.n	800c1b6 <_nx_invalidate_destination_entry+0x9a>
    return;
 800c1b4:	bf00      	nop
}
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800c1ce:	f04f 31ff 	mov.w	r1, #4294967295
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f00b ffca 	bl	801816c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1d8:	f3ef 8310 	mrs	r3, PRIMASK
 800c1dc:	617b      	str	r3, [r7, #20]
    return(posture);
 800c1de:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c1e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1e2:	b672      	cpsid	i
    return(int_posture);
 800c1e4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c1e6:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f8d3 2c48 	ldr.w	r2, [r3, #3144]	; 0xc48
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8d3 2c4c 	ldr.w	r2, [r3, #3148]	; 0xc4c
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	f383 8810 	msr	PRIMASK, r3
}
 800c206:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800c20e:	4618      	mov	r0, r3
 800c210:	f00c fa24 	bl	801865c <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 800c214:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800c216:	4618      	mov	r0, r3
 800c218:	3720      	adds	r7, #32
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b08e      	sub	sp, #56	; 0x38
 800c222:	af00      	add	r7, sp, #0
 800c224:	60f8      	str	r0, [r7, #12]
 800c226:	60b9      	str	r1, [r7, #8]
 800c228:	607a      	str	r2, [r7, #4]
 800c22a:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2b11      	cmp	r3, #17
 800c234:	d005      	beq.n	800c242 <_nx_ip_checksum_compute+0x24>
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2b3a      	cmp	r3, #58	; 0x3a
 800c23a:	d002      	beq.n	800c242 <_nx_ip_checksum_compute+0x24>
#ifdef FEATURE_NX_IPV6
        (protocol == NX_PROTOCOL_ICMPV6) ||
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2b06      	cmp	r3, #6
 800c240:	d161      	bne.n	800c306 <_nx_ip_checksum_compute+0xe8>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <_nx_ip_checksum_compute+0x34>
 800c24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d104      	bne.n	800c25c <_nx_ip_checksum_compute+0x3e>
 800c252:	f04f 30ff 	mov.w	r0, #4294967295
 800c256:	f00c fe37 	bl	8018ec8 <_tx_thread_sleep>
 800c25a:	e7fa      	b.n	800c252 <_nx_ip_checksum_compute+0x34>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	61fb      	str	r3, [r7, #28]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 800c260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c262:	61bb      	str	r3, [r7, #24]


        checksum += src_ip_short[0];
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	881b      	ldrh	r3, [r3, #0]
 800c268:	461a      	mov	r2, r3
 800c26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c26c:	4413      	add	r3, r2
 800c26e:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	3302      	adds	r3, #2
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27a:	4413      	add	r3, r2
 800c27c:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c286:	4413      	add	r3, r2
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	3302      	adds	r3, #2
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	461a      	mov	r2, r3
 800c292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c294:	4413      	add	r3, r2
 800c296:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef FEATURE_NX_IPV6

        /* Note that the IPv6 address is 128 bits/4 words
           compared with the 32 IPv4 address.*/
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c29e:	2b06      	cmp	r3, #6
 800c2a0:	d11a      	bne.n	800c2d8 <_nx_ip_checksum_compute+0xba>
        {

            for (i = 2; i < 8; i++)
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	623b      	str	r3, [r7, #32]
 800c2a6:	e014      	b.n	800c2d2 <_nx_ip_checksum_compute+0xb4>
            {

                checksum += dest_ip_short[i];
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	881b      	ldrh	r3, [r3, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b6:	4413      	add	r3, r2
 800c2b8:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += src_ip_short[i];
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	69fa      	ldr	r2, [r7, #28]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	881b      	ldrh	r3, [r3, #0]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c8:	4413      	add	r3, r2
 800c2ca:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 2; i < 8; i++)
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	623b      	str	r3, [r7, #32]
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	2b07      	cmp	r3, #7
 800c2d6:	d9e7      	bls.n	800c2a8 <_nx_ip_checksum_compute+0x8a>
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 800c2d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4413      	add	r3, r2
 800c2de:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800c2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e2:	0c1a      	lsrs	r2, r3, #16
 800c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	4413      	add	r3, r2
 800c2ea:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800c2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ee:	0c1a      	lsrs	r2, r3, #16
 800c2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	4413      	add	r3, r2
 800c2f6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 800c2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fa:	82fb      	strh	r3, [r7, #22]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 800c2fc:	8afb      	ldrh	r3, [r7, #22]
 800c2fe:	ba5b      	rev16	r3, r3
 800c300:	82fb      	strh	r3, [r7, #22]
        checksum = tmp;
 800c302:	8afb      	ldrh	r3, [r7, #22]
 800c304:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 800c310:	e058      	b.n	800c3c4 <_nx_ip_checksum_compute+0x1a6>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	68da      	ldr	r2, [r3, #12]
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	613b      	str	r3, [r7, #16]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	429a      	cmp	r2, r3
 800c324:	d905      	bls.n	800c332 <_nx_ip_checksum_compute+0x114>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	f023 0303 	bic.w	r3, r3, #3
 800c32e:	627b      	str	r3, [r7, #36]	; 0x24
 800c330:	e006      	b.n	800c340 <_nx_ip_checksum_compute+0x122>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	461a      	mov	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4413      	add	r3, r2
 800c33c:	3b03      	subs	r3, #3
 800c33e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d91c      	bls.n	800c388 <_nx_ip_checksum_compute+0x16a>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 800c34e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	3303      	adds	r3, #3
 800c354:	f023 0303 	bic.w	r3, r3, #3
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	4413      	add	r3, r2
 800c35e:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 800c360:	e00e      	b.n	800c380 <_nx_ip_checksum_compute+0x162>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 800c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	b29b      	uxth	r3, r3
 800c368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c36a:	4413      	add	r3, r2
 800c36c:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	0c1b      	lsrs	r3, r3, #16
 800c374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c376:	4413      	add	r3, r2
 800c378:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	3304      	adds	r3, #4
 800c37e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c384:	429a      	cmp	r2, r3
 800c386:	d8ec      	bhi.n	800c362 <_nx_ip_checksum_compute+0x144>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d018      	beq.n	800c3c0 <_nx_ip_checksum_compute+0x1a2>
 800c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d014      	beq.n	800c3c0 <_nx_ip_checksum_compute+0x1a2>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f003 0303 	and.w	r3, r3, #3
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	d10a      	bne.n	800c3b8 <_nx_ip_checksum_compute+0x19a>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ae:	4413      	add	r3, r2
 800c3b0:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3b02      	subs	r3, #2
 800c3b6:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3be:	e001      	b.n	800c3c4 <_nx_ip_checksum_compute+0x1a6>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1a3      	bne.n	800c312 <_nx_ip_checksum_compute+0xf4>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d01f      	beq.n	800c410 <_nx_ip_checksum_compute+0x1f2>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 800c3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d104      	bne.n	800c3e4 <_nx_ip_checksum_compute+0x1c6>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	3301      	adds	r3, #1
 800c3de:	2200      	movs	r2, #0
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	e00f      	b.n	800c404 <_nx_ip_checksum_compute+0x1e6>
        }
        else if (data_length == 3)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d10c      	bne.n	800c404 <_nx_ip_checksum_compute+0x1e6>
        {
            checksum += *short_ptr;
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	881b      	ldrh	r3, [r3, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f2:	4413      	add	r3, r2
 800c3f4:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	3302      	adds	r3, #2
 800c3fa:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	3301      	adds	r3, #1
 800c400:	2200      	movs	r2, #0
 800c402:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	461a      	mov	r2, r3
 800c40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40c:	4413      	add	r3, r2
 800c40e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800c410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c412:	0c1a      	lsrs	r2, r3, #16
 800c414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c416:	b29b      	uxth	r3, r3
 800c418:	4413      	add	r3, r2
 800c41a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800c41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41e:	0c1a      	lsrs	r2, r3, #16
 800c420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c422:	b29b      	uxth	r3, r3
 800c424:	4413      	add	r3, r2
 800c426:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 800c428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42a:	82fb      	strh	r3, [r7, #22]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 800c42c:	8afb      	ldrh	r3, [r7, #22]
 800c42e:	ba5b      	rev16	r3, r3
 800c430:	82fb      	strh	r3, [r7, #22]

    /* Return the computed checksum.  */
    return(tmp);
 800c432:	8afb      	ldrh	r3, [r7, #22]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3738      	adds	r7, #56	; 0x38
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b092      	sub	sp, #72	; 0x48
 800c440:	af06      	add	r7, sp, #24
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800c44e:	4b87      	ldr	r3, [pc, #540]	; (800c66c <_nx_ip_create+0x230>)
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	4b87      	ldr	r3, [pc, #540]	; (800c670 <_nx_ip_create+0x234>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	431a      	orrs	r2, r3
 800c458:	4b86      	ldr	r3, [pc, #536]	; (800c674 <_nx_ip_create+0x238>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 800c45e:	4b86      	ldr	r3, [pc, #536]	; (800c678 <_nx_ip_create+0x23c>)
 800c460:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800c462:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 800c464:	4b85      	ldr	r3, [pc, #532]	; (800c67c <_nx_ip_create+0x240>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4313      	orrs	r3, r2
 800c46a:	4a85      	ldr	r2, [pc, #532]	; (800c680 <_nx_ip_create+0x244>)
 800c46c:	7812      	ldrb	r2, [r2, #0]
 800c46e:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 800c474:	234a      	movs	r3, #74	; 0x4a
 800c476:	e0f5      	b.n	800c664 <_nx_ip_create+0x228>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 800c478:	f640 62d4 	movw	r2, #3796	; 0xed4
 800c47c:	2100      	movs	r1, #0
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f00d ff50 	bl	801a324 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	f8c3 2c48 	str.w	r2, [r3, #3144]	; 0xc48

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	683a      	ldr	r2, [r7, #0]
 800c498:	f8c3 2c4c 	str.w	r2, [r3, #3148]	; 0xc4c

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	401a      	ands	r2, r3
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f8c3 2c74 	str.w	r2, [r3, #3188]	; 0xc74
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4b4:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	4a72      	ldr	r2, [pc, #456]	; (800c684 <_nx_ip_create+0x248>)
 800c4bc:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4c4:	e00e      	b.n	800c4e4 <_nx_ip_create+0xa8>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	b2d8      	uxtb	r0, r3
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	214c      	movs	r1, #76	; 0x4c
 800c4d0:	fb01 f303 	mul.w	r3, r1, r3
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f603 433b 	addw	r3, r3, #3131	; 0xc3b
 800c4da:	4602      	mov	r2, r0
 800c4dc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d9ed      	bls.n	800c4c6 <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4a66      	ldr	r2, [pc, #408]	; (800c688 <_nx_ip_create+0x24c>)
 800c4ee:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2c84 	strb.w	r2, [r3, #3204]	; 0xc84

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	4a63      	ldr	r2, [pc, #396]	; (800c68c <_nx_ip_create+0x250>)
 800c4fe:	f8c3 2c94 	str.w	r2, [r3, #3220]	; 0xc94
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800c508:	f8c3 2c98 	str.w	r2, [r3, #3224]	; 0xc98
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 800c512:	f8c3 2c9c 	str.w	r2, [r3, #3228]	; 0xc9c
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2c85 	strb.w	r2, [r3, #3205]	; 0xc85

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c52c:	f8c3 2ca4 	str.w	r2, [r3, #3236]	; 0xca4

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 2c86 	strb.w	r2, [r3, #3206]	; 0xc86
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	68ba      	ldr	r2, [r7, #8]
 800c53c:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2201      	movs	r2, #1
 800c542:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c54a:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800c554:	2200      	movs	r2, #0
 800c556:	68b9      	ldr	r1, [r7, #8]
 800c558:	4618      	mov	r0, r3
 800c55a:	f00b fdad 	bl	80180b8 <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 800c564:	68b9      	ldr	r1, [r7, #8]
 800c566:	4618      	mov	r0, r3
 800c568:	f00b f930 	bl	80177cc <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800c56c:	f00c fb92 	bl	8018c94 <_tx_thread_identify>
 800c570:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	2b00      	cmp	r3, #0
 800c576:	d006      	beq.n	800c586 <_nx_ip_create+0x14a>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 800c578:	f107 0310 	add.w	r3, r7, #16
 800c57c:	461a      	mov	r2, r3
 800c57e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c582:	f00c fbe1 	bl	8018d48 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f203 609c 	addw	r0, r3, #1692	; 0x69c
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	2301      	movs	r3, #1
 800c590:	9305      	str	r3, [sp, #20]
 800c592:	2301      	movs	r3, #1
 800c594:	9304      	str	r3, [sp, #16]
 800c596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c598:	9303      	str	r3, [sp, #12]
 800c59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c59c:	9302      	str	r3, [sp, #8]
 800c59e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	4a39      	ldr	r2, [pc, #228]	; (800c690 <_nx_ip_create+0x254>)
 800c5aa:	68b9      	ldr	r1, [r7, #8]
 800c5ac:	f00c fa7c 	bl	8018aa8 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f503 60ee 	add.w	r0, r3, #1904	; 0x770
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	9202      	str	r2, [sp, #8]
 800c5bc:	2264      	movs	r2, #100	; 0x64
 800c5be:	9201      	str	r2, [sp, #4]
 800c5c0:	2264      	movs	r2, #100	; 0x64
 800c5c2:	9200      	str	r2, [sp, #0]
 800c5c4:	4a33      	ldr	r2, [pc, #204]	; (800c694 <_nx_ip_create+0x258>)
 800c5c6:	68b9      	ldr	r1, [r7, #8]
 800c5c8:	f00c ffde 	bl	8019588 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	4a32      	ldr	r2, [pc, #200]	; (800c698 <_nx_ip_create+0x25c>)
 800c5d0:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c5d8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c5da:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c5dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5de:	b672      	cpsid	i
    return(int_posture);
 800c5e0:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 800c5e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4a2d      	ldr	r2, [pc, #180]	; (800c69c <_nx_ip_create+0x260>)
 800c5e8:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 800c5ea:	4b2d      	ldr	r3, [pc, #180]	; (800c6a0 <_nx_ip_create+0x264>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d017      	beq.n	800c622 <_nx_ip_create+0x1e6>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 800c5f2:	4b2b      	ldr	r3, [pc, #172]	; (800c6a0 <_nx_ip_create+0x264>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f8d3 3c28 	ldr.w	r3, [r3, #3112]	; 0xc28
 800c5fa:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 800c5fc:	4b28      	ldr	r3, [pc, #160]	; (800c6a0 <_nx_ip_create+0x264>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6a3a      	ldr	r2, [r7, #32]
 800c612:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 800c616:	4b22      	ldr	r3, [pc, #136]	; (800c6a0 <_nx_ip_create+0x264>)
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
 800c620:	e00a      	b.n	800c638 <_nx_ip_create+0x1fc>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 800c622:	4a1f      	ldr	r2, [pc, #124]	; (800c6a0 <_nx_ip_create+0x264>)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 800c638:	4b1a      	ldr	r3, [pc, #104]	; (800c6a4 <_nx_ip_create+0x268>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	3301      	adds	r3, #1
 800c63e:	4a19      	ldr	r2, [pc, #100]	; (800c6a4 <_nx_ip_create+0x268>)
 800c640:	6013      	str	r3, [r2, #0]
 800c642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c644:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f383 8810 	msr	PRIMASK, r3
}
 800c64c:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 800c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c650:	2b00      	cmp	r3, #0
 800c652:	d006      	beq.n	800c662 <_nx_ip_create+0x226>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	f107 0210 	add.w	r2, r7, #16
 800c65a:	4619      	mov	r1, r3
 800c65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c65e:	f00c fb73 	bl	8018d48 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3730      	adds	r7, #48	; 0x30
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	24000818 	.word	0x24000818
 800c670:	2400081c 	.word	0x2400081c
 800c674:	24000820 	.word	0x24000820
 800c678:	24000824 	.word	0x24000824
 800c67c:	24000828 	.word	0x24000828
 800c680:	24000024 	.word	0x24000024
 800c684:	0801b5bc 	.word	0x0801b5bc
 800c688:	0801b5c0 	.word	0x0801b5c0
 800c68c:	7f000001 	.word	0x7f000001
 800c690:	0800d731 	.word	0x0800d731
 800c694:	0800d413 	.word	0x0800d413
 800c698:	0800de09 	.word	0x0800de09
 800c69c:	49502020 	.word	0x49502020
 800c6a0:	24000808 	.word	0x24000808
 800c6a4:	2400080c 	.word	0x2400080c

0800c6a8 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08c      	sub	sp, #48	; 0x30
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 3ed0 	ldr.w	r3, [r3, #3792]	; 0xed0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d04e      	beq.n	800c758 <_nx_ip_deferred_link_status_process+0xb0>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6be:	e047      	b.n	800c750 <_nx_ip_deferred_link_status_process+0xa8>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c4:	214c      	movs	r1, #76	; 0x4c
 800c6c6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d039      	beq.n	800c74a <_nx_ip_deferred_link_status_process+0xa2>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6da:	214c      	movs	r1, #76	; 0x4c
 800c6dc:	fb01 f303 	mul.w	r3, r1, r3
 800c6e0:	4413      	add	r3, r2
 800c6e2:	f603 433c 	addw	r3, r3, #3132	; 0xc3c
 800c6e6:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d02e      	beq.n	800c74a <_nx_ip_deferred_link_status_process+0xa2>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f0:	214c      	movs	r1, #76	; 0x4c
 800c6f2:	fb01 f303 	mul.w	r3, r1, r3
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f603 433c 	addw	r3, r3, #3132	; 0xc3c
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 800c704:	230a      	movs	r3, #10
 800c706:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	224c      	movs	r2, #76	; 0x4c
 800c70c:	fb02 f303 	mul.w	r3, r2, r3
 800c710:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	4413      	add	r3, r2
 800c718:	3304      	adds	r3, #4
 800c71a:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 800c71c:	f107 0308 	add.w	r3, r7, #8
 800c720:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	214c      	movs	r1, #76	; 0x4c
 800c728:	fb01 f303 	mul.w	r3, r1, r3
 800c72c:	4413      	add	r3, r2
 800c72e:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f107 020c 	add.w	r2, r7, #12
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 3ed0 	ldr.w	r3, [r3, #3792]	; 0xed0
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74c:	3301      	adds	r3, #1
 800c74e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0b4      	beq.n	800c6c0 <_nx_ip_deferred_link_status_process+0x18>
 800c756:	e000      	b.n	800c75a <_nx_ip_deferred_link_status_process+0xb2>
        return;
 800c758:	bf00      	nop
        }
    }
}
 800c75a:	3730      	adds	r7, #48	; 0x30
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b08a      	sub	sp, #40	; 0x28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 800c76c:	2300      	movs	r3, #0
 800c76e:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef FEATURE_NX_IPV6
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
 800c770:	2328      	movs	r3, #40	; 0x28
 800c772:	623b      	str	r3, [r7, #32]
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c778:	61bb      	str	r3, [r7, #24]
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 800c77a:	e1df      	b.n	800cb3c <_nx_ip_dispatch_process+0x3dc>
        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c780:	617b      	str	r3, [r7, #20]
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d033      	beq.n	800c7f0 <_nx_ip_dispatch_process+0x90>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b3c      	cmp	r3, #60	; 0x3c
 800c78c:	f200 80c4 	bhi.w	800c918 <_nx_ip_dispatch_process+0x1b8>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b2b      	cmp	r3, #43	; 0x2b
 800c794:	f0c0 80c0 	bcc.w	800c918 <_nx_ip_dispatch_process+0x1b8>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3b2b      	subs	r3, #43	; 0x2b
 800c79c:	2b11      	cmp	r3, #17
 800c79e:	f200 80bb 	bhi.w	800c918 <_nx_ip_dispatch_process+0x1b8>
 800c7a2:	a201      	add	r2, pc, #4	; (adr r2, 800c7a8 <_nx_ip_dispatch_process+0x48>)
 800c7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a8:	0800c89b 	.word	0x0800c89b
 800c7ac:	0800c8cb 	.word	0x0800c8cb
 800c7b0:	0800c919 	.word	0x0800c919
 800c7b4:	0800c919 	.word	0x0800c919
 800c7b8:	0800c919 	.word	0x0800c919
 800c7bc:	0800c919 	.word	0x0800c919
 800c7c0:	0800c919 	.word	0x0800c919
 800c7c4:	0800c915 	.word	0x0800c915
 800c7c8:	0800c90f 	.word	0x0800c90f
 800c7cc:	0800c919 	.word	0x0800c919
 800c7d0:	0800c919 	.word	0x0800c919
 800c7d4:	0800c919 	.word	0x0800c919
 800c7d8:	0800c919 	.word	0x0800c919
 800c7dc:	0800c919 	.word	0x0800c919
 800c7e0:	0800c919 	.word	0x0800c919
 800c7e4:	0800c919 	.word	0x0800c919
 800c7e8:	0800c909 	.word	0x0800c909
 800c7ec:	0800c821 	.word	0x0800c821

#ifdef FEATURE_NX_IPV6
        case NX_PROTOCOL_NEXT_HEADER_HOP_BY_HOP:

            /* This should be the first header; if it is not, this is a malformed packet. */
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)HOP_BY_HOP_HEADER)
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d008      	beq.n	800c80c <_nx_ip_dispatch_process+0xac>
            {

                drop_packet = 1;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24

#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	4a93      	ldr	r2, [pc, #588]	; (800ca50 <_nx_ip_dispatch_process+0x2f0>)
 800c802:	68b9      	ldr	r1, [r7, #8]
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7fe ffae 	bl	800b766 <_nx_icmpv6_send_error_message>

                /* Dispatch packet to the Option handler. */
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
            }

            break;
 800c80a:	e144      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>
                packet_ptr -> nx_packet_option_state = (UCHAR)HOP_BY_HOP_HEADER;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 800c814:	68b9      	ldr	r1, [r7, #8]
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f002 feba 	bl	800f590 <_nx_ipv6_process_hop_by_hop_option>
 800c81c:	6278      	str	r0, [r7, #36]	; 0x24
            break;
 800c81e:	e13a      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>

        case NX_PROTOCOL_NEXT_HEADER_DESTINATION:

            /* Invalid header option if we have already processed 1 destination option. */
            if (packet_ptr -> nx_packet_destination_header >= 1)
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c826:	2b00      	cmp	r3, #0
 800c828:	d011      	beq.n	800c84e <_nx_ip_dispatch_process+0xee>
            {

                /* If we already have processed one destination option, we expect this
                   to be the second one. */
                if ((packet_ptr -> nx_packet_option_state < (UCHAR)DESTINATION_HEADER_1) ||
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c830:	2b01      	cmp	r3, #1
 800c832:	d904      	bls.n	800c83e <_nx_ip_dispatch_process+0xde>
                    (packet_ptr -> nx_packet_destination_header > 1))
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
                if ((packet_ptr -> nx_packet_option_state < (UCHAR)DESTINATION_HEADER_1) ||
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d902      	bls.n	800c844 <_nx_ip_dispatch_process+0xe4>
                {
                    drop_packet = 1;
 800c83e:	2301      	movs	r3, #1
 800c840:	627b      	str	r3, [r7, #36]	; 0x24
 800c842:	e012      	b.n	800c86a <_nx_ip_dispatch_process+0x10a>
                }
                else
                {
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2205      	movs	r2, #5
 800c848:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c84c:	e00d      	b.n	800c86a <_nx_ip_dispatch_process+0x10a>

                /* This is the first time we encounter a destination header option. */
                /* If we are before the routing header option, this must be the 1st one.
                   Otherwise, it must be the 2nd one. */

                if (packet_ptr -> nx_packet_option_state < (UCHAR)ROUTING_HEADER)
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c854:	2b02      	cmp	r3, #2
 800c856:	d804      	bhi.n	800c862 <_nx_ip_dispatch_process+0x102>
                {

                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_1;
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	2202      	movs	r2, #2
 800c85c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c860:	e003      	b.n	800c86a <_nx_ip_dispatch_process+0x10a>
                }
                else
                {
                    packet_ptr -> nx_packet_option_state = (UCHAR)DESTINATION_HEADER_2;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2205      	movs	r2, #5
 800c866:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                }
            }

            packet_ptr -> nx_packet_destination_header++;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c870:	3301      	adds	r3, #1
 800c872:	b2da      	uxtb	r2, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            if (!drop_packet)
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d105      	bne.n	800c88c <_nx_ip_dispatch_process+0x12c>
            {
                /* Proceed with hop by hop handling if there are no errors. */
                drop_packet = _nx_ipv6_process_hop_by_hop_option(ip_ptr, packet_ptr);
 800c880:	68b9      	ldr	r1, [r7, #8]
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f002 fe84 	bl	800f590 <_nx_ipv6_process_hop_by_hop_option>
 800c888:	6278      	str	r0, [r7, #36]	; 0x24
                /* Return an error message to the sender of the packet. */
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
            }
#endif /* NX_DISABLE_ICMPV6_ERROR_MESSAGE */

            break;
 800c88a:	e104      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	4a70      	ldr	r2, [pc, #448]	; (800ca50 <_nx_ip_dispatch_process+0x2f0>)
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f7fe ff67 	bl	800b766 <_nx_icmpv6_send_error_message>
            break;
 800c898:	e0fd      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>

        case NX_PROTOCOL_NEXT_HEADER_ROUTING:

            if (packet_ptr -> nx_packet_option_state >= (UCHAR)ROUTING_HEADER)
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c8a0:	2b02      	cmp	r3, #2
 800c8a2:	d908      	bls.n	800c8b6 <_nx_ip_dispatch_process+0x156>
            {

#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	4a6a      	ldr	r2, [pc, #424]	; (800ca50 <_nx_ip_dispatch_process+0x2f0>)
 800c8a8:	68b9      	ldr	r1, [r7, #8]
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f7fe ff5b 	bl	800b766 <_nx_icmpv6_send_error_message>
#endif /* NX_DISABLE_ICMPV6_ERROR_MESSAGE */

                drop_packet = 1;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	627b      	str	r3, [r7, #36]	; 0x24

                packet_ptr -> nx_packet_option_state = (UCHAR)ROUTING_HEADER;

                drop_packet = _nx_ipv6_process_routing_option(ip_ptr, packet_ptr);
            }
            break;
 800c8b4:	e0ef      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>
                packet_ptr -> nx_packet_option_state = (UCHAR)ROUTING_HEADER;
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                drop_packet = _nx_ipv6_process_routing_option(ip_ptr, packet_ptr);
 800c8be:	68b9      	ldr	r1, [r7, #8]
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f002 feec 	bl	800f69e <_nx_ipv6_process_routing_option>
 800c8c6:	6278      	str	r0, [r7, #36]	; 0x24
            break;
 800c8c8:	e0e5      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>

        case NX_PROTOCOL_NEXT_HEADER_FRAGMENT:

#ifndef NX_DISABLE_FRAGMENTATION
            if (packet_ptr -> nx_packet_option_state >= (UCHAR)FRAGMENT_HEADER)
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	d908      	bls.n	800c8e6 <_nx_ip_dispatch_process+0x186>
            {
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE
                NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	4a5e      	ldr	r2, [pc, #376]	; (800ca50 <_nx_ip_dispatch_process+0x2f0>)
 800c8d8:	68b9      	ldr	r1, [r7, #8]
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f7fe ff43 	bl	800b766 <_nx_icmpv6_send_error_message>
#endif /* NX_DISABLE_ICMPV6_ERROR_MESSAGE */

                drop_packet = 1;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Continue processing the packet. */
                    drop_packet = 0;
                }
            }
#endif /* NX_DISABLE_FRAGMENTATION */
            break;
 800c8e4:	e0d7      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>
                packet_ptr -> nx_packet_option_state = (UCHAR)FRAGMENT_HEADER;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    drop_packet = _nx_ipv6_process_fragment_option(ip_ptr, packet_ptr);
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f002 fda5 	bl	800f440 <_nx_ipv6_process_fragment_option>
 800c8f6:	6278      	str	r0, [r7, #36]	; 0x24
                if (drop_packet != NX_CONTINUE)
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	2b55      	cmp	r3, #85	; 0x55
 800c8fc:	d001      	beq.n	800c902 <_nx_ip_dispatch_process+0x1a2>
                    return(drop_packet);
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	e121      	b.n	800cb46 <_nx_ip_dispatch_process+0x3e6>
                    drop_packet = 0;
 800c902:	2300      	movs	r3, #0
 800c904:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c906:	e0c6      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>

        case NX_PROTOCOL_NO_NEXT_HEADER:

            drop_packet = 1;
 800c908:	2301      	movs	r3, #1
 800c90a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c90c:	e0c3      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 800c90e:	2301      	movs	r3, #1
 800c910:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* NX_IPSEC_ENABLE */

            break;
 800c912:	e0c0      	b.n	800ca96 <_nx_ip_dispatch_process+0x336>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 800c914:	2301      	movs	r3, #1
 800c916:	e116      	b.n	800cb46 <_nx_ip_dispatch_process+0x3e6>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b06      	cmp	r3, #6
 800c91c:	d11d      	bne.n	800c95a <_nx_ip_dispatch_process+0x1fa>
            {
#ifdef FEATURE_NX_IPV6
                if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) ||
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c924:	2b04      	cmp	r3, #4
 800c926:	d008      	beq.n	800c93a <_nx_ip_dispatch_process+0x1da>
                    ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
                if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) ||
 800c92e:	2b06      	cmp	r3, #6
 800c930:	d110      	bne.n	800c954 <_nx_ip_dispatch_process+0x1f4>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	789b      	ldrb	r3, [r3, #2]
                    ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 800c936:	2b04      	cmp	r3, #4
 800c938:	d10c      	bne.n	800c954 <_nx_ip_dispatch_process+0x1f4>
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f8d3 39a8 	ldr.w	r3, [r3, #2472]	; 0x9a8
 800c940:	2b00      	cmp	r3, #0
 800c942:	d007      	beq.n	800c954 <_nx_ip_dispatch_process+0x1f4>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f8d3 39a8 	ldr.w	r3, [r3, #2472]	; 0x9a8
 800c94a:	68b9      	ldr	r1, [r7, #8]
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 800c950:	2300      	movs	r3, #0
 800c952:	e0f8      	b.n	800cb46 <_nx_ip_dispatch_process+0x3e6>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 800c954:	2301      	movs	r3, #1
 800c956:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 800c958:	e09c      	b.n	800ca94 <_nx_ip_dispatch_process+0x334>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c960:	2b06      	cmp	r3, #6
 800c962:	d112      	bne.n	800c98a <_nx_ip_dispatch_process+0x22a>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b3a      	cmp	r3, #58	; 0x3a
 800c968:	d10f      	bne.n	800c98a <_nx_ip_dispatch_process+0x22a>
                if (ip_ptr -> nx_ip_icmpv6_packet_process != NX_NULL)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 800c970:	2b00      	cmp	r3, #0
 800c972:	d007      	beq.n	800c984 <_nx_ip_dispatch_process+0x224>
                    ip_ptr -> nx_ip_icmpv6_packet_process(ip_ptr, packet_ptr);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 800c97a:	68b9      	ldr	r1, [r7, #8]
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	4798      	blx	r3
                    return(0);
 800c980:	2300      	movs	r3, #0
 800c982:	e0e0      	b.n	800cb46 <_nx_ip_dispatch_process+0x3e6>
                drop_packet = 1;
 800c984:	2301      	movs	r3, #1
 800c986:	627b      	str	r3, [r7, #36]	; 0x24
 800c988:	e084      	b.n	800ca94 <_nx_ip_dispatch_process+0x334>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c990:	2b04      	cmp	r3, #4
 800c992:	d112      	bne.n	800c9ba <_nx_ip_dispatch_process+0x25a>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d10f      	bne.n	800c9ba <_nx_ip_dispatch_process+0x25a>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f8d3 386c 	ldr.w	r3, [r3, #2156]	; 0x86c
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d007      	beq.n	800c9b4 <_nx_ip_dispatch_process+0x254>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8d3 386c 	ldr.w	r3, [r3, #2156]	; 0x86c
 800c9aa:	68b9      	ldr	r1, [r7, #8]
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	4798      	blx	r3
                    return(0);
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	e0c8      	b.n	800cb46 <_nx_ip_dispatch_process+0x3e6>
                drop_packet = 1;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c9b8:	e06c      	b.n	800ca94 <_nx_ip_dispatch_process+0x334>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9c0:	2b04      	cmp	r3, #4
 800c9c2:	d112      	bne.n	800c9ea <_nx_ip_dispatch_process+0x28a>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d10f      	bne.n	800c9ea <_nx_ip_dispatch_process+0x28a>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f8d3 3858 	ldr.w	r3, [r3, #2136]	; 0x858
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d007      	beq.n	800c9e4 <_nx_ip_dispatch_process+0x284>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8d3 3858 	ldr.w	r3, [r3, #2136]	; 0x858
 800c9da:	68b9      	ldr	r1, [r7, #8]
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	4798      	blx	r3
                    return(0);
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e0b0      	b.n	800cb46 <_nx_ip_dispatch_process+0x3e6>
                drop_packet = 1;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	627b      	str	r3, [r7, #36]	; 0x24
 800c9e8:	e054      	b.n	800ca94 <_nx_ip_dispatch_process+0x334>
            else if (protocol == NX_PROTOCOL_UDP)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b11      	cmp	r3, #17
 800c9ee:	d11d      	bne.n	800ca2c <_nx_ip_dispatch_process+0x2cc>
                if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) ||
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9f6:	2b04      	cmp	r3, #4
 800c9f8:	d008      	beq.n	800ca0c <_nx_ip_dispatch_process+0x2ac>
                    ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
                if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) ||
 800ca00:	2b06      	cmp	r3, #6
 800ca02:	d110      	bne.n	800ca26 <_nx_ip_dispatch_process+0x2c6>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	789b      	ldrb	r3, [r3, #2]
                    ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) &&
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d10c      	bne.n	800ca26 <_nx_ip_dispatch_process+0x2c6>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d007      	beq.n	800ca26 <_nx_ip_dispatch_process+0x2c6>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
 800ca1c:	68b9      	ldr	r1, [r7, #8]
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	4798      	blx	r3
                        return(0);
 800ca22:	2300      	movs	r3, #0
 800ca24:	e08f      	b.n	800cb46 <_nx_ip_dispatch_process+0x3e6>
                drop_packet = 1;
 800ca26:	2301      	movs	r3, #1
 800ca28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ca2a:	e033      	b.n	800ca94 <_nx_ip_dispatch_process+0x334>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00e      	beq.n	800ca54 <_nx_ip_dispatch_process+0x2f4>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	0411      	lsls	r1, r2, #16
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	4798      	blx	r3
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d103      	bne.n	800ca54 <_nx_ip_dispatch_process+0x2f4>
                            return(0);
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	e07a      	b.n	800cb46 <_nx_ip_dispatch_process+0x3e6>
 800ca50:	04010000 	.word	0x04010000
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d105      	bne.n	800ca6a <_nx_ip_dispatch_process+0x30a>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4a3b      	ldr	r2, [pc, #236]	; (800cb50 <_nx_ip_dispatch_process+0x3f0>)
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7fd f99b 	bl	8009da0 <_nx_icmpv4_send_error_message>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca70:	2b06      	cmp	r3, #6
 800ca72:	d105      	bne.n	800ca80 <_nx_ip_dispatch_process+0x320>
                    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 1, nx_packet_option_offset);
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	4a37      	ldr	r2, [pc, #220]	; (800cb54 <_nx_ip_dispatch_process+0x3f4>)
 800ca78:	68b9      	ldr	r1, [r7, #8]
 800ca7a:	68f8      	ldr	r0, [r7, #12]
 800ca7c:	f7fe fe73 	bl	800b766 <_nx_icmpv6_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
                drop_packet = 1;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ca92:	e7ff      	b.n	800ca94 <_nx_ip_dispatch_process+0x334>
 800ca94:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d138      	bne.n	800cb0e <_nx_ip_dispatch_process+0x3ae>
                continue;
            }
#endif  /* NX_IPSEC_ENABLE */

#ifdef FEATURE_NX_IPV6
            if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800caa2:	2b06      	cmp	r3, #6
 800caa4:	d14a      	bne.n	800cb3c <_nx_ip_dispatch_process+0x3dc>
            {

                /* Find the option we just processed. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                option = (NX_IPV6_HEADER_OPTION *)packet_ptr -> nx_packet_prepend_ptr;
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	613b      	str	r3, [r7, #16]

                /* Check the protocol.  */
                if (protocol == NX_PROTOCOL_NEXT_HEADER_FRAGMENT)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b2c      	cmp	r3, #44	; 0x2c
 800cab0:	d102      	bne.n	800cab8 <_nx_ip_dispatch_process+0x358>
                {

                    /* Fixed length for fragment option, the field of option length is reserved.  */
                    option_hdr_len = sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800cab2:	2308      	movs	r3, #8
 800cab4:	61fb      	str	r3, [r7, #28]
 800cab6:	e004      	b.n	800cac2 <_nx_ip_dispatch_process+0x362>
                else
                {

                    /* Compute the current option length. */
                    /* For other IPv6 optional headers, hdr_ext_len is expressed in 64-bit words. */
                    option_hdr_len = (ULONG)((option -> nx_ipv6_header_option_ext_length + 1) << 3);
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	785b      	ldrb	r3, [r3, #1]
 800cabc:	3301      	adds	r3, #1
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	61fb      	str	r3, [r7, #28]
                }

                /* Obtain the next option header type. */
                protocol = option -> nx_ipv6_header_option_next_header;
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	607b      	str	r3, [r7, #4]

                if (((ALIGN_TYPE)(packet_ptr -> nx_packet_prepend_ptr) + option_hdr_len) <
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	461a      	mov	r2, r3
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	4413      	add	r3, r2
                    (ALIGN_TYPE)(packet_ptr -> nx_packet_append_ptr))
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	68d2      	ldr	r2, [r2, #12]
                if (((ALIGN_TYPE)(packet_ptr -> nx_packet_prepend_ptr) + option_hdr_len) <
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d20c      	bcs.n	800caf4 <_nx_ip_dispatch_process+0x394>
                {

                    /* Advance to the next header. */
                    packet_ptr -> nx_packet_prepend_ptr += option_hdr_len;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	689a      	ldr	r2, [r3, #8]
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	441a      	add	r2, r3
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	609a      	str	r2, [r3, #8]
                    packet_ptr -> nx_packet_length      -= option_hdr_len;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	1ad2      	subs	r2, r2, r3
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	625a      	str	r2, [r3, #36]	; 0x24
 800caf2:	e001      	b.n	800caf8 <_nx_ip_dispatch_process+0x398>
                }
                else
                {

                    drop_packet = 1;
 800caf4:	2301      	movs	r3, #1
 800caf6:	627b      	str	r3, [r7, #36]	; 0x24
                /*
                   Advance the nx_packet_option_offset as well.
                   Option Offset is used when constructing ICMPv6 parameter problem message.
                 */

                packet_ptr -> nx_packet_option_offset = (USHORT)next_option_offset;
 800caf8:	6a3b      	ldr	r3, [r7, #32]
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	85da      	strh	r2, [r3, #46]	; 0x2e

                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                next_option_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	689a      	ldr	r2, [r3, #8]
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	623b      	str	r3, [r7, #32]
 800cb0c:	e016      	b.n	800cb3c <_nx_ip_dispatch_process+0x3dc>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800cb14:	1e5a      	subs	r2, r3, #1
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8d3 2528 	ldr.w	r2, [r3, #1320]	; 0x528
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb26:	1ad2      	subs	r2, r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    while (!drop_packet)
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f43f ae1c 	beq.w	800c77c <_nx_ip_dispatch_process+0x1c>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3728      	adds	r7, #40	; 0x28
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	03020000 	.word	0x03020000
 800cb54:	04010000 	.word	0x04010000

0800cb58 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 800cb66:	2200      	movs	r2, #0
 800cb68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f00a ff65 	bl	8017a3c <_tx_event_flags_set>
}
 800cb72:	bf00      	nop
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b09e      	sub	sp, #120	; 0x78
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	60f8      	str	r0, [r7, #12]
 800cb82:	60b9      	str	r1, [r7, #8]
 800cb84:	607a      	str	r2, [r7, #4]
 800cb86:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb9a:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba4:	795b      	ldrb	r3, [r3, #5]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f000 8183 	beq.w	800ceb2 <_nx_ip_driver_packet_send+0x338>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb8:	69db      	ldr	r3, [r3, #28]
 800cbba:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc2:	d00d      	beq.n	800cbe0 <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbc8:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800cbca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d110      	bne.n	800cbf2 <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 800cbd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbd2:	43da      	mvns	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	401a      	ands	r2, r3
 800cbd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbda:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d108      	bne.n	800cbf2 <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 800cbe0:	2304      	movs	r3, #4
 800cbe2:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800cbe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbe8:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800cbea:	f04f 33ff 	mov.w	r3, #4294967295
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
 800cbf0:	e171      	b.n	800ced6 <_nx_ip_driver_packet_send+0x35c>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbf6:	695b      	ldr	r3, [r3, #20]
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d105      	bne.n	800cc0a <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 800cc04:	2300      	movs	r3, #0
 800cc06:	637b      	str	r3, [r7, #52]	; 0x34
 800cc08:	e165      	b.n	800ced6 <_nx_ip_driver_packet_send+0x35c>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cc10:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800cc14:	d133      	bne.n	800cc7e <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800cc1a:	e00f      	b.n	800cc3c <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 800cc1c:	68f9      	ldr	r1, [r7, #12]
 800cc1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cc20:	4613      	mov	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4413      	add	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	440b      	add	r3, r1
 800cc2a:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d006      	beq.n	800cc44 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 800cc36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc38:	3301      	adds	r3, #1
 800cc3a:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800cc3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc3e:	2b06      	cmp	r3, #6
 800cc40:	d9ec      	bls.n	800cc1c <_nx_ip_driver_packet_send+0xa2>
 800cc42:	e000      	b.n	800cc46 <_nx_ip_driver_packet_send+0xcc>
                    break;
 800cc44:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 800cc46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc48:	2b06      	cmp	r3, #6
 800cc4a:	d80e      	bhi.n	800cc6a <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 800cc4c:	68f9      	ldr	r1, [r7, #12]
 800cc4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cc50:	4613      	mov	r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	440b      	add	r3, r1
 800cc5a:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 800cc64:	2301      	movs	r3, #1
 800cc66:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 800cc6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc6e:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cc76:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 800cc7a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc7c:	e12b      	b.n	800ced6 <_nx_ip_driver_packet_send+0x35c>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 800cc7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc82:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	0a1a      	lsrs	r2, r3, #8
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f003 031f 	and.w	r3, r3, #31
 800cc90:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc96:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 800cca2:	e014      	b.n	800ccce <_nx_ip_driver_packet_send+0x154>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 800cca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d013      	beq.n	800ccd6 <_nx_ip_driver_packet_send+0x15c>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 800ccae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccb8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d102      	bne.n	800ccce <_nx_ip_driver_packet_send+0x154>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 800cccc:	e004      	b.n	800ccd8 <_nx_ip_driver_packet_send+0x15e>
            while (arp_ptr)
 800ccce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1e7      	bne.n	800cca4 <_nx_ip_driver_packet_send+0x12a>
 800ccd4:	e000      	b.n	800ccd8 <_nx_ip_driver_packet_send+0x15e>
                    break;
 800ccd6:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 800ccd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d023      	beq.n	800cd26 <_nx_ip_driver_packet_send+0x1ac>
 800ccde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce6:	4313      	orrs	r3, r2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d01c      	beq.n	800cd26 <_nx_ip_driver_packet_send+0x1ac>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccec:	f3ef 8310 	mrs	r3, PRIMASK
 800ccf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800ccf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800ccf4:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccf6:	b672      	cpsid	i
    return(int_posture);
 800ccf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 800ccfa:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 800ccfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd00:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800cd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd06:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd0c:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd16:	605a      	str	r2, [r3, #4]
 800cd18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd1a:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd1e:	f383 8810 	msr	PRIMASK, r3
}
 800cd22:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 800cd24:	e0d7      	b.n	800ced6 <_nx_ip_driver_packet_send+0x35c>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d912      	bls.n	800cd5a <_nx_ip_driver_packet_send+0x1e0>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8d3 379c 	ldr.w	r3, [r3, #1948]	; 0x79c
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d002      	beq.n	800cd44 <_nx_ip_driver_packet_send+0x1ca>
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00a      	beq.n	800cd5a <_nx_ip_driver_packet_send+0x1e0>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 800cd52:	68b8      	ldr	r0, [r7, #8]
 800cd54:	f003 ff2a 	bl	8010bac <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 800cd58:	e142      	b.n	800cfe0 <_nx_ip_driver_packet_send+0x466>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 800cd5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d056      	beq.n	800ce0e <_nx_ip_driver_packet_send+0x294>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd60:	f3ef 8310 	mrs	r3, PRIMASK
 800cd64:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 800cd66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 800cd68:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd6a:	b672      	cpsid	i
    return(int_posture);
 800cd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 800cd6e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2200      	movs	r2, #0
 800cd74:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 800cd76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d109      	bne.n	800cd92 <_nx_ip_driver_packet_send+0x218>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800cd7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	631a      	str	r2, [r3, #48]	; 0x30
 800cd84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8a:	f383 8810 	msr	PRIMASK, r3
}
 800cd8e:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 800cd90:	e125      	b.n	800cfde <_nx_ip_driver_packet_send+0x464>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 800cd92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd96:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 800cd9c:	e005      	b.n	800cdaa <_nx_ip_driver_packet_send+0x230>
                            queued_count++;
 800cd9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cda0:	3301      	adds	r3, #1
 800cda2:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 800cda4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cda6:	69db      	ldr	r3, [r3, #28]
 800cda8:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 800cdaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdac:	69db      	ldr	r3, [r3, #28]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1f5      	bne.n	800cd9e <_nx_ip_driver_packet_send+0x224>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 800cdb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 800cdbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d917      	bls.n	800cdf2 <_nx_ip_driver_packet_send+0x278>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 800cdc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc6:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 800cdc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdca:	69da      	ldr	r2, [r3, #28]
 800cdcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdce:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 800cdd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 800cddc:	1c5a      	adds	r2, r3, #1
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
                            ip_ptr -> nx_ip_send_packets_dropped++;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
 800cdf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf4:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	f383 8810 	msr	PRIMASK, r3
}
 800cdfc:	bf00      	nop
                        if (remove_packet)
 800cdfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 80ec 	beq.w	800cfde <_nx_ip_driver_packet_send+0x464>
                            _nx_packet_transmit_release(remove_packet);
 800ce06:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ce08:	f003 fed0 	bl	8010bac <_nx_packet_transmit_release>
                return;
 800ce0c:	e0e7      	b.n	800cfde <_nx_ip_driver_packet_send+0x464>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f8d3 3bf8 	ldr.w	r3, [r3, #3064]	; 0xbf8
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00f      	beq.n	800ce38 <_nx_ip_driver_packet_send+0x2be>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f8d3 3bf8 	ldr.w	r3, [r3, #3064]	; 0xbf8
 800ce1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ce20:	f502 7236 	add.w	r2, r2, #728	; 0x2d8
 800ce24:	0092      	lsls	r2, r2, #2
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	440a      	add	r2, r1
 800ce2a:	1d11      	adds	r1, r2, #4
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	4798      	blx	r3
 800ce32:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d011      	beq.n	800ce5c <_nx_ip_driver_packet_send+0x2e2>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 800ce3e:	1c5a      	adds	r2, r3, #1
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800ce4c:	1c5a      	adds	r2, r3, #1
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
                        _nx_packet_transmit_release(packet_ptr);
 800ce54:	68b8      	ldr	r0, [r7, #8]
 800ce56:	f003 fea9 	bl	8010bac <_nx_packet_transmit_release>
                        return;
 800ce5a:	e0c1      	b.n	800cfe0 <_nx_ip_driver_packet_send+0x466>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce60:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 800ce6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 800ce74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce76:	2200      	movs	r2, #0
 800ce78:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 800ce7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 800ce80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce82:	220a      	movs	r2, #10
 800ce84:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 800ce86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce88:	2200      	movs	r2, #0
 800ce8a:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce92:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2200      	movs	r2, #0
 800ce98:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800ce9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	4798      	blx	r3
                return;
 800ceb0:	e095      	b.n	800cfde <_nx_ip_driver_packet_send+0x464>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ceb8:	d302      	bcc.n	800cec0 <_nx_ip_driver_packet_send+0x346>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800ceba:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	da05      	bge.n	800cecc <_nx_ip_driver_packet_send+0x352>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec4:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d104      	bne.n	800ced6 <_nx_ip_driver_packet_send+0x35c>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 800cecc:	2301      	movs	r3, #1
 800cece:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 800ced2:	2300      	movs	r3, #0
 800ced4:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 800ced6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d131      	bne.n	800cf42 <_nx_ip_driver_packet_send+0x3c8>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
 800cee4:	f107 0114 	add.w	r1, r7, #20
 800cee8:	2300      	movs	r3, #0
 800ceea:	68b8      	ldr	r0, [r7, #8]
 800ceec:	f003 fad0 	bl	8010490 <_nx_packet_copy>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d117      	bne.n	800cf26 <_nx_ip_driver_packet_send+0x3ac>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800cefc:	1c5a      	adds	r2, r3, #1
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0e:	4413      	add	r3, r2
 800cf10:	f1a3 0214 	sub.w	r2, r3, #20
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 f974 	bl	800d20c <_nx_ip_packet_deferred_receive>
 800cf24:	e00d      	b.n	800cf42 <_nx_ip_driver_packet_send+0x3c8>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800cf2c:	1c5a      	adds	r2, r3, #1
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 800cf42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d046      	beq.n	800cfd6 <_nx_ip_driver_packet_send+0x45c>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d91b      	bls.n	800cf8e <_nx_ip_driver_packet_send+0x414>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8d3 379c 	ldr.w	r3, [r3, #1948]	; 0x79c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00b      	beq.n	800cf78 <_nx_ip_driver_packet_send+0x3fe>
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf66:	d007      	beq.n	800cf78 <_nx_ip_driver_packet_send+0x3fe>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f8d3 379c 	ldr.w	r3, [r3, #1948]	; 0x79c
 800cf6e:	f107 0218 	add.w	r2, r7, #24
 800cf72:	4610      	mov	r0, r2
 800cf74:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 800cf76:	e033      	b.n	800cfe0 <_nx_ip_driver_packet_send+0x466>
                ip_ptr -> nx_ip_send_packets_dropped++;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800cf7e:	1c5a      	adds	r2, r3, #1
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
                _nx_packet_transmit_release(packet_ptr);
 800cf86:	68b8      	ldr	r0, [r7, #8]
 800cf88:	f003 fe10 	bl	8010bac <_nx_packet_transmit_release>
            return;
 800cf8c:	e028      	b.n	800cfe0 <_nx_ip_driver_packet_send+0x466>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f1a3 0214 	sub.w	r2, r3, #20
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d104      	bne.n	800cfc6 <_nx_ip_driver_packet_send+0x44c>
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	f00b ff82 	bl	8018ec8 <_tx_thread_sleep>
 800cfc4:	e7fa      	b.n	800cfbc <_nx_ip_driver_packet_send+0x442>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfcc:	f107 0218 	add.w	r2, r7, #24
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
 800cfd4:	e004      	b.n	800cfe0 <_nx_ip_driver_packet_send+0x466>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800cfd6:	68b8      	ldr	r0, [r7, #8]
 800cfd8:	f003 fde8 	bl	8010bac <_nx_packet_transmit_release>
 800cfdc:	e000      	b.n	800cfe0 <_nx_ip_driver_packet_send+0x466>
                return;
 800cfde:	bf00      	nop
    }
}
 800cfe0:	3778      	adds	r7, #120	; 0x78
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <_nx_ip_fast_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_ip_fast_periodic_timer_entry(ULONG ip_address)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b084      	sub	sp, #16
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_FAST_EVENT, TX_OR);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 800cff8:	2200      	movs	r2, #0
 800cffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cffe:	4618      	mov	r0, r3
 800d000:	f00a fd1c 	bl	8017a3c <_tx_event_flags_set>
}
 800d004:	bf00      	nop
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <_nx_ip_fast_periodic_timer_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_fast_periodic_timer_create(NX_IP *ip_ptr)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af04      	add	r7, sp, #16
 800d012:	6078      	str	r0, [r7, #4]

ULONG _nx_ip_fast_timer_rate;

    if (ip_ptr -> nx_ip_fast_periodic_timer_created)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 3b34 	ldr.w	r3, [r3, #2868]	; 0xb34
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d116      	bne.n	800d04c <_nx_ip_fast_periodic_timer_create+0x40>
    {
        return;
    }

    _nx_ip_fast_timer_rate =  (NX_IP_PERIODIC_RATE + (NX_IP_FAST_TIMER_RATE - 1)) / NX_IP_FAST_TIMER_RATE;
 800d01e:	230a      	movs	r3, #10
 800d020:	60fb      	str	r3, [r7, #12]

    /* Create the fast TCP timer.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f603 3038 	addw	r0, r3, #2872	; 0xb38
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6859      	ldr	r1, [r3, #4]
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	2301      	movs	r3, #1
 800d030:	9302      	str	r3, [sp, #8]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	4613      	mov	r3, r2
 800d03c:	4a05      	ldr	r2, [pc, #20]	; (800d054 <_nx_ip_fast_periodic_timer_create+0x48>)
 800d03e:	f00c faa3 	bl	8019588 <_tx_timer_create>
                    _nx_ip_fast_timer_rate, _nx_ip_fast_timer_rate, TX_AUTO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr)

    /* Set the flag to indicate that the fast timer has been created. */
    ip_ptr -> nx_ip_fast_periodic_timer_created = 1;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2201      	movs	r2, #1
 800d046:	f8c3 2b34 	str.w	r2, [r3, #2868]	; 0xb34
 800d04a:	e000      	b.n	800d04e <_nx_ip_fast_periodic_timer_create+0x42>
        return;
 800d04c:	bf00      	nop
}
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	0800cfe7 	.word	0x0800cfe7

0800d058 <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b08a      	sub	sp, #40	; 0x28
 800d05c:	af02      	add	r7, sp, #8
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d070:	d106      	bne.n	800d080 <_nx_ip_header_add+0x28>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f8d3 3624 	ldr.w	r3, [r3, #1572]	; 0x624
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d101      	bne.n	800d080 <_nx_ip_header_add+0x28>
    {
        router_alert = 4;
 800d07c:	2304      	movs	r3, #4
 800d07e:	61fb      	str	r3, [r7, #28]
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	69f9      	ldr	r1, [r7, #28]
 800d086:	f06f 0313 	mvn.w	r3, #19
 800d08a:	1a5b      	subs	r3, r3, r1
 800d08c:	441a      	add	r2, r3
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	4413      	add	r3, r2
 800d09a:	f103 0214 	add.w	r2, r3, #20
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d204      	bcs.n	800d0b8 <_nx_ip_header_add+0x60>
 800d0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b2:	f00b ff09 	bl	8018ec8 <_tx_thread_sleep>
 800d0b6:	e7fa      	b.n	800d0ae <_nx_ip_header_add+0x56>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	61bb      	str	r3, [r7, #24]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	689a      	ldr	r2, [r3, #8]
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	639a      	str	r2, [r3, #56]	; 0x38
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	4413      	add	r3, r2
 800d0d2:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800d0d4:	3314      	adds	r3, #20
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d101      	bne.n	800d0ec <_nx_ip_header_add+0x94>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	e076      	b.n	800d1da <_nx_ip_header_add+0x182>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d009      	beq.n	800d106 <_nx_ip_header_add+0xae>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f6:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	e008      	b.n	800d118 <_nx_ip_header_add+0xc0>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	4313      	orrs	r3, r2
 800d110:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 800d11e:	1c59      	adds	r1, r3, #1
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	f8c2 1638 	str.w	r1, [r2, #1592]	; 0x638
 800d126:	041a      	lsls	r2, r3, #16
 800d128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12a:	431a      	orrs	r2, r3
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 800d130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d132:	061a      	lsls	r2, r3, #24
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	431a      	orrs	r2, r3
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d004      	beq.n	800d158 <_nx_ip_header_add+0x100>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	3314      	adds	r3, #20
 800d154:	4a23      	ldr	r2, [pc, #140]	; (800d1e4 <_nx_ip_header_add+0x18c>)
 800d156:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	ba1a      	rev	r2, r3
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	ba1a      	rev	r2, r3
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	ba1a      	rev	r2, r3
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	ba1a      	rev	r2, r3
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	ba1a      	rev	r2, r3
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d008      	beq.n	800d1a2 <_nx_ip_header_add+0x14a>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	3314      	adds	r3, #20
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	3314      	adds	r3, #20
 800d19e:	ba12      	rev	r2, r2
 800d1a0:	601a      	str	r2, [r3, #0]
    if (compute_checksum)
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2104      	movs	r1, #4
 800d1b0:	68b8      	ldr	r0, [r7, #8]
 800d1b2:	f7ff f834 	bl	800c21e <_nx_ip_checksum_compute>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	617b      	str	r3, [r7, #20]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	43db      	mvns	r3, r3
 800d1be:	613b      	str	r3, [r7, #16]
        val = val & NX_LOWER_16_MASK;
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	613b      	str	r3, [r7, #16]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	ba1b      	rev	r3, r3
 800d1ca:	613b      	str	r3, [r7, #16]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	689a      	ldr	r2, [r3, #8]
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	431a      	orrs	r2, r3
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3720      	adds	r7, #32
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	94040000 	.word	0x94040000

0800d1e8 <_nx_ip_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 800d1ec:	4b05      	ldr	r3, [pc, #20]	; (800d204 <_nx_ip_initialize+0x1c>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
    _nx_ip_created_count =   0;
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <_nx_ip_initialize+0x20>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	601a      	str	r2, [r3, #0]
}
 800d1f8:	bf00      	nop
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	24000808 	.word	0x24000808
 800d208:	2400080c 	.word	0x2400080c

0800d20c <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b088      	sub	sp, #32
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d216:	f3ef 8310 	mrs	r3, PRIMASK
 800d21a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d21c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d21e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d220:	b672      	cpsid	i
    return(int_posture);
 800d222:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800d224:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d011      	beq.n	800d254 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
 800d236:	683a      	ldr	r2, [r7, #0]
 800d238:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2200      	movs	r2, #0
 800d23e:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	f383 8810 	msr	PRIMASK, r3
}
 800d252:	e019      	b.n	800d288 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	2200      	movs	r2, #0
 800d268:	61da      	str	r2, [r3, #28]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f383 8810 	msr	PRIMASK, r3
}
 800d274:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 800d27c:	2200      	movs	r2, #0
 800d27e:	2108      	movs	r1, #8
 800d280:	4618      	mov	r0, r3
 800d282:	f00a fbdb 	bl	8017a3c <_tx_event_flags_set>
    }
}
 800d286:	bf00      	nop
 800d288:	bf00      	nop
 800d28a:	3720      	adds	r7, #32
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d104      	bne.n	800d2ba <_nx_ip_packet_receive+0x2a>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f603 4234 	addw	r2, r3, #3124	; 0xc34
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 800d2c2:	7bfb      	ldrb	r3, [r7, #15]
 800d2c4:	091b      	lsrs	r3, r3, #4
 800d2c6:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	7bba      	ldrb	r2, [r7, #14]
 800d2cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	689a      	ldr	r2, [r3, #8]
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
 800d2da:	2b04      	cmp	r3, #4
 800d2dc:	d10b      	bne.n	800d2f6 <_nx_ip_packet_receive+0x66>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d006      	beq.n	800d2f6 <_nx_ip_packet_receive+0x66>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 800d2ee:	6839      	ldr	r1, [r7, #0]
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	4798      	blx	r3
        return;
 800d2f4:	e020      	b.n	800d338 <_nx_ip_packet_receive+0xa8>
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (ip_version == NX_IP_VERSION_V6 && ip_ptr -> nx_ipv6_packet_receive)
 800d2f6:	7bbb      	ldrb	r3, [r7, #14]
 800d2f8:	2b06      	cmp	r3, #6
 800d2fa:	d10b      	bne.n	800d314 <_nx_ip_packet_receive+0x84>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d006      	beq.n	800d314 <_nx_ip_packet_receive+0x84>
    {

        /* Call the IPv6 packet handler. */
        (ip_ptr -> nx_ipv6_packet_receive)(ip_ptr, packet_ptr);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	4798      	blx	r3
        return;
 800d312:	e011      	b.n	800d338 <_nx_ip_packet_receive+0xa8>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 3538 	ldr.w	r3, [r3, #1336]	; 0x538
 800d31a:	1c5a      	adds	r2, r3, #1
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

    _nx_packet_release(packet_ptr);
 800d330:	6838      	ldr	r0, [r7, #0]
 800d332:	f003 fb81 	bl	8010a38 <_nx_packet_release>

    return;
 800d336:	bf00      	nop
}
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b088      	sub	sp, #32
 800d342:	af04      	add	r7, sp, #16
 800d344:	60f8      	str	r0, [r7, #12]
 800d346:	60b9      	str	r1, [r7, #8]
 800d348:	607a      	str	r2, [r7, #4]
 800d34a:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d116      	bne.n	800d390 <_nx_ip_packet_send+0x52>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	f1a3 0214 	sub.w	r2, r3, #20
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d380:	f103 0214 	add.w	r2, r3, #20
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800d388:	68b8      	ldr	r0, [r7, #8]
 800d38a:	f003 fc0f 	bl	8010bac <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 800d38e:	e03d      	b.n	800d40c <_nx_ip_packet_send+0xce>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d394:	695a      	ldr	r2, [r3, #20]
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	9303      	str	r3, [sp, #12]
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f7ff fe54 	bl	800d058 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d122      	bne.n	800d3fc <_nx_ip_packet_send+0xbe>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00b      	beq.n	800d3d8 <_nx_ip_packet_send+0x9a>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3d0:	6879      	ldr	r1, [r7, #4]
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f000 f830 	bl	800d438 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <_nx_ip_packet_send+0xa8>
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10a      	bne.n	800d3fc <_nx_ip_packet_send+0xbe>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 800d3f4:	68b8      	ldr	r0, [r7, #8]
 800d3f6:	f003 fbd9 	bl	8010bac <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 800d3fa:	e007      	b.n	800d40c <_nx_ip_packet_send+0xce>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	6a3b      	ldr	r3, [r7, #32]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	68b9      	ldr	r1, [r7, #8]
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f7ff fbb7 	bl	800cb7a <_nx_ip_driver_packet_send>
}
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 800d424:	2200      	movs	r2, #0
 800d426:	2101      	movs	r1, #1
 800d428:	4618      	mov	r0, r3
 800d42a:	f00a fb07 	bl	8017a3c <_tx_event_flags_set>
}
 800d42e:	bf00      	nop
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
	...

0800d438 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 800d438:	b480      	push	{r7}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2200      	movs	r2, #0
 800d44a:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d452:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800d456:	d003      	beq.n	800d460 <_nx_ip_route_find+0x28>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45e:	d131      	bne.n	800d4c4 <_nx_ip_route_find+0x8c>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d121      	bne.n	800d4b2 <_nx_ip_route_find+0x7a>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800d46e:	2300      	movs	r3, #0
 800d470:	617b      	str	r3, [r7, #20]
 800d472:	e01a      	b.n	800d4aa <_nx_ip_route_find+0x72>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	214c      	movs	r1, #76	; 0x4c
 800d47a:	fb01 f303 	mul.w	r3, r1, r3
 800d47e:	4413      	add	r3, r2
 800d480:	f603 433a 	addw	r3, r3, #3130	; 0xc3a
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00c      	beq.n	800d4a4 <_nx_ip_route_find+0x6c>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	224c      	movs	r2, #76	; 0x4c
 800d48e:	fb02 f303 	mul.w	r3, r2, r3
 800d492:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	4413      	add	r3, r2
 800d49a:	1d1a      	adds	r2, r3, #4
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	e13b      	b.n	800d71c <_nx_ip_route_find+0x2e4>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	617b      	str	r3, [r7, #20]
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d0e1      	beq.n	800d474 <_nx_ip_route_find+0x3c>
 800d4b0:	e006      	b.n	800d4c0 <_nx_ip_route_find+0x88>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	799b      	ldrb	r3, [r3, #6]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <_nx_ip_route_find+0x88>
        {
            return(NX_SUCCESS);
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e12d      	b.n	800d71c <_nx_ip_route_find+0x2e4>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 800d4c0:	2321      	movs	r3, #33	; 0x21
 800d4c2:	e12b      	b.n	800d71c <_nx_ip_route_find+0x2e4>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	617b      	str	r3, [r7, #20]
 800d4c8:	e02a      	b.n	800d520 <_nx_ip_route_find+0xe8>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	224c      	movs	r2, #76	; 0x4c
 800d4ce:	fb02 f303 	mul.w	r3, r2, r3
 800d4d2:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	4413      	add	r3, r2
 800d4da:	3304      	adds	r3, #4
 800d4dc:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	791b      	ldrb	r3, [r3, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d019      	beq.n	800d51a <_nx_ip_route_find+0xe2>
            (interface_ptr -> nx_interface_link_up) &&
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d015      	beq.n	800d51a <_nx_ip_route_find+0xe2>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d110      	bne.n	800d51a <_nx_ip_route_find+0xe2>
            ((*ip_interface_ptr == NX_NULL) ||
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d004      	beq.n	800d50a <_nx_ip_route_find+0xd2>
             (*ip_interface_ptr == interface_ptr)))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	429a      	cmp	r2, r3
 800d508:	d107      	bne.n	800d51a <_nx_ip_route_find+0xe2>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	693a      	ldr	r2, [r7, #16]
 800d50e:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800d516:	2300      	movs	r3, #0
 800d518:	e100      	b.n	800d71c <_nx_ip_route_find+0x2e4>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	3301      	adds	r3, #1
 800d51e:	617b      	str	r3, [r7, #20]
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0d1      	beq.n	800d4ca <_nx_ip_route_find+0x92>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800d526:	2300      	movs	r3, #0
 800d528:	617b      	str	r3, [r7, #20]
 800d52a:	e036      	b.n	800d59a <_nx_ip_route_find+0x162>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	224c      	movs	r2, #76	; 0x4c
 800d530:	fb02 f303 	mul.w	r3, r2, r3
 800d534:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4413      	add	r3, r2
 800d53c:	3304      	adds	r3, #4
 800d53e:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	791b      	ldrb	r3, [r3, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d025      	beq.n	800d594 <_nx_ip_route_find+0x15c>
            (interface_ptr -> nx_interface_link_up) &&
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d021      	beq.n	800d594 <_nx_ip_route_find+0x15c>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	699a      	ldr	r2, [r3, #24]
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	401a      	ands	r2, r3
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d119      	bne.n	800d594 <_nx_ip_route_find+0x15c>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d103      	bne.n	800d570 <_nx_ip_route_find+0x138>
            {
                *ip_interface_ptr = interface_ptr;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	693a      	ldr	r2, [r7, #16]
 800d56c:	601a      	str	r2, [r3, #0]
 800d56e:	e00b      	b.n	800d588 <_nx_ip_route_find+0x150>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d103      	bne.n	800d57e <_nx_ip_route_find+0x146>
            {
                *ip_interface_ptr = interface_ptr;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	693a      	ldr	r2, [r7, #16]
 800d57a:	601a      	str	r2, [r3, #0]
 800d57c:	e004      	b.n	800d588 <_nx_ip_route_find+0x150>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	693a      	ldr	r2, [r7, #16]
 800d584:	429a      	cmp	r2, r3
 800d586:	d104      	bne.n	800d592 <_nx_ip_route_find+0x15a>
            {
                continue;
            }

            *next_hop_address = destination_address;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800d58e:	2300      	movs	r3, #0
 800d590:	e0c4      	b.n	800d71c <_nx_ip_route_find+0x2e4>
                continue;
 800d592:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	3301      	adds	r3, #1
 800d598:	617b      	str	r3, [r7, #20]
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d9c5      	bls.n	800d52c <_nx_ip_route_find+0xf4>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	4b61      	ldr	r3, [pc, #388]	; (800d728 <_nx_ip_route_find+0x2f0>)
 800d5a4:	4013      	ands	r3, r2
 800d5a6:	4a61      	ldr	r2, [pc, #388]	; (800d72c <_nx_ip_route_find+0x2f4>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d141      	bne.n	800d630 <_nx_ip_route_find+0x1f8>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00e      	beq.n	800d5d2 <_nx_ip_route_find+0x19a>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	791b      	ldrb	r3, [r3, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d038      	beq.n	800d630 <_nx_ip_route_find+0x1f8>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d033      	beq.n	800d630 <_nx_ip_route_find+0x1f8>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	e0a4      	b.n	800d71c <_nx_ip_route_find+0x2e4>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	617b      	str	r3, [r7, #20]
 800d5d6:	e028      	b.n	800d62a <_nx_ip_route_find+0x1f2>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	214c      	movs	r1, #76	; 0x4c
 800d5de:	fb01 f303 	mul.w	r3, r1, r3
 800d5e2:	4413      	add	r3, r2
 800d5e4:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d01a      	beq.n	800d624 <_nx_ip_route_find+0x1ec>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	214c      	movs	r1, #76	; 0x4c
 800d5f4:	fb01 f303 	mul.w	r3, r1, r3
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f603 433a 	addw	r3, r3, #3130	; 0xc3a
 800d5fe:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00f      	beq.n	800d624 <_nx_ip_route_find+0x1ec>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	224c      	movs	r2, #76	; 0x4c
 800d608:	fb02 f303 	mul.w	r3, r2, r3
 800d60c:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	4413      	add	r3, r2
 800d614:	1d1a      	adds	r2, r3, #4
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 800d620:	2300      	movs	r3, #0
 800d622:	e07b      	b.n	800d71c <_nx_ip_route_find+0x2e4>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	3301      	adds	r3, #1
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d9d3      	bls.n	800d5d8 <_nx_ip_route_find+0x1a0>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d02b      	beq.n	800d690 <_nx_ip_route_find+0x258>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d027      	beq.n	800d690 <_nx_ip_route_find+0x258>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 800d646:	2b00      	cmp	r3, #0
 800d648:	d022      	beq.n	800d690 <_nx_ip_route_find+0x258>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 800d65c:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 800d65e:	429a      	cmp	r2, r3
 800d660:	d001      	beq.n	800d666 <_nx_ip_route_find+0x22e>
        {
            return(NX_IP_ADDRESS_ERROR);
 800d662:	2321      	movs	r3, #33	; 0x21
 800d664:	e05a      	b.n	800d71c <_nx_ip_route_find+0x2e4>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d103      	bne.n	800d676 <_nx_ip_route_find+0x23e>
        {
            *ip_interface_ptr = interface_ptr;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	601a      	str	r2, [r3, #0]
 800d674:	e006      	b.n	800d684 <_nx_ip_route_find+0x24c>
        }
        else if (*ip_interface_ptr != interface_ptr)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	693a      	ldr	r2, [r7, #16]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d001      	beq.n	800d684 <_nx_ip_route_find+0x24c>
        {
            return(NX_IP_ADDRESS_ERROR);
 800d680:	2321      	movs	r3, #33	; 0x21
 800d682:	e04b      	b.n	800d71c <_nx_ip_route_find+0x2e4>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	689a      	ldr	r2, [r3, #8]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 800d68c:	2300      	movs	r3, #0
 800d68e:	e045      	b.n	800d71c <_nx_ip_route_find+0x2e4>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d016      	beq.n	800d6c6 <_nx_ip_route_find+0x28e>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	791b      	ldrb	r3, [r3, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d03b      	beq.n	800d71a <_nx_ip_route_find+0x2e2>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d036      	beq.n	800d71a <_nx_ip_route_find+0x2e2>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	695a      	ldr	r2, [r3, #20]
 800d6b2:	4b1d      	ldr	r3, [pc, #116]	; (800d728 <_nx_ip_route_find+0x2f0>)
 800d6b4:	4013      	ands	r3, r2
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800d6b6:	4a1d      	ldr	r2, [pc, #116]	; (800d72c <_nx_ip_route_find+0x2f4>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d12e      	bne.n	800d71a <_nx_ip_route_find+0x2e2>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	e02a      	b.n	800d71c <_nx_ip_route_find+0x2e4>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	617b      	str	r3, [r7, #20]
 800d6ca:	e023      	b.n	800d714 <_nx_ip_route_find+0x2dc>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	224c      	movs	r2, #76	; 0x4c
 800d6d0:	fb02 f303 	mul.w	r3, r2, r3
 800d6d4:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	4413      	add	r3, r2
 800d6dc:	3304      	adds	r3, #4
 800d6de:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	791b      	ldrb	r3, [r3, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d012      	beq.n	800d70e <_nx_ip_route_find+0x2d6>
                (interface_ptr -> nx_interface_link_up) &&
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00e      	beq.n	800d70e <_nx_ip_route_find+0x2d6>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	695a      	ldr	r2, [r3, #20]
 800d6f4:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <_nx_ip_route_find+0x2f0>)
 800d6f6:	4013      	ands	r3, r2
                (interface_ptr -> nx_interface_link_up) &&
 800d6f8:	4a0c      	ldr	r2, [pc, #48]	; (800d72c <_nx_ip_route_find+0x2f4>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d107      	bne.n	800d70e <_nx_ip_route_find+0x2d6>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800d70a:	2300      	movs	r3, #0
 800d70c:	e006      	b.n	800d71c <_nx_ip_route_find+0x2e4>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	3301      	adds	r3, #1
 800d712:	617b      	str	r3, [r7, #20]
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d9d8      	bls.n	800d6cc <_nx_ip_route_find+0x294>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 800d71a:	2321      	movs	r3, #33	; 0x21
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	371c      	adds	r7, #28
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr
 800d728:	ffff0000 	.word	0xffff0000
 800d72c:	a9fe0000 	.word	0xa9fe0000

0800d730 <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b0a0      	sub	sp, #128	; 0x80
 800d734:	af02      	add	r7, sp, #8
 800d736:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d73c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d73e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800d742:	f04f 31ff 	mov.w	r1, #4294967295
 800d746:	4618      	mov	r0, r3
 800d748:	f00a fd10 	bl	801816c <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 800d74c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d74e:	2201      	movs	r2, #1
 800d750:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800d754:	2300      	movs	r3, #0
 800d756:	677b      	str	r3, [r7, #116]	; 0x74
 800d758:	e0a6      	b.n	800d8a8 <_nx_ip_thread_entry+0x178>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 800d75a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d75c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d75e:	214c      	movs	r1, #76	; 0x4c
 800d760:	fb01 f303 	mul.w	r3, r1, r3
 800d764:	4413      	add	r3, r2
 800d766:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f000 8098 	beq.w	800d8a2 <_nx_ip_thread_entry+0x172>
 800d772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d776:	214c      	movs	r1, #76	; 0x4c
 800d778:	fb01 f303 	mul.w	r3, r1, r3
 800d77c:	4413      	add	r3, r2
 800d77e:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 808c 	beq.w	800d8a2 <_nx_ip_thread_entry+0x172>
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 800d78a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d78c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d78e:	214c      	movs	r1, #76	; 0x4c
 800d790:	fb01 f303 	mul.w	r3, r1, r3
 800d794:	4413      	add	r3, r2
 800d796:	f603 433a 	addw	r3, r3, #3130	; 0xc3a
 800d79a:	2201      	movs	r2, #1
 800d79c:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 800d79e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 800d7a2:	2313      	movs	r3, #19
 800d7a4:	637b      	str	r3, [r7, #52]	; 0x34
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 800d7a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7a8:	224c      	movs	r2, #76	; 0x4c
 800d7aa:	fb02 f303 	mul.w	r3, r2, r3
 800d7ae:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800d7b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d7b4:	4413      	add	r3, r2
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	653b      	str	r3, [r7, #80]	; 0x50
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800d7ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d7bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7be:	214c      	movs	r1, #76	; 0x4c
 800d7c0:	fb01 f303 	mul.w	r3, r1, r3
 800d7c4:	4413      	add	r3, r2
 800d7c6:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800d7d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	637b      	str	r3, [r7, #52]	; 0x34
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800d7dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d7de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7e0:	214c      	movs	r1, #76	; 0x4c
 800d7e2:	fb01 f303 	mul.w	r3, r1, r3
 800d7e6:	4413      	add	r3, r2
 800d7e8:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d7f2:	4610      	mov	r0, r2
 800d7f4:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800d7f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7f8:	64fb      	str	r3, [r7, #76]	; 0x4c
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	637b      	str	r3, [r7, #52]	; 0x34

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800d7fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d802:	214c      	movs	r1, #76	; 0x4c
 800d804:	fb01 f303 	mul.w	r3, r1, r3
 800d808:	4413      	add	r3, r2
 800d80a:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d814:	4610      	mov	r0, r2
 800d816:	4798      	blx	r3

#ifdef FEATURE_NX_IPV6
            /* For ever IPv6 address on this interface, set the Solicitated Multicast address. */
            interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 800d818:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d81a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d81c:	214c      	movs	r1, #76	; 0x4c
 800d81e:	fb01 f303 	mul.w	r3, r1, r3
 800d822:	4413      	add	r3, r2
 800d824:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	66fb      	str	r3, [r7, #108]	; 0x6c

            while (interface_ipv6_address)
 800d82c:	e01a      	b.n	800d864 <_nx_ip_thread_entry+0x134>
            {
            ULONG multicast_address[4];

                SET_SOLICITED_NODE_MULTICAST_ADDRESS(multicast_address, interface_ipv6_address -> nxd_ipv6_address);
 800d82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d830:	f103 0208 	add.w	r2, r3, #8
 800d834:	f107 031c 	add.w	r3, r7, #28
 800d838:	4611      	mov	r1, r2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f002 f816 	bl	800f86c <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
                _nx_ipv6_multicast_join(ip_ptr, multicast_address, &ip_ptr -> nx_ip_interface[i]);
 800d840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d842:	224c      	movs	r2, #76	; 0x4c
 800d844:	fb02 f303 	mul.w	r3, r2, r3
 800d848:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800d84c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d84e:	4413      	add	r3, r2
 800d850:	1d1a      	adds	r2, r3, #4
 800d852:	f107 031c 	add.w	r3, r7, #28
 800d856:	4619      	mov	r1, r3
 800d858:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d85a:	f000 ffab 	bl	800e7b4 <_nx_ipv6_multicast_join>
                interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 800d85e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d860:	699b      	ldr	r3, [r3, #24]
 800d862:	66fb      	str	r3, [r7, #108]	; 0x6c
            while (interface_ipv6_address)
 800d864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1e1      	bne.n	800d82e <_nx_ip_thread_entry+0xfe>
            }
#ifndef NX_DISABLE_ICMPV6_ROUTER_SOLICITATION
            if (ip_ptr -> nx_ipv6_packet_receive)
 800d86a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d86c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d016      	beq.n	800d8a2 <_nx_ip_thread_entry+0x172>
            {
            ULONG address[4];

                /* Create the all-node multicast group address, */
                address[0] = 0xFF020000;
 800d874:	4b47      	ldr	r3, [pc, #284]	; (800d994 <_nx_ip_thread_entry+0x264>)
 800d876:	60fb      	str	r3, [r7, #12]
                address[1] = 0;
 800d878:	2300      	movs	r3, #0
 800d87a:	613b      	str	r3, [r7, #16]
                address[2] = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	617b      	str	r3, [r7, #20]
                address[3] = 1;
 800d880:	2301      	movs	r3, #1
 800d882:	61bb      	str	r3, [r7, #24]


                /* Join all-node multicast group. */
                _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 800d884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d886:	224c      	movs	r2, #76	; 0x4c
 800d888:	fb02 f303 	mul.w	r3, r2, r3
 800d88c:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800d890:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d892:	4413      	add	r3, r2
 800d894:	1d1a      	adds	r2, r3, #4
 800d896:	f107 030c 	add.w	r3, r7, #12
 800d89a:	4619      	mov	r1, r3
 800d89c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d89e:	f000 ff89 	bl	800e7b4 <_nx_ipv6_multicast_join>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800d8a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	677b      	str	r3, [r7, #116]	; 0x74
 800d8a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f43f af55 	beq.w	800d75a <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d8b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8b2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f00a fed0 	bl	801865c <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 800d8bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8be:	f203 704c 	addw	r0, r3, #1868	; 0x74c
 800d8c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ca:	9200      	str	r2, [sp, #0]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f04f 31ff 	mov.w	r1, #4294967295
 800d8d2:	f009 ffc9 	bl	8017868 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d8d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8d8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800d8dc:	f04f 31ff 	mov.w	r1, #4294967295
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f00a fc43 	bl	801816c <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	f003 0308 	and.w	r3, r3, #8
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d031      	beq.n	800d954 <_nx_ip_thread_entry+0x224>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800d8f0:	e023      	b.n	800d93a <_nx_ip_thread_entry+0x20a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8f2:	f3ef 8310 	mrs	r3, PRIMASK
 800d8f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800d8f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800d8fa:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8fc:	b672      	cpsid	i
    return(int_posture);
 800d8fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 800d900:	667b      	str	r3, [r7, #100]	; 0x64

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 800d902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d904:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 800d908:	663b      	str	r3, [r7, #96]	; 0x60

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 800d90a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d90c:	69da      	ldr	r2, [r3, #28]
 800d90e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d910:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 800d914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d916:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d103      	bne.n	800d926 <_nx_ip_thread_entry+0x1f6>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800d91e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d920:	2200      	movs	r2, #0
 800d922:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 800d926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d928:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d92c:	f383 8810 	msr	PRIMASK, r3
}
 800d930:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 800d932:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d934:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d936:	f7ff fcab 	bl	800d290 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800d93a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d93c:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1d6      	bne.n	800d8f2 <_nx_ip_thread_entry+0x1c2>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 800d944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d946:	f023 0308 	bic.w	r3, r3, #8
 800d94a:	633b      	str	r3, [r7, #48]	; 0x30
            if (!ip_events)
 800d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f000 8185 	beq.w	800dc5e <_nx_ip_thread_entry+0x52e>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00c      	beq.n	800d978 <_nx_ip_thread_entry+0x248>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800d95e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d960:	f8d3 39b4 	ldr.w	r3, [r3, #2484]	; 0x9b4
 800d964:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d966:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d96e:	633b      	str	r3, [r7, #48]	; 0x30
            if (!ip_events)
 800d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d972:	2b00      	cmp	r3, #0
 800d974:	f000 8175 	beq.w	800dc62 <_nx_ip_thread_entry+0x532>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d051      	beq.n	800da26 <_nx_ip_thread_entry+0x2f6>
            /* Start DAD for the link local address by sending off the first solicitation immediately
               while subsequent solicitations will occur on the next slow event. */
#ifdef FEATURE_NX_IPV6
#ifndef NX_DISABLE_IPV6_DAD

            if (ip_ptr -> nx_ip_icmpv6_packet_process)
 800d982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d984:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d030      	beq.n	800d9ee <_nx_ip_thread_entry+0x2be>
            {

                /* Proceed with DAD check only if ICMPv6 is enabled. */
                for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800d98c:	2300      	movs	r3, #0
 800d98e:	677b      	str	r3, [r7, #116]	; 0x74
 800d990:	e02a      	b.n	800d9e8 <_nx_ip_thread_entry+0x2b8>
 800d992:	bf00      	nop
 800d994:	ff020000 	.word	0xff020000
                {

                    interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 800d998:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d99a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d99c:	214c      	movs	r1, #76	; 0x4c
 800d99e:	fb01 f303 	mul.w	r3, r1, r3
 800d9a2:	4413      	add	r3, r2
 800d9a4:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	66fb      	str	r3, [r7, #108]	; 0x6c

                    if (interface_ipv6_address &&
 800d9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d017      	beq.n	800d9e2 <_nx_ip_thread_entry+0x2b2>
                        interface_ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit == NX_IPV6_DAD_TRANSMITS)
 800d9b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9b4:	7f1b      	ldrb	r3, [r3, #28]
                    if (interface_ipv6_address &&
 800d9b6:	2b03      	cmp	r3, #3
 800d9b8:	d113      	bne.n	800d9e2 <_nx_ip_thread_entry+0x2b2>

                        /* No. This address is still under DAD.  Transmit a NS */
                        /* Note that the 2nd last parameter sendUnicast is set to Zero. In this case
                           the last arg NDCacheEntry is not being used in _nx_icmpv6_send_ns. */
                        _nx_icmpv6_send_ns(ip_ptr,
                                           interface_ipv6_address -> nxd_ipv6_address,
 800d9ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9bc:	f103 0108 	add.w	r1, r3, #8
                        _nx_icmpv6_send_ns(ip_ptr,
 800d9c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9c2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800d9c6:	9301      	str	r3, [sp, #4]
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d9d2:	f7fd ffd9 	bl	800b988 <_nx_icmpv6_send_ns>
                                           0, interface_ipv6_address, 0, &ip_ptr -> nx_ipv6_nd_cache[0]);

                        interface_ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit--;
 800d9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d8:	7f1b      	ldrb	r3, [r3, #28]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9e0:	771a      	strb	r2, [r3, #28]
                for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800d9e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	677b      	str	r3, [r7, #116]	; 0x74
 800d9e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d0d4      	beq.n	800d998 <_nx_ip_thread_entry+0x268>
                    }
                }
            }
#endif

            if (ip_ptr -> nx_nd_cache_fast_periodic_update)
 800d9ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9f0:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d004      	beq.n	800da02 <_nx_ip_thread_entry+0x2d2>
            {
                /* Run the ND Cache update routine.  This is a 100 millisecond timer */
                ip_ptr -> nx_nd_cache_fast_periodic_update(ip_ptr);
 800d9f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9fa:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
 800d9fe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800da00:	4798      	blx	r3
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 800da02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da04:	f8d3 39b0 	ldr.w	r3, [r3, #2480]	; 0x9b0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d004      	beq.n	800da16 <_nx_ip_thread_entry+0x2e6>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800da0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da0e:	f8d3 39b0 	ldr.w	r3, [r3, #2480]	; 0x9b0
 800da12:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800da14:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 800da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da1c:	633b      	str	r3, [r7, #48]	; 0x30
            if (!ip_events)
 800da1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 8120 	beq.w	800dc66 <_nx_ip_thread_entry+0x536>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 800da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d051      	beq.n	800dad4 <_nx_ip_thread_entry+0x3a4>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800da30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da32:	f8d3 3bfc 	ldr.w	r3, [r3, #3068]	; 0xbfc
 800da36:	2b00      	cmp	r3, #0
 800da38:	d004      	beq.n	800da44 <_nx_ip_thread_entry+0x314>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 800da3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da3c:	f8d3 3bfc 	ldr.w	r3, [r3, #3068]	; 0xbfc
 800da40:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800da42:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 800da44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da46:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d004      	beq.n	800da58 <_nx_ip_thread_entry+0x328>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800da4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da50:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 800da54:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800da56:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 800da58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da5a:	f8d3 385c 	ldr.w	r3, [r3, #2140]	; 0x85c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d004      	beq.n	800da6c <_nx_ip_thread_entry+0x33c>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 800da62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da64:	f8d3 385c 	ldr.w	r3, [r3, #2140]	; 0x85c
 800da68:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800da6a:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800da6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da6e:	f8d3 37a4 	ldr.w	r3, [r3, #1956]	; 0x7a4
 800da72:	2b00      	cmp	r3, #0
 800da74:	d004      	beq.n	800da80 <_nx_ip_thread_entry+0x350>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 800da76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da78:	f8d3 37a4 	ldr.w	r3, [r3, #1956]	; 0x7a4
 800da7c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800da7e:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 800da80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da82:	f8d3 39ac 	ldr.w	r3, [r3, #2476]	; 0x9ac
 800da86:	2b00      	cmp	r3, #0
 800da88:	d004      	beq.n	800da94 <_nx_ip_thread_entry+0x364>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 800da8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da8c:	f8d3 39ac 	ldr.w	r3, [r3, #2476]	; 0x9ac
 800da90:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800da92:	4798      	blx	r3
            }
#ifdef FEATURE_NX_IPV6
            /* Process IPv6 events, such as DAD... */
#ifndef NX_DISABLE_IPV6_DAD
            if (ip_ptr -> nx_ip_icmpv6_packet_process)
 800da94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da96:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d002      	beq.n	800daa4 <_nx_ip_thread_entry+0x374>
            {
                _nx_icmpv6_perform_DAD(ip_ptr);
 800da9e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800daa0:	f7fc fc84 	bl	800a3ac <_nx_icmpv6_perform_DAD>
            }
#endif /* NX_DISABLE_IPV6_DAD */
            if (ip_ptr -> nx_nd_cache_slow_periodic_update)
 800daa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daa6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d004      	beq.n	800dab8 <_nx_ip_thread_entry+0x388>
            {
                /* Run the ND Cache update routine.  This is a 1 second timer */
                ip_ptr -> nx_nd_cache_slow_periodic_update(ip_ptr);
 800daae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dab0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 800dab4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dab6:	4798      	blx	r3
            }

            _nxd_ipv6_prefix_router_timer_tick(ip_ptr);
 800dab8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800daba:	f008 fb0c 	bl	80160d6 <_nxd_ipv6_prefix_router_timer_tick>
#ifndef NX_DISABLE_ICMPV6_ROUTER_SOLICITATION
            _nxd_ipv6_router_solicitation_check(ip_ptr);
 800dabe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dac0:	f008 fc39 	bl	8016336 <_nxd_ipv6_router_solicitation_check>
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	f023 0301 	bic.w	r3, r3, #1
 800daca:	633b      	str	r3, [r7, #48]	; 0x30
            if (!ip_events)
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f000 80cb 	beq.w	800dc6a <_nx_ip_thread_entry+0x53a>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	f003 0310 	and.w	r3, r3, #16
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d009      	beq.n	800daf2 <_nx_ip_thread_entry+0x3c2>
 800dade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dae0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d004      	beq.n	800daf2 <_nx_ip_thread_entry+0x3c2>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 800dae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daea:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
 800daee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800daf0:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 800daf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf4:	f003 0320 	and.w	r3, r3, #32
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d009      	beq.n	800db10 <_nx_ip_thread_entry+0x3e0>
 800dafc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dafe:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 800db02:	2b00      	cmp	r3, #0
 800db04:	d004      	beq.n	800db10 <_nx_ip_thread_entry+0x3e0>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 800db06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db08:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 800db0c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800db0e:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 800db10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db16:	2b00      	cmp	r3, #0
 800db18:	d004      	beq.n	800db24 <_nx_ip_thread_entry+0x3f4>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 800db1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db1c:	f8d3 3860 	ldr.w	r3, [r3, #2144]	; 0x860
 800db20:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800db22:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d033      	beq.n	800db96 <_nx_ip_thread_entry+0x466>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800db2e:	2300      	movs	r3, #0
 800db30:	677b      	str	r3, [r7, #116]	; 0x74
 800db32:	e02d      	b.n	800db90 <_nx_ip_thread_entry+0x460>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 800db34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db38:	214c      	movs	r1, #76	; 0x4c
 800db3a:	fb01 f303 	mul.w	r3, r1, r3
 800db3e:	4413      	add	r3, r2
 800db40:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d01f      	beq.n	800db8a <_nx_ip_thread_entry+0x45a>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800db4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db4c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800db4e:	2308      	movs	r3, #8
 800db50:	637b      	str	r3, [r7, #52]	; 0x34
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 800db52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db56:	63fb      	str	r3, [r7, #60]	; 0x3c
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 800db58:	4b45      	ldr	r3, [pc, #276]	; (800dc70 <_nx_ip_thread_entry+0x540>)
 800db5a:	643b      	str	r3, [r7, #64]	; 0x40
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 800db5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db5e:	224c      	movs	r2, #76	; 0x4c
 800db60:	fb02 f303 	mul.w	r3, r2, r3
 800db64:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800db68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db6a:	4413      	add	r3, r2
 800db6c:	3304      	adds	r3, #4
 800db6e:	653b      	str	r3, [r7, #80]	; 0x50

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800db70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db74:	214c      	movs	r1, #76	; 0x4c
 800db76:	fb01 f303 	mul.w	r3, r1, r3
 800db7a:	4413      	add	r3, r2
 800db7c:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800db86:	4610      	mov	r0, r2
 800db88:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800db8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db8c:	3301      	adds	r3, #1
 800db8e:	677b      	str	r3, [r7, #116]	; 0x74
 800db90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0ce      	beq.n	800db34 <_nx_ip_thread_entry+0x404>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	f003 0302 	and.w	r3, r3, #2
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d009      	beq.n	800dbb4 <_nx_ip_thread_entry+0x484>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 800dba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dba2:	f8d3 37a0 	ldr.w	r3, [r3, #1952]	; 0x7a0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d004      	beq.n	800dbb4 <_nx_ip_thread_entry+0x484>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 800dbaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbac:	f8d3 37a0 	ldr.w	r3, [r3, #1952]	; 0x7a0
 800dbb0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dbb2:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb6:	f003 0304 	and.w	r3, r3, #4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d004      	beq.n	800dbc8 <_nx_ip_thread_entry+0x498>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 800dbbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbc0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800dbc4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dbc6:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d031      	beq.n	800dc36 <_nx_ip_thread_entry+0x506>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	673b      	str	r3, [r7, #112]	; 0x70
 800dbd6:	e02b      	b.n	800dc30 <_nx_ip_thread_entry+0x500>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 800dbd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dbda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbdc:	214c      	movs	r1, #76	; 0x4c
 800dbde:	fb01 f303 	mul.w	r3, r1, r3
 800dbe2:	4413      	add	r3, r2
 800dbe4:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d01d      	beq.n	800dc2a <_nx_ip_thread_entry+0x4fa>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 800dbee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbf0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 800dbf2:	2312      	movs	r3, #18
 800dbf4:	637b      	str	r3, [r7, #52]	; 0x34
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800dbf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbf8:	224c      	movs	r2, #76	; 0x4c
 800dbfa:	fb02 f303 	mul.w	r3, r2, r3
 800dbfe:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800dc02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc04:	4413      	add	r3, r2
 800dc06:	3304      	adds	r3, #4
 800dc08:	653b      	str	r3, [r7, #80]	; 0x50
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800dc0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc0e:	64bb      	str	r3, [r7, #72]	; 0x48

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800dc10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc14:	214c      	movs	r1, #76	; 0x4c
 800dc16:	fb01 f303 	mul.w	r3, r1, r3
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800dc26:	4610      	mov	r0, r2
 800dc28:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800dc2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	673b      	str	r3, [r7, #112]	; 0x70
 800dc30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d0d0      	beq.n	800dbd8 <_nx_ip_thread_entry+0x4a8>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 800dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d004      	beq.n	800dc4a <_nx_ip_thread_entry+0x51a>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 800dc40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc42:	f8d3 3c30 	ldr.w	r3, [r3, #3120]	; 0xc30
 800dc46:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dc48:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f43f ae2d 	beq.w	800d8b0 <_nx_ip_thread_entry+0x180>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 800dc56:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dc58:	f7fe fd26 	bl	800c6a8 <_nx_ip_deferred_link_status_process>
 800dc5c:	e628      	b.n	800d8b0 <_nx_ip_thread_entry+0x180>
                continue;
 800dc5e:	bf00      	nop
 800dc60:	e626      	b.n	800d8b0 <_nx_ip_thread_entry+0x180>
                continue;
 800dc62:	bf00      	nop
 800dc64:	e624      	b.n	800d8b0 <_nx_ip_thread_entry+0x180>
                continue;
 800dc66:	bf00      	nop
 800dc68:	e622      	b.n	800d8b0 <_nx_ip_thread_entry+0x180>
                continue;
 800dc6a:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800dc6c:	e620      	b.n	800d8b0 <_nx_ip_thread_entry+0x180>
 800dc6e:	bf00      	nop
 800dc70:	5e000001 	.word	0x5e000001

0800dc74 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b08a      	sub	sp, #40	; 0x28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 800dc7e:	2314      	movs	r3, #20
 800dc80:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	3314      	adds	r3, #20
 800dc96:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	0e1b      	lsrs	r3, r3, #24
 800dc9e:	f003 030f 	and.w	r3, r3, #15
 800dca2:	3b05      	subs	r3, #5
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 800dcaa:	e0a3      	b.n	800ddf4 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
 800dcb4:	2b44      	cmp	r3, #68	; 0x44
 800dcb6:	d010      	beq.n	800dcda <_nx_ipv4_option_process+0x66>
 800dcb8:	2b44      	cmp	r3, #68	; 0x44
 800dcba:	f300 8082 	bgt.w	800ddc2 <_nx_ipv4_option_process+0x14e>
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d002      	beq.n	800dcc8 <_nx_ipv4_option_process+0x54>
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d002      	beq.n	800dccc <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800dcc6:	e07c      	b.n	800ddc2 <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e099      	b.n	800de00 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	3301      	adds	r3, #1
 800dcd0:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 800dcd2:	6a3b      	ldr	r3, [r7, #32]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	623b      	str	r3, [r7, #32]
            continue;
 800dcd8:	e08c      	b.n	800ddf4 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d90b      	bls.n	800dcfe <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800dce6:	69ba      	ldr	r2, [r7, #24]
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	4413      	add	r3, r2
 800dcec:	3302      	adds	r3, #2
 800dcee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7fc f853 	bl	8009da0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e080      	b.n	800de00 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	785b      	ldrb	r3, [r3, #1]
 800dd02:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 800dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd06:	789b      	ldrb	r3, [r3, #2]
 800dd08:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	3303      	adds	r3, #3
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	091b      	lsrs	r3, r3, #4
 800dd12:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 800dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd16:	3303      	adds	r3, #3
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	f003 030f 	and.w	r3, r3, #15
 800dd1e:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	2b07      	cmp	r3, #7
 800dd24:	d908      	bls.n	800dd38 <_nx_ipv4_option_process+0xc4>
 800dd26:	7bbb      	ldrb	r3, [r7, #14]
 800dd28:	2b28      	cmp	r3, #40	; 0x28
 800dd2a:	d805      	bhi.n	800dd38 <_nx_ipv4_option_process+0xc4>
 800dd2c:	7bbb      	ldrb	r3, [r7, #14]
 800dd2e:	f003 0303 	and.w	r3, r3, #3
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00b      	beq.n	800dd50 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800dd38:	69ba      	ldr	r2, [r7, #24]
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	3302      	adds	r3, #2
 800dd40:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800dd44:	6839      	ldr	r1, [r7, #0]
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7fc f82a 	bl	8009da0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e057      	b.n	800de00 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 800dd50:	7b7b      	ldrb	r3, [r7, #13]
 800dd52:	2b04      	cmp	r3, #4
 800dd54:	d905      	bls.n	800dd62 <_nx_ipv4_option_process+0xee>
 800dd56:	7b7b      	ldrb	r3, [r7, #13]
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10b      	bne.n	800dd7a <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 800dd62:	69ba      	ldr	r2, [r7, #24]
 800dd64:	6a3b      	ldr	r3, [r7, #32]
 800dd66:	4413      	add	r3, r2
 800dd68:	3303      	adds	r3, #3
 800dd6a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800dd6e:	6839      	ldr	r1, [r7, #0]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f7fc f815 	bl	8009da0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800dd76:	2300      	movs	r3, #0
 800dd78:	e042      	b.n	800de00 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 800dd7a:	7b3b      	ldrb	r3, [r7, #12]
 800dd7c:	2b0f      	cmp	r3, #15
 800dd7e:	d10b      	bne.n	800dd98 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800dd80:	69ba      	ldr	r2, [r7, #24]
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	4413      	add	r3, r2
 800dd86:	3304      	adds	r3, #4
 800dd88:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800dd8c:	6839      	ldr	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7fc f806 	bl	8009da0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800dd94:	2300      	movs	r3, #0
 800dd96:	e033      	b.n	800de00 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 800dd98:	7afb      	ldrb	r3, [r7, #11]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d013      	beq.n	800ddc6 <_nx_ipv4_option_process+0x152>
 800dd9e:	7afb      	ldrb	r3, [r7, #11]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d010      	beq.n	800ddc6 <_nx_ipv4_option_process+0x152>
 800dda4:	7afb      	ldrb	r3, [r7, #11]
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d00d      	beq.n	800ddc6 <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800ddaa:	69ba      	ldr	r2, [r7, #24]
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	4413      	add	r3, r2
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800ddb6:	6839      	ldr	r1, [r7, #0]
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7fb fff1 	bl	8009da0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e01e      	b.n	800de00 <_nx_ipv4_option_process+0x18c>
            break;
 800ddc2:	bf00      	nop
 800ddc4:	e000      	b.n	800ddc8 <_nx_ipv4_option_process+0x154>
            break;
 800ddc6:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddca:	785b      	ldrb	r3, [r3, #1]
 800ddcc:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 800ddce:	7bbb      	ldrb	r3, [r7, #14]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d905      	bls.n	800dde0 <_nx_ipv4_option_process+0x16c>
 800ddd4:	7bba      	ldrb	r2, [r7, #14]
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	4413      	add	r3, r2
 800ddda:	693a      	ldr	r2, [r7, #16]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d201      	bcs.n	800dde4 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 800dde0:	2300      	movs	r3, #0
 800dde2:	e00d      	b.n	800de00 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
 800dde6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dde8:	4413      	add	r3, r2
 800ddea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	6a3a      	ldr	r2, [r7, #32]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 800ddf4:	6a3a      	ldr	r2, [r7, #32]
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	f4ff af57 	bcc.w	800dcac <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 800ddfe:	2301      	movs	r3, #1
}
 800de00:	4618      	mov	r0, r3
 800de02:	3728      	adds	r7, #40	; 0x28
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b096      	sub	sp, #88	; 0x58
 800de0c:	af02      	add	r7, sp, #8
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	64bb      	str	r3, [r7, #72]	; 0x48
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 800de18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 800de1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de20:	ba1b      	rev	r3, r3
 800de22:	643b      	str	r3, [r7, #64]	; 0x40

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800de24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de26:	b29b      	uxth	r3, r3
 800de28:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de30:	429a      	cmp	r2, r3
 800de32:	d06a      	beq.n	800df0a <_nx_ipv4_packet_receive+0x102>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d911      	bls.n	800de62 <_nx_ipv4_packet_receive+0x5a>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 3538 	ldr.w	r3, [r3, #1336]	; 0x538
 800de44:	1c5a      	adds	r2, r3, #1
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 800de5a:	6838      	ldr	r0, [r7, #0]
 800de5c:	f002 fdec 	bl	8010a38 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800de60:	e24e      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	647b      	str	r3, [r7, #68]	; 0x44

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de72:	1ad2      	subs	r2, r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 800de78:	e044      	b.n	800df04 <_nx_ipv4_packet_receive+0xfc>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	699b      	ldr	r3, [r3, #24]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d107      	bne.n	800de92 <_nx_ipv4_packet_receive+0x8a>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	68da      	ldr	r2, [r3, #12]
 800de86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de88:	425b      	negs	r3, r3
 800de8a:	441a      	add	r2, r3
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 800de90:	e03b      	b.n	800df0a <_nx_ipv4_packet_receive+0x102>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 800de98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9a:	68da      	ldr	r2, [r3, #12]
 800de9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	461a      	mov	r2, r3
 800dea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d207      	bcs.n	800deba <_nx_ipv4_packet_receive+0xb2>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 800deaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deac:	68da      	ldr	r2, [r3, #12]
 800deae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deb0:	425b      	negs	r3, r3
 800deb2:	441a      	add	r2, r3
 800deb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb6:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 800deb8:	e027      	b.n	800df0a <_nx_ipv4_packet_receive+0x102>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800deba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debc:	68da      	ldr	r2, [r3, #12]
 800debe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	461a      	mov	r2, r3
 800dec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dec8:	1a9b      	subs	r3, r3, r2
 800deca:	647b      	str	r3, [r7, #68]	; 0x44

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	64fb      	str	r3, [r7, #76]	; 0x4c
                while (before_last_packet -> nx_packet_next != last_packet)
 800ded0:	e002      	b.n	800ded8 <_nx_ipv4_packet_receive+0xd0>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 800ded2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	64fb      	str	r3, [r7, #76]	; 0x4c
                while (before_last_packet -> nx_packet_next != last_packet)
 800ded8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dede:	429a      	cmp	r2, r3
 800dee0:	d1f7      	bne.n	800ded2 <_nx_ipv4_packet_receive+0xca>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 800dee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee4:	2200      	movs	r2, #0
 800dee6:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 800dee8:	683a      	ldr	r2, [r7, #0]
 800deea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deec:	429a      	cmp	r2, r3
 800deee:	d003      	beq.n	800def8 <_nx_ipv4_packet_receive+0xf0>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800def4:	619a      	str	r2, [r3, #24]
 800def6:	e002      	b.n	800defe <_nx_ipv4_packet_receive+0xf6>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2200      	movs	r2, #0
 800defc:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800defe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df00:	f002 fd9a 	bl	8010a38 <_nx_packet_release>
        while (delta)
 800df04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df06:	2b00      	cmp	r3, #0
 800df08:	d1b7      	bne.n	800de7a <_nx_ipv4_packet_receive+0x72>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800df10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df12:	0e1b      	lsrs	r3, r3, #24
 800df14:	f003 030f 	and.w	r3, r3, #15
 800df18:	633b      	str	r3, [r7, #48]	; 0x30
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	429a      	cmp	r2, r3
 800df24:	d902      	bls.n	800df2c <_nx_ipv4_packet_receive+0x124>
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	2b04      	cmp	r3, #4
 800df2a:	d811      	bhi.n	800df50 <_nx_ipv4_packet_receive+0x148>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 3538 	ldr.w	r3, [r3, #1336]	; 0x538
 800df32:	1c5a      	adds	r2, r3, #1
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800df40:	1c5a      	adds	r2, r3, #1
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800df48:	6838      	ldr	r0, [r7, #0]
 800df4a:	f002 fd75 	bl	8010a38 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800df4e:	e1d7      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800df54:	2300      	movs	r3, #0
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	2300      	movs	r3, #0
 800df5a:	2104      	movs	r1, #4
 800df5c:	6838      	ldr	r0, [r7, #0]
 800df5e:	f7fe f95e 	bl	800c21e <_nx_ip_checksum_compute>
 800df62:	4603      	mov	r3, r0
 800df64:	62fb      	str	r3, [r7, #44]	; 0x2c
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 800df66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df68:	43db      	mvns	r3, r3
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the checksum again.  */
        if (checksum)
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	2b00      	cmp	r3, #0
 800df72:	d018      	beq.n	800dfa6 <_nx_ipv4_packet_receive+0x19e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 3538 	ldr.w	r3, [r3, #1336]	; 0x538
 800df7a:	1c5a      	adds	r2, r3, #1
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 800df9e:	6838      	ldr	r0, [r7, #0]
 800dfa0:	f002 fd4a 	bl	8010a38 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800dfa4:	e1ac      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800dfa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	ba1a      	rev	r2, r3
 800dfac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfae:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800dfb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	ba1a      	rev	r2, r3
 800dfb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfb8:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800dfba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	ba1a      	rev	r2, r3
 800dfc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfc2:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800dfc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	ba1a      	rev	r2, r3
 800dfca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfcc:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800dfce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfd0:	691b      	ldr	r3, [r3, #16]
 800dfd2:	ba1a      	rev	r2, r3
 800dfd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfd6:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	2b05      	cmp	r3, #5
 800dfdc:	d94b      	bls.n	800e076 <_nx_ipv4_packet_receive+0x26e>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 800dfde:	6839      	ldr	r1, [r7, #0]
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff fe47 	bl	800dc74 <_nx_ipv4_option_process>
 800dfe6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <_nx_ipv4_packet_receive+0x1fc>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800dff4:	1c5a      	adds	r2, r3, #1
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 800dffc:	6838      	ldr	r0, [r7, #0]
 800dffe:	f002 fd1b 	bl	8010a38 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800e002:	e17d      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 800e004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e006:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e010:	4413      	add	r3, r2
 800e012:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	1f1a      	subs	r2, r3, #4
 800e018:	627a      	str	r2, [r7, #36]	; 0x24
 800e01a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e01c:	6912      	ldr	r2, [r2, #16]
 800e01e:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	1f1a      	subs	r2, r3, #4
 800e024:	627a      	str	r2, [r7, #36]	; 0x24
 800e026:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e028:	68d2      	ldr	r2, [r2, #12]
 800e02a:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	1f1a      	subs	r2, r3, #4
 800e030:	627a      	str	r2, [r7, #36]	; 0x24
 800e032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e034:	6892      	ldr	r2, [r2, #8]
 800e036:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	1f1a      	subs	r2, r3, #4
 800e03c:	627a      	str	r2, [r7, #36]	; 0x24
 800e03e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e040:	6852      	ldr	r2, [r2, #4]
 800e042:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 800e044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 800e04c:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	64bb      	str	r3, [r7, #72]	; 0x48

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e05c:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	689a      	ldr	r2, [r3, #8]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	639a      	str	r2, [r3, #56]	; 0x38
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06c:	3b05      	subs	r3, #5
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	1ad2      	subs	r2, r2, r3
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800e076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e078:	691a      	ldr	r2, [r3, #16]
 800e07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e07c:	695b      	ldr	r3, [r3, #20]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d02f      	beq.n	800e0e2 <_nx_ipv4_packet_receive+0x2da>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800e082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e084:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800e086:	2b00      	cmp	r3, #0
 800e088:	d02b      	beq.n	800e0e2 <_nx_ipv4_packet_receive+0x2da>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800e08a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e08c:	691a      	ldr	r2, [r3, #16]
 800e08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e090:	699b      	ldr	r3, [r3, #24]
 800e092:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 800e094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e096:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800e098:	429a      	cmp	r2, r3
 800e09a:	d10a      	bne.n	800e0b2 <_nx_ipv4_packet_receive+0x2aa>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800e09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e09e:	691a      	ldr	r2, [r3, #16]
 800e0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a2:	699b      	ldr	r3, [r3, #24]
 800e0a4:	43db      	mvns	r3, r3
 800e0a6:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800e0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d017      	beq.n	800e0e2 <_nx_ipv4_packet_receive+0x2da>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800e0b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0b4:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800e0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ba:	d012      	beq.n	800e0e2 <_nx_ipv4_packet_receive+0x2da>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800e0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0be:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800e0c0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e0c4:	d303      	bcc.n	800e0ce <_nx_ipv4_packet_receive+0x2c6>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800e0c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0c8:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	da09      	bge.n	800e0e2 <_nx_ipv4_packet_receive+0x2da>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800e0ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7fd ffe6 	bl	800c0a8 <_nx_igmp_multicast_check>
 800e0dc:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d07e      	beq.n	800e1e0 <_nx_ipv4_packet_receive+0x3d8>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 800e0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d04a      	beq.n	800e184 <_nx_ipv4_packet_receive+0x37c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 800e0f4:	1c5a      	adds	r2, r3, #1
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 37a0 	ldr.w	r3, [r3, #1952]	; 0x7a0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d033      	beq.n	800e16e <_nx_ipv4_packet_receive+0x366>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e106:	f3ef 8310 	mrs	r3, PRIMASK
 800e10a:	613b      	str	r3, [r7, #16]
    return(posture);
 800e10c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e10e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e110:	b672      	cpsid	i
    return(int_posture);
 800e112:	68fb      	ldr	r3, [r7, #12]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 800e114:	617b      	str	r3, [r7, #20]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 37ac 	ldr.w	r3, [r3, #1964]	; 0x7ac
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00c      	beq.n	800e13a <_nx_ipv4_packet_receive+0x332>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 37b0 	ldr.w	r3, [r3, #1968]	; 0x7b0
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	2200      	movs	r2, #0
 800e12e:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
 800e138:	e00a      	b.n	800e150 <_nx_ipv4_packet_receive+0x348>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	683a      	ldr	r2, [r7, #0]
 800e13e:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	2200      	movs	r2, #0
 800e14e:	61da      	str	r2, [r3, #28]
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	f383 8810 	msr	PRIMASK, r3
}
 800e15a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 800e162:	2200      	movs	r2, #0
 800e164:	2102      	movs	r1, #2
 800e166:	4618      	mov	r0, r3
 800e168:	f009 fc68 	bl	8017a3c <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800e16c:	e0c8      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
                _nx_packet_release(packet_ptr);
 800e17c:	6838      	ldr	r0, [r7, #0]
 800e17e:	f002 fc5b 	bl	8010a38 <_nx_packet_release>
            return;
 800e182:	e0bd      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 800e184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	0c1b      	lsrs	r3, r3, #16
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	623b      	str	r3, [r7, #32]

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	f103 0214 	add.w	r2, r3, #20
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19e:	f1a3 0214 	sub.w	r2, r3, #20
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800e1ac:	1c5a      	adds	r2, r3, #1
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 2528 	ldr.w	r2, [r3, #1320]	; 0x528
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1be:	441a      	add	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800e1c6:	6a3a      	ldr	r2, [r7, #32]
 800e1c8:	6839      	ldr	r1, [r7, #0]
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7fe fac8 	bl	800c760 <_nx_ip_dispatch_process>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f000 8094 	beq.w	800e300 <_nx_ipv4_packet_receive+0x4f8>
        {
            _nx_packet_release(packet_ptr);
 800e1d8:	6838      	ldr	r0, [r7, #0]
 800e1da:	f002 fc2d 	bl	8010a38 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800e1de:	e08f      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 800e1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d166      	bne.n	800e2b6 <_nx_ipv4_packet_receive+0x4ae>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 800e1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1f0:	623b      	str	r3, [r7, #32]

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800e1f8:	d13b      	bne.n	800e272 <_nx_ipv4_packet_receive+0x46a>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	f103 0214 	add.w	r2, r3, #20
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20a:	f1a3 0214 	sub.w	r2, r3, #20
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800e218:	1c5a      	adds	r2, r3, #1
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 2528 	ldr.w	r2, [r3, #1320]	; 0x528
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22a:	441a      	add	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	ba1a      	rev	r2, r3
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	b29b      	uxth	r3, r3
 800e248:	61bb      	str	r3, [r7, #24]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	ba1a      	rev	r2, r3
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	2b44      	cmp	r3, #68	; 0x44
 800e258:	d10b      	bne.n	800e272 <_nx_ipv4_packet_receive+0x46a>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
 800e260:	2b00      	cmp	r3, #0
 800e262:	d006      	beq.n	800e272 <_nx_ipv4_packet_receive+0x46a>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
 800e26a:	6839      	ldr	r1, [r7, #0]
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	4798      	blx	r3

                    return;
 800e270:	e046      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800e278:	1e5a      	subs	r2, r3, #1
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 2528 	ldr.w	r2, [r3, #1320]	; 0x528
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28a:	1ad2      	subs	r2, r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
 800e298:	1c5a      	adds	r2, r3, #1
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800e2a6:	1c5a      	adds	r2, r3, #1
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800e2ae:	6838      	ldr	r0, [r7, #0]
 800e2b0:	f002 fbc2 	bl	8010a38 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800e2b4:	e024      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00d      	beq.n	800e2dc <_nx_ipv4_packet_receive+0x4d4>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 800e2c6:	1c5a      	adds	r2, r3, #1
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	4798      	blx	r3
 800e2da:	e011      	b.n	800e300 <_nx_ipv4_packet_receive+0x4f8>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
 800e2e2:	1c5a      	adds	r2, r3, #1
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800e2f0:	1c5a      	adds	r2, r3, #1
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800e2f8:	6838      	ldr	r0, [r7, #0]
 800e2fa:	f002 fb9d 	bl	8010a38 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800e2fe:	bf00      	nop
    }
}
 800e300:	3750      	adds	r7, #80	; 0x50
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <_nx_ipv6_fragment_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_fragment_process(struct NX_IP_DRIVER_STRUCT *driver_req_ptr, UINT mtu)
{
 800e306:	b5b0      	push	{r4, r5, r7, lr}
 800e308:	b0a2      	sub	sp, #136	; 0x88
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	6039      	str	r1, [r7, #0]
ULONG                           packet_id;
NX_IP_DRIVER                    driver_request;
NX_IP                          *ip_ptr;
UCHAR                           next_header;
UCHAR                           hdr_ext_len;
UINT                            fragment_offset = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	673b      	str	r3, [r7, #112]	; 0x70
INT                             error = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	66fb      	str	r3, [r7, #108]	; 0x6c
NX_IPV6_HEADER_FRAGMENT_OPTION *fragment_option;
INT                             last_fragment = 0;
 800e318:	2300      	movs	r3, #0
 800e31a:	66bb      	str	r3, [r7, #104]	; 0x68
ULONG                           word_1;
ULONG                           val;
NX_PACKET_POOL                 *pool_ptr;


    first_fragment = NX_NULL;
 800e31c:	2300      	movs	r3, #0
 800e31e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Setup the local driver request packet that will be used for each
       fragment.  There will be a unique packet pointer for each request, but
       otherwise all the other fields will remain constant.  */
    driver_request = *driver_req_ptr;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f107 0410 	add.w	r4, r7, #16
 800e328:	461d      	mov	r5, r3
 800e32a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e32c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e32e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e332:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    /* Setup the IP pointer. */
    ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	65bb      	str	r3, [r7, #88]	; 0x58

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total number of fragment requests.  */
    ip_ptr -> nx_ip_total_fragment_requests++;
 800e33c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e33e:	f8d3 355c 	ldr.w	r3, [r3, #1372]	; 0x55c
 800e342:	1c5a      	adds	r2, r3, #1
 800e344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e346:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
#endif

    /* Source_packet points a packet (or a chain of packets) that already has IP header
       constructed.  The prepend pointer should point to the IPv6 header. */
    packet_id = ip_ptr -> nx_ip_packet_id++;
 800e34a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e34c:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 800e350:	1c59      	adds	r1, r3, #1
 800e352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e354:	f8c2 1638 	str.w	r1, [r2, #1592]	; 0x638
 800e358:	657b      	str	r3, [r7, #84]	; 0x54

    /* Byte swap packet_id */
    NX_CHANGE_ULONG_ENDIAN(packet_id);
 800e35a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e35c:	ba1b      	rev	r3, r3
 800e35e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the source packet pointer.  */
    source_packet = driver_req_ptr -> nx_ip_driver_packet;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	691b      	ldr	r3, [r3, #16]
 800e364:	653b      	str	r3, [r7, #80]	; 0x50
    source_packet -> nx_packet_last = source_packet;
 800e366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e36a:	619a      	str	r2, [r3, #24]
    source_packet -> nx_packet_ip_header = source_packet -> nx_packet_prepend_ptr;
 800e36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e36e:	689a      	ldr	r2, [r3, #8]
 800e370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e372:	639a      	str	r2, [r3, #56]	; 0x38
    pool_ptr = source_packet -> nx_packet_pool_owner;
 800e374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	64fb      	str	r3, [r7, #76]	; 0x4c
        _nx_ip_packet_checksum_compute(source_packet);
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Find out the unfragmentable part. */
    fragmentable_ptr = source_packet -> nx_packet_prepend_ptr + sizeof(NX_IPV6_HEADER);
 800e37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	3328      	adds	r3, #40	; 0x28
 800e380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    last_header_location  = (source_packet -> nx_packet_prepend_ptr + 6);
 800e384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	3306      	adds	r3, #6
 800e38a:	67fb      	str	r3, [r7, #124]	; 0x7c
    next_header = *last_header_location;
 800e38c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

#endif

    /* Fragment Option header appears after Hop-by-hop and routing headers.  So we need
       to skip these headers if they are present. */
    while ((next_header == NX_PROTOCOL_NEXT_HEADER_HOP_BY_HOP) ||
 800e394:	e016      	b.n	800e3c4 <_nx_ipv6_fragment_process+0xbe>
           (next_header == NX_PROTOCOL_NEXT_HEADER_ROUTING))
    {

        /* Move to the next header */
        hdr_ext_len = *(fragmentable_ptr + 1);
 800e396:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e39a:	785b      	ldrb	r3, [r3, #1]
 800e39c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        last_header_location = fragmentable_ptr;
 800e3a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3a4:	67fb      	str	r3, [r7, #124]	; 0x7c

        next_header = *fragmentable_ptr;
 800e3a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        /*lint -e{923} suppress cast between pointer and UINT.  */
        fragmentable_ptr = NX_UCHAR_POINTER_ADD(fragmentable_ptr, ((hdr_ext_len + 1) << 3));
 800e3b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3be:	4413      	add	r3, r2
 800e3c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    while ((next_header == NX_PROTOCOL_NEXT_HEADER_HOP_BY_HOP) ||
 800e3c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d0e4      	beq.n	800e396 <_nx_ipv6_fragment_process+0x90>
 800e3cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e3d0:	2b2b      	cmp	r3, #43	; 0x2b
 800e3d2:	d0e0      	beq.n	800e396 <_nx_ipv6_fragment_process+0x90>
    }

    /* If hdr_ext_len == 0, there are no optional headers in the unfragmentable region. */
    *last_header_location = NX_PROTOCOL_NEXT_HEADER_FRAGMENT;
 800e3d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e3d6:	222c      	movs	r2, #44	; 0x2c
 800e3d8:	701a      	strb	r2, [r3, #0]

    /* Change the very last "next_header" to
       compute the unfragmentable size which includes MAC header, IPv6 header,
       and any unfragmentable header, but not the fragment header option. */
    /*lint -e{923} suppress cast between pointer and UINT.  */
    unfragmentable_size = (UINT)((ALIGN_TYPE)fragmentable_ptr - (ALIGN_TYPE)source_packet -> nx_packet_prepend_ptr);
 800e3da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3e0:	6892      	ldr	r2, [r2, #8]
 800e3e2:	1a9b      	subs	r3, r3, r2
 800e3e4:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Compute the fragmentable size. */
    packet_length = (UINT)(source_packet -> nx_packet_length - unfragmentable_size);
 800e3e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3ec:	1ad3      	subs	r3, r2, r3
 800e3ee:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Now fragmentable_ptr points to the begining of fragmentable part of 'remaining_pkt' */
    /* Also packet_prepend_ptr points to the data (fragmentable) area.  */

    /* The fragmentable pointer starts from the first packet.*/
    while (packet_length)
 800e3f0:	e12f      	b.n	800e652 <_nx_ipv6_fragment_process+0x34c>
        /*
           Determine the fragment size. Take the MTU size, minus the unfragmentable
           portion, and round down to multiple of 8-bytes, then add the unfragmentable
           portion back.   This is the size of each fragment, excluding the last fragment.
         */
        fragment_size = (mtu - unfragmentable_size) & 0xFFF8;
 800e3f2:	683a      	ldr	r2, [r7, #0]
 800e3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3f6:	1ad2      	subs	r2, r2, r3
 800e3f8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	667b      	str	r3, [r7, #100]	; 0x64
        fragment_size -= (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800e400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e402:	3b08      	subs	r3, #8
 800e404:	667b      	str	r3, [r7, #100]	; 0x64

        if (fragment_size >= packet_length)
 800e406:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d303      	bcc.n	800e416 <_nx_ipv6_fragment_process+0x110>
        {
            fragment_size = packet_length;
 800e40e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e410:	667b      	str	r3, [r7, #100]	; 0x64
            last_fragment = 1;
 800e412:	2301      	movs	r3, #1
 800e414:	66bb      	str	r3, [r7, #104]	; 0x68
        }

        /* Compute the remaining packet length */
        packet_length -= fragment_size;
 800e416:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Figure out the number of bytes (fragmentable part + unfragmentable part)
           of this frame. */
        remaining_bytes = fragment_size + unfragmentable_size + (UINT)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION) + NX_PHYSICAL_HEADER;
 800e41e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e422:	4413      	add	r3, r2
 800e424:	3318      	adds	r3, #24
 800e426:	663b      	str	r3, [r7, #96]	; 0x60

        /* find the size of each nx packet. */
        nx_packet_size = (UINT)((pool_ptr -> nx_packet_pool_payload_size) & 0xFFFC);
 800e428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e42a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e42c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800e430:	4013      	ands	r3, r2
 800e432:	65fb      	str	r3, [r7, #92]	; 0x5c

        if (nx_packet_size > (mtu + NX_PHYSICAL_HEADER))
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	3310      	adds	r3, #16
 800e438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d902      	bls.n	800e444 <_nx_ipv6_fragment_process+0x13e>
        {
            nx_packet_size = (mtu + NX_PHYSICAL_HEADER);
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	3310      	adds	r3, #16
 800e442:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* Make sure we have enough packets for this fragment. */
        do
        {

            /* Allocate a packet from the default packet pool.  */
            if (_nx_packet_allocate(pool_ptr, &new_packet,
 800e444:	f107 010c 	add.w	r1, r7, #12
 800e448:	2300      	movs	r3, #0
 800e44a:	2200      	movs	r2, #0
 800e44c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e44e:	f001 ff53 	bl	80102f8 <_nx_packet_allocate>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <_nx_ipv6_fragment_process+0x158>
                                    0, TX_NO_WAIT))
            {
                error = 1;
 800e458:	2301      	movs	r3, #1
 800e45a:	66fb      	str	r3, [r7, #108]	; 0x6c
                break;
 800e45c:	e02c      	b.n	800e4b8 <_nx_ipv6_fragment_process+0x1b2>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, new_packet);

            /*lint -e{644} suppress variable might not be initialized, since "new_packet" was initialized in _nx_packet_allocate. */
            new_packet -> nx_packet_ip_version = NX_IP_VERSION_V6;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2206      	movs	r2, #6
 800e462:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

            if (first_fragment == NX_NULL)
 800e466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d107      	bne.n	800e47e <_nx_ipv6_fragment_process+0x178>
            {
                first_fragment = new_packet;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                first_fragment -> nx_packet_last = new_packet;
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e47a:	619a      	str	r2, [r3, #24]
 800e47c:	e008      	b.n	800e490 <_nx_ipv6_fragment_process+0x18a>
                /* first_fragment -> nx_packet_length = fragment_size + unfragmentable_size. */
                /* May need to configure additional header information. */
            }
            else
            {
                first_fragment -> nx_packet_last -> nx_packet_next = new_packet;
 800e47e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	605a      	str	r2, [r3, #4]
                first_fragment -> nx_packet_last = new_packet;
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e48e:	619a      	str	r2, [r3, #24]
            /* Establish the "usable" size of the packet.
               The actual copy routine uses this information to figure out how many
               bytes to transer to the fragmented packets.*/

            /* The true packet size is set in the first packet. */
            if (nx_packet_size > remaining_bytes)
 800e490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e494:	429a      	cmp	r2, r3
 800e496:	d905      	bls.n	800e4a4 <_nx_ipv6_fragment_process+0x19e>
            {
                /* This is going to be the last packet we need. */
                new_packet -> nx_packet_length = remaining_bytes;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e49c:	625a      	str	r2, [r3, #36]	; 0x24
                remaining_bytes = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	663b      	str	r3, [r7, #96]	; 0x60
 800e4a2:	e006      	b.n	800e4b2 <_nx_ipv6_fragment_process+0x1ac>
            }
            else
            {
                new_packet -> nx_packet_length = nx_packet_size;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4a8:	625a      	str	r2, [r3, #36]	; 0x24
                remaining_bytes -= nx_packet_size;
 800e4aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	663b      	str	r3, [r7, #96]	; 0x60
            }
        } while (remaining_bytes);
 800e4b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d1c5      	bne.n	800e444 <_nx_ipv6_fragment_process+0x13e>

        if (error)
 800e4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f040 80ce 	bne.w	800e65c <_nx_ipv6_fragment_process+0x356>

        /* We have all the packets ready.  Need to copy data. */

        /* First step:  copy the unfragmentable part. */
        /* Save the state from last iteration. */
        previous_packet = source_packet -> nx_packet_last;
 800e4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	647b      	str	r3, [r7, #68]	; 0x44

        source_packet -> nx_packet_last = source_packet;
 800e4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4ca:	619a      	str	r2, [r3, #24]
        source_packet -> nx_packet_prepend_ptr = source_packet -> nx_packet_ip_header;
 800e4cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d2:	609a      	str	r2, [r3, #8]

        first_fragment -> nx_packet_last = first_fragment;
 800e4d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e4dc:	619a      	str	r2, [r3, #24]

        first_fragment -> nx_packet_prepend_ptr += NX_PHYSICAL_HEADER;
 800e4de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	f103 0210 	add.w	r2, r3, #16
 800e4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4ec:	609a      	str	r2, [r3, #8]
        first_fragment -> nx_packet_append_ptr += NX_PHYSICAL_HEADER;
 800e4ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	f103 0210 	add.w	r2, r3, #16
 800e4f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4fc:	60da      	str	r2, [r3, #12]

        /* For the first packet, the prepend pointer is already at the begining of the IP header. */
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, unfragmentable_size))
 800e4fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e500:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e504:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e506:	f000 f9e1 	bl	800e8cc <_nx_ipv6_packet_copy>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f040 80a7 	bne.w	800e660 <_nx_ipv6_fragment_process+0x35a>
        }

        /* Fill in the fragment header area.  Be careful here: we assume the unfragmentable part does not
           span over multiple packets. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)first_fragment -> nx_packet_last -> nx_packet_append_ptr;
 800e512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	643b      	str	r3, [r7, #64]	; 0x40
        first_fragment -> nx_packet_append_ptr += sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800e51c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	f103 0208 	add.w	r2, r3, #8
 800e526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e52a:	60da      	str	r2, [r3, #12]
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800e52c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e532:	f103 0208 	add.w	r2, r3, #8
 800e536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e53a:	625a      	str	r2, [r3, #36]	; 0x24

        fragment_option -> nx_ipv6_header_fragment_option_reserved = 0;
 800e53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53e:	2200      	movs	r2, #0
 800e540:	705a      	strb	r2, [r3, #1]
        fragment_option -> nx_ipv6_header_fragment_option_next_header = next_header;
 800e542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e544:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800e548:	701a      	strb	r2, [r3, #0]

        if (!last_fragment)
 800e54a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d106      	bne.n	800e55e <_nx_ipv6_fragment_process+0x258>
        {
            fragment_option -> nx_ipv6_header_fragment_option_offset_flag = (USHORT)(fragment_offset + 1);
 800e550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e552:	b29b      	uxth	r3, r3
 800e554:	3301      	adds	r3, #1
 800e556:	b29a      	uxth	r2, r3
 800e558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e55a:	805a      	strh	r2, [r3, #2]
 800e55c:	e003      	b.n	800e566 <_nx_ipv6_fragment_process+0x260>
        }
        else
        {
            fragment_option -> nx_ipv6_header_fragment_option_offset_flag = (USHORT)fragment_offset;
 800e55e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e560:	b29a      	uxth	r2, r3
 800e562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e564:	805a      	strh	r2, [r3, #2]
        }

        /* Convert to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 800e566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e568:	885b      	ldrh	r3, [r3, #2]
 800e56a:	ba5b      	rev16	r3, r3
 800e56c:	b29a      	uxth	r2, r3
 800e56e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e570:	805a      	strh	r2, [r3, #2]

        fragment_option -> nx_ipv6_header_fragment_option_packet_id = packet_id;
 800e572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e576:	605a      	str	r2, [r3, #4]

        /* Restore the nx_packet_last and the prepend pointer within the last packet. */
        source_packet -> nx_packet_last = previous_packet;
 800e578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e57a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e57c:	619a      	str	r2, [r3, #24]
        source_packet -> nx_packet_last -> nx_packet_prepend_ptr = fragmentable_ptr;
 800e57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e586:	609a      	str	r2, [r3, #8]

        /* Copy the rest of the frame. */
        if (_nx_ipv6_packet_copy(source_packet, first_fragment, fragment_size))
 800e588:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e58a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e58e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e590:	f000 f99c 	bl	800e8cc <_nx_ipv6_packet_copy>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d164      	bne.n	800e664 <_nx_ipv6_fragment_process+0x35e>
        /*
           Set up the IP frame length.  first_fragment -> nx_packet_prepend_ptr points to the
           beginning of the IPv6 header.
         */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header = (NX_IPV6_HEADER *)first_fragment -> nx_packet_prepend_ptr;
 800e59a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Pick up the 2nd word in the IP header. */
        val = ipv6_header -> nx_ip_header_word_1;
 800e5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Convert to host byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5aa:	ba1b      	rev	r3, r3
 800e5ac:	63bb      	str	r3, [r7, #56]	; 0x38

        val = val & 0x0000FFFF;
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	63bb      	str	r3, [r7, #56]	; 0x38

        word_1 = (ULONG)(((fragment_size + unfragmentable_size - sizeof(NX_IPV6_HEADER)) + sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION)) << 16);
 800e5b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e5b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5b8:	4413      	add	r3, r2
 800e5ba:	3b20      	subs	r3, #32
 800e5bc:	041b      	lsls	r3, r3, #16
 800e5be:	637b      	str	r3, [r7, #52]	; 0x34
        word_1 = val | word_1;
 800e5c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(word_1);
 800e5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ca:	ba1b      	rev	r3, r3
 800e5cc:	637b      	str	r3, [r7, #52]	; 0x34

        ipv6_header -> nx_ip_header_word_1 = word_1;
 800e5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5d2:	605a      	str	r2, [r3, #4]

        fragmentable_ptr = source_packet -> nx_packet_last -> nx_packet_prepend_ptr;
 800e5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5d6:	699b      	ldr	r3, [r3, #24]
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        fragment_offset += fragment_size;
 800e5de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5e2:	4413      	add	r3, r2
 800e5e4:	673b      	str	r3, [r7, #112]	; 0x70

        /* This fragment is ready to be transmitted. */
        /* Send the packet to the associated driver for output.  */
        first_fragment -> nx_packet_length = unfragmentable_size + fragment_size;
 800e5e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5ea:	441a      	add	r2, r3
 800e5ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5f0:	625a      	str	r2, [r3, #36]	; 0x24
        first_fragment -> nx_packet_length += (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800e5f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f8:	f103 0208 	add.w	r2, r3, #8
 800e5fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e600:	625a      	str	r2, [r3, #36]	; 0x24
        driver_request.nx_ip_driver_packet =   first_fragment;
 800e602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e606:	623b      	str	r3, [r7, #32]

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP fragments sent count.  */
        ip_ptr -> nx_ip_total_fragments_sent++;
 800e608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e60a:	f8d3 3568 	ldr.w	r3, [r3, #1384]	; 0x568
 800e60e:	1c5a      	adds	r2, r3, #1
 800e610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e612:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 800e616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e618:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e620:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent += first_fragment -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION);
 800e624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e626:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 800e62a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e630:	4413      	add	r3, r2
 800e632:	f1a3 0208 	sub.w	r2, r3, #8
 800e636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e638:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
#endif /* !NX_DISABLE_IP_INFO */

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, source_packet);

        (source_packet -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached -> nx_interface_link_driver_entry)(&driver_request);
 800e63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e644:	f107 0210 	add.w	r2, r7, #16
 800e648:	4610      	mov	r0, r2
 800e64a:	4798      	blx	r3

        first_fragment = NX_NULL;
 800e64c:	2300      	movs	r3, #0
 800e64e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (packet_length)
 800e652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e654:	2b00      	cmp	r3, #0
 800e656:	f47f aecc 	bne.w	800e3f2 <_nx_ipv6_fragment_process+0xec>
 800e65a:	e004      	b.n	800e666 <_nx_ipv6_fragment_process+0x360>
            break;
 800e65c:	bf00      	nop
 800e65e:	e002      	b.n	800e666 <_nx_ipv6_fragment_process+0x360>
            break;
 800e660:	bf00      	nop
 800e662:	e000      	b.n	800e666 <_nx_ipv6_fragment_process+0x360>
            break;
 800e664:	bf00      	nop
    }

    /* Release the original packet. */
    _nx_packet_transmit_release(source_packet);
 800e666:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e668:	f002 faa0 	bl	8010bac <_nx_packet_transmit_release>

    /* In case the fragmentation process fails above, frist_fragment
       still contains partial data. Free these fragments before
       exiting this function. */
    if (first_fragment)
 800e66c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e670:	2b00      	cmp	r3, #0
 800e672:	d004      	beq.n	800e67e <_nx_ipv6_fragment_process+0x378>
    {
        _nx_packet_release(first_fragment);
 800e674:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800e678:	f002 f9de 	bl	8010a38 <_nx_packet_release>
    }

    return;
 800e67c:	bf00      	nop
 800e67e:	bf00      	nop
}
 800e680:	3788      	adds	r7, #136	; 0x88
 800e682:	46bd      	mov	sp, r7
 800e684:	bdb0      	pop	{r4, r5, r7, pc}

0800e686 <_nx_ipv6_header_add>:
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_header_add(NX_IP *ip_ptr, NX_PACKET **packet_pptr,
                         ULONG protocol, ULONG payload_size, ULONG hop_limit,
                         ULONG *src_address, ULONG *dest_address, ULONG *fragment)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b088      	sub	sp, #32
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	60f8      	str	r0, [r7, #12]
 800e68e:	60b9      	str	r1, [r7, #8]
 800e690:	607a      	str	r2, [r7, #4]
 800e692:	603b      	str	r3, [r7, #0]

NX_IPV6_HEADER            *ip_header_ptr;
NX_PACKET                 *packet_ptr = *packet_pptr;
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	61fb      	str	r3, [r7, #28]
#endif

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    if (fragment)
 800e69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <_nx_ipv6_header_add+0x20>
    {
#ifndef NX_DISABLE_FRAGMENTATION
        /* By default, it is fragmentable. */
        *fragment = NX_TRUE;
 800e6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	601a      	str	r2, [r3, #0]
    }

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
 800e6ac:	1c5a      	adds	r2, r3, #1
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#endif

    /* Initialize the IP header incase this function returns fail. */
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	689a      	ldr	r2, [r3, #8]
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    if (!is_hw_processed)
    {
#endif /* NX_IPSEC_ENABLE  */
        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV6_HEADER);
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	689b      	ldr	r3, [r3, #8]
 800e6c0:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV6_HEADER);
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6cc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increase header length. */
        packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e6da:	3328      	adds	r3, #40	; 0x28
 800e6dc:	b2da      	uxtb	r2, r3
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                                                           sizeof(NX_IPV6_HEADER));


        /* If the interface IP address is not valid (in DAD state), only ICMP is allowed */
        if (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e8:	789b      	ldrb	r3, [r3, #2]
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	d01e      	beq.n	800e72c <_nx_ipv6_header_add+0xa6>
        {

#ifndef NX_DISABLE_IPV6_DAD
        NX_ICMPV6_HEADER *icmpv6_header = (NX_ICMPV6_HEADER *)(packet_ptr -> nx_packet_prepend_ptr +
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	689b      	ldr	r3, [r3, #8]
                                                               packet_ptr -> nx_packet_ip_header_length);
 800e6f2:	69fa      	ldr	r2, [r7, #28]
 800e6f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
        NX_ICMPV6_HEADER *icmpv6_header = (NX_ICMPV6_HEADER *)(packet_ptr -> nx_packet_prepend_ptr +
 800e6f8:	4413      	add	r3, r2
 800e6fa:	61bb      	str	r3, [r7, #24]
               check whether the interface address is in tentative state and the protocol
               is ICMPv6-DAD. */

            /* This check is needed only if DAD is not disabled.
               If DAD is disabled, we drop the packet. */
            if (!((protocol == NX_PROTOCOL_ICMPV6) &&
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b3a      	cmp	r3, #58	; 0x3a
 800e700:	d108      	bne.n	800e714 <_nx_ipv6_header_add+0x8e>
                  (packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_TENTATIVE) &&
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e706:	789b      	ldrb	r3, [r3, #2]
            if (!((protocol == NX_PROTOCOL_ICMPV6) &&
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d103      	bne.n	800e714 <_nx_ipv6_header_add+0x8e>
                  (icmpv6_header -> nx_icmpv6_header_type == NX_ICMPV6_NEIGHBOR_SOLICITATION_TYPE)))
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	781b      	ldrb	r3, [r3, #0]
            if (!((protocol == NX_PROTOCOL_ICMPV6) &&
 800e710:	2b87      	cmp	r3, #135	; 0x87
 800e712:	d00b      	beq.n	800e72c <_nx_ipv6_header_add+0xa6>
#endif /* NX_DISABLE_IPV6_DAD */
            {
#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP invalid packet error.  */
                ip_ptr -> nx_ip_invalid_transmit_packets++;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
#endif

                /* Release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 800e722:	69f8      	ldr	r0, [r7, #28]
 800e724:	f002 fa42 	bl	8010bac <_nx_packet_transmit_release>

                /* Return... nothing more can be done!  */
                return(NX_NO_INTERFACE_ADDRESS);
 800e728:	2350      	movs	r3, #80	; 0x50
 800e72a:	e03f      	b.n	800e7ac <_nx_ipv6_header_add+0x126>
            }
        }

        /* If the IP header won't fit, return an error.  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	689a      	ldr	r2, [r3, #8]
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	429a      	cmp	r2, r3
 800e736:	d204      	bcs.n	800e742 <_nx_ipv6_header_add+0xbc>
 800e738:	f04f 30ff 	mov.w	r0, #4294967295
 800e73c:	f00a fbc4 	bl	8018ec8 <_tx_thread_sleep>
 800e740:	e7fa      	b.n	800e738 <_nx_ipv6_header_add+0xb2>

        /* Build the IP header.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	689b      	ldr	r3, [r3, #8]
 800e746:	617b      	str	r3, [r7, #20]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	689a      	ldr	r2, [r3, #8]
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	639a      	str	r2, [r3, #56]	; 0x38

        /* bits 31-28: IP version.  Bits 27-20: Traffic Class.  Bits 19-00: Flow Lable */
        ip_header_ptr -> nx_ip_header_word_0 = (ULONG)(6 << 28);
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800e756:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	ba1a      	rev	r2, r3
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	601a      	str	r2, [r3, #0]

        /* bits 31-16: payload size.  Bits 15-8: Next Header.   Bits 7-0 Hop limit */
        /* ip_header_ptr -> nx_ip_header_word_1 = (payload_size << 16) | (protocol << 8) | (ip_ptr -> nx_ipv6_hop_limit);*/
        ip_header_ptr -> nx_ip_header_word_1 = (payload_size << 16) | (protocol << 8) | (hop_limit);
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	041a      	lsls	r2, r3, #16
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	021b      	lsls	r3, r3, #8
 800e76a:	431a      	orrs	r2, r3
 800e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76e:	431a      	orrs	r2, r3
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	605a      	str	r2, [r3, #4]
        NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	ba1a      	rev	r2, r3
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	605a      	str	r2, [r3, #4]


        /* Fill in local IPv6 address as sender's address*/
        COPY_IPV6_ADDRESS(src_address, ip_header_ptr -> nx_ip_header_source_ip);
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	3308      	adds	r3, #8
 800e782:	4619      	mov	r1, r3
 800e784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e786:	f001 f853 	bl	800f830 <COPY_IPV6_ADDRESS>

        COPY_IPV6_ADDRESS(dest_address, ip_header_ptr -> nx_ip_header_destination_ip);
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	3318      	adds	r3, #24
 800e78e:	4619      	mov	r1, r3
 800e790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e792:	f001 f84d 	bl	800f830 <COPY_IPV6_ADDRESS>

        /* Fix endianness */
        NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	3318      	adds	r3, #24
 800e79a:	4618      	mov	r0, r3
 800e79c:	f001 f9a8 	bl	800faf0 <_nx_ipv6_address_change_endian>
        NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f001 f9a3 	bl	800faf0 <_nx_ipv6_address_change_endian>
        return(status);
    }

#endif /* NX_IPSEC_ENABLE */

    return(NX_SUCCESS);
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3720      	adds	r7, #32
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <_nx_ipv6_multicast_join>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_multicast_join(NX_IP *ip_ptr, ULONG *multicast_addr, NX_INTERFACE *nx_interface)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b08c      	sub	sp, #48	; 0x30
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]

NX_IP_DRIVER driver_request;


    /* Construct a driver command. */
    driver_request.nx_ip_driver_ptr = ip_ptr;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_JOIN;
 800e7c4:	2308      	movs	r3, #8
 800e7c6:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 800e7c8:	f243 3333 	movw	r3, #13107	; 0x3333
 800e7cc:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface = nx_interface;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Obtain the IP mutex so we can search the multicast join list.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800e7de:	f04f 31ff 	mov.w	r1, #4294967295
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f009 fcc2 	bl	801816c <_tx_mutex_get>

    /* Call the device driver with the driver request. */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ec:	f107 0210 	add.w	r2, r7, #16
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	4798      	blx	r3

    /* Release the protection over the IP instance.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f009 ff2e 	bl	801865c <_tx_mutex_put>

    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
 800e800:	697b      	ldr	r3, [r7, #20]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3730      	adds	r7, #48	; 0x30
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <_nx_ipv6_multicast_leave>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_multicast_leave(NX_IP *ip_ptr, ULONG *multicast_addr, NX_INTERFACE *nx_interface)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b08c      	sub	sp, #48	; 0x30
 800e80e:	af00      	add	r7, sp, #0
 800e810:	60f8      	str	r0, [r7, #12]
 800e812:	60b9      	str	r1, [r7, #8]
 800e814:	607a      	str	r2, [r7, #4]

NX_IP_DRIVER driver_request;


    /* Construct a driver command. */
    driver_request.nx_ip_driver_ptr = ip_ptr;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command = NX_LINK_MULTICAST_LEAVE;
 800e81a:	2309      	movs	r3, #9
 800e81c:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 800e81e:	f243 3333 	movw	r3, #13107	; 0x3333
 800e822:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw = multicast_addr[3];
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface = nx_interface;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Obtain the IP mutex so we can search the multicast join list.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800e834:	f04f 31ff 	mov.w	r1, #4294967295
 800e838:	4618      	mov	r0, r3
 800e83a:	f009 fc97 	bl	801816c <_tx_mutex_get>


    /* Call the device driver with the driver request. */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e842:	f107 0210 	add.w	r2, r7, #16
 800e846:	4610      	mov	r0, r2
 800e848:	4798      	blx	r3

    /* Release the protection over the IP instance.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800e850:	4618      	mov	r0, r3
 800e852:	f009 ff03 	bl	801865c <_tx_mutex_put>

    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
 800e856:	697b      	ldr	r3, [r7, #20]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3730      	adds	r7, #48	; 0x30
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <_nx_ipv6_option_error>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_option_error(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UCHAR option_type, UINT offset)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b086      	sub	sp, #24
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	603b      	str	r3, [r7, #0]
 800e86c:	4613      	mov	r3, r2
 800e86e:	71fb      	strb	r3, [r7, #7]

UINT rv = NX_SUCCESS;
 800e870:	2300      	movs	r3, #0
 800e872:	617b      	str	r3, [r7, #20]

/*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
NX_IPV6_HEADER *ip_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e878:	613b      	str	r3, [r7, #16]

    /* Top 2 bits of the option type indicate how we shall process this option
       in case of an error. */
    switch (option_type >> 6)
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	099b      	lsrs	r3, r3, #6
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b03      	cmp	r3, #3
 800e882:	d006      	beq.n	800e892 <_nx_ipv6_option_error+0x32>
 800e884:	2b03      	cmp	r3, #3
 800e886:	dc18      	bgt.n	800e8ba <_nx_ipv6_option_error+0x5a>
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d013      	beq.n	800e8b4 <_nx_ipv6_option_error+0x54>
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d00a      	beq.n	800e8a6 <_nx_ipv6_option_error+0x46>
        rv = NX_OPTION_HEADER_ERROR;
        break;

    case 0: /* Skip over this option and continue processing the rest of the packet. */
    default:
        break;
 800e890:	e013      	b.n	800e8ba <_nx_ipv6_option_error+0x5a>
        if ((ip_header_ptr -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e89a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800e89e:	d102      	bne.n	800e8a6 <_nx_ipv6_option_error+0x46>
            rv = NX_OPTION_HEADER_ERROR;
 800e8a0:	2354      	movs	r3, #84	; 0x54
 800e8a2:	617b      	str	r3, [r7, #20]
            break;
 800e8a4:	e00a      	b.n	800e8bc <_nx_ipv6_option_error+0x5c>
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 2, (ULONG)(offset + sizeof(NX_IPV6_HEADER)));
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	3328      	adds	r3, #40	; 0x28
 800e8aa:	4a07      	ldr	r2, [pc, #28]	; (800e8c8 <_nx_ipv6_option_error+0x68>)
 800e8ac:	68b9      	ldr	r1, [r7, #8]
 800e8ae:	68f8      	ldr	r0, [r7, #12]
 800e8b0:	f7fc ff59 	bl	800b766 <_nx_icmpv6_send_error_message>
        rv = NX_OPTION_HEADER_ERROR;
 800e8b4:	2354      	movs	r3, #84	; 0x54
 800e8b6:	617b      	str	r3, [r7, #20]
        break;
 800e8b8:	e000      	b.n	800e8bc <_nx_ipv6_option_error+0x5c>
        break;
 800e8ba:	bf00      	nop
    }

    return(rv);
 800e8bc:	697b      	ldr	r3, [r7, #20]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	04020000 	.word	0x04020000

0800e8cc <_nx_ipv6_packet_copy>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_packet_copy(NX_PACKET *source_pkt_head, NX_PACKET *dest_pkt_head, UINT size)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b08f      	sub	sp, #60	; 0x3c
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
UCHAR     *source_byte, *dest_byte;
UINT       flag;


    /* Number of bytes to be copied. */
    bytes_remaining = size;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	637b      	str	r3, [r7, #52]	; 0x34

    /* Obtain points to the source and destination packets. */
    source_pkt = source_pkt_head -> nx_packet_last;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	699b      	ldr	r3, [r3, #24]
 800e8e0:	633b      	str	r3, [r7, #48]	; 0x30
    dest_pkt = dest_pkt_head -> nx_packet_last;
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	699b      	ldr	r3, [r3, #24]
 800e8e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (bytes_remaining > 0)
 800e8e8:	e0f7      	b.n	800eada <_nx_ipv6_packet_copy+0x20e>
    {

        /* Make sure source or destination packets are valid. */
        if ((source_pkt == NX_NULL) || (dest_pkt == NX_NULL))
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <_nx_ipv6_packet_copy+0x2a>
 800e8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d101      	bne.n	800e8fa <_nx_ipv6_packet_copy+0x2e>
        {
            return(NX_NOT_SUCCESSFUL);
 800e8f6:	2343      	movs	r3, #67	; 0x43
 800e8f8:	e0f6      	b.n	800eae8 <_nx_ipv6_packet_copy+0x21c>
           figure out the amount of bytes we can copy in this iteration.
           At the end of the interation, we shall be able to "close" either the
           source packet or the destination packet.
         */

        bytes_to_copy = bytes_remaining;
 800e8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fc:	62bb      	str	r3, [r7, #40]	; 0x28

        flag = PACKET_COPY_DONE;
 800e8fe:	2304      	movs	r3, #4
 800e900:	617b      	str	r3, [r7, #20]

        /* Check if the source packet is running out of data. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (bytes_to_copy > (UINT)(source_pkt -> nx_packet_append_ptr - source_pkt -> nx_packet_prepend_ptr))
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	461a      	mov	r2, r3
 800e90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e910:	4293      	cmp	r3, r2
 800e912:	d907      	bls.n	800e924 <_nx_ipv6_packet_copy+0x58>
        {

            /* It is. Set flag to PACKET_MORE_TO_COPY, indicating that there is more to be copied
               from the following buffer.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            bytes_to_copy = (UINT)(source_pkt -> nx_packet_append_ptr - source_pkt -> nx_packet_prepend_ptr);
 800e914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e916:	68da      	ldr	r2, [r3, #12]
 800e918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91a:	689b      	ldr	r3, [r3, #8]
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	62bb      	str	r3, [r7, #40]	; 0x28
            flag = PACKET_MORE_TO_COPY;
 800e920:	2301      	movs	r3, #1
 800e922:	617b      	str	r3, [r7, #20]
        }

        /* Check if the destination packet is running ouf of space.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (bytes_to_copy > (UINT)(dest_pkt -> nx_packet_data_end - dest_pkt -> nx_packet_append_ptr))
 800e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e926:	695a      	ldr	r2, [r3, #20]
 800e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	1ad3      	subs	r3, r2, r3
 800e92e:	461a      	mov	r2, r3
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	4293      	cmp	r3, r2
 800e934:	d907      	bls.n	800e946 <_nx_ipv6_packet_copy+0x7a>
        {

            /* It is. Set the 2nd bit in the flag to indicate that at the the end of the
               iteration we will need to chain another buffer on the destination packet.*/
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            bytes_to_copy = (UINT)(dest_pkt -> nx_packet_data_end - dest_pkt -> nx_packet_append_ptr);
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	695a      	ldr	r2, [r3, #20]
 800e93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	62bb      	str	r3, [r7, #40]	; 0x28
            flag = PACKET_ADD_BUFFER;
 800e942:	2302      	movs	r3, #2
 800e944:	617b      	str	r3, [r7, #20]
        }

        /* Adjust packet pointers. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        dest_ptr = (ULONG *)dest_pkt -> nx_packet_append_ptr;
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	623b      	str	r3, [r7, #32]
        dest_pkt -> nx_packet_append_ptr += bytes_to_copy;
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	68da      	ldr	r2, [r3, #12]
 800e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e952:	441a      	add	r2, r3
 800e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e956:	60da      	str	r2, [r3, #12]
        dest_pkt -> nx_packet_length -= bytes_to_copy;
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95e:	1ad2      	subs	r2, r2, r3
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	625a      	str	r2, [r3, #36]	; 0x24

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        source_ptr = (ULONG *)source_pkt -> nx_packet_prepend_ptr;
 800e964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	627b      	str	r3, [r7, #36]	; 0x24
        source_pkt -> nx_packet_prepend_ptr += bytes_to_copy;
 800e96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96c:	689a      	ldr	r2, [r3, #8]
 800e96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e970:	441a      	add	r2, r3
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	609a      	str	r2, [r3, #8]

        while (bytes_to_copy)
 800e976:	e08f      	b.n	800ea98 <_nx_ipv6_packet_copy+0x1cc>
        {
            /* Loop unrolling: copy 32 bytes in one iteration. */
            switch (bytes_to_copy >> 2)
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	089b      	lsrs	r3, r3, #2
 800e97c:	3b01      	subs	r3, #1
 800e97e:	2b06      	cmp	r3, #6
 800e980:	d810      	bhi.n	800e9a4 <_nx_ipv6_packet_copy+0xd8>
 800e982:	a201      	add	r2, pc, #4	; (adr r2, 800e988 <_nx_ipv6_packet_copy+0xbc>)
 800e984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e988:	0800ea15 	.word	0x0800ea15
 800e98c:	0800ea05 	.word	0x0800ea05
 800e990:	0800e9f5 	.word	0x0800e9f5
 800e994:	0800e9e5 	.word	0x0800e9e5
 800e998:	0800e9d5 	.word	0x0800e9d5
 800e99c:	0800e9c5 	.word	0x0800e9c5
 800e9a0:	0800e9b5 	.word	0x0800e9b5
            {
            default:
                *dest_ptr++ = *source_ptr++;
 800e9a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9a6:	1d13      	adds	r3, r2, #4
 800e9a8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	1d19      	adds	r1, r3, #4
 800e9ae:	6239      	str	r1, [r7, #32]
 800e9b0:	6812      	ldr	r2, [r2, #0]
 800e9b2:	601a      	str	r2, [r3, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 7:
                *dest_ptr++ = *source_ptr++;
 800e9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9b6:	1d13      	adds	r3, r2, #4
 800e9b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9ba:	6a3b      	ldr	r3, [r7, #32]
 800e9bc:	1d19      	adds	r1, r3, #4
 800e9be:	6239      	str	r1, [r7, #32]
 800e9c0:	6812      	ldr	r2, [r2, #0]
 800e9c2:	601a      	str	r2, [r3, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 6:
                *dest_ptr++ = *source_ptr++;
 800e9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9c6:	1d13      	adds	r3, r2, #4
 800e9c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	1d19      	adds	r1, r3, #4
 800e9ce:	6239      	str	r1, [r7, #32]
 800e9d0:	6812      	ldr	r2, [r2, #0]
 800e9d2:	601a      	str	r2, [r3, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 5:
                *dest_ptr++ = *source_ptr++;
 800e9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9d6:	1d13      	adds	r3, r2, #4
 800e9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9da:	6a3b      	ldr	r3, [r7, #32]
 800e9dc:	1d19      	adds	r1, r3, #4
 800e9de:	6239      	str	r1, [r7, #32]
 800e9e0:	6812      	ldr	r2, [r2, #0]
 800e9e2:	601a      	str	r2, [r3, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 4:
                *dest_ptr++ = *source_ptr++;
 800e9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e6:	1d13      	adds	r3, r2, #4
 800e9e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9ea:	6a3b      	ldr	r3, [r7, #32]
 800e9ec:	1d19      	adds	r1, r3, #4
 800e9ee:	6239      	str	r1, [r7, #32]
 800e9f0:	6812      	ldr	r2, [r2, #0]
 800e9f2:	601a      	str	r2, [r3, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 3:
                *dest_ptr++ = *source_ptr++;
 800e9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9f6:	1d13      	adds	r3, r2, #4
 800e9f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9fa:	6a3b      	ldr	r3, [r7, #32]
 800e9fc:	1d19      	adds	r1, r3, #4
 800e9fe:	6239      	str	r1, [r7, #32]
 800ea00:	6812      	ldr	r2, [r2, #0]
 800ea02:	601a      	str	r2, [r3, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 2:
                *dest_ptr++ = *source_ptr++;
 800ea04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea06:	1d13      	adds	r3, r2, #4
 800ea08:	627b      	str	r3, [r7, #36]	; 0x24
 800ea0a:	6a3b      	ldr	r3, [r7, #32]
 800ea0c:	1d19      	adds	r1, r3, #4
 800ea0e:	6239      	str	r1, [r7, #32]
 800ea10:	6812      	ldr	r2, [r2, #0]
 800ea12:	601a      	str	r2, [r3, #0]
            /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
            case 1:
                *dest_ptr++ = *source_ptr++;
 800ea14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea16:	1d13      	adds	r3, r2, #4
 800ea18:	627b      	str	r3, [r7, #36]	; 0x24
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	1d19      	adds	r1, r3, #4
 800ea1e:	6239      	str	r1, [r7, #32]
 800ea20:	6812      	ldr	r2, [r2, #0]
 800ea22:	601a      	str	r2, [r3, #0]
            }
            if (bytes_to_copy >= 32)
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	2b1f      	cmp	r3, #31
 800ea28:	d906      	bls.n	800ea38 <_nx_ipv6_packet_copy+0x16c>
            {
                bytes_to_copy -= 32;
 800ea2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2c:	3b20      	subs	r3, #32
 800ea2e:	62bb      	str	r3, [r7, #40]	; 0x28
                bytes_remaining -= 32;
 800ea30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea32:	3b20      	subs	r3, #32
 800ea34:	637b      	str	r3, [r7, #52]	; 0x34
 800ea36:	e02f      	b.n	800ea98 <_nx_ipv6_packet_copy+0x1cc>
            else
            {

                /* Copy bytes less than 4. */
                /*lint --e{928} suppress cast from pointer to pointer, since it is necessary  */
                source_byte = (UCHAR *)source_ptr;
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3a:	61fb      	str	r3, [r7, #28]
                dest_byte = (UCHAR *)dest_ptr;
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	61bb      	str	r3, [r7, #24]
                switch (bytes_to_copy & 3)
 800ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea42:	f003 0303 	and.w	r3, r3, #3
 800ea46:	2b03      	cmp	r3, #3
 800ea48:	d006      	beq.n	800ea58 <_nx_ipv6_packet_copy+0x18c>
 800ea4a:	2b03      	cmp	r3, #3
 800ea4c:	d81d      	bhi.n	800ea8a <_nx_ipv6_packet_copy+0x1be>
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d012      	beq.n	800ea78 <_nx_ipv6_packet_copy+0x1ac>
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d008      	beq.n	800ea68 <_nx_ipv6_packet_copy+0x19c>
                /*lint -e{825} suppress fallthrough, since it is necessary.  */ /* fallthrough */
                case 1:
                    *dest_byte++ = *source_byte++;
                    break;
                default:
                    break;
 800ea56:	e018      	b.n	800ea8a <_nx_ipv6_packet_copy+0x1be>
                    *dest_byte++ = *source_byte++;
 800ea58:	69fa      	ldr	r2, [r7, #28]
 800ea5a:	1c53      	adds	r3, r2, #1
 800ea5c:	61fb      	str	r3, [r7, #28]
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	1c59      	adds	r1, r3, #1
 800ea62:	61b9      	str	r1, [r7, #24]
 800ea64:	7812      	ldrb	r2, [r2, #0]
 800ea66:	701a      	strb	r2, [r3, #0]
                    *dest_byte++ = *source_byte++;
 800ea68:	69fa      	ldr	r2, [r7, #28]
 800ea6a:	1c53      	adds	r3, r2, #1
 800ea6c:	61fb      	str	r3, [r7, #28]
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	1c59      	adds	r1, r3, #1
 800ea72:	61b9      	str	r1, [r7, #24]
 800ea74:	7812      	ldrb	r2, [r2, #0]
 800ea76:	701a      	strb	r2, [r3, #0]
                    *dest_byte++ = *source_byte++;
 800ea78:	69fa      	ldr	r2, [r7, #28]
 800ea7a:	1c53      	adds	r3, r2, #1
 800ea7c:	61fb      	str	r3, [r7, #28]
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	1c59      	adds	r1, r3, #1
 800ea82:	61b9      	str	r1, [r7, #24]
 800ea84:	7812      	ldrb	r2, [r2, #0]
 800ea86:	701a      	strb	r2, [r3, #0]
                    break;
 800ea88:	e000      	b.n	800ea8c <_nx_ipv6_packet_copy+0x1c0>
                    break;
 800ea8a:	bf00      	nop
                }

                bytes_remaining -= bytes_to_copy;
 800ea8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	637b      	str	r3, [r7, #52]	; 0x34
                bytes_to_copy = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	62bb      	str	r3, [r7, #40]	; 0x28
        while (bytes_to_copy)
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f47f af6c 	bne.w	800e978 <_nx_ipv6_packet_copy+0xac>
            }
        }

        /* Check if the flag has been set to more data to copy. */
        if (flag & PACKET_MORE_TO_COPY)
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	f003 0301 	and.w	r3, r3, #1
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d006      	beq.n	800eab8 <_nx_ipv6_packet_copy+0x1ec>
        {
            source_pkt_head -> nx_packet_last = source_pkt -> nx_packet_next;
 800eaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaac:	685a      	ldr	r2, [r3, #4]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	619a      	str	r2, [r3, #24]
            source_pkt = source_pkt_head -> nx_packet_last;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Check if we need to chain another buffer to the packet chain for more data copy. */
        if (flag & PACKET_ADD_BUFFER)
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	f003 0302 	and.w	r3, r3, #2
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d006      	beq.n	800ead0 <_nx_ipv6_packet_copy+0x204>
        {
            dest_pkt_head -> nx_packet_last = dest_pkt -> nx_packet_next;
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	685a      	ldr	r2, [r3, #4]
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	619a      	str	r2, [r3, #24]
            dest_pkt = dest_pkt -> nx_packet_next;
 800eaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Check if we are done. */
        if (flag & PACKET_COPY_DONE)
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	f003 0304 	and.w	r3, r3, #4
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d104      	bne.n	800eae4 <_nx_ipv6_packet_copy+0x218>
    while (bytes_remaining > 0)
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f47f af04 	bne.w	800e8ea <_nx_ipv6_packet_copy+0x1e>
 800eae2:	e000      	b.n	800eae6 <_nx_ipv6_packet_copy+0x21a>
        {

            /* We are. */
            break;
 800eae4:	bf00      	nop
        }
    }

    return(NX_SUCCESS);
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	373c      	adds	r7, #60	; 0x3c
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <_nx_ipv6_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv6_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b08c      	sub	sp, #48	; 0x30
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
ULONG             delta;
UINT              pkt_length;
UCHAR             next_header_type;
NX_IPV6_HEADER   *ip_header_ptr;
NXD_IPV6_ADDRESS *interface_ipv6_address_next;
NXD_IPV6_ADDRESS *incoming_address = NX_NULL;
 800eafe:	2300      	movs	r3, #0
 800eb00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Points to the base of IPv6 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	61fb      	str	r3, [r7, #28]

    /* Byte swap WORD 1 to obtain IPv6 payload length. */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	ba1a      	rev	r2, r3
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	605a      	str	r2, [r3, #4]

    pkt_length = (UINT)((ip_header_ptr -> nx_ip_header_word_1 >> 16) + sizeof(NX_IPV6_HEADER));
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	0c1b      	lsrs	r3, r3, #16
 800eb18:	3328      	adds	r3, #40	; 0x28
 800eb1a:	61bb      	str	r3, [r7, #24]

    /* Make sure the packet length field matches the payload length field in the IPv6 header. */
    if (packet_ptr -> nx_packet_length != (ULONG)pkt_length)
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb20:	69ba      	ldr	r2, [r7, #24]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d06a      	beq.n	800ebfc <_nx_ipv6_packet_receive+0x108>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < (ULONG)pkt_length)
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2a:	69ba      	ldr	r2, [r7, #24]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d911      	bls.n	800eb54 <_nx_ipv6_packet_receive+0x60>

            /* The incoming packet has a wrong payload size. */
#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 3538 	ldr.w	r3, [r3, #1336]	; 0x538
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800eb44:	1c5a      	adds	r2, r3, #1
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

            /* Release the packet!  */
            _nx_packet_release(packet_ptr);
 800eb4c:	6838      	ldr	r0, [r7, #0]
 800eb4e:	f001 ff73 	bl	8010a38 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800eb52:	e0d9      	b.n	800ed08 <_nx_ipv6_packet_receive+0x214>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb64:	1ad2      	subs	r2, r2, r3
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 800eb6a:	e044      	b.n	800ebf6 <_nx_ipv6_packet_receive+0x102>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d107      	bne.n	800eb84 <_nx_ipv6_packet_receive+0x90>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	68da      	ldr	r2, [r3, #12]
 800eb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7a:	425b      	negs	r3, r3
 800eb7c:	441a      	add	r2, r3
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 800eb82:	e03b      	b.n	800ebfc <_nx_ipv6_packet_receive+0x108>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	617b      	str	r3, [r7, #20]

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	68da      	ldr	r2, [r3, #12]
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	461a      	mov	r2, r3
 800eb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d207      	bcs.n	800ebac <_nx_ipv6_packet_receive+0xb8>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	68da      	ldr	r2, [r3, #12]
 800eba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba2:	425b      	negs	r3, r3
 800eba4:	441a      	add	r2, r3
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 800ebaa:	e027      	b.n	800ebfc <_nx_ipv6_packet_receive+0x108>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	68da      	ldr	r2, [r3, #12]
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebba:	1a9b      	subs	r3, r3, r2
 800ebbc:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	623b      	str	r3, [r7, #32]
                while (before_last_packet -> nx_packet_next != last_packet)
 800ebc2:	e002      	b.n	800ebca <_nx_ipv6_packet_receive+0xd6>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	623b      	str	r3, [r7, #32]
                while (before_last_packet -> nx_packet_next != last_packet)
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	697a      	ldr	r2, [r7, #20]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d1f7      	bne.n	800ebc4 <_nx_ipv6_packet_receive+0xd0>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 800ebd4:	6a3b      	ldr	r3, [r7, #32]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	6a3b      	ldr	r3, [r7, #32]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d003      	beq.n	800ebea <_nx_ipv6_packet_receive+0xf6>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	6a3a      	ldr	r2, [r7, #32]
 800ebe6:	619a      	str	r2, [r3, #24]
 800ebe8:	e002      	b.n	800ebf0 <_nx_ipv6_packet_receive+0xfc>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	2200      	movs	r2, #0
 800ebee:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800ebf0:	6978      	ldr	r0, [r7, #20]
 800ebf2:	f001 ff21 	bl	8010a38 <_nx_packet_release>
        while (delta)
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1b7      	bne.n	800eb6c <_nx_ipv6_packet_receive+0x78>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Byte swap the rest of the IPv6 header fields. */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	ba1a      	rev	r2, r3
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	601a      	str	r2, [r3, #0]
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	3318      	adds	r3, #24
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 ff70 	bl	800faf0 <_nx_ipv6_address_change_endian>
    NX_IPV6_ADDRESS_CHANGE_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	3308      	adds	r3, #8
 800ec14:	4618      	mov	r0, r3
 800ec16:	f000 ff6b 	bl	800faf0 <_nx_ipv6_address_change_endian>

    /* Get a pointer to the first address in the address list for this interface (e.g.
       the interface the packet was received on). */
    interface_ipv6_address_next = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nxd_interface_ipv6_address_list_head;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1e:	6a1b      	ldr	r3, [r3, #32]
 800ec20:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if this packet is intended for this host by looping through all the addresses in the IP interface table for a match. */
    while (interface_ipv6_address_next)
 800ec22:	e024      	b.n	800ec6e <_nx_ipv6_packet_receive+0x17a>
    {

        /* Ignore invalid addresses. */
        if (interface_ipv6_address_next -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_UNKNOWN)
 800ec24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec26:	789b      	ldrb	r3, [r3, #2]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d01d      	beq.n	800ec68 <_nx_ipv6_packet_receive+0x174>
        {

            /* Does the incoming packet match one of the IP interfaces? */
            if (CHECK_IPV6_ADDRESSES_SAME(ip_header_ptr -> nx_ip_header_destination_ip,
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	f103 0218 	add.w	r2, r3, #24
                                          interface_ipv6_address_next -> nxd_ipv6_address))
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	3308      	adds	r3, #8
            if (CHECK_IPV6_ADDRESSES_SAME(ip_header_ptr -> nx_ip_header_destination_ip,
 800ec36:	4619      	mov	r1, r3
 800ec38:	4610      	mov	r0, r2
 800ec3a:	f000 fd94 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d002      	beq.n	800ec4a <_nx_ipv6_packet_receive+0x156>
            {

                /* Yes, we found a match! */
                incoming_address = interface_ipv6_address_next;
 800ec44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec46:	627b      	str	r3, [r7, #36]	; 0x24

                break;
 800ec48:	e014      	b.n	800ec74 <_nx_ipv6_packet_receive+0x180>
            }
            /* Check for multicast address. */
            else if (CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS(ip_header_ptr -> nx_ip_header_destination_ip,
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	f103 0218 	add.w	r2, r3, #24
                                                             interface_ipv6_address_next -> nxd_ipv6_address))
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	3308      	adds	r3, #8
            else if (CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS(ip_header_ptr -> nx_ip_header_destination_ip,
 800ec54:	4619      	mov	r1, r3
 800ec56:	4610      	mov	r0, r2
 800ec58:	f000 fe28 	bl	800f8ac <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <_nx_ipv6_packet_receive+0x174>
            {

                /* Yes, this is a multicast address. */
                incoming_address = interface_ipv6_address_next;
 800ec62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec64:	627b      	str	r3, [r7, #36]	; 0x24

                break;
 800ec66:	e005      	b.n	800ec74 <_nx_ipv6_packet_receive+0x180>
            }
        }

        /* No match yet, get the next address. */
        interface_ipv6_address_next = interface_ipv6_address_next -> nxd_ipv6_address_next;
 800ec68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6a:	699b      	ldr	r3, [r3, #24]
 800ec6c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (interface_ipv6_address_next)
 800ec6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1d7      	bne.n	800ec24 <_nx_ipv6_packet_receive+0x130>
        }
    }
#endif /* NX_ENABLE_IPV6_MULTICAST  */

    /* Check for valid interface. */
    if (incoming_address == NX_NULL)
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10a      	bne.n	800ec90 <_nx_ipv6_packet_receive+0x19c>
        /* The incoming packet has a destination address that does not match any of
           the local interface addresses so its not for me. */

#ifndef NX_DISABLE_IP_INFO
        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800ec80:	1c5a      	adds	r2, r3, #1
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#endif

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 800ec88:	6838      	ldr	r0, [r7, #0]
 800ec8a:	f001 fed5 	bl	8010a38 <_nx_packet_release>

        /* In all cases, receive processing is finished.  Return to caller.  */
        return;
 800ec8e:	e03b      	b.n	800ed08 <_nx_ipv6_packet_receive+0x214>
    }

    /* Set the matching address to the packet address. */
    packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = incoming_address;
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec94:	635a      	str	r2, [r3, #52]	; 0x34
       Update the IP header pointer, packet length and packet prepend pointer
       to point to the next header (either IP option header or
       upper layer protocol header.
     */

    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_IPV6_HEADER);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= (ULONG)sizeof(NX_IPV6_HEADER);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca6:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	625a      	str	r2, [r3, #36]	; 0x24

    packet_ptr -> nx_packet_option_offset = 6;
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	2206      	movs	r2, #6
 800ecb2:	85da      	strh	r2, [r3, #46]	; 0x2e
    next_header_type = (UCHAR)((ip_header_ptr -> nx_ip_header_word_1 >> 8) & 0xFF);
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	0a1b      	lsrs	r3, r3, #8
 800ecba:	74fb      	strb	r3, [r7, #19]
       field is detected, the search is terminated and an ICMPv6 error message is
       generated.
     */

    /* Initialize start of search for just passed the IP header. */
    packet_ptr -> nx_packet_option_state = (UCHAR)IPV6_BASE_HEADER;
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    packet_ptr -> nx_packet_destination_header = 0;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#ifndef NX_DISABLE_IP_INFO

    /* Increment the number of packets delivered.  */
    ip_ptr -> nx_ip_total_packets_delivered++;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524

    /* Increment the IP packet bytes received (not including the header).  */
    ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 2528 	ldr.w	r2, [r3, #1320]	; 0x528
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece4:	441a      	add	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
#endif

    error = _nx_ip_dispatch_process(ip_ptr, packet_ptr, next_header_type);
 800ecec:	7cfb      	ldrb	r3, [r7, #19]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7fd fd34 	bl	800c760 <_nx_ip_dispatch_process>
 800ecf8:	60f8      	str	r0, [r7, #12]

    if (error)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d002      	beq.n	800ed06 <_nx_ipv6_packet_receive+0x212>
    {
        _nx_packet_release(packet_ptr);
 800ed00:	6838      	ldr	r0, [r7, #0]
 800ed02:	f001 fe99 	bl	8010a38 <_nx_packet_release>
    }

    return;
 800ed06:	bf00      	nop
}
 800ed08:	3730      	adds	r7, #48	; 0x30
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <_nx_ipv6_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                          ULONG protocol, ULONG payload_size, ULONG hop_limit,
                          ULONG *src_address, ULONG *dest_address)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b0a0      	sub	sp, #128	; 0x80
 800ed12:	af04      	add	r7, sp, #16
 800ed14:	60f8      	str	r0, [r7, #12]
 800ed16:	60b9      	str	r1, [r7, #8]
 800ed18:	607a      	str	r2, [r7, #4]
 800ed1a:	603b      	str	r3, [r7, #0]

UINT                       status = NX_SUCCESS;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	66fb      	str	r3, [r7, #108]	; 0x6c
ULONG                      address_type;
UINT                       next_hop_mtu;
ULONG                      fragment = NX_TRUE;
 800ed20:	2301      	movs	r3, #1
 800ed22:	653b      	str	r3, [r7, #80]	; 0x50
UINT                       same_address;
NX_INTERFACE              *if_ptr;
NX_IPV6_DESTINATION_ENTRY *dest_entry_ptr;

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	667b      	str	r3, [r7, #100]	; 0x64

    /* Interface can not be NULL. */
    NX_ASSERT(if_ptr != NX_NULL);
 800ed2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d104      	bne.n	800ed3c <_nx_ipv6_packet_send+0x2e>
 800ed32:	f04f 30ff 	mov.w	r0, #4294967295
 800ed36:	f00a f8c7 	bl	8018ec8 <_tx_thread_sleep>
 800ed3a:	e7fa      	b.n	800ed32 <_nx_ipv6_packet_send+0x24>
        return;
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Add IPv6 header. */
    if (_nx_ipv6_header_add(ip_ptr, &packet_ptr, protocol, payload_size,
 800ed3c:	f107 0108 	add.w	r1, r7, #8
 800ed40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ed44:	9303      	str	r3, [sp, #12]
 800ed46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ed4a:	9302      	str	r3, [sp, #8]
 800ed4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed4e:	9301      	str	r3, [sp, #4]
 800ed50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	68f8      	ldr	r0, [r7, #12]
 800ed5a:	f7ff fc94 	bl	800e686 <_nx_ipv6_header_add>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f040 81e2 	bne.w	800f12a <_nx_ipv6_packet_send+0x41c>
            return;
        }
    }
#endif /* NX_ENABLE_IP_PACKET_FILTER */

    next_hop_mtu = if_ptr -> nx_interface_ip_mtu_size;
 800ed66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6a:	663b      	str	r3, [r7, #96]	; 0x60
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800ed6c:	68ba      	ldr	r2, [r7, #8]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	6892      	ldr	r2, [r2, #8]
 800ed72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Check if the host is sending itself a packet. */
    same_address = (UINT)CHECK_IPV6_ADDRESSES_SAME(dest_address, src_address);
 800ed74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ed76:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ed7a:	f000 fcf4 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* If it is, consider this a loopback address. */
    if (same_address == 1)
 800ed82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d103      	bne.n	800ed90 <_nx_ipv6_packet_send+0x82>
    {

        address_type = IPV6_ADDRESS_LOOPBACK;
 800ed88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ed8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed8e:	e004      	b.n	800ed9a <_nx_ipv6_packet_send+0x8c>
    }
    else
    {

        /* Otherwise check if this packet sending to a known loopback address. */
        address_type = IPv6_Address_Type(dest_address);
 800ed90:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ed94:	f000 fdec 	bl	800f970 <IPv6_Address_Type>
 800ed98:	66b8      	str	r0, [r7, #104]	; 0x68
    }

    /* Handle the internal loopback case. */
    if (address_type == IPV6_ADDRESS_LOOPBACK)
 800ed9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eda0:	d13b      	bne.n	800ee1a <_nx_ipv6_packet_send+0x10c>
    {

        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 800eda2:	68b8      	ldr	r0, [r7, #8]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
 800edaa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800edae:	2300      	movs	r3, #0
 800edb0:	f001 fb6e 	bl	8010490 <_nx_packet_copy>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d11c      	bne.n	800edf4 <_nx_ipv6_packet_send+0xe6>
            }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

            /* Get the interface of copied packet. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            packet_copy -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	6852      	ldr	r2, [r2, #4]
 800edc2:	635a      	str	r2, [r3, #52]	; 0x34

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count. */
            ip_ptr -> nx_ip_total_packets_sent++;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

            /* Increment the IP bytes sent count. */
            ip_ptr -> nx_ip_total_bytes_sent += packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eddc:	4413      	add	r3, r2
 800edde:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
#endif

            /* Send the packet to this IP's receive processing like it came in from the driver. */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 800ede8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edea:	4619      	mov	r1, r3
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f7fe fa0d 	bl	800d20c <_nx_ip_packet_deferred_receive>
 800edf2:	e00d      	b.n	800ee10 <_nx_ipv6_packet_send+0x102>
        }
#ifndef NX_DISABLE_IP_INFO
        else
        {
            /* Increment the IP send packets dropped count. */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800edfa:	1c5a      	adds	r2, r3, #1
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

            /* Increment the IP transmit resource error count. */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
        }
#endif
        /* Release the transmit packet. */
        _nx_packet_transmit_release(packet_ptr);
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	4618      	mov	r0, r3
 800ee14:	f001 feca 	bl	8010bac <_nx_packet_transmit_release>
        return;
 800ee18:	e18a      	b.n	800f130 <_nx_ipv6_packet_send+0x422>
    }

    /* Initial the driver request. */
    driver_request.nx_ip_driver_ptr                  = ip_ptr;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	64bb      	str	r3, [r7, #72]	; 0x48
    driver_request.nx_ip_driver_command              = NX_LINK_PACKET_SEND;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet               = packet_ptr;
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	643b      	str	r3, [r7, #64]	; 0x40
    driver_request.nx_ip_driver_interface            = NX_NULL;
 800ee26:	2300      	movs	r3, #0
 800ee28:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if physical mapping is needed by this link driver. */
    if (if_ptr -> nx_interface_address_mapping_needed)
 800ee2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee2c:	795b      	ldrb	r3, [r3, #5]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f000 8145 	beq.w	800f0be <_nx_ipv6_packet_send+0x3b0>
    {

        /* Is this packet a multicast ? */
        if ((dest_address[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800ee34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ee3e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800ee42:	d109      	bne.n	800ee58 <_nx_ipv6_packet_send+0x14a>
        {


            /* Set up the driver request. */
            driver_request.nx_ip_driver_physical_address_msw = 0x00003333;
 800ee44:	f243 3333 	movw	r3, #13107	; 0x3333
 800ee48:	63bb      	str	r3, [r7, #56]	; 0x38
            driver_request.nx_ip_driver_physical_address_lsw = dest_address[3];
 800ee4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	63fb      	str	r3, [r7, #60]	; 0x3c
            driver_request.nx_ip_driver_interface            = if_ptr;
 800ee52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee56:	e13a      	b.n	800f0ce <_nx_ipv6_packet_send+0x3c0>
        }
        else
        {

        /* Obtain MAC address */
        ND_CACHE_ENTRY *NDCacheEntry = NX_NULL;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	627b      	str	r3, [r7, #36]	; 0x24
        ULONG           next_hop_address[4];

            SET_UNSPECIFIED_ADDRESS(next_hop_address);
 800ee5c:	f107 0314 	add.w	r3, r7, #20
 800ee60:	4618      	mov	r0, r3
 800ee62:	f000 fccc 	bl	800f7fe <SET_UNSPECIFIED_ADDRESS>

            /* Lookup the packet destination in the destination table. */
            status = _nx_icmpv6_dest_table_find(ip_ptr, dest_address, &dest_entry_ptr, 0, 0);
 800ee66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f7fb f9ca 	bl	800a20e <_nx_icmpv6_dest_table_find>
 800ee7a:	66f8      	str	r0, [r7, #108]	; 0x6c

            /* Was a matching entry found? */
            if (status != NX_SUCCESS)
 800ee7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d05b      	beq.n	800ef3a <_nx_ipv6_packet_send+0x22c>
            {

                /* No; If the packet is either onlink or there is no default router,
                   just copy the packet destination address to the 'next hop' address.  */

                if (_nxd_ipv6_search_onlink(ip_ptr, dest_address))
 800ee82:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f007 fae7 	bl	801645a <_nxd_ipv6_search_onlink>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d022      	beq.n	800eed8 <_nx_ipv6_packet_send+0x1ca>
                {
                    COPY_IPV6_ADDRESS(dest_address, next_hop_address);
 800ee92:	f107 0314 	add.w	r3, r7, #20
 800ee96:	4619      	mov	r1, r3
 800ee98:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ee9c:	f000 fcc8 	bl	800f830 <COPY_IPV6_ADDRESS>

                    /* Add the next_hop in destination table. */
                    status = _nx_icmpv6_dest_table_add(ip_ptr, dest_address, &dest_entry_ptr,
 800eea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                                       next_hop_address, if_ptr -> nx_interface_ip_mtu_size,
                                                       NX_WAIT_FOREVER, packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    status = _nx_icmpv6_dest_table_add(ip_ptr, dest_address, &dest_entry_ptr,
 800eea8:	f107 0014 	add.w	r0, r7, #20
 800eeac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eeb0:	9202      	str	r2, [sp, #8]
 800eeb2:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb6:	9201      	str	r2, [sp, #4]
 800eeb8:	9300      	str	r3, [sp, #0]
 800eeba:	4603      	mov	r3, r0
 800eebc:	460a      	mov	r2, r1
 800eebe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800eec2:	68f8      	ldr	r0, [r7, #12]
 800eec4:	f7fb f8d4 	bl	800a070 <_nx_icmpv6_dest_table_add>
 800eec8:	66f8      	str	r0, [r7, #108]	; 0x6c

                    /* Get the NDCacheEntry. */
                    if (status == NX_SUCCESS)
 800eeca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d12c      	bne.n	800ef2a <_nx_ipv6_packet_send+0x21c>
                    {
                        NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 800eed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed4:	627b      	str	r3, [r7, #36]	; 0x24
 800eed6:	e028      	b.n	800ef2a <_nx_ipv6_packet_send+0x21c>
                    }
                }
                /* Check whether or not we have a default router. */
                /* Suppress cast of pointer to pointer, since it is necessary  */
                else if (_nxd_ipv6_router_lookup(ip_ptr, if_ptr, next_hop_address, /*lint -e{929}*/ (void **)&NDCacheEntry) == NX_SUCCESS)
 800eed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eedc:	f107 0214 	add.w	r2, r7, #20
 800eee0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f007 f971 	bl	80161ca <_nxd_ipv6_router_lookup>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d11d      	bne.n	800ef2a <_nx_ipv6_packet_send+0x21c>
                {
                    /* Add the next_hop in destination table. */
                    status = _nx_icmpv6_dest_table_add(ip_ptr, dest_address, &dest_entry_ptr,
 800eeee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                                       next_hop_address, if_ptr -> nx_interface_ip_mtu_size,
                                                       NX_WAIT_FOREVER, packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr);
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    status = _nx_icmpv6_dest_table_add(ip_ptr, dest_address, &dest_entry_ptr,
 800eef6:	f107 0014 	add.w	r0, r7, #20
 800eefa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eefe:	9202      	str	r2, [sp, #8]
 800ef00:	f04f 32ff 	mov.w	r2, #4294967295
 800ef04:	9201      	str	r2, [sp, #4]
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	4603      	mov	r3, r0
 800ef0a:	460a      	mov	r2, r1
 800ef0c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f7fb f8ad 	bl	800a070 <_nx_icmpv6_dest_table_add>
 800ef16:	66f8      	str	r0, [r7, #108]	; 0x6c

                    /* If the default router did not has a reachable ND_CACHE_ENTRY. Get the NDCacheEntry. */
                    /*lint -e{644} suppress variable might not be initialized, since "NDCacheEntry" was initialized in _nxd_ipv6_route_lookup. */
                    if ((status == NX_SUCCESS) && !NDCacheEntry)
 800ef18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d105      	bne.n	800ef2a <_nx_ipv6_packet_send+0x21c>
 800ef1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d102      	bne.n	800ef2a <_nx_ipv6_packet_send+0x21c>
                    {
                        NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 800ef24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef28:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }

                /* Destination table add failed. */
                if (status)
 800ef2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d018      	beq.n	800ef62 <_nx_ipv6_packet_send+0x254>
                {

                    /* Release the transmit packet. */
                    _nx_packet_transmit_release(packet_ptr);
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f001 fe3a 	bl	8010bac <_nx_packet_transmit_release>

                    /* Can't send it. */
                    return;
 800ef38:	e0fa      	b.n	800f130 <_nx_ipv6_packet_send+0x422>
            /* Find a valid destination cache, set the nd cache and next hop address. */
            else
            {

                /* Get the destination and next hop address. */
                NDCacheEntry = dest_entry_ptr -> nx_ipv6_destination_entry_nd_entry;
 800ef3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3e:	627b      	str	r3, [r7, #36]	; 0x24
                COPY_IPV6_ADDRESS(dest_entry_ptr -> nx_ipv6_destination_entry_next_hop, next_hop_address);
 800ef40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef42:	3314      	adds	r3, #20
 800ef44:	f107 0214 	add.w	r2, r7, #20
 800ef48:	4611      	mov	r1, r2
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f000 fc70 	bl	800f830 <COPY_IPV6_ADDRESS>
                NX_ASSERT(NDCacheEntry -> nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID);
 800ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef52:	7e5b      	ldrb	r3, [r3, #25]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d104      	bne.n	800ef62 <_nx_ipv6_packet_send+0x254>
 800ef58:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5c:	f009 ffb4 	bl	8018ec8 <_tx_thread_sleep>
 800ef60:	e7fa      	b.n	800ef58 <_nx_ipv6_packet_send+0x24a>
            }

            /* According RFC2461 ch 7.3.3, as long as the entry is valid and not in INCOMPLETE state,
               the IP layer should use the cached link layer address.  */
            if ((NDCacheEntry -> nx_nd_cache_nd_status >= ND_CACHE_STATE_REACHABLE) &&
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	7e5b      	ldrb	r3, [r3, #25]
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d92f      	bls.n	800efca <_nx_ipv6_packet_send+0x2bc>
                (NDCacheEntry -> nx_nd_cache_nd_status <= ND_CACHE_STATE_PROBE))
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	7e5b      	ldrb	r3, [r3, #25]
            if ((NDCacheEntry -> nx_nd_cache_nd_status >= ND_CACHE_STATE_REACHABLE) &&
 800ef6e:	2b05      	cmp	r3, #5
 800ef70:	d82b      	bhi.n	800efca <_nx_ipv6_packet_send+0x2bc>
            {

            UCHAR *mac_addr;

                mac_addr = NDCacheEntry -> nx_nd_cache_mac_addr;
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	3310      	adds	r3, #16
 800ef76:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Assume we find the mac */
                driver_request.nx_ip_driver_physical_address_msw = ((ULONG)mac_addr[0] << 8) | mac_addr[1];
 800ef78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	021b      	lsls	r3, r3, #8
 800ef7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef80:	3201      	adds	r2, #1
 800ef82:	7812      	ldrb	r2, [r2, #0]
 800ef84:	4313      	orrs	r3, r2
 800ef86:	63bb      	str	r3, [r7, #56]	; 0x38
                driver_request.nx_ip_driver_physical_address_lsw =
                    ((ULONG)mac_addr[2] << 24) | ((ULONG)mac_addr[3] << 16) | ((ULONG)mac_addr[4] << 8) | mac_addr[5];
 800ef88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef8a:	3302      	adds	r3, #2
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	061a      	lsls	r2, r3, #24
 800ef90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef92:	3303      	adds	r3, #3
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	041b      	lsls	r3, r3, #16
 800ef98:	431a      	orrs	r2, r3
 800ef9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef9c:	3304      	adds	r3, #4
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	021b      	lsls	r3, r3, #8
 800efa2:	4313      	orrs	r3, r2
 800efa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800efa6:	3205      	adds	r2, #5
 800efa8:	7812      	ldrb	r2, [r2, #0]
 800efaa:	4313      	orrs	r3, r2
                driver_request.nx_ip_driver_physical_address_lsw =
 800efac:	63fb      	str	r3, [r7, #60]	; 0x3c
                driver_request.nx_ip_driver_interface            = if_ptr;
 800efae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efb0:	64fb      	str	r3, [r7, #76]	; 0x4c
                }

#endif  /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

                /* If the entry is in STALE state, move it to DELAY state. */
                if (NDCacheEntry -> nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 800efb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb4:	7e5b      	ldrb	r3, [r3, #25]
 800efb6:	2b03      	cmp	r3, #3
 800efb8:	f040 8088 	bne.w	800f0cc <_nx_ipv6_packet_send+0x3be>
                {
                    NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_DELAY;
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	2204      	movs	r2, #4
 800efc0:	765a      	strb	r2, [r3, #25]

                    /* Start the Delay first probe timer */
                    NDCacheEntry -> nx_nd_cache_timer_tick = NX_DELAY_FIRST_PROBE_TIME;
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	2205      	movs	r2, #5
 800efc6:	61da      	str	r2, [r3, #28]
            {
 800efc8:	e080      	b.n	800f0cc <_nx_ipv6_packet_send+0x3be>

                /* No MAC address was found in our cache table.  Start the Neighbor Discovery (ND)
                   process to get it. */

                /* Ensure the current packet's queue next pointer to NULL */
                packet_ptr -> nx_packet_queue_next = NX_NULL;
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	2200      	movs	r2, #0
 800efce:	61da      	str	r2, [r3, #28]

                /* Determine if the queue is empty. */
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_head == NX_NULL)
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d144      	bne.n	800f062 <_nx_ipv6_packet_send+0x354>
                {
                    /* ICMPv6 is enabled */
                    if (ip_ptr -> nx_ip_icmpv6_packet_process)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d02c      	beq.n	800f03c <_nx_ipv6_packet_send+0x32e>
                    {

                        /* Queue up this packet */
                        NDCacheEntry -> nx_nd_cache_packet_waiting_head = packet_ptr;
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	629a      	str	r2, [r3, #40]	; 0x28
                        NDCacheEntry -> nx_nd_cache_packet_waiting_tail = packet_ptr;
 800efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	62da      	str	r2, [r3, #44]	; 0x2c
                        NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length = 1;
 800efee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff0:	2201      	movs	r2, #1
 800eff2:	769a      	strb	r2, [r3, #26]

                        /* Add debug information. */
                        NX_PACKET_DEBUG(NX_PACKET_ND_WAITING_QUEUE, __LINE__, packet_ptr);

                        /* Set the outgoing address and interface to the cache entry.  */
                        NDCacheEntry -> nx_nd_cache_outgoing_address = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 800eff4:	68ba      	ldr	r2, [r7, #8]
 800eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800effa:	631a      	str	r2, [r3, #48]	; 0x30
                        NDCacheEntry -> nx_nd_cache_interface_ptr = if_ptr;
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f000:	621a      	str	r2, [r3, #32]

                        /* Is this a new entry? */
                        if (NDCacheEntry -> nx_nd_cache_nd_status == ND_CACHE_STATE_CREATED)
 800f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f004:	7e5b      	ldrb	r3, [r3, #25]
 800f006:	2b06      	cmp	r3, #6
 800f008:	d102      	bne.n	800f010 <_nx_ipv6_packet_send+0x302>
                        {

                            /* Start Neighbor discovery process by advancing to the incomplete state. */
                            NDCacheEntry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INCOMPLETE;
 800f00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00c:	2201      	movs	r2, #1
 800f00e:	765a      	strb	r2, [r3, #25]
                        }

                        /* Note that the 2nd last parameter sendUnicast is set to Zero. In this case
                           the last arg NDCacheEntry is not being used in _nx_icmpv6_send_ns. */
                        _nx_icmpv6_send_ns(ip_ptr, next_hop_address,
                                           1, packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr, 0, NDCacheEntry);
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                        _nx_icmpv6_send_ns(ip_ptr, next_hop_address,
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	f107 0114 	add.w	r1, r7, #20
 800f01a:	9301      	str	r3, [sp, #4]
 800f01c:	2300      	movs	r3, #0
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	4613      	mov	r3, r2
 800f022:	2201      	movs	r2, #1
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f7fc fcaf 	bl	800b988 <_nx_icmpv6_send_ns>

                        NDCacheEntry -> nx_nd_cache_num_solicit = NX_MAX_MULTICAST_SOLICIT - 1;
 800f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02c:	2202      	movs	r2, #2
 800f02e:	761a      	strb	r2, [r3, #24]
                        NDCacheEntry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_retrans_timer_ticks;
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	68fa      	ldr	r2, [r7, #12]
 800f034:	f8d2 2ec4 	ldr.w	r2, [r2, #3780]	; 0xec4
 800f038:	61da      	str	r2, [r3, #28]

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
#endif
                    }
                    return;
 800f03a:	e079      	b.n	800f130 <_nx_ipv6_packet_send+0x422>
                        _nx_packet_transmit_release(packet_ptr);
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	4618      	mov	r0, r3
 800f040:	f001 fdb4 	bl	8010bac <_nx_packet_transmit_release>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 800f04a:	1c5a      	adds	r2, r3, #1
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800f058:	1c5a      	adds	r2, r3, #1
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
                    return;
 800f060:	e066      	b.n	800f130 <_nx_ipv6_packet_send+0x422>
                }

                /* The ND process already started.  Simply queue up this packet */
                NDCacheEntry -> nx_nd_cache_packet_waiting_tail -> nx_packet_queue_next = packet_ptr;
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f066:	68ba      	ldr	r2, [r7, #8]
 800f068:	61da      	str	r2, [r3, #28]
                NDCacheEntry -> nx_nd_cache_packet_waiting_tail = packet_ptr;
 800f06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	62da      	str	r2, [r3, #44]	; 0x2c
                NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length++;
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	7e9a      	ldrb	r2, [r3, #26]
 800f074:	3201      	adds	r2, #1
 800f076:	b2d2      	uxtb	r2, r2
 800f078:	769a      	strb	r2, [r3, #26]

                /* Add debug information. */
                NX_PACKET_DEBUG(NX_PACKET_ND_WAITING_QUEUE, __LINE__, packet_ptr);

                /* Check if the number of packets enqueued exceeds the allowed number. */
                if (NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length > NX_ND_MAX_QUEUE_DEPTH)
 800f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07c:	7e9b      	ldrb	r3, [r3, #26]
 800f07e:	2b04      	cmp	r3, #4
 800f080:	d955      	bls.n	800f12e <_nx_ipv6_packet_send+0x420>
                {

                    /* Yes, so delete the first packet. */
                    remove_packet = NDCacheEntry -> nx_nd_cache_packet_waiting_head;
 800f082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f086:	657b      	str	r3, [r7, #84]	; 0x54

                    NDCacheEntry -> nx_nd_cache_packet_waiting_head = remove_packet -> nx_packet_queue_next;
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f08c:	69d2      	ldr	r2, [r2, #28]
 800f08e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the queued packet count for this cache entry. */
                    NDCacheEntry -> nx_nd_cache_packet_waiting_queue_length--;
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	7e9a      	ldrb	r2, [r3, #26]
 800f094:	3a01      	subs	r2, #1
 800f096:	b2d2      	uxtb	r2, r2
 800f098:	769a      	strb	r2, [r3, #26]

                    _nx_packet_transmit_release(remove_packet);
 800f09a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f09c:	f001 fd86 	bl	8010bac <_nx_packet_transmit_release>
#ifndef NX_DISABLE_IP_INFO
                    /* Increment the IP transmit resource error count.  */
                    ip_ptr -> nx_ip_transmit_resource_errors++;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548

                    /* Increment the IP send packets dropped count.  */
                    ip_ptr -> nx_ip_send_packets_dropped++;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
 800f0b4:	1c5a      	adds	r2, r3, #1
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
#endif
                }

                return;
 800f0bc:	e037      	b.n	800f12e <_nx_ipv6_packet_send+0x420>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */
        /* Build the driver request.  */

        driver_request.nx_ip_driver_physical_address_msw = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	63bb      	str	r3, [r7, #56]	; 0x38
        driver_request.nx_ip_driver_physical_address_lsw = 0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        driver_request.nx_ip_driver_interface            = if_ptr;
 800f0c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0ca:	e000      	b.n	800f0ce <_nx_ipv6_packet_send+0x3c0>
            {
 800f0cc:	bf00      	nop
    }

    /* Does the packet payload exceed next hop MTU?  */
    if (packet_ptr -> nx_packet_length > next_hop_mtu)
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d206      	bcs.n	800f0e6 <_nx_ipv6_packet_send+0x3d8>
        if (fragment == NX_TRUE)
        {
#endif  /* NX_IPSEC_ENABLE */

            /* Yes; ok to fragment the packet payload. */
            _nx_ipv6_fragment_process(&driver_request, next_hop_mtu);
 800f0d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f0dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff f911 	bl	800e306 <_nx_ipv6_fragment_process>
        /* Just release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
#endif  /* NX_DISABLE_FRAGMENTATION */

        /* This packet send is complete, just return.  */
        return;
 800f0e4:	e024      	b.n	800f130 <_nx_ipv6_packet_send+0x422>
    /* The packet requires no fragmentation. Proceed with sending the packet. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP packet sent count.  */
    ip_ptr -> nx_ip_total_packets_sent++;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800f0ec:	1c5a      	adds	r2, r3, #1
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

    /* Increment the IP bytes sent count.  */
    ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV6_HEADER);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fe:	4413      	add	r3, r2
 800f100:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Driver entry must not be NULL. */
    NX_ASSERT(if_ptr -> nx_interface_link_driver_entry != NX_NULL);
 800f10a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d104      	bne.n	800f11c <_nx_ipv6_packet_send+0x40e>
 800f112:	f04f 30ff 	mov.w	r0, #4294967295
 800f116:	f009 fed7 	bl	8018ec8 <_tx_thread_sleep>
 800f11a:	e7fa      	b.n	800f112 <_nx_ipv6_packet_send+0x404>

    /* Send the IP packet out on the network via the attached driver.  */
    (if_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800f11c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f120:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f124:	4610      	mov	r0, r2
 800f126:	4798      	blx	r3
 800f128:	e002      	b.n	800f130 <_nx_ipv6_packet_send+0x422>
        return;
 800f12a:	bf00      	nop
 800f12c:	e000      	b.n	800f130 <_nx_ipv6_packet_send+0x422>
                return;
 800f12e:	bf00      	nop
}
 800f130:	3770      	adds	r7, #112	; 0x70
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <_nx_ipv6_prefix_list_add_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv6_prefix_list_add_entry(NX_IP *ip_ptr, ULONG *prefix,
                                     ULONG prefix_length, ULONG valid_lifetime)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b08a      	sub	sp, #40	; 0x28
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	60f8      	str	r0, [r7, #12]
 800f13e:	60b9      	str	r1, [r7, #8]
 800f140:	607a      	str	r2, [r7, #4]
 800f142:	603b      	str	r3, [r7, #0]
INT                   i;
ULONG                 invalid_mask;
NX_IPV6_PREFIX_ENTRY *new_entry;      /* Pointer to the new entry. */
NX_IPV6_PREFIX_ENTRY *current;        /* Pointer to the location where the
                                         new entry is gonig to be inserted before it. */
NX_IPV6_PREFIX_ENTRY *prev = NX_NULL; /* Pointer to the location where the
 800f144:	2300      	movs	r3, #0
 800f146:	617b      	str	r3, [r7, #20]
       Insert the entry based on the prefix_length.
       Maintain longest-match-first.
     */

    /* Start with the head of the list. */
    current = ip_ptr -> nx_ipv6_prefix_list_ptr;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8d3 3eb8 	ldr.w	r3, [r3, #3768]	; 0xeb8
 800f14e:	61bb      	str	r3, [r7, #24]

    /* Find where we should insert the new element. */
    while (current)
 800f150:	e02e      	b.n	800f1b0 <_nx_ipv6_prefix_list_add_entry+0x7a>
    {

        /* Search for the right location based on longest-prefix-match. */
        if (prefix_length > current -> nx_ipv6_prefix_entry_prefix_length)
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	691b      	ldr	r3, [r3, #16]
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d82d      	bhi.n	800f1b8 <_nx_ipv6_prefix_list_add_entry+0x82>
            break;
        }

        /* Check if the entry matches or not.  We start by checking the
           length of the prefix.  This is a quick test. */
        if (prefix_length == current -> nx_ipv6_prefix_entry_prefix_length)
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	429a      	cmp	r2, r3
 800f164:	d11f      	bne.n	800f1a6 <_nx_ipv6_prefix_list_add_entry+0x70>
        {

            /* If the prefix_length is the same, check whether these
               two prefixes are the same.  If they are the same, we
               don't need to create a new entry. */
            if (CHECK_IPV6_ADDRESSES_SAME(prefix, current -> nx_ipv6_prefix_entry_network_address))
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	4619      	mov	r1, r3
 800f16a:	68b8      	ldr	r0, [r7, #8]
 800f16c:	f000 fafb 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800f170:	4603      	mov	r3, r0
 800f172:	2b00      	cmp	r3, #0
 800f174:	d017      	beq.n	800f1a6 <_nx_ipv6_prefix_list_add_entry+0x70>
            {

                /* We have the same entry.  Just update the
                   valid_lifetime field, according to 5.5.3(e) in RFC 4862. */
                if ((valid_lifetime > 2 * 60 * 60) || /* if received lifetime is greater than 2 hours */
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800f17c:	d804      	bhi.n	800f188 <_nx_ipv6_prefix_list_add_entry+0x52>
                    (valid_lifetime > current -> nx_ipv6_prefix_entry_valid_lifetime))
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	695b      	ldr	r3, [r3, #20]
                if ((valid_lifetime > 2 * 60 * 60) || /* if received lifetime is greater than 2 hours */
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	429a      	cmp	r2, r3
 800f186:	d903      	bls.n	800f190 <_nx_ipv6_prefix_list_add_entry+0x5a>
                {

                    current -> nx_ipv6_prefix_entry_valid_lifetime = valid_lifetime;
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	615a      	str	r2, [r3, #20]
 800f18e:	e008      	b.n	800f1a2 <_nx_ipv6_prefix_list_add_entry+0x6c>
                }
                else if (current -> nx_ipv6_prefix_entry_valid_lifetime <= 2 * 60 * 60)
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800f198:	d903      	bls.n	800f1a2 <_nx_ipv6_prefix_list_add_entry+0x6c>

                    /* Do nothing. */
                }
                else
                {
                    current -> nx_ipv6_prefix_entry_valid_lifetime = 2 * 60 * 60;
 800f19a:	69bb      	ldr	r3, [r7, #24]
 800f19c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800f1a0:	615a      	str	r2, [r3, #20]
                }

                /* The entry is already in the table and is still valid.
                   No need to update.  Just return it.*/

                return(NX_DUPLICATED_ENTRY);
 800f1a2:	2352      	movs	r3, #82	; 0x52
 800f1a4:	e072      	b.n	800f28c <_nx_ipv6_prefix_list_add_entry+0x156>
            }
        }

        /* Move to next entry. */
        prev = current;
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	617b      	str	r3, [r7, #20]
        current = current -> nx_ipv6_prefix_entry_next;
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	61bb      	str	r3, [r7, #24]
    while (current)
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1cd      	bne.n	800f152 <_nx_ipv6_prefix_list_add_entry+0x1c>
 800f1b6:	e000      	b.n	800f1ba <_nx_ipv6_prefix_list_add_entry+0x84>
            break;
 800f1b8:	bf00      	nop
    /* We fall into this case if prefix length is greater than
       the prefix length of the current entry.  So we
       need to insert it in front of it. */

    /* Make sure the list is not full. */
    if (ip_ptr -> nx_ipv6_prefix_entry_free_list == NX_NULL)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f8d3 3ebc 	ldr.w	r3, [r3, #3772]	; 0xebc
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <_nx_ipv6_prefix_list_add_entry+0x92>
    {
        return(NX_OVERFLOW);
 800f1c4:	2303      	movs	r3, #3
 800f1c6:	e061      	b.n	800f28c <_nx_ipv6_prefix_list_add_entry+0x156>
    }

    /* Get a new entry from the free list. */
    new_entry = ip_ptr -> nx_ipv6_prefix_entry_free_list;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f8d3 3ebc 	ldr.w	r3, [r3, #3772]	; 0xebc
 800f1ce:	613b      	str	r3, [r7, #16]

    /* Move free list to the next element. */
    ip_ptr -> nx_ipv6_prefix_entry_free_list = new_entry -> nx_ipv6_prefix_entry_next;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	69da      	ldr	r2, [r3, #28]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8c3 2ebc 	str.w	r2, [r3, #3772]	; 0xebc

    if (ip_ptr -> nx_ipv6_prefix_entry_free_list)
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f8d3 3ebc 	ldr.w	r3, [r3, #3772]	; 0xebc
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d004      	beq.n	800f1ee <_nx_ipv6_prefix_list_add_entry+0xb8>
    {
        ip_ptr -> nx_ipv6_prefix_entry_free_list -> nx_ipv6_prefix_entry_prev = NX_NULL;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f8d3 3ebc 	ldr.w	r3, [r3, #3772]	; 0xebc
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	619a      	str	r2, [r3, #24]
    }

    /* Fill information into the new entry */
    COPY_IPV6_ADDRESS(prefix, new_entry -> nx_ipv6_prefix_entry_network_address);
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	68b8      	ldr	r0, [r7, #8]
 800f1f4:	f000 fb1c 	bl	800f830 <COPY_IPV6_ADDRESS>
    new_entry -> nx_ipv6_prefix_entry_prefix_length = prefix_length;
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	611a      	str	r2, [r3, #16]
    new_entry -> nx_ipv6_prefix_entry_valid_lifetime = valid_lifetime;
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	615a      	str	r2, [r3, #20]

    /* Zero out the bits in the prefix after the prefix length */
    invalid_bits = (INT)(128 - prefix_length);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800f20a:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 3; i >= 0; i--)
 800f20c:	2303      	movs	r3, #3
 800f20e:	623b      	str	r3, [r7, #32]
 800f210:	e01f      	b.n	800f252 <_nx_ipv6_prefix_list_add_entry+0x11c>
    {

        if (invalid_bits <= 0)
 800f212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f214:	2b00      	cmp	r3, #0
 800f216:	dd20      	ble.n	800f25a <_nx_ipv6_prefix_list_add_entry+0x124>
        {
            break;
        }
        if (invalid_bits < 32)
 800f218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21a:	2b1f      	cmp	r3, #31
 800f21c:	dc06      	bgt.n	800f22c <_nx_ipv6_prefix_list_add_entry+0xf6>
        {
            invalid_mask = (ULONG)(~(((ULONG)1 << invalid_bits) - 1));
 800f21e:	2201      	movs	r2, #1
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f222:	fa02 f303 	lsl.w	r3, r2, r3
 800f226:	425b      	negs	r3, r3
 800f228:	61fb      	str	r3, [r7, #28]
 800f22a:	e001      	b.n	800f230 <_nx_ipv6_prefix_list_add_entry+0xfa>
        }
        else
        {
            invalid_mask = 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	61fb      	str	r3, [r7, #28]
        }

        new_entry -> nx_ipv6_prefix_entry_network_address[i] &= invalid_mask;
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	6a3a      	ldr	r2, [r7, #32]
 800f234:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	ea02 0103 	and.w	r1, r2, r3
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	6a3a      	ldr	r2, [r7, #32]
 800f242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        invalid_bits -= 32;
 800f246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f248:	3b20      	subs	r3, #32
 800f24a:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 3; i >= 0; i--)
 800f24c:	6a3b      	ldr	r3, [r7, #32]
 800f24e:	3b01      	subs	r3, #1
 800f250:	623b      	str	r3, [r7, #32]
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	2b00      	cmp	r3, #0
 800f256:	dadc      	bge.n	800f212 <_nx_ipv6_prefix_list_add_entry+0xdc>
 800f258:	e000      	b.n	800f25c <_nx_ipv6_prefix_list_add_entry+0x126>
            break;
 800f25a:	bf00      	nop
    }

    /* Insert the new entry between prev and current. */
    new_entry -> nx_ipv6_prefix_entry_prev = prev;
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	619a      	str	r2, [r3, #24]
    new_entry -> nx_ipv6_prefix_entry_next = current;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	69ba      	ldr	r2, [r7, #24]
 800f266:	61da      	str	r2, [r3, #28]
    if (current)
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d002      	beq.n	800f274 <_nx_ipv6_prefix_list_add_entry+0x13e>
    {
        current -> nx_ipv6_prefix_entry_prev = new_entry;
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	693a      	ldr	r2, [r7, #16]
 800f272:	619a      	str	r2, [r3, #24]
    }
    if (prev)
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d003      	beq.n	800f282 <_nx_ipv6_prefix_list_add_entry+0x14c>
    {
        prev -> nx_ipv6_prefix_entry_next = new_entry;
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	693a      	ldr	r2, [r7, #16]
 800f27e:	61da      	str	r2, [r3, #28]
 800f280:	e003      	b.n	800f28a <_nx_ipv6_prefix_list_add_entry+0x154>
    }
    else
    {
        ip_ptr -> nx_ipv6_prefix_list_ptr = new_entry;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	693a      	ldr	r2, [r7, #16]
 800f286:	f8c3 2eb8 	str.w	r2, [r3, #3768]	; 0xeb8
    }

    /* All done. */
    return(NX_SUCCESS);
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3728      	adds	r7, #40	; 0x28
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <_nx_ipv6_prefix_list_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_prefix_list_delete(NX_IP *ip_ptr, ULONG *prefix, INT prefix_length)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]

NX_IPV6_PREFIX_ENTRY *current;


    /* Quick reference to the head of the prefix list. */
    current = ip_ptr -> nx_ipv6_prefix_list_ptr;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8d3 3eb8 	ldr.w	r3, [r3, #3768]	; 0xeb8
 800f2a6:	617b      	str	r3, [r7, #20]

    /* Go through all the entries. */
    while (current)
 800f2a8:	e014      	b.n	800f2d4 <_nx_ipv6_prefix_list_delete+0x40>
    {

        /* If prefix length matches, and the prefix addresses also match...*/
        if ((current -> nx_ipv6_prefix_entry_prefix_length == (ULONG)prefix_length) &&
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	691a      	ldr	r2, [r3, #16]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d10c      	bne.n	800f2ce <_nx_ipv6_prefix_list_delete+0x3a>
            CHECK_IPV6_ADDRESSES_SAME(prefix, current -> nx_ipv6_prefix_entry_network_address))
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	68b8      	ldr	r0, [r7, #8]
 800f2ba:	f000 fa54 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800f2be:	4603      	mov	r3, r0
        if ((current -> nx_ipv6_prefix_entry_prefix_length == (ULONG)prefix_length) &&
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d004      	beq.n	800f2ce <_nx_ipv6_prefix_list_delete+0x3a>
        {

            /* Delete this entry. */
            _nx_ipv6_prefix_list_delete_entry(ip_ptr, current);
 800f2c4:	6979      	ldr	r1, [r7, #20]
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f000 f80b 	bl	800f2e2 <_nx_ipv6_prefix_list_delete_entry>

            /* All done. return */
            return;
 800f2cc:	e006      	b.n	800f2dc <_nx_ipv6_prefix_list_delete+0x48>
        }
        /* Move to the next entry. */
        current = current -> nx_ipv6_prefix_entry_next;
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	69db      	ldr	r3, [r3, #28]
 800f2d2:	617b      	str	r3, [r7, #20]
    while (current)
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1e7      	bne.n	800f2aa <_nx_ipv6_prefix_list_delete+0x16>
    }

    /* No match was found. */
    return;
 800f2da:	bf00      	nop
}
 800f2dc:	3718      	adds	r7, #24
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <_nx_ipv6_prefix_list_delete_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_prefix_list_delete_entry(NX_IP *ip_ptr, NX_IPV6_PREFIX_ENTRY *entry)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b08e      	sub	sp, #56	; 0x38
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	6039      	str	r1, [r7, #0]

    /* Invalidate the interface IP address if we obtained the
       interface IP address based on the prefix information. */

    /* Search through each physical interface for a match. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f2f0:	e069      	b.n	800f3c6 <_nx_ipv6_prefix_list_delete_entry+0xe4>
    {

        /* Get a pointer to the first address in the interface list. */
        interface_ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f6:	214c      	movs	r1, #76	; 0x4c
 800f2f8:	fb01 f303 	mul.w	r3, r1, r3
 800f2fc:	4413      	add	r3, r2
 800f2fe:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	62fb      	str	r3, [r7, #44]	; 0x2c
        interface_ipv6_address_prev = NX_NULL;
 800f306:	2300      	movs	r3, #0
 800f308:	633b      	str	r3, [r7, #48]	; 0x30

        /* Search the address list for a match. */
        while (interface_ipv6_address)
 800f30a:	e056      	b.n	800f3ba <_nx_ipv6_prefix_list_delete_entry+0xd8>
        {

            /* Is this interface address valid? */
            if (interface_ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_UNKNOWN &&
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	789b      	ldrb	r3, [r3, #2]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d04d      	beq.n	800f3b0 <_nx_ipv6_prefix_list_delete_entry+0xce>
                interface_ipv6_address -> nxd_ipv6_address_ConfigurationMethod == NX_IPV6_ADDRESS_BASED_ON_INTERFACE)
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	7f5b      	ldrb	r3, [r3, #29]
            if (interface_ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_UNKNOWN &&
 800f318:	2b04      	cmp	r3, #4
 800f31a:	d149      	bne.n	800f3b0 <_nx_ipv6_prefix_list_delete_entry+0xce>
            {

                /* Yes.  Extract the prefix to match on. The prefix length is 64 bits. */
                address_prefix[0] = interface_ipv6_address -> nxd_ipv6_address[0];
 800f31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	61fb      	str	r3, [r7, #28]
                address_prefix[1] = interface_ipv6_address -> nxd_ipv6_address[1];
 800f322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	623b      	str	r3, [r7, #32]
                address_prefix[2] = 0;
 800f328:	2300      	movs	r3, #0
 800f32a:	627b      	str	r3, [r7, #36]	; 0x24
                address_prefix[3] = 0;
 800f32c:	2300      	movs	r3, #0
 800f32e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Do we have a match?  */
                if (CHECK_IPV6_ADDRESSES_SAME(address_prefix, entry -> nx_ipv6_prefix_entry_network_address))
 800f330:	683a      	ldr	r2, [r7, #0]
 800f332:	f107 031c 	add.w	r3, r7, #28
 800f336:	4611      	mov	r1, r2
 800f338:	4618      	mov	r0, r3
 800f33a:	f000 fa14 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d035      	beq.n	800f3b0 <_nx_ipv6_prefix_list_delete_entry+0xce>
                {

                    /* Yes, invalidate this address.  */
                    interface_ipv6_address -> nxd_ipv6_address_valid = NX_FALSE;
 800f344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f346:	2200      	movs	r2, #0
 800f348:	701a      	strb	r2, [r3, #0]
                    interface_ipv6_address -> nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_UNKNOWN;
 800f34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34c:	2200      	movs	r2, #0
 800f34e:	709a      	strb	r2, [r3, #2]

                    interface_ipv6_address -> nxd_ipv6_address_ConfigurationMethod = NX_IPV6_ADDRESS_NOT_CONFIGURED;
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	2200      	movs	r2, #0
 800f354:	775a      	strb	r2, [r3, #29]

#ifndef NX_DISABLE_IPV6_DAD
                    interface_ipv6_address -> nxd_ipv6_address_DupAddrDetectTransmit = 0;
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	2200      	movs	r2, #0
 800f35a:	771a      	strb	r2, [r3, #28]
#endif /* NX_DISABLE_IPV6_DAD */

                    /* Update the list. */
                    if (interface_ipv6_address_prev == NX_NULL)
 800f35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10b      	bne.n	800f37a <_nx_ipv6_prefix_list_delete_entry+0x98>
                    {
                        ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head = interface_ipv6_address -> nxd_ipv6_address_next;
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	699a      	ldr	r2, [r3, #24]
 800f366:	6879      	ldr	r1, [r7, #4]
 800f368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36a:	204c      	movs	r0, #76	; 0x4c
 800f36c:	fb00 f303 	mul.w	r3, r0, r3
 800f370:	440b      	add	r3, r1
 800f372:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 800f376:	601a      	str	r2, [r3, #0]
 800f378:	e003      	b.n	800f382 <_nx_ipv6_prefix_list_delete_entry+0xa0>
                    }
                    else
                    {
                        interface_ipv6_address_prev -> nxd_ipv6_address_next = interface_ipv6_address -> nxd_ipv6_address_next;
 800f37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37c:	699a      	ldr	r2, [r3, #24]
 800f37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f380:	619a      	str	r2, [r3, #24]
                    }

                    /* Delete the associated multicast address. */
                    SET_SOLICITED_NODE_MULTICAST_ADDRESS(multicast_address, interface_ipv6_address -> nxd_ipv6_address);
 800f382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f384:	f103 0208 	add.w	r2, r3, #8
 800f388:	f107 030c 	add.w	r3, r7, #12
 800f38c:	4611      	mov	r1, r2
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 fa6c 	bl	800f86c <SET_SOLICITED_NODE_MULTICAST_ADDRESS>

                    _nx_ipv6_multicast_leave(ip_ptr, &multicast_address[0], interface_ipv6_address -> nxd_ipv6_address_attached);
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	685a      	ldr	r2, [r3, #4]
 800f398:	f107 030c 	add.w	r3, r7, #12
 800f39c:	4619      	mov	r1, r3
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7ff fa33 	bl	800e80a <_nx_ipv6_multicast_leave>
                                                                &interface_ipv6_address -> nxd_ipv6_address[0]);
                    }
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */

                    /* Clear the address at last. */
                    SET_UNSPECIFIED_ADDRESS(interface_ipv6_address -> nxd_ipv6_address);
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	3308      	adds	r3, #8
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 fa28 	bl	800f7fe <SET_UNSPECIFIED_ADDRESS>

                    /* Address for this interface is found. Just break. */
                    break;
 800f3ae:	e007      	b.n	800f3c0 <_nx_ipv6_prefix_list_delete_entry+0xde>
                }
            }

            /* Set the previous address. */
            interface_ipv6_address_prev = interface_ipv6_address;
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Get the next address. */
            interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 800f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b6:	699b      	ldr	r3, [r3, #24]
 800f3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (interface_ipv6_address)
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d1a5      	bne.n	800f30c <_nx_ipv6_prefix_list_delete_entry+0x2a>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800f3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	637b      	str	r3, [r7, #52]	; 0x34
 800f3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d092      	beq.n	800f2f2 <_nx_ipv6_prefix_list_delete_entry+0x10>
        } /* while (interface_ipv6_address) */
    } /* for(i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++) */

    /* Unlink the previous node, if it exists. */
    if (entry -> nx_ipv6_prefix_entry_prev == NX_NULL)
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	699b      	ldr	r3, [r3, #24]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d105      	bne.n	800f3e0 <_nx_ipv6_prefix_list_delete_entry+0xfe>
    {
        ip_ptr -> nx_ipv6_prefix_list_ptr = entry -> nx_ipv6_prefix_entry_next;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	69da      	ldr	r2, [r3, #28]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8c3 2eb8 	str.w	r2, [r3, #3768]	; 0xeb8
 800f3de:	e004      	b.n	800f3ea <_nx_ipv6_prefix_list_delete_entry+0x108>
    }
    else
    {
        entry -> nx_ipv6_prefix_entry_prev -> nx_ipv6_prefix_entry_next = entry -> nx_ipv6_prefix_entry_next;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	699b      	ldr	r3, [r3, #24]
 800f3e4:	683a      	ldr	r2, [r7, #0]
 800f3e6:	69d2      	ldr	r2, [r2, #28]
 800f3e8:	61da      	str	r2, [r3, #28]
    }

    /* Unlink the next node if it exists. */
    if (entry -> nx_ipv6_prefix_entry_next)
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	69db      	ldr	r3, [r3, #28]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d004      	beq.n	800f3fc <_nx_ipv6_prefix_list_delete_entry+0x11a>
    {
        entry -> nx_ipv6_prefix_entry_next -> nx_ipv6_prefix_entry_prev = entry -> nx_ipv6_prefix_entry_prev;
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	69db      	ldr	r3, [r3, #28]
 800f3f6:	683a      	ldr	r2, [r7, #0]
 800f3f8:	6992      	ldr	r2, [r2, #24]
 800f3fa:	619a      	str	r2, [r3, #24]
    }

    /* Clean up this entry. */
    entry -> nx_ipv6_prefix_entry_next = NX_NULL;
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2200      	movs	r2, #0
 800f400:	61da      	str	r2, [r3, #28]
    entry -> nx_ipv6_prefix_entry_prev = NX_NULL;
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	2200      	movs	r2, #0
 800f406:	619a      	str	r2, [r3, #24]

    /* Put entry onto the free list.*/
    if (ip_ptr -> nx_ipv6_prefix_entry_free_list == NX_NULL)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 3ebc 	ldr.w	r3, [r3, #3772]	; 0xebc
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d104      	bne.n	800f41c <_nx_ipv6_prefix_list_delete_entry+0x13a>
    {
        /* Free list is empty.  Set entry to be the first on the list. */
        ip_ptr -> nx_ipv6_prefix_entry_free_list = entry;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	683a      	ldr	r2, [r7, #0]
 800f416:	f8c3 2ebc 	str.w	r2, [r3, #3772]	; 0xebc
        entry -> nx_ipv6_prefix_entry_next = ip_ptr -> nx_ipv6_prefix_entry_free_list;
        ip_ptr -> nx_ipv6_prefix_entry_free_list = entry;
    }

    /* All done. Return. */
    return;
 800f41a:	e00e      	b.n	800f43a <_nx_ipv6_prefix_list_delete_entry+0x158>
        ip_ptr -> nx_ipv6_prefix_entry_free_list -> nx_ipv6_prefix_entry_prev = entry;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 3ebc 	ldr.w	r3, [r3, #3772]	; 0xebc
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	619a      	str	r2, [r3, #24]
        entry -> nx_ipv6_prefix_entry_next = ip_ptr -> nx_ipv6_prefix_entry_free_list;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8d3 2ebc 	ldr.w	r2, [r3, #3772]	; 0xebc
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ipv6_prefix_entry_free_list = entry;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	683a      	ldr	r2, [r7, #0]
 800f434:	f8c3 2ebc 	str.w	r2, [r3, #3772]	; 0xebc
    return;
 800f438:	bf00      	nop
}
 800f43a:	3738      	adds	r7, #56	; 0x38
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <_nx_ipv6_process_fragment_option>:
/*                                            packet length verification, */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_process_fragment_option(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08a      	sub	sp, #40	; 0x28
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP receive fragments count */
    ip_ptr -> nx_ip_total_fragments_received++;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 800f450:	1c5a      	adds	r2, r3, #1
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c

#endif /* NX_DISABLE_IP_INFO */

    /* If fragmentation is not enabled, we drop this packet. */
    if (!ip_ptr -> nx_ip_fragment_assembly)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 37a0 	ldr.w	r3, [r3, #1952]	; 0x7a0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d101      	bne.n	800f466 <_nx_ipv6_process_fragment_option+0x26>
    {
        return(NX_OPTION_HEADER_ERROR);
 800f462:	2354      	movs	r3, #84	; 0x54
 800f464:	e090      	b.n	800f588 <_nx_ipv6_process_fragment_option+0x148>
    }

    /* Check packet length is at least sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION). */
    if (packet_ptr -> nx_packet_length < sizeof(NX_IPV6_HEADER_FRAGMENT_OPTION))
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f46a:	2b07      	cmp	r3, #7
 800f46c:	d801      	bhi.n	800f472 <_nx_ipv6_process_fragment_option+0x32>
    {
        return(NX_OPTION_HEADER_ERROR);
 800f46e:	2354      	movs	r3, #84	; 0x54
 800f470:	e08a      	b.n	800f588 <_nx_ipv6_process_fragment_option+0x148>
    }

    /* Set a pointer to the starting of the fragment option. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    fragment_option = (NX_IPV6_HEADER_FRAGMENT_OPTION *)packet_ptr -> nx_packet_prepend_ptr;
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	689b      	ldr	r3, [r3, #8]
 800f476:	627b      	str	r3, [r7, #36]	; 0x24

    /* Byte swap the offset_flag.  The identification field is only used for checking matches.
       The absolute value of the Id is not used in arithmatic operations.  Therefore there is
       need to byte-swap this field. */
    NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 800f478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47a:	885b      	ldrh	r3, [r3, #2]
 800f47c:	ba5b      	rev16	r3, r3
 800f47e:	b29a      	uxth	r2, r3
 800f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f482:	805a      	strh	r2, [r3, #2]

    /* Check whether or not the payload size is not multiple of 8 bytes if the
       M bit is set. */
    if (fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0x0001) /* M bit is set */
 800f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f486:	885b      	ldrh	r3, [r3, #2]
 800f488:	f003 0301 	and.w	r3, r3, #1
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d01c      	beq.n	800f4ca <_nx_ipv6_process_fragment_option+0x8a>

    NX_IPV6_HEADER *ip_header;
    ULONG           payload_length;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f494:	623b      	str	r3, [r7, #32]

        payload_length = ip_header -> nx_ip_header_word_1 >> 16;
 800f496:	6a3b      	ldr	r3, [r7, #32]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	0c1b      	lsrs	r3, r3, #16
 800f49c:	61fb      	str	r3, [r7, #28]

        /* If not multiple of 8 bytes... */
        if ((payload_length & 0xFFF8) != payload_length)
 800f49e:	69fa      	ldr	r2, [r7, #28]
 800f4a0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800f4a4:	4013      	ands	r3, r2
 800f4a6:	69fa      	ldr	r2, [r7, #28]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d018      	beq.n	800f4de <_nx_ipv6_process_fragment_option+0x9e>
            /* Return the option header error status and abort. */

#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE

            /* Cover offset flag field. */
            NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	885b      	ldrh	r3, [r3, #2]
 800f4b0:	ba5b      	rev16	r3, r3
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	805a      	strh	r2, [r3, #2]

            /*lint -e{835} -e{845} suppress operating on zero. */
            NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, 4);
 800f4b8:	2304      	movs	r3, #4
 800f4ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7fc f950 	bl	800b766 <_nx_icmpv6_send_error_message>
#endif
            return(NX_OPTION_HEADER_ERROR);
 800f4c6:	2354      	movs	r3, #84	; 0x54
 800f4c8:	e05e      	b.n	800f588 <_nx_ipv6_process_fragment_option+0x148>
        }
    }
    /* M bit is clear: This is the last (tail) packet fragment. */
    else if ((fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0xFFF8) == 0)
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	885b      	ldrh	r3, [r3, #2]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d101      	bne.n	800f4de <_nx_ipv6_process_fragment_option+0x9e>
    {

        /* Continue processing. */
        return(NX_CONTINUE);
 800f4da:	2355      	movs	r3, #85	; 0x55
 800f4dc:	e054      	b.n	800f588 <_nx_ipv6_process_fragment_option+0x148>
    }

    /* Payload size cannot exceeding 65535. */
    if (((fragment_option -> nx_ipv6_header_fragment_option_offset_flag & 0xFFF8) + packet_ptr -> nx_packet_length -
 800f4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e0:	885b      	ldrh	r3, [r3, #2]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800f4e8:	4013      	ands	r3, r2
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f4ee:	4413      	add	r3, r2
 800f4f0:	3b08      	subs	r3, #8
 800f4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4f6:	d313      	bcc.n	800f520 <_nx_ipv6_process_fragment_option+0xe0>
    {

#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE

        /* Cover offset flag field. */
        NX_CHANGE_USHORT_ENDIAN(fragment_option -> nx_ipv6_header_fragment_option_offset_flag);
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	885b      	ldrh	r3, [r3, #2]
 800f4fc:	ba5b      	rev16	r3, r3
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	805a      	strh	r2, [r3, #2]

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        /*lint -e{835} -e{845} suppress operating on zero. */
        NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0,
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	689a      	ldr	r2, [r3, #8]
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f50c:	1ad3      	subs	r3, r2, r3
 800f50e:	3302      	adds	r3, #2
 800f510:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f514:	6839      	ldr	r1, [r7, #0]
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7fc f925 	bl	800b766 <_nx_icmpv6_send_error_message>
                                         (ULONG)((packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header) + 2));
#endif /* NX_DISABLE_ICMPV6_ERROR_MESSAGE */

        /* Return an Option header error status. */
        return(NX_OPTION_HEADER_ERROR);
 800f51c:	2354      	movs	r3, #84	; 0x54
 800f51e:	e033      	b.n	800f588 <_nx_ipv6_process_fragment_option+0x148>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f520:	f3ef 8310 	mrs	r3, PRIMASK
 800f524:	617b      	str	r3, [r7, #20]
    return(posture);
 800f526:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f528:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f52a:	b672      	cpsid	i
    return(int_posture);
 800f52c:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupt */
    TX_DISABLE
 800f52e:	61bb      	str	r3, [r7, #24]

    /* In IPv6 IP fragmentation is required. */

    /* Determine if the queue is empty.  */
    if (ip_ptr -> nx_ip_received_fragment_head)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 37ac 	ldr.w	r3, [r3, #1964]	; 0x7ac
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00c      	beq.n	800f554 <_nx_ipv6_process_fragment_option+0x114>
    {

        /* Raw receive queue is not empty, add this packet to the end of the queue.  */
        (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 37b0 	ldr.w	r3, [r3, #1968]	; 0x7b0
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2200      	movs	r2, #0
 800f548:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
 800f552:	e00a      	b.n	800f56a <_nx_ipv6_process_fragment_option+0x12a>
    else
    {

        /* Raw receive queue is empty.  Just set the head and tail pointers
           to point to this packet.  */
        ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	683a      	ldr	r2, [r7, #0]
 800f558:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac
        ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	683a      	ldr	r2, [r7, #0]
 800f560:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
        packet_ptr -> nx_packet_queue_next     =  NX_NULL;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	2200      	movs	r2, #0
 800f568:	61da      	str	r2, [r3, #28]
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f383 8810 	msr	PRIMASK, r3
}
 800f574:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
    /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 800f57c:	2200      	movs	r2, #0
 800f57e:	2102      	movs	r1, #2
 800f580:	4618      	mov	r0, r3
 800f582:	f008 fa5b 	bl	8017a3c <_tx_event_flags_set>
#else
    /* Process the IP fragment reassemble.  */
    (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
#endif /* NX_FRAGMENT_IMMEDIATE_ASSEMBLY */

    return(NX_SUCCESS);
 800f586:	2300      	movs	r3, #0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3728      	adds	r7, #40	; 0x28
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <_nx_ipv6_process_hop_by_hop_option>:
/*                                            buffer read overflow check, */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_process_hop_by_hop_option(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b088      	sub	sp, #32
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /*  Make sure there's no OOB when reading Hdr Ext Len from the packet buffer. */
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) < 2)
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	68da      	ldr	r2, [r3, #12]
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	1ad3      	subs	r3, r2, r3
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d801      	bhi.n	800f5ac <_nx_ipv6_process_hop_by_hop_option+0x1c>
    {

        /* return an error code. */
        return(NX_OPTION_HEADER_ERROR);
 800f5a8:	2354      	movs	r3, #84	; 0x54
 800f5aa:	e074      	b.n	800f696 <_nx_ipv6_process_hop_by_hop_option+0x106>
    }

    /* Read the Hdr Ext Len field. */
    header_length = *(packet_ptr -> nx_packet_prepend_ptr + 1);
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	61fb      	str	r3, [r7, #28]

    /* Calculate the the true header length: (n + 1) * 8 */
    header_length = (header_length + 1) << 3;
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	61fb      	str	r3, [r7, #28]

    /* The 1st option starts from the 3rd byte. */
    offset = 2;
 800f5be:	2302      	movs	r3, #2
 800f5c0:	61bb      	str	r3, [r7, #24]

    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    /*lint -e{737} suppress loss of sign, since nx_packet_append_ptr is assumed to be larger than nx_packet_ip_header. */
    offset_base = (UINT)((ULONG)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header) - (ULONG)sizeof(NX_IPV6_HEADER));
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	689a      	ldr	r2, [r3, #8]
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ca:	1ad3      	subs	r3, r2, r3
 800f5cc:	3b28      	subs	r3, #40	; 0x28
 800f5ce:	617b      	str	r3, [r7, #20]
    header_length = header_length - (INT)offset;
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	69fa      	ldr	r2, [r7, #28]
 800f5d4:	1ad3      	subs	r3, r2, r3
 800f5d6:	61fb      	str	r3, [r7, #28]

    /* Sanity check; does the header length data go past the end of the end of the packet buffer? */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) <
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	68da      	ldr	r2, [r3, #12]
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	4619      	mov	r1, r3
        ((UINT)header_length + offset))
 800f5e4:	69fa      	ldr	r2, [r7, #28]
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	4413      	add	r3, r2
    if ((UINT)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr) <
 800f5ea:	4299      	cmp	r1, r3
 800f5ec:	d24f      	bcs.n	800f68e <_nx_ipv6_process_hop_by_hop_option+0xfe>
    {

        /* Yes, handle the error as indicated by the option type 2 msb's. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        option = (NX_IPV6_HOP_BY_HOP_OPTION *)(packet_ptr -> nx_packet_prepend_ptr + offset);
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	689a      	ldr	r2, [r3, #8]
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	613b      	str	r3, [r7, #16]

        _nx_ipv6_option_error(ip_ptr, packet_ptr, option -> nx_ipv6_hop_by_hop_option_type, offset_base + offset);
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	7819      	ldrb	r1, [r3, #0]
 800f5fc:	697a      	ldr	r2, [r7, #20]
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	4413      	add	r3, r2
 800f602:	460a      	mov	r2, r1
 800f604:	6839      	ldr	r1, [r7, #0]
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7ff f92a 	bl	800e860 <_nx_ipv6_option_error>
        return(NX_OPTION_HEADER_ERROR);
 800f60c:	2354      	movs	r3, #84	; 0x54
 800f60e:	e042      	b.n	800f696 <_nx_ipv6_process_hop_by_hop_option+0x106>
    while (header_length > 0)
    {

        /* Get a pointer to the options. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        option = (NX_IPV6_HOP_BY_HOP_OPTION *)(packet_ptr -> nx_packet_prepend_ptr + offset);
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	689a      	ldr	r2, [r3, #8]
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	4413      	add	r3, r2
 800f618:	613b      	str	r3, [r7, #16]

        switch (option -> nx_ipv6_hop_by_hop_option_type)
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d002      	beq.n	800f628 <_nx_ipv6_process_hop_by_hop_option+0x98>
 800f622:	2b01      	cmp	r3, #1
 800f624:	d007      	beq.n	800f636 <_nx_ipv6_process_hop_by_hop_option+0xa6>
 800f626:	e014      	b.n	800f652 <_nx_ipv6_process_hop_by_hop_option+0xc2>

        case 0:

            /* Pad1 option.  This option indicates the size of the padding is one.
               So we skip one byte. */
            offset++;
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	3301      	adds	r3, #1
 800f62c:	61bb      	str	r3, [r7, #24]
            header_length--;
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	3b01      	subs	r3, #1
 800f632:	61fb      	str	r3, [r7, #28]
            break;
 800f634:	e02b      	b.n	800f68e <_nx_ipv6_process_hop_by_hop_option+0xfe>

        case 1:

            /* PadN option. Skip N+2 bytes. */
            offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	785b      	ldrb	r3, [r3, #1]
 800f63a:	461a      	mov	r2, r3
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	4413      	add	r3, r2
 800f640:	3302      	adds	r3, #2
 800f642:	61bb      	str	r3, [r7, #24]
            header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	785b      	ldrb	r3, [r3, #1]
 800f648:	3302      	adds	r3, #2
 800f64a:	69fa      	ldr	r2, [r7, #28]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	61fb      	str	r3, [r7, #28]
            break;
 800f650:	e01d      	b.n	800f68e <_nx_ipv6_process_hop_by_hop_option+0xfe>
#endif /* NX_ENABLE_THREAD  */

        default:

            /* Unknown option.  */
            rv = _nx_ipv6_option_error(ip_ptr, packet_ptr, option -> nx_ipv6_hop_by_hop_option_type, offset_base + offset);
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	7819      	ldrb	r1, [r3, #0]
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	4413      	add	r3, r2
 800f65c:	460a      	mov	r2, r1
 800f65e:	6839      	ldr	r1, [r7, #0]
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7ff f8fd 	bl	800e860 <_nx_ipv6_option_error>
 800f666:	60f8      	str	r0, [r7, #12]

            /* If no errors, just skip this option and move onto the next option.*/
            if (rv == NX_SUCCESS)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10d      	bne.n	800f68a <_nx_ipv6_process_hop_by_hop_option+0xfa>
            {

                /* Skip this option and continue processing the rest of the header. */
                offset += ((UINT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	785b      	ldrb	r3, [r3, #1]
 800f672:	461a      	mov	r2, r3
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	4413      	add	r3, r2
 800f678:	3302      	adds	r3, #2
 800f67a:	61bb      	str	r3, [r7, #24]
                header_length -= ((INT)(option -> nx_ipv6_hop_by_hop_length) + 2);
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	785b      	ldrb	r3, [r3, #1]
 800f680:	3302      	adds	r3, #2
 800f682:	69fa      	ldr	r2, [r7, #28]
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	61fb      	str	r3, [r7, #28]
                break;
 800f688:	e001      	b.n	800f68e <_nx_ipv6_process_hop_by_hop_option+0xfe>
            }
            else
            {

                /* Return value indicates an error status: we need to drop the entire packet. */
                return(rv); /* Drop this packet. */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	e003      	b.n	800f696 <_nx_ipv6_process_hop_by_hop_option+0x106>
    while (header_length > 0)
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	2b00      	cmp	r3, #0
 800f692:	dcbd      	bgt.n	800f610 <_nx_ipv6_process_hop_by_hop_option+0x80>
            }
        }
    }

    /* Successful processing of option header. */
    return(NX_SUCCESS);
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	3720      	adds	r7, #32
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <_nx_ipv6_process_routing_option>:
/*                                            packet length verification, */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ipv6_process_routing_option(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b084      	sub	sp, #16
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check packet length is at least sizeof(NX_IPV6_HEADER_ROUTING_OPTION). */
    if (packet_ptr -> nx_packet_length < sizeof(NX_IPV6_HEADER_ROUTING_OPTION))
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ac:	2b07      	cmp	r3, #7
 800f6ae:	d801      	bhi.n	800f6b4 <_nx_ipv6_process_routing_option+0x16>
    {
        return(NX_OPTION_HEADER_ERROR);
 800f6b0:	2354      	movs	r3, #84	; 0x54
 800f6b2:	e017      	b.n	800f6e4 <_nx_ipv6_process_routing_option+0x46>
    }

    /* Set a pointer to the routing header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    option = (NX_IPV6_HEADER_ROUTING_OPTION *)(packet_ptr -> nx_packet_prepend_ptr);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	60fb      	str	r3, [r7, #12]

    if (option -> nx_ipv6_header_routing_option_segments_left == 0)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	78db      	ldrb	r3, [r3, #3]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d101      	bne.n	800f6c6 <_nx_ipv6_process_routing_option+0x28>
    {
        /* Skip the rest of the routing header and continue processing this packet. */
        return(NX_SUCCESS);
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e00e      	b.n	800f6e4 <_nx_ipv6_process_routing_option+0x46>
       an ICMP Parameter Problem if such feature is enabled. */

#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE

    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    base_offset = (UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_ip_header);
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	689a      	ldr	r2, [r3, #8]
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ce:	1ad3      	subs	r3, r2, r3
 800f6d0:	60bb      	str	r3, [r7, #8]

    /*lint -e{835} -e{845} suppress operating on zero. */
    NX_ICMPV6_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, 0, base_offset + 2);
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	3302      	adds	r3, #2
 800f6d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f6da:	6839      	ldr	r1, [r7, #0]
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7fc f842 	bl	800b766 <_nx_icmpv6_send_error_message>
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif

    /* Return error status, so the caller knows to free the packet. */
    return(NX_OPTION_HEADER_ERROR);
 800f6e2:	2354      	movs	r3, #84	; 0x54
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <CHECK_IP_ADDRESSES_BY_PREFIX>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
INT CHECK_IP_ADDRESSES_BY_PREFIX(ULONG *ip_addr1, ULONG *ip_addr2,
                                 ULONG prefix_len)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b088      	sub	sp, #32
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
ULONG low_prefix;  /* Remaining bits in prefix after high prefix. */
ULONG mask;


    /* Get number of ULONGs that can fit in the specified prefix length. */
    high_prefix  = prefix_len >> 5;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	095b      	lsrs	r3, r3, #5
 800f6fc:	61fb      	str	r3, [r7, #28]

    /* Get the remaining bits in prefix length. */
    low_prefix  = prefix_len &  0x1f;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f003 031f 	and.w	r3, r3, #31
 800f704:	61bb      	str	r3, [r7, #24]

    /* Would the prefix length have 1 or more ULONGs? */
    if (high_prefix)
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00b      	beq.n	800f724 <CHECK_IP_ADDRESSES_BY_PREFIX+0x38>
    {

        /* Yes; compare that number of ULONGS (in bytes) in each input address. */
        if (memcmp(ip_addr1, ip_addr2, high_prefix << 2))
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	461a      	mov	r2, r3
 800f712:	68b9      	ldr	r1, [r7, #8]
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f00a fdcd 	bl	801a2b4 <memcmp>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d001      	beq.n	800f724 <CHECK_IP_ADDRESSES_BY_PREFIX+0x38>
        {
            /* A nonzero result indicates a mismatch. */
            return(0);
 800f720:	2300      	movs	r3, #0
 800f722:	e01c      	b.n	800f75e <CHECK_IP_ADDRESSES_BY_PREFIX+0x72>
        }
    }

    /* Are there any bits to compare after the high order bits? */
    if (low_prefix)
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d018      	beq.n	800f75c <CHECK_IP_ADDRESSES_BY_PREFIX+0x70>
    {

        /* Compare these bits between the two addresses, after masking out the upper ULONGs. */
        mask = ((0xFFFFFFFF) << (32 - low_prefix)) & 0xFFFFFFFF;
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	f1c3 0320 	rsb	r3, r3, #32
 800f730:	f04f 32ff 	mov.w	r2, #4294967295
 800f734:	fa02 f303 	lsl.w	r3, r2, r3
 800f738:	617b      	str	r3, [r7, #20]

        if ((ip_addr1[high_prefix] ^ ip_addr2[high_prefix]) & mask)
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	68fa      	ldr	r2, [r7, #12]
 800f740:	4413      	add	r3, r2
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	68b9      	ldr	r1, [r7, #8]
 800f74a:	440b      	add	r3, r1
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	405a      	eors	r2, r3
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	4013      	ands	r3, r2
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <CHECK_IP_ADDRESSES_BY_PREFIX+0x70>
        {
            return(0);
 800f758:	2300      	movs	r3, #0
 800f75a:	e000      	b.n	800f75e <CHECK_IP_ADDRESSES_BY_PREFIX+0x72>
        }
    }

    return(1);
 800f75c:	2301      	movs	r3, #1
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3720      	adds	r7, #32
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <CHECK_IPV6_ADDRESSES_SAME>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
INT CHECK_IPV6_ADDRESSES_SAME(ULONG *ip_addr1, ULONG *ip_addr2)
{
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]
#ifdef FEATURE_NX_IPV6
    return(ip_addr1[0] == ip_addr2[0] &&
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	681b      	ldr	r3, [r3, #0]
           ip_addr1[1] == ip_addr2[1] &&
           ip_addr1[2] == ip_addr2[2] &&
 800f778:	429a      	cmp	r2, r3
 800f77a:	d119      	bne.n	800f7b0 <CHECK_IPV6_ADDRESSES_SAME+0x4a>
           ip_addr1[1] == ip_addr2[1] &&
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3304      	adds	r3, #4
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	3304      	adds	r3, #4
 800f786:	681b      	ldr	r3, [r3, #0]
    return(ip_addr1[0] == ip_addr2[0] &&
 800f788:	429a      	cmp	r2, r3
 800f78a:	d111      	bne.n	800f7b0 <CHECK_IPV6_ADDRESSES_SAME+0x4a>
           ip_addr1[2] == ip_addr2[2] &&
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	3308      	adds	r3, #8
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	3308      	adds	r3, #8
 800f796:	681b      	ldr	r3, [r3, #0]
           ip_addr1[1] == ip_addr2[1] &&
 800f798:	429a      	cmp	r2, r3
 800f79a:	d109      	bne.n	800f7b0 <CHECK_IPV6_ADDRESSES_SAME+0x4a>
           ip_addr1[3] == ip_addr2[3]);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	330c      	adds	r3, #12
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	330c      	adds	r3, #12
 800f7a6:	681b      	ldr	r3, [r3, #0]
           ip_addr1[2] == ip_addr2[2] &&
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d101      	bne.n	800f7b0 <CHECK_IPV6_ADDRESSES_SAME+0x4a>
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	e000      	b.n	800f7b2 <CHECK_IPV6_ADDRESSES_SAME+0x4c>
 800f7b0:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_addr1);
    NX_PARAMETER_NOT_USED(ip_addr2);

    return(0);
#endif /* FEATURE_NX_IPV6 */
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	370c      	adds	r7, #12
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr

0800f7be <CHECK_UNSPECIFIED_ADDRESS>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
INT CHECK_UNSPECIFIED_ADDRESS(ULONG *ip_addr)
{
 800f7be:	b480      	push	{r7}
 800f7c0:	b083      	sub	sp, #12
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
#ifdef FEATURE_NX_IPV6
    return(!(ip_addr[0] || ip_addr[1] || ip_addr[2] || ip_addr[3]));
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d110      	bne.n	800f7f0 <CHECK_UNSPECIFIED_ADDRESS+0x32>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d10b      	bne.n	800f7f0 <CHECK_UNSPECIFIED_ADDRESS+0x32>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	3308      	adds	r3, #8
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d106      	bne.n	800f7f0 <CHECK_UNSPECIFIED_ADDRESS+0x32>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	330c      	adds	r3, #12
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d101      	bne.n	800f7f0 <CHECK_UNSPECIFIED_ADDRESS+0x32>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e000      	b.n	800f7f2 <CHECK_UNSPECIFIED_ADDRESS+0x34>
 800f7f0:	2300      	movs	r3, #0
#else
    NX_PARAMETER_NOT_USED(ip_addr);
    return(0);
#endif
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	370c      	adds	r7, #12
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr

0800f7fe <SET_UNSPECIFIED_ADDRESS>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
void SET_UNSPECIFIED_ADDRESS(ULONG *ip_addr)
{
 800f7fe:	b480      	push	{r7}
 800f800:	b083      	sub	sp, #12
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
#ifdef FEATURE_NX_IPV6
    ip_addr[0] = 0;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	601a      	str	r2, [r3, #0]
    ip_addr[1] = 0;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	3304      	adds	r3, #4
 800f810:	2200      	movs	r2, #0
 800f812:	601a      	str	r2, [r3, #0]
    ip_addr[2] = 0;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	3308      	adds	r3, #8
 800f818:	2200      	movs	r2, #0
 800f81a:	601a      	str	r2, [r3, #0]
    ip_addr[3] = 0;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	330c      	adds	r3, #12
 800f820:	2200      	movs	r2, #0
 800f822:	601a      	str	r2, [r3, #0]
#else
    NX_PARAMETER_NOT_USED(ip_addr);
#endif /* FEATURE_NX_IPV6 */
}
 800f824:	bf00      	nop
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <COPY_IPV6_ADDRESS>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
void COPY_IPV6_ADDRESS(ULONG *copy_from, ULONG *copy_to)
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
#ifdef FEATURE_NX_IPV6
    copy_to[0] = copy_from[0];
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	601a      	str	r2, [r3, #0]
    copy_to[1] = copy_from[1];
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	3304      	adds	r3, #4
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	6852      	ldr	r2, [r2, #4]
 800f84a:	601a      	str	r2, [r3, #0]
    copy_to[2] = copy_from[2];
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	3308      	adds	r3, #8
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	6892      	ldr	r2, [r2, #8]
 800f854:	601a      	str	r2, [r3, #0]
    copy_to[3] = copy_from[3];
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	330c      	adds	r3, #12
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	68d2      	ldr	r2, [r2, #12]
 800f85e:	601a      	str	r2, [r3, #0]
#else
    NX_PARAMETER_NOT_USED(copy_from);
    NX_PARAMETER_NOT_USED(copy_to);
#endif /* FEATURE_NX_IPV6 */
}
 800f860:	bf00      	nop
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <SET_SOLICITED_NODE_MULTICAST_ADDRESS>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
void SET_SOLICITED_NODE_MULTICAST_ADDRESS(ULONG *address,
                                          ULONG *unicast_address)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
#ifdef FEATURE_NX_IPV6
    address[0] = (ULONG)0xFF020000;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4a0b      	ldr	r2, [pc, #44]	; (800f8a8 <SET_SOLICITED_NODE_MULTICAST_ADDRESS+0x3c>)
 800f87a:	601a      	str	r2, [r3, #0]
    address[1] = (ULONG)0;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	3304      	adds	r3, #4
 800f880:	2200      	movs	r2, #0
 800f882:	601a      	str	r2, [r3, #0]
    address[2] = (ULONG)0x00000001;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	3308      	adds	r3, #8
 800f888:	2201      	movs	r2, #1
 800f88a:	601a      	str	r2, [r3, #0]
    address[3] = (ULONG)(0xFF000000 | unicast_address[3]);
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	330c      	adds	r3, #12
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	330c      	adds	r3, #12
 800f896:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800f89a:	601a      	str	r2, [r3, #0]
#else
    NX_PARAMETER_NOT_USED(address);
    NX_PARAMETER_NOT_USED(unicast_address);
#endif /* FEATURE_NX_IPV6 */
}
 800f89c:	bf00      	nop
 800f89e:	370c      	adds	r7, #12
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr
 800f8a8:	ff020000 	.word	0xff020000

0800f8ac <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
INT CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS(ULONG *dest_ip, ULONG *myip)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
#ifdef FEATURE_NX_IPV6

INT isMulticast = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	60fb      	str	r3, [r7, #12]

    if ((dest_ip[0] == (ULONG)0xFF020000) && (dest_ip[1] == (ULONG)0x0) &&
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 800f8c2:	d116      	bne.n	800f8f2 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x46>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d111      	bne.n	800f8f2 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x46>
        (dest_ip[2] == (ULONG)0x00000001) &&
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	3308      	adds	r3, #8
 800f8d2:	681b      	ldr	r3, [r3, #0]
    if ((dest_ip[0] == (ULONG)0xFF020000) && (dest_ip[1] == (ULONG)0x0) &&
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d10c      	bne.n	800f8f2 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x46>
        (dest_ip[3] == ((myip[3] & (ULONG)0x00FFFFFF) | (ULONG)0xFF000000)))
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	330c      	adds	r3, #12
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	330c      	adds	r3, #12
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
        (dest_ip[2] == (ULONG)0x00000001) &&
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d102      	bne.n	800f8f2 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x46>
    {
        isMulticast = 1;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	60fb      	str	r3, [r7, #12]
 800f8f0:	e033      	b.n	800f95a <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0xae>
    }
    else if ((dest_ip[0] == (ULONG)0xFF020000) &&
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 800f8fa:	d117      	bne.n	800f92c <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x80>
             (dest_ip[1] == (ULONG)0x0) &&
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	3304      	adds	r3, #4
 800f900:	681b      	ldr	r3, [r3, #0]
    else if ((dest_ip[0] == (ULONG)0xFF020000) &&
 800f902:	2b00      	cmp	r3, #0
 800f904:	d112      	bne.n	800f92c <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x80>
             (dest_ip[2] == (ULONG)0x0) &&
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	3308      	adds	r3, #8
 800f90a:	681b      	ldr	r3, [r3, #0]
             (dest_ip[1] == (ULONG)0x0) &&
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10d      	bne.n	800f92c <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x80>
             ((dest_ip[3] == (ULONG)0x00000001) || (dest_ip[3] == (ULONG)0x00010002)))
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	330c      	adds	r3, #12
 800f914:	681b      	ldr	r3, [r3, #0]
             (dest_ip[2] == (ULONG)0x0) &&
 800f916:	2b01      	cmp	r3, #1
 800f918:	d005      	beq.n	800f926 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x7a>
             ((dest_ip[3] == (ULONG)0x00000001) || (dest_ip[3] == (ULONG)0x00010002)))
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	330c      	adds	r3, #12
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a11      	ldr	r2, [pc, #68]	; (800f968 <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0xbc>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d102      	bne.n	800f92c <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0x80>
    {
        isMulticast = 1;
 800f926:	2301      	movs	r3, #1
 800f928:	60fb      	str	r3, [r7, #12]
 800f92a:	e016      	b.n	800f95a <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0xae>
             ((dest_ip[3] == (ULONG)0x00000001)))     /* Realm-Local All nodes multicast address.     */
    {
        isMulticast = 1;
    }
#endif /* NX_ENABLE_THREAD  */
    else if ((dest_ip[0] == (ULONG)0xFF050000) &&
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f513 0f7b 	cmn.w	r3, #16449536	; 0xfb0000
 800f934:	d111      	bne.n	800f95a <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0xae>
             (dest_ip[1] == (ULONG)0x0) &&
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	3304      	adds	r3, #4
 800f93a:	681b      	ldr	r3, [r3, #0]
    else if ((dest_ip[0] == (ULONG)0xFF050000) &&
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d10c      	bne.n	800f95a <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0xae>
             (dest_ip[2] == (ULONG)0x0) &&
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3308      	adds	r3, #8
 800f944:	681b      	ldr	r3, [r3, #0]
             (dest_ip[1] == (ULONG)0x0) &&
 800f946:	2b00      	cmp	r3, #0
 800f948:	d107      	bne.n	800f95a <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0xae>
             (dest_ip[3] == (ULONG)0x00010003))
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	330c      	adds	r3, #12
 800f94e:	681b      	ldr	r3, [r3, #0]
             (dest_ip[2] == (ULONG)0x0) &&
 800f950:	4a06      	ldr	r2, [pc, #24]	; (800f96c <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0xc0>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d101      	bne.n	800f95a <CHECK_IPV6_SOLICITED_NODE_MCAST_ADDRESS+0xae>
    {
        isMulticast = 1;
 800f956:	2301      	movs	r3, #1
 800f958:	60fb      	str	r3, [r7, #12]
    }
    return(isMulticast);
 800f95a:	68fb      	ldr	r3, [r7, #12]
    NX_PARAMETER_NOT_USED(dest_ip);
    NX_PARAMETER_NOT_USED(myip);

    return(0);
#endif /* FEATURE_NX_IPV6 */
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3714      	adds	r7, #20
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr
 800f968:	00010002 	.word	0x00010002
 800f96c:	00010003 	.word	0x00010003

0800f970 <IPv6_Address_Type>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG IPv6_Address_Type(ULONG *ip_address)
{
 800f970:	b480      	push	{r7}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
   Everything else         Global
 */
ULONG tmp;

    /* Is this multicast? */
    if ((ip_address[0] & (ULONG)0xFF000000) == (ULONG)0xFF000000)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f980:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800f984:	d176      	bne.n	800fa74 <IPv6_Address_Type+0x104>
    {
        /* Yes. */
        ret = IPV6_ADDRESS_MULTICAST;
 800f986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f98a:	60bb      	str	r3, [r7, #8]

        /* Determine type of multicast... */
        if (((ip_address[0] == (ULONG)0xFF010000) ||
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f513 0f7f 	cmn.w	r3, #16711680	; 0xff0000
 800f994:	d004      	beq.n	800f9a0 <IPv6_Address_Type+0x30>
             (ip_address[0] == (ULONG)0xFF020000)) &&
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
        if (((ip_address[0] == (ULONG)0xFF010000) ||
 800f99a:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 800f99e:	d112      	bne.n	800f9c6 <IPv6_Address_Type+0x56>
            (ip_address[1] == (ULONG)0) &&
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	3304      	adds	r3, #4
 800f9a4:	681b      	ldr	r3, [r3, #0]
             (ip_address[0] == (ULONG)0xFF020000)) &&
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d10d      	bne.n	800f9c6 <IPv6_Address_Type+0x56>
            (ip_address[2] == (ULONG)0) &&
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	3308      	adds	r3, #8
 800f9ae:	681b      	ldr	r3, [r3, #0]
            (ip_address[1] == (ULONG)0) &&
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d108      	bne.n	800f9c6 <IPv6_Address_Type+0x56>
            (ip_address[3] == (ULONG)1))
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	330c      	adds	r3, #12
 800f9b8:	681b      	ldr	r3, [r3, #0]
            (ip_address[2] == (ULONG)0) &&
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d103      	bne.n	800f9c6 <IPv6_Address_Type+0x56>
        {
            return(ret | IPV6_ALL_NODE_MCAST);
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	f043 0310 	orr.w	r3, r3, #16
 800f9c4:	e086      	b.n	800fad4 <IPv6_Address_Type+0x164>
        }


        if ((ip_address[0] == (ULONG)0xFF050000) &&     /* All DHCPv6 relay and server hosts */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f513 0f7b 	cmn.w	r3, #16449536	; 0xfb0000
 800f9ce:	d113      	bne.n	800f9f8 <IPv6_Address_Type+0x88>
            (ip_address[1] == (ULONG)0) &&
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	3304      	adds	r3, #4
 800f9d4:	681b      	ldr	r3, [r3, #0]
        if ((ip_address[0] == (ULONG)0xFF050000) &&     /* All DHCPv6 relay and server hosts */
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10e      	bne.n	800f9f8 <IPv6_Address_Type+0x88>
            (ip_address[2] == (ULONG)0) &&
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	3308      	adds	r3, #8
 800f9de:	681b      	ldr	r3, [r3, #0]
            (ip_address[1] == (ULONG)0) &&
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d109      	bne.n	800f9f8 <IPv6_Address_Type+0x88>
            (ip_address[3] == (ULONG)0x00010003))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	330c      	adds	r3, #12
 800f9e8:	681b      	ldr	r3, [r3, #0]
            (ip_address[2] == (ULONG)0) &&
 800f9ea:	4a3d      	ldr	r2, [pc, #244]	; (800fae0 <IPv6_Address_Type+0x170>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d103      	bne.n	800f9f8 <IPv6_Address_Type+0x88>
        {
            return(ret | IPV6_ALL_NODE_MCAST);
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	f043 0310 	orr.w	r3, r3, #16
 800f9f6:	e06d      	b.n	800fad4 <IPv6_Address_Type+0x164>
        }

        if (((ip_address[0] == (ULONG)0xFF010000) ||
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f513 0f7f 	cmn.w	r3, #16711680	; 0xff0000
 800fa00:	d009      	beq.n	800fa16 <IPv6_Address_Type+0xa6>
             (ip_address[0] == (ULONG)0xFF020000) ||
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
        if (((ip_address[0] == (ULONG)0xFF010000) ||
 800fa06:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 800fa0a:	d004      	beq.n	800fa16 <IPv6_Address_Type+0xa6>
             (ip_address[0] == (ULONG)0xFF050000)) &&
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
             (ip_address[0] == (ULONG)0xFF020000) ||
 800fa10:	f513 0f7b 	cmn.w	r3, #16449536	; 0xfb0000
 800fa14:	d112      	bne.n	800fa3c <IPv6_Address_Type+0xcc>
            (ip_address[1] == (ULONG)0) &&
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3304      	adds	r3, #4
 800fa1a:	681b      	ldr	r3, [r3, #0]
             (ip_address[0] == (ULONG)0xFF050000)) &&
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d10d      	bne.n	800fa3c <IPv6_Address_Type+0xcc>
            (ip_address[2] == (ULONG)0) &&
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	3308      	adds	r3, #8
 800fa24:	681b      	ldr	r3, [r3, #0]
            (ip_address[1] == (ULONG)0) &&
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d108      	bne.n	800fa3c <IPv6_Address_Type+0xcc>
            (ip_address[3] == (ULONG)2))
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	330c      	adds	r3, #12
 800fa2e:	681b      	ldr	r3, [r3, #0]
            (ip_address[2] == (ULONG)0) &&
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d103      	bne.n	800fa3c <IPv6_Address_Type+0xcc>
        {
            return(ret | IPV6_ALL_ROUTER_MCAST);
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	f043 0320 	orr.w	r3, r3, #32
 800fa3a:	e04b      	b.n	800fad4 <IPv6_Address_Type+0x164>
        }

        if ((ip_address[0] == (ULONG)0xFF020000) &&
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f513 0f7e 	cmn.w	r3, #16646144	; 0xfe0000
 800fa44:	d113      	bne.n	800fa6e <IPv6_Address_Type+0xfe>
            (ip_address[1] == (ULONG)0) &&
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	3304      	adds	r3, #4
 800fa4a:	681b      	ldr	r3, [r3, #0]
        if ((ip_address[0] == (ULONG)0xFF020000) &&
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d10e      	bne.n	800fa6e <IPv6_Address_Type+0xfe>
            (ip_address[2] == (ULONG)1) &&
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	3308      	adds	r3, #8
 800fa54:	681b      	ldr	r3, [r3, #0]
            (ip_address[1] == (ULONG)0) &&
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d109      	bne.n	800fa6e <IPv6_Address_Type+0xfe>
            (ip_address[3] >= (ULONG)0xFF000000))
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	330c      	adds	r3, #12
 800fa5e:	681b      	ldr	r3, [r3, #0]
            (ip_address[2] == (ULONG)1) &&
 800fa60:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800fa64:	d303      	bcc.n	800fa6e <IPv6_Address_Type+0xfe>
        {
            return(ret | IPV6_SOLICITED_NODE_MCAST);
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa6c:	e032      	b.n	800fad4 <IPv6_Address_Type+0x164>
        }

        return(IPV6_ADDRESS_MULTICAST);
 800fa6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fa72:	e02f      	b.n	800fad4 <IPv6_Address_Type+0x164>
    }

    tmp = ip_address[0] & (0xFFC00000);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	4b1a      	ldr	r3, [pc, #104]	; (800fae4 <IPv6_Address_Type+0x174>)
 800fa7a:	4013      	ands	r3, r2
 800fa7c:	60fb      	str	r3, [r7, #12]

    if (tmp == (ULONG)0xFE800000)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f113 7fc0 	cmn.w	r3, #25165824	; 0x1800000
 800fa84:	d101      	bne.n	800fa8a <IPv6_Address_Type+0x11a>
    {
        return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_LINKLOCAL));
 800fa86:	4b18      	ldr	r3, [pc, #96]	; (800fae8 <IPv6_Address_Type+0x178>)
 800fa88:	e024      	b.n	800fad4 <IPv6_Address_Type+0x164>
    }
    /* Note that site local are deprecated in RFC 4291 and are
       treated as global type address. */
    if (tmp == (ULONG)0xFEC00000)
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f113 7fa0 	cmn.w	r3, #20971520	; 0x1400000
 800fa90:	d101      	bne.n	800fa96 <IPv6_Address_Type+0x126>
    {
        return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_GLOBAL));
 800fa92:	4b16      	ldr	r3, [pc, #88]	; (800faec <IPv6_Address_Type+0x17c>)
 800fa94:	e01e      	b.n	800fad4 <IPv6_Address_Type+0x164>
    }

    tmp = ip_address[0] | ip_address[1] | ip_address[2];
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	431a      	orrs	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	3308      	adds	r3, #8
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4313      	orrs	r3, r2
 800faaa:	60fb      	str	r3, [r7, #12]

    if (tmp == 0)
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d10f      	bne.n	800fad2 <IPv6_Address_Type+0x162>
    {
        if (ip_address[3] == 0)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	330c      	adds	r3, #12
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d102      	bne.n	800fac2 <IPv6_Address_Type+0x152>
        {
            return(IPV6_ADDRESS_UNSPECIFIED);
 800fabc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800fac0:	e008      	b.n	800fad4 <IPv6_Address_Type+0x164>
        }

        if (ip_address[3] == 1)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	330c      	adds	r3, #12
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d102      	bne.n	800fad2 <IPv6_Address_Type+0x162>
        {
            return(IPV6_ADDRESS_LOOPBACK);
 800facc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fad0:	e000      	b.n	800fad4 <IPv6_Address_Type+0x164>
        }
    }

    return((ULONG)(IPV6_ADDRESS_UNICAST | IPV6_ADDRESS_GLOBAL));
 800fad2:	4b06      	ldr	r3, [pc, #24]	; (800faec <IPv6_Address_Type+0x17c>)
#else /* FEATURE_NX_IPV6 */
    NX_PARAMETER_NOT_USED(ip_address);

    return(0);
#endif /* FEATURE_NX_IPV6 */
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3714      	adds	r7, #20
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	00010003 	.word	0x00010003
 800fae4:	ffc00000 	.word	0xffc00000
 800fae8:	80000001 	.word	0x80000001
 800faec:	80000004 	.word	0x80000004

0800faf0 <_nx_ipv6_address_change_endian>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ipv6_address_change_endian(ULONG *address)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
#ifdef FEATURE_NX_IPV6
    if (address == NX_NULL)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d01a      	beq.n	800fb34 <_nx_ipv6_address_change_endian+0x44>
    {
        return;
    }

    NX_CHANGE_ULONG_ENDIAN(address[0]);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	ba1a      	rev	r2, r3
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(address[1]);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	3304      	adds	r3, #4
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	3304      	adds	r3, #4
 800fb12:	ba12      	rev	r2, r2
 800fb14:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(address[2]);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	3308      	adds	r3, #8
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3308      	adds	r3, #8
 800fb20:	ba12      	rev	r2, r2
 800fb22:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(address[3]);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	330c      	adds	r3, #12
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	330c      	adds	r3, #12
 800fb2e:	ba12      	rev	r2, r2
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	e000      	b.n	800fb36 <_nx_ipv6_address_change_endian+0x46>
        return;
 800fb34:	bf00      	nop
#else
    NX_PARAMETER_NOT_USED(address);
#endif /* FEATURE_NX_IPV6 */
}
 800fb36:	370c      	adds	r7, #12
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <_nx_nd_cache_add>:
/*                                                                        */
/**************************************************************************/
UINT _nx_nd_cache_add(NX_IP *ip_ptr, ULONG *dest_ip, NX_INTERFACE *if_ptr, CHAR *mac, INT IsStatic,
                      INT status, NXD_IPV6_ADDRESS *iface_address,
                      ND_CACHE_ENTRY **nd_cache_entry)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b088      	sub	sp, #32
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	607a      	str	r2, [r7, #4]
 800fb4c:	603b      	str	r3, [r7, #0]
USHORT         *copy_from, *copy_to;
ND_CACHE_ENTRY *entry;


    /* Initialize the return value. */
    *nd_cache_entry = NX_NULL;
 800fb4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb50:	2200      	movs	r2, #0
 800fb52:	601a      	str	r2, [r3, #0]

    /* First find if there has a exit entry. */
    if (_nx_nd_cache_find_entry(ip_ptr, dest_ip, &entry) != NX_SUCCESS)
 800fb54:	f107 0314 	add.w	r3, r7, #20
 800fb58:	461a      	mov	r2, r3
 800fb5a:	68b9      	ldr	r1, [r7, #8]
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f000 faa9 	bl	80100b4 <_nx_nd_cache_find_entry>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00b      	beq.n	800fb80 <_nx_nd_cache_add+0x40>
    {

        /* Did not find a valid entry. Add one. */
        if (_nx_nd_cache_add_entry(ip_ptr, dest_ip, iface_address, &entry) != NX_SUCCESS)
 800fb68:	f107 0314 	add.w	r3, r7, #20
 800fb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb6e:	68b9      	ldr	r1, [r7, #8]
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f000 f86c 	bl	800fc4e <_nx_nd_cache_add_entry>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d001      	beq.n	800fb80 <_nx_nd_cache_add+0x40>
        {

            /* Can not add, return. */
            return(NX_NOT_SUCCESSFUL);
 800fb7c:	2343      	movs	r3, #67	; 0x43
 800fb7e:	e062      	b.n	800fc46 <_nx_nd_cache_add+0x106>

    /* At this point we know the entry is in the ND cache.
       Finish up updating the rest of the information. */

    /*lint -e{644} suppress variable might not be initialized, since "entry" was initialized in _nx_nd_cache_find_entry or _nx_nd_cache_add_entry. */
    entry -> nx_nd_cache_is_static = IsStatic ? (UCHAR)1 : (UCHAR)0;
 800fb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	bf14      	ite	ne
 800fb86:	2301      	movne	r3, #1
 800fb88:	2300      	moveq	r3, #0
 800fb8a:	b2da      	uxtb	r2, r3
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	76da      	strb	r2, [r3, #27]

    entry -> nx_nd_cache_interface_ptr = if_ptr;
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	687a      	ldr	r2, [r7, #4]
 800fb94:	621a      	str	r2, [r3, #32]

    /* If the entry is already in reachable state, and the link layer address
       is the same, we should not update the status field. */
    /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
    copy_from = (USHORT *)mac;
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	61fb      	str	r3, [r7, #28]

    /*lint -e{927} suppress cast of pointer to pointer, since it is necessary  */
    copy_to = (USHORT *)(entry -> nx_nd_cache_mac_addr);
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	3310      	adds	r3, #16
 800fb9e:	61bb      	str	r3, [r7, #24]

    /* Set the return value. */
    *nd_cache_entry = entry;
 800fba0:	697a      	ldr	r2, [r7, #20]
 800fba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba4:	601a      	str	r2, [r3, #0]

    if (entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	7e5b      	ldrb	r3, [r3, #25]
 800fbaa:	2b02      	cmp	r3, #2
 800fbac:	d117      	bne.n	800fbde <_nx_nd_cache_add+0x9e>
    {
        /* Check mac address.*/
        if ((copy_from[0] == copy_to[0]) &&
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	881a      	ldrh	r2, [r3, #0]
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d111      	bne.n	800fbde <_nx_nd_cache_add+0x9e>
            (copy_from[1] == copy_to[1]) &&
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	3302      	adds	r3, #2
 800fbbe:	881a      	ldrh	r2, [r3, #0]
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	3302      	adds	r3, #2
 800fbc4:	881b      	ldrh	r3, [r3, #0]
        if ((copy_from[0] == copy_to[0]) &&
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d109      	bne.n	800fbde <_nx_nd_cache_add+0x9e>
            (copy_from[2] == copy_to[2]))
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	3304      	adds	r3, #4
 800fbce:	881a      	ldrh	r2, [r3, #0]
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	881b      	ldrh	r3, [r3, #0]
            (copy_from[1] == copy_to[1]) &&
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d101      	bne.n	800fbde <_nx_nd_cache_add+0x9e>
        {

            /* The MAC address is the same.  So we are done. */

            return(NX_SUCCESS);
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e033      	b.n	800fc46 <_nx_nd_cache_add+0x106>
        }
    }

    /* Is this a static entry? */
    if (IsStatic)
 800fbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d004      	beq.n	800fbee <_nx_nd_cache_add+0xae>
    {

        /* Just set the status, no need to update the cache entry timeout. */
        entry -> nx_nd_cache_nd_status = (UCHAR)status;
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbe8:	b2d2      	uxtb	r2, r2
 800fbea:	765a      	strb	r2, [r3, #25]
 800fbec:	e012      	b.n	800fc14 <_nx_nd_cache_add+0xd4>
    }
    /* Is the status changed? */
    else if (entry -> nx_nd_cache_nd_status != (UCHAR)status)
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	7e5a      	ldrb	r2, [r3, #25]
 800fbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d00c      	beq.n	800fc14 <_nx_nd_cache_add+0xd4>
    {

        /* Update status in the cache entry. */
        entry -> nx_nd_cache_nd_status = (UCHAR)status;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbfe:	b2d2      	uxtb	r2, r2
 800fc00:	765a      	strb	r2, [r3, #25]

        if (entry -> nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE) /* New entry */
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	7e5b      	ldrb	r3, [r3, #25]
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	d104      	bne.n	800fc14 <_nx_nd_cache_add+0xd4>
        {

            /* Set the timer tick.  The tick value only applies to the REACHABLE state. */
            entry -> nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_reachable_timer;
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	f8d2 2ec8 	ldr.w	r2, [r2, #3784]	; 0xec8
 800fc12:	61da      	str	r2, [r3, #28]
        }
    }

    /* Copy the MAC address. */
    *copy_to = *copy_from;
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	881a      	ldrh	r2, [r3, #0]
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	801a      	strh	r2, [r3, #0]
    copy_to++; copy_from++;
 800fc1c:	69bb      	ldr	r3, [r7, #24]
 800fc1e:	3302      	adds	r3, #2
 800fc20:	61bb      	str	r3, [r7, #24]
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	3302      	adds	r3, #2
 800fc26:	61fb      	str	r3, [r7, #28]
    *copy_to = *copy_from;
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	881a      	ldrh	r2, [r3, #0]
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	801a      	strh	r2, [r3, #0]
    copy_to++; copy_from++;
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	3302      	adds	r3, #2
 800fc34:	61bb      	str	r3, [r7, #24]
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	3302      	adds	r3, #2
 800fc3a:	61fb      	str	r3, [r7, #28]
    *copy_to = *copy_from;
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	881a      	ldrh	r2, [r3, #0]
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	801a      	strh	r2, [r3, #0]

    return(NX_SUCCESS);
 800fc44:	2300      	movs	r3, #0
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3720      	adds	r7, #32
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <_nx_nd_cache_add_entry>:
/**************************************************************************/

UINT _nx_nd_cache_add_entry(NX_IP *ip_ptr, ULONG *dest_ip,
                            NXD_IPV6_ADDRESS *iface_address,
                            ND_CACHE_ENTRY **nd_cache_entry)
{
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b08a      	sub	sp, #40	; 0x28
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	60f8      	str	r0, [r7, #12]
 800fc56:	60b9      	str	r1, [r7, #8]
 800fc58:	607a      	str	r2, [r7, #4]
 800fc5a:	603b      	str	r3, [r7, #0]

    NX_PARAMETER_NOT_USED(ip_ptr);

    /* Set the found slot past the end of the table. If a match or available
       slot found, this will have a lower value. */
    first_available = NX_IPV6_NEIGHBOR_CACHE_SIZE;
 800fc5c:	2310      	movs	r3, #16
 800fc5e:	61fb      	str	r3, [r7, #28]

    /* Initialize the return value. */
    *nd_cache_entry = NX_NULL;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	2200      	movs	r2, #0
 800fc64:	601a      	str	r2, [r3, #0]

    /* Compute a simple hash based on the destination IP address. */
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	441a      	add	r2, r3
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	3308      	adds	r3, #8
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	441a      	add	r2, r3
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	330c      	adds	r3, #12
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4413      	add	r3, r2
 800fc82:	f003 030f 	and.w	r3, r3, #15
 800fc86:	623b      	str	r3, [r7, #32]
                   (NX_IPV6_NEIGHBOR_CACHE_SIZE));

#ifndef NX_DISABLE_IPV6_PURGE_UNUSED_CACHE_ENTRIES

    /* Set the lowest possible timer ticks left to compare to. */
    stale_timer_ticks = 0;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	61bb      	str	r3, [r7, #24]

    /* Start out at a very high number of remaining ticks to compare to. */
    timer_ticks_left = 0xFFFFFFFF;
 800fc8c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc90:	617b      	str	r3, [r7, #20]
#endif

    /* Loop through all the entries. */
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++, index++)
 800fc92:	2300      	movs	r3, #0
 800fc94:	627b      	str	r3, [r7, #36]	; 0x24
 800fc96:	e07a      	b.n	800fd8e <_nx_nd_cache_add_entry+0x140>
    {

        /* Check for overflow */
        if (index == NX_IPV6_NEIGHBOR_CACHE_SIZE)
 800fc98:	6a3b      	ldr	r3, [r7, #32]
 800fc9a:	2b10      	cmp	r3, #16
 800fc9c:	d101      	bne.n	800fca2 <_nx_nd_cache_add_entry+0x54>
        {

            /* Start back at the first table entry. */
            index = 0;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	623b      	str	r3, [r7, #32]
        }

        /* Is the current entry available? */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	2134      	movs	r1, #52	; 0x34
 800fca8:	fb01 f303 	mul.w	r3, r1, r3
 800fcac:	4413      	add	r3, r2
 800fcae:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d102      	bne.n	800fcbe <_nx_nd_cache_add_entry+0x70>
        {

            /* There is a chance the entry to add does not exist in the table. We create one using the
               invalid entry. */
            first_available = index;
 800fcb8:	6a3b      	ldr	r3, [r7, #32]
 800fcba:	61fb      	str	r3, [r7, #28]
            break;
 800fcbc:	e06a      	b.n	800fd94 <_nx_nd_cache_add_entry+0x146>
        }

#ifndef NX_DISABLE_IPV6_PURGE_UNUSED_CACHE_ENTRIES
        /* Skip over routers and static entries. */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_is_router != NX_NULL || ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_is_static)
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	6a3b      	ldr	r3, [r7, #32]
 800fcc2:	2134      	movs	r1, #52	; 0x34
 800fcc4:	fb01 f303 	mul.w	r3, r1, r3
 800fcc8:	4413      	add	r3, r2
 800fcca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d155      	bne.n	800fd80 <_nx_nd_cache_add_entry+0x132>
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	6a3b      	ldr	r3, [r7, #32]
 800fcd8:	2134      	movs	r1, #52	; 0x34
 800fcda:	fb01 f303 	mul.w	r3, r1, r3
 800fcde:	4413      	add	r3, r2
 800fce0:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d14a      	bne.n	800fd80 <_nx_nd_cache_add_entry+0x132>
        /* Purging is enabled;
           Attempt to find a STALE entry and if there is more than one,
           choose the oldest one e.g. the highest timer ticks elapsed. */

        /* Check for stale entries. These are the best candidates for 'recycling.' */
        if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	2134      	movs	r1, #52	; 0x34
 800fcf0:	fb01 f303 	mul.w	r3, r1, r3
 800fcf4:	4413      	add	r3, r2
 800fcf6:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d118      	bne.n	800fd32 <_nx_nd_cache_add_entry+0xe4>
        {

            /* Find the 'Stale' cache entry with the highest timer tick since
               timer tick is incremented in the Stale state.*/
            if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick > stale_timer_ticks)
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	6a3b      	ldr	r3, [r7, #32]
 800fd04:	2134      	movs	r1, #52	; 0x34
 800fd06:	fb01 f303 	mul.w	r3, r1, r3
 800fd0a:	4413      	add	r3, r2
 800fd0c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	69ba      	ldr	r2, [r7, #24]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d234      	bcs.n	800fd82 <_nx_nd_cache_add_entry+0x134>
            {
                /* Set this entry as the oldest stale entry. */
                stale_timer_ticks = (UINT)ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick;
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	6a3b      	ldr	r3, [r7, #32]
 800fd1c:	2134      	movs	r1, #52	; 0x34
 800fd1e:	fb01 f303 	mul.w	r3, r1, r3
 800fd22:	4413      	add	r3, r2
 800fd24:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	61bb      	str	r3, [r7, #24]
                first_available = index;
 800fd2c:	6a3b      	ldr	r3, [r7, #32]
 800fd2e:	61fb      	str	r3, [r7, #28]
 800fd30:	e027      	b.n	800fd82 <_nx_nd_cache_add_entry+0x134>
            }
        }
        /* Next try finding a REACHABLE entry closest to its cache table expiration date. */
        else if (stale_timer_ticks == 0 &&
 800fd32:	69bb      	ldr	r3, [r7, #24]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d124      	bne.n	800fd82 <_nx_nd_cache_add_entry+0x134>
                 ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	6a3b      	ldr	r3, [r7, #32]
 800fd3c:	2134      	movs	r1, #52	; 0x34
 800fd3e:	fb01 f303 	mul.w	r3, r1, r3
 800fd42:	4413      	add	r3, r2
 800fd44:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800fd48:	781b      	ldrb	r3, [r3, #0]
        else if (stale_timer_ticks == 0 &&
 800fd4a:	2b02      	cmp	r3, #2
 800fd4c:	d119      	bne.n	800fd82 <_nx_nd_cache_add_entry+0x134>
        {

            /* Is this entry older that our previous oldest entry? */
            if (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick < timer_ticks_left)
 800fd4e:	68fa      	ldr	r2, [r7, #12]
 800fd50:	6a3b      	ldr	r3, [r7, #32]
 800fd52:	2134      	movs	r1, #52	; 0x34
 800fd54:	fb01 f303 	mul.w	r3, r1, r3
 800fd58:	4413      	add	r3, r2
 800fd5a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	697a      	ldr	r2, [r7, #20]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d90d      	bls.n	800fd82 <_nx_nd_cache_add_entry+0x134>
            {

                /* Set this entry as the oldest entry using timer ticks left. */
                timer_ticks_left = (UINT)ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_timer_tick;
 800fd66:	68fa      	ldr	r2, [r7, #12]
 800fd68:	6a3b      	ldr	r3, [r7, #32]
 800fd6a:	2134      	movs	r1, #52	; 0x34
 800fd6c:	fb01 f303 	mul.w	r3, r1, r3
 800fd70:	4413      	add	r3, r2
 800fd72:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	617b      	str	r3, [r7, #20]
                first_available = index;
 800fd7a:	6a3b      	ldr	r3, [r7, #32]
 800fd7c:	61fb      	str	r3, [r7, #28]
 800fd7e:	e000      	b.n	800fd82 <_nx_nd_cache_add_entry+0x134>
            continue;
 800fd80:	bf00      	nop
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++, index++)
 800fd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd84:	3301      	adds	r3, #1
 800fd86:	627b      	str	r3, [r7, #36]	; 0x24
 800fd88:	6a3b      	ldr	r3, [r7, #32]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	623b      	str	r3, [r7, #32]
 800fd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd90:	2b0f      	cmp	r3, #15
 800fd92:	d981      	bls.n	800fc98 <_nx_nd_cache_add_entry+0x4a>
        }
#endif
    }

    /* Did not find a available entry. */
    if (first_available == NX_IPV6_NEIGHBOR_CACHE_SIZE)
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	2b10      	cmp	r3, #16
 800fd98:	d101      	bne.n	800fd9e <_nx_nd_cache_add_entry+0x150>
    {

        /* Return unsuccessful status. */
        return(NX_NOT_SUCCESSFUL);
 800fd9a:	2343      	movs	r3, #67	; 0x43
 800fd9c:	e041      	b.n	800fe22 <_nx_nd_cache_add_entry+0x1d4>
    }

    /* Yes; before we invalidate and delete the entry, we need to
       clean the nd cache. */
    _nx_nd_cache_delete_internal(ip_ptr, &ip_ptr -> nx_ipv6_nd_cache[first_available]);
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	2234      	movs	r2, #52	; 0x34
 800fda2:	fb02 f303 	mul.w	r3, r2, r3
 800fda6:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800fdaa:	68fa      	ldr	r2, [r7, #12]
 800fdac:	4413      	add	r3, r2
 800fdae:	4619      	mov	r1, r3
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f000 f83a 	bl	800fe2a <_nx_nd_cache_delete_internal>

    /* Record the IP address. */
    COPY_IPV6_ADDRESS(dest_ip, ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_dest_ip);
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	2234      	movs	r2, #52	; 0x34
 800fdba:	fb02 f303 	mul.w	r3, r2, r3
 800fdbe:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	68b8      	ldr	r0, [r7, #8]
 800fdca:	f7ff fd31 	bl	800f830 <COPY_IPV6_ADDRESS>

    /* A new entry starts with CREATED status. */
    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_nd_status = ND_CACHE_STATE_CREATED;
 800fdce:	68fa      	ldr	r2, [r7, #12]
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	2134      	movs	r1, #52	; 0x34
 800fdd4:	fb01 f303 	mul.w	r3, r1, r3
 800fdd8:	4413      	add	r3, r2
 800fdda:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800fdde:	2206      	movs	r2, #6
 800fde0:	701a      	strb	r2, [r3, #0]

    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_outgoing_address = iface_address;
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	2134      	movs	r1, #52	; 0x34
 800fde8:	fb01 f303 	mul.w	r3, r1, r3
 800fdec:	4413      	add	r3, r2
 800fdee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fdf2:	687a      	ldr	r2, [r7, #4]
 800fdf4:	601a      	str	r2, [r3, #0]

    ip_ptr -> nx_ipv6_nd_cache[first_available].nx_nd_cache_interface_ptr = iface_address -> nxd_ipv6_address_attached;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	685a      	ldr	r2, [r3, #4]
 800fdfa:	68f9      	ldr	r1, [r7, #12]
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	2034      	movs	r0, #52	; 0x34
 800fe00:	fb00 f303 	mul.w	r3, r0, r3
 800fe04:	440b      	add	r3, r1
 800fe06:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800fe0a:	601a      	str	r2, [r3, #0]

    /* Release the protection. */
    *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[first_available];
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	2234      	movs	r2, #52	; 0x34
 800fe10:	fb02 f303 	mul.w	r3, r2, r3
 800fe14:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	441a      	add	r2, r3
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	601a      	str	r2, [r3, #0]

    return(NX_SUCCESS);
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3728      	adds	r7, #40	; 0x28
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <_nx_nd_cache_delete_internal>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_nd_cache_delete_internal(NX_IP *ip_ptr, ND_CACHE_ENTRY *entry)
{
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b086      	sub	sp, #24
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
 800fe32:	6039      	str	r1, [r7, #0]

UINT       i = 0, table_size;
 800fe34:	2300      	movs	r3, #0
 800fe36:	617b      	str	r3, [r7, #20]
NX_PACKET *pkt, *next_pkt;

    /* Free up the queued packets. */
    pkt = entry -> nx_nd_cache_packet_waiting_head;
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe3c:	60fb      	str	r3, [r7, #12]

    /* Flush any packets enqueued waiting on neighbor reachability confirmation. */
    while (pkt)
 800fe3e:	e007      	b.n	800fe50 <_nx_nd_cache_delete_internal+0x26>
    {

        next_pkt = pkt -> nx_packet_queue_next;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	69db      	ldr	r3, [r3, #28]
 800fe44:	60bb      	str	r3, [r7, #8]
        _nx_packet_transmit_release(pkt);
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f000 feb0 	bl	8010bac <_nx_packet_transmit_release>
        pkt = next_pkt;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	60fb      	str	r3, [r7, #12]
    while (pkt)
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d1f4      	bne.n	800fe40 <_nx_nd_cache_delete_internal+0x16>
    }
    entry -> nx_nd_cache_packet_waiting_queue_length = 0;
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	769a      	strb	r2, [r3, #26]

    /* Clear the pointers to the original start and end of the packet queue. */
    entry -> nx_nd_cache_packet_waiting_head = NX_NULL;
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	629a      	str	r2, [r3, #40]	; 0x28
    entry -> nx_nd_cache_packet_waiting_tail = NX_NULL;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	2200      	movs	r2, #0
 800fe66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initialize the rest of the fields. */
    memset(entry -> nx_nd_cache_mac_addr, 0, 6);
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	3310      	adds	r3, #16
 800fe6c:	2206      	movs	r2, #6
 800fe6e:	2100      	movs	r1, #0
 800fe70:	4618      	mov	r0, r3
 800fe72:	f00a fa57 	bl	801a324 <memset>

    /* Clear the entry out.  */
    entry -> nx_nd_cache_nd_status = ND_CACHE_STATE_INVALID;
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	765a      	strb	r2, [r3, #25]
    entry -> nx_nd_cache_is_static = 0;
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	76da      	strb	r2, [r3, #27]

    /* Is there a corresponding link in the default router list? */
    if (entry -> nx_nd_cache_is_router)
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d003      	beq.n	800fe92 <_nx_nd_cache_delete_internal+0x68>
    {

        /* Set its pointer to this entry in the cache table to NULL. */
        entry -> nx_nd_cache_is_router -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8e:	2200      	movs	r2, #0
 800fe90:	619a      	str	r2, [r3, #24]
    }

    /* And indicate that this cache entry is no longer a router. */
    entry -> nx_nd_cache_is_router = NX_NULL;
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	2200      	movs	r2, #0
 800fe96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800fe9e:	613b      	str	r3, [r7, #16]

    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800fea0:	e03b      	b.n	800ff1a <_nx_nd_cache_delete_internal+0xf0>
    {

        /* Skip invalid entries. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 800fea2:	6879      	ldr	r1, [r7, #4]
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	4613      	mov	r3, r2
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	4413      	add	r3, r2
 800feac:	00db      	lsls	r3, r3, #3
 800feae:	440b      	add	r3, r1
 800feb0:	3390      	adds	r3, #144	; 0x90
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d103      	bne.n	800fec0 <_nx_nd_cache_delete_internal+0x96>
        {
            i++;
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	3301      	adds	r3, #1
 800febc:	617b      	str	r3, [r7, #20]
            continue;
 800febe:	e02c      	b.n	800ff1a <_nx_nd_cache_delete_internal+0xf0>
        }

        /* Keep track of valid entries we have checked. */
        table_size--;
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	3b01      	subs	r3, #1
 800fec4:	613b      	str	r3, [r7, #16]

        /* Find the destination unit. */
        if (ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry == entry)
 800fec6:	6879      	ldr	r1, [r7, #4]
 800fec8:	697a      	ldr	r2, [r7, #20]
 800feca:	4613      	mov	r3, r2
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	4413      	add	r3, r2
 800fed0:	00db      	lsls	r3, r3, #3
 800fed2:	440b      	add	r3, r1
 800fed4:	33b4      	adds	r3, #180	; 0xb4
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d11a      	bne.n	800ff14 <_nx_nd_cache_delete_internal+0xea>
        {

            /* Set the status. */
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid = 0;
 800fede:	6879      	ldr	r1, [r7, #4]
 800fee0:	697a      	ldr	r2, [r7, #20]
 800fee2:	4613      	mov	r3, r2
 800fee4:	009b      	lsls	r3, r3, #2
 800fee6:	4413      	add	r3, r2
 800fee8:	00db      	lsls	r3, r3, #3
 800feea:	440b      	add	r3, r1
 800feec:	3390      	adds	r3, #144	; 0x90
 800feee:	2200      	movs	r2, #0
 800fef0:	601a      	str	r2, [r3, #0]

            /* Set its pointer to this entry in the destination table to NULL. */
            ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_nd_entry = NX_NULL;
 800fef2:	6879      	ldr	r1, [r7, #4]
 800fef4:	697a      	ldr	r2, [r7, #20]
 800fef6:	4613      	mov	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	4413      	add	r3, r2
 800fefc:	00db      	lsls	r3, r3, #3
 800fefe:	440b      	add	r3, r1
 800ff00:	33b4      	adds	r3, #180	; 0xb4
 800ff02:	2200      	movs	r2, #0
 800ff04:	601a      	str	r2, [r3, #0]

            /* Update the destination_table size. */
            ip_ptr -> nx_ipv6_destination_table_size--;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800ff0c:	1e5a      	subs	r2, r3, #1
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        }

        i++;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	3301      	adds	r3, #1
 800ff18:	617b      	str	r3, [r7, #20]
    while (table_size && i < NX_IPV6_DESTINATION_TABLE_SIZE)
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d002      	beq.n	800ff26 <_nx_nd_cache_delete_internal+0xfc>
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2b07      	cmp	r3, #7
 800ff24:	d9bd      	bls.n	800fea2 <_nx_nd_cache_delete_internal+0x78>
    }

    return(NX_SUCCESS);
 800ff26:	2300      	movs	r3, #0
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3718      	adds	r7, #24
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <_nx_nd_cache_fast_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_nd_cache_fast_periodic_update(NX_IP *ip_ptr)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b086      	sub	sp, #24
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	6078      	str	r0, [r7, #4]

INT i;

    /* Loop through all entries, and invalidate the ones that are timed out. */
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 800ff38:	2300      	movs	r3, #0
 800ff3a:	60fb      	str	r3, [r7, #12]
 800ff3c:	e0b1      	b.n	80100a2 <_nx_nd_cache_fast_periodic_update+0x172>
    {

        /* Check the entry is valid. */
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2134      	movs	r1, #52	; 0x34
 800ff44:	fb01 f303 	mul.w	r3, r1, r3
 800ff48:	4413      	add	r3, r2
 800ff4a:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f000 80a0 	beq.w	8010096 <_nx_nd_cache_fast_periodic_update+0x166>
        {
            continue;
        }

        /* Is this entry being checked for neighbor discovery? */
        if ((ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status != ND_CACHE_STATE_PROBE) &&
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2134      	movs	r1, #52	; 0x34
 800ff5c:	fb01 f303 	mul.w	r3, r1, r3
 800ff60:	4413      	add	r3, r2
 800ff62:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	2b05      	cmp	r3, #5
 800ff6a:	d00b      	beq.n	800ff84 <_nx_nd_cache_fast_periodic_update+0x54>
            (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status != ND_CACHE_STATE_INCOMPLETE))
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2134      	movs	r1, #52	; 0x34
 800ff72:	fb01 f303 	mul.w	r3, r1, r3
 800ff76:	4413      	add	r3, r2
 800ff78:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800ff7c:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status != ND_CACHE_STATE_PROBE) &&
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	f040 808b 	bne.w	801009a <_nx_nd_cache_fast_periodic_update+0x16a>
        }



        /* Has this entry timed out? */
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick == 0)
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2134      	movs	r1, #52	; 0x34
 800ff8a:	fb01 f303 	mul.w	r3, r1, r3
 800ff8e:	4413      	add	r3, r2
 800ff90:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d169      	bne.n	801006e <_nx_nd_cache_fast_periodic_update+0x13e>
        {

            /* Yes, is the max number of solicitations used up? */
            if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_num_solicit == 0)
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2134      	movs	r1, #52	; 0x34
 800ffa0:	fb01 f303 	mul.w	r3, r1, r3
 800ffa4:	4413      	add	r3, r2
 800ffa6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10c      	bne.n	800ffca <_nx_nd_cache_fast_periodic_update+0x9a>
            {

                /* Yes; We already sent #num_solicit packets. So the destination
                   is unreachable.  Clean up router, destination and cache table entries and crosslinks. */
                _nx_nd_cache_delete_internal(ip_ptr, &ip_ptr -> nx_ipv6_nd_cache[i]);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2234      	movs	r2, #52	; 0x34
 800ffb4:	fb02 f303 	mul.w	r3, r2, r3
 800ffb8:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f7ff ff31 	bl	800fe2a <_nx_nd_cache_delete_internal>
 800ffc8:	e068      	b.n	801009c <_nx_nd_cache_fast_periodic_update+0x16c>
            else
            {
            /*  Send another solicitation (NS) packet. */
            INT uniCastNS;

                uniCastNS = (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_PROBE);
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2134      	movs	r1, #52	; 0x34
 800ffd0:	fb01 f303 	mul.w	r3, r1, r3
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	2b05      	cmp	r3, #5
 800ffde:	bf0c      	ite	eq
 800ffe0:	2301      	moveq	r3, #1
 800ffe2:	2300      	movne	r3, #0
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	60bb      	str	r3, [r7, #8]

                /* Send out another mcast ns.*/
                _nx_icmpv6_send_ns(ip_ptr, ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_dest_ip,
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2234      	movs	r2, #52	; 0x34
 800ffec:	fb02 f303 	mul.w	r3, r2, r3
 800fff0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	18d1      	adds	r1, r2, r3
                                   1, ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_outgoing_address, uniCastNS, &ip_ptr -> nx_ipv6_nd_cache[i]);
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2034      	movs	r0, #52	; 0x34
 800fffe:	fb00 f303 	mul.w	r3, r0, r3
 8010002:	4413      	add	r3, r2
 8010004:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010008:	6818      	ldr	r0, [r3, #0]
                _nx_icmpv6_send_ns(ip_ptr, ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_dest_ip,
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2234      	movs	r2, #52	; 0x34
 801000e:	fb02 f303 	mul.w	r3, r2, r3
 8010012:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	4413      	add	r3, r2
 801001a:	9301      	str	r3, [sp, #4]
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	4603      	mov	r3, r0
 8010022:	2201      	movs	r2, #1
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7fb fcaf 	bl	800b988 <_nx_icmpv6_send_ns>

                /* Keep track of how many we have sent. */
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_num_solicit--;
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2134      	movs	r1, #52	; 0x34
 8010030:	fb01 f303 	mul.w	r3, r1, r3
 8010034:	4413      	add	r3, r2
 8010036:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	3b01      	subs	r3, #1
 801003e:	b2d8      	uxtb	r0, r3
 8010040:	687a      	ldr	r2, [r7, #4]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2134      	movs	r1, #52	; 0x34
 8010046:	fb01 f303 	mul.w	r3, r1, r3
 801004a:	4413      	add	r3, r2
 801004c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010050:	4602      	mov	r2, r0
 8010052:	701a      	strb	r2, [r3, #0]

                /* Reset the expiration timer for sending the next NS.  */
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick = ip_ptr -> nx_ipv6_retrans_timer_ticks;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 2ec4 	ldr.w	r2, [r3, #3780]	; 0xec4
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2034      	movs	r0, #52	; 0x34
 8010060:	fb00 f303 	mul.w	r3, r0, r3
 8010064:	440b      	add	r3, r1
 8010066:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801006a:	601a      	str	r2, [r3, #0]
 801006c:	e016      	b.n	801009c <_nx_nd_cache_fast_periodic_update+0x16c>

            /* Note that the only cache entries whose timer ticks are being decremented in this
               function are states whose timer tick was set in actual timer ticks (as compared
               with the slow periodic update where cache entry'timer ticks' are updated in
               seconds.  This is intentional and correct behavior. */
            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick--;
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2134      	movs	r1, #52	; 0x34
 8010074:	fb01 f303 	mul.w	r3, r1, r3
 8010078:	4413      	add	r3, r2
 801007a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	1e5a      	subs	r2, r3, #1
 8010082:	6879      	ldr	r1, [r7, #4]
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2034      	movs	r0, #52	; 0x34
 8010088:	fb00 f303 	mul.w	r3, r0, r3
 801008c:	440b      	add	r3, r1
 801008e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010092:	601a      	str	r2, [r3, #0]
 8010094:	e002      	b.n	801009c <_nx_nd_cache_fast_periodic_update+0x16c>
            continue;
 8010096:	bf00      	nop
 8010098:	e000      	b.n	801009c <_nx_nd_cache_fast_periodic_update+0x16c>
            continue;
 801009a:	bf00      	nop
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	3301      	adds	r3, #1
 80100a0:	60fb      	str	r3, [r7, #12]
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2b0f      	cmp	r3, #15
 80100a6:	f77f af4a 	ble.w	800ff3e <_nx_nd_cache_fast_periodic_update+0xe>
        }
    }
}
 80100aa:	bf00      	nop
 80100ac:	bf00      	nop
 80100ae:	3710      	adds	r7, #16
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <_nx_nd_cache_find_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_nd_cache_find_entry(NX_IP *ip_ptr,
                             ULONG *dest_ip, ND_CACHE_ENTRY **nd_cache_entry)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b086      	sub	sp, #24
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
UINT i;
UINT index;

    /* Initialize the return value. */
    *nd_cache_entry = NX_NULL;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	601a      	str	r2, [r3, #0]

    /* Compute a simple hash based on the dest_ip */
    index = (UINT)((dest_ip[0] + dest_ip[1] + dest_ip[2] + dest_ip[3]) %
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	3304      	adds	r3, #4
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	441a      	add	r2, r3
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	3308      	adds	r3, #8
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	441a      	add	r2, r3
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	330c      	adds	r3, #12
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4413      	add	r3, r2
 80100e2:	f003 030f 	and.w	r3, r3, #15
 80100e6:	613b      	str	r3, [r7, #16]
                   (NX_IPV6_NEIGHBOR_CACHE_SIZE));

    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 80100e8:	2300      	movs	r3, #0
 80100ea:	617b      	str	r3, [r7, #20]
 80100ec:	e03b      	b.n	8010166 <_nx_nd_cache_find_entry+0xb2>
    {

        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 80100ee:	68fa      	ldr	r2, [r7, #12]
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	2134      	movs	r1, #52	; 0x34
 80100f4:	fb01 f303 	mul.w	r3, r1, r3
 80100f8:	4413      	add	r3, r2
 80100fa:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d025      	beq.n	8010150 <_nx_nd_cache_find_entry+0x9c>
            (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_interface_ptr) &&
 8010104:	68fa      	ldr	r2, [r7, #12]
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	2134      	movs	r1, #52	; 0x34
 801010a:	fb01 f303 	mul.w	r3, r1, r3
 801010e:	4413      	add	r3, r2
 8010110:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8010114:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_nd_status != ND_CACHE_STATE_INVALID) &&
 8010116:	2b00      	cmp	r3, #0
 8010118:	d01a      	beq.n	8010150 <_nx_nd_cache_find_entry+0x9c>
            (CHECK_IPV6_ADDRESSES_SAME(&ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_dest_ip[0], dest_ip)))
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	2234      	movs	r2, #52	; 0x34
 801011e:	fb02 f303 	mul.w	r3, r2, r3
 8010122:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8010126:	68fa      	ldr	r2, [r7, #12]
 8010128:	4413      	add	r3, r2
 801012a:	68b9      	ldr	r1, [r7, #8]
 801012c:	4618      	mov	r0, r3
 801012e:	f7ff fb1a 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 8010132:	4603      	mov	r3, r0
            (ip_ptr -> nx_ipv6_nd_cache[index].nx_nd_cache_interface_ptr) &&
 8010134:	2b00      	cmp	r3, #0
 8010136:	d00b      	beq.n	8010150 <_nx_nd_cache_find_entry+0x9c>
        {

            /* find the entry */
            *nd_cache_entry = &ip_ptr -> nx_ipv6_nd_cache[index];
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	2234      	movs	r2, #52	; 0x34
 801013c:	fb02 f303 	mul.w	r3, r2, r3
 8010140:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	441a      	add	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 801014c:	2300      	movs	r3, #0
 801014e:	e00e      	b.n	801016e <_nx_nd_cache_find_entry+0xba>
        }

        index++;
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	3301      	adds	r3, #1
 8010154:	613b      	str	r3, [r7, #16]

        /* Check for overflow */
        if (index == NX_IPV6_NEIGHBOR_CACHE_SIZE)
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	2b10      	cmp	r3, #16
 801015a:	d101      	bne.n	8010160 <_nx_nd_cache_find_entry+0xac>
        {
            index = 0;
 801015c:	2300      	movs	r3, #0
 801015e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	3301      	adds	r3, #1
 8010164:	617b      	str	r3, [r7, #20]
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	2b0f      	cmp	r3, #15
 801016a:	d9c0      	bls.n	80100ee <_nx_nd_cache_find_entry+0x3a>
        }
    }

    return(NX_NOT_SUCCESSFUL);
 801016c:	2343      	movs	r3, #67	; 0x43
}
 801016e:	4618      	mov	r0, r3
 8010170:	3718      	adds	r7, #24
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <_nx_nd_cache_slow_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_nd_cache_slow_periodic_update(NX_IP *ip_ptr)
{
 8010176:	b480      	push	{r7}
 8010178:	b085      	sub	sp, #20
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]

INT i;

    /* Check all entries in the ND cache for timer expiration. */
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 801017e:	2300      	movs	r3, #0
 8010180:	60fb      	str	r3, [r7, #12]
 8010182:	e0ae      	b.n	80102e2 <_nx_nd_cache_slow_periodic_update+0x16c>
    {
        /* Skip the invalid or empty ones. */
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_INVALID)
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2134      	movs	r1, #52	; 0x34
 801018a:	fb01 f303 	mul.w	r3, r1, r3
 801018e:	4413      	add	r3, r2
 8010190:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	f000 809d 	beq.w	80102d6 <_nx_nd_cache_slow_periodic_update+0x160>
        {
            continue;
        }

        /* No need to update the static entries! */
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_is_static)
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2134      	movs	r1, #52	; 0x34
 80101a2:	fb01 f303 	mul.w	r3, r1, r3
 80101a6:	4413      	add	r3, r2
 80101a8:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	f040 8093 	bne.w	80102da <_nx_nd_cache_slow_periodic_update+0x164>
        {
            continue;
        }

        /* If this is a reachable entry... */
        if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_REACHABLE)
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2134      	movs	r1, #52	; 0x34
 80101ba:	fb01 f303 	mul.w	r3, r1, r3
 80101be:	4413      	add	r3, r2
 80101c0:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	2b02      	cmp	r3, #2
 80101c8:	d128      	bne.n	801021c <_nx_nd_cache_slow_periodic_update+0xa6>
        {

            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick--;
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2134      	movs	r1, #52	; 0x34
 80101d0:	fb01 f303 	mul.w	r3, r1, r3
 80101d4:	4413      	add	r3, r2
 80101d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	1e5a      	subs	r2, r3, #1
 80101de:	6879      	ldr	r1, [r7, #4]
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2034      	movs	r0, #52	; 0x34
 80101e4:	fb00 f303 	mul.w	r3, r0, r3
 80101e8:	440b      	add	r3, r1
 80101ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80101ee:	601a      	str	r2, [r3, #0]

            /* And we have timed out... */
            if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick == 0)
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2134      	movs	r1, #52	; 0x34
 80101f6:	fb01 f303 	mul.w	r3, r1, r3
 80101fa:	4413      	add	r3, r2
 80101fc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d16a      	bne.n	80102dc <_nx_nd_cache_slow_periodic_update+0x166>
            {

                /* Time to move the state into the STALE state. */
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status = ND_CACHE_STATE_STALE;
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2134      	movs	r1, #52	; 0x34
 801020c:	fb01 f303 	mul.w	r3, r1, r3
 8010210:	4413      	add	r3, r2
 8010212:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 8010216:	2203      	movs	r2, #3
 8010218:	701a      	strb	r2, [r3, #0]
 801021a:	e05f      	b.n	80102dc <_nx_nd_cache_slow_periodic_update+0x166>
            }
        }
        /* Entries in the delay state are set to be 'probed'. */
        else if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_DELAY)
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2134      	movs	r1, #52	; 0x34
 8010222:	fb01 f303 	mul.w	r3, r1, r3
 8010226:	4413      	add	r3, r2
 8010228:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	2b04      	cmp	r3, #4
 8010230:	d132      	bne.n	8010298 <_nx_nd_cache_slow_periodic_update+0x122>
        {

            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick--;
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2134      	movs	r1, #52	; 0x34
 8010238:	fb01 f303 	mul.w	r3, r1, r3
 801023c:	4413      	add	r3, r2
 801023e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	1e5a      	subs	r2, r3, #1
 8010246:	6879      	ldr	r1, [r7, #4]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2034      	movs	r0, #52	; 0x34
 801024c:	fb00 f303 	mul.w	r3, r0, r3
 8010250:	440b      	add	r3, r1
 8010252:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010256:	601a      	str	r2, [r3, #0]

            /* Has the timeout expired? */
            if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick == 0)
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2134      	movs	r1, #52	; 0x34
 801025e:	fb01 f303 	mul.w	r3, r1, r3
 8010262:	4413      	add	r3, r2
 8010264:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d136      	bne.n	80102dc <_nx_nd_cache_slow_periodic_update+0x166>
            {

                /* Set to the probe state. We do not send out NS;
                   the nd_cache_fast_periodic_update will handle the
                   processing of this entry now. */
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status = ND_CACHE_STATE_PROBE;
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2134      	movs	r1, #52	; 0x34
 8010274:	fb01 f303 	mul.w	r3, r1, r3
 8010278:	4413      	add	r3, r2
 801027a:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 801027e:	2205      	movs	r2, #5
 8010280:	701a      	strb	r2, [r3, #0]
                ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_num_solicit = NX_MAX_UNICAST_SOLICIT;
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2134      	movs	r1, #52	; 0x34
 8010288:	fb01 f303 	mul.w	r3, r1, r3
 801028c:	4413      	add	r3, r2
 801028e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010292:	2203      	movs	r2, #3
 8010294:	701a      	strb	r2, [r3, #0]
 8010296:	e021      	b.n	80102dc <_nx_nd_cache_slow_periodic_update+0x166>
            }
        }
        else if (ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_nd_status == ND_CACHE_STATE_STALE)
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2134      	movs	r1, #52	; 0x34
 801029e:	fb01 f303 	mul.w	r3, r1, r3
 80102a2:	4413      	add	r3, r2
 80102a4:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	2b03      	cmp	r3, #3
 80102ac:	d116      	bne.n	80102dc <_nx_nd_cache_slow_periodic_update+0x166>

            /* When the entry is in stale mode, we actually increment the timer_tick.
               The larger the timer_tick value, the longer then entry has been in
               stale mode.  This makes the entry a target for recycling (being replaced
               by a newer reachable entry). */
            ip_ptr -> nx_ipv6_nd_cache[i].nx_nd_cache_timer_tick++;
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2134      	movs	r1, #52	; 0x34
 80102b4:	fb01 f303 	mul.w	r3, r1, r3
 80102b8:	4413      	add	r3, r2
 80102ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	1c5a      	adds	r2, r3, #1
 80102c2:	6879      	ldr	r1, [r7, #4]
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2034      	movs	r0, #52	; 0x34
 80102c8:	fb00 f303 	mul.w	r3, r0, r3
 80102cc:	440b      	add	r3, r1
 80102ce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80102d2:	601a      	str	r2, [r3, #0]
 80102d4:	e002      	b.n	80102dc <_nx_nd_cache_slow_periodic_update+0x166>
            continue;
 80102d6:	bf00      	nop
 80102d8:	e000      	b.n	80102dc <_nx_nd_cache_slow_periodic_update+0x166>
            continue;
 80102da:	bf00      	nop
    for (i = 0; i < NX_IPV6_NEIGHBOR_CACHE_SIZE; i++)
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3301      	adds	r3, #1
 80102e0:	60fb      	str	r3, [r7, #12]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2b0f      	cmp	r3, #15
 80102e6:	f77f af4d 	ble.w	8010184 <_nx_nd_cache_slow_periodic_update+0xe>
        }
    }
}
 80102ea:	bf00      	nop
 80102ec:	bf00      	nop
 80102ee:	3714      	adds	r7, #20
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b08c      	sub	sp, #48	; 0x30
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	429a      	cmp	r2, r3
 801030e:	d901      	bls.n	8010314 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 8010310:	234d      	movs	r3, #77	; 0x4d
 8010312:	e0b2      	b.n	801047a <_nx_packet_allocate+0x182>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	2200      	movs	r2, #0
 8010318:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801031a:	f3ef 8310 	mrs	r3, PRIMASK
 801031e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010320:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010322:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010324:	b672      	cpsid	i
    return(int_posture);
 8010326:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 8010328:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	689b      	ldr	r3, [r3, #8]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d03e      	beq.n	80103b0 <_nx_packet_allocate+0xb8>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	1e5a      	subs	r2, r3, #1
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	69db      	ldr	r3, [r3, #28]
 8010340:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 8010342:	6a3b      	ldr	r3, [r7, #32]
 8010344:	69da      	ldr	r2, [r3, #28]
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 801034a:	6a3b      	ldr	r3, [r7, #32]
 801034c:	2200      	movs	r2, #0
 801034e:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 8010350:	6a3b      	ldr	r3, [r7, #32]
 8010352:	2200      	movs	r2, #0
 8010354:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 8010356:	6a3b      	ldr	r3, [r7, #32]
 8010358:	2200      	movs	r2, #0
 801035a:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 801035c:	6a3b      	ldr	r3, [r7, #32]
 801035e:	2200      	movs	r2, #0
 8010360:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 8010362:	6a3b      	ldr	r3, [r7, #32]
 8010364:	691a      	ldr	r2, [r3, #16]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	441a      	add	r2, r3
 801036a:	6a3b      	ldr	r3, [r7, #32]
 801036c:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 801036e:	6a3b      	ldr	r3, [r7, #32]
 8010370:	689a      	ldr	r2, [r3, #8]
 8010372:	6a3b      	ldr	r3, [r7, #32]
 8010374:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8010376:	6a3b      	ldr	r3, [r7, #32]
 8010378:	2200      	movs	r2, #0
 801037a:	635a      	str	r2, [r3, #52]	; 0x34
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 801037c:	6a3b      	ldr	r3, [r7, #32]
 801037e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8010382:	621a      	str	r2, [r3, #32]

#ifdef FEATURE_NX_IPV6

        /* Clear the option state. */
        work_ptr -> nx_packet_option_state = 0;
 8010384:	6a3b      	ldr	r3, [r7, #32]
 8010386:	2200      	movs	r2, #0
 8010388:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 801038c:	6a3b      	ldr	r3, [r7, #32]
 801038e:	2204      	movs	r2, #4
 8010390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	2200      	movs	r2, #0
 8010398:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	6a3a      	ldr	r2, [r7, #32]
 80103a8:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 80103aa:	2300      	movs	r3, #0
 80103ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103ae:	e05d      	b.n	801046c <_nx_packet_allocate+0x174>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	691b      	ldr	r3, [r3, #16]
 80103b4:	1c5a      	adds	r2, r3, #1
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d053      	beq.n	8010468 <_nx_packet_allocate+0x170>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	695b      	ldr	r3, [r3, #20]
 80103c4:	1c5a      	adds	r2, r3, #1
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 80103ca:	4b2e      	ldr	r3, [pc, #184]	; (8010484 <_nx_packet_allocate+0x18c>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 80103d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d2:	4a2d      	ldr	r2, [pc, #180]	; (8010488 <_nx_packet_allocate+0x190>)
 80103d4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 80103d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 80103dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 80103e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d012      	beq.n	8010416 <_nx_packet_allocate+0x11e>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 80103f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f6:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 80103fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010400:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801040a:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010412:	675a      	str	r2, [r3, #116]	; 0x74
 8010414:	e008      	b.n	8010428 <_nx_packet_allocate+0x130>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801041a:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 801041c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010420:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 8010422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010426:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801042c:	1c5a      	adds	r2, r3, #1
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8010432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010434:	220c      	movs	r2, #12
 8010436:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	2201      	movs	r2, #1
 801043c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801043e:	4b13      	ldr	r3, [pc, #76]	; (801048c <_nx_packet_allocate+0x194>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	3301      	adds	r3, #1
 8010444:	4a11      	ldr	r2, [pc, #68]	; (801048c <_nx_packet_allocate+0x194>)
 8010446:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	64da      	str	r2, [r3, #76]	; 0x4c
 801044e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010450:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	f383 8810 	msr	PRIMASK, r3
}
 8010458:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801045a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801045c:	f008 feee 	bl	801923c <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 8010460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010466:	e008      	b.n	801047a <_nx_packet_allocate+0x182>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 8010468:	2301      	movs	r3, #1
 801046a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801046c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	f383 8810 	msr	PRIMASK, r3
}
 8010476:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801047a:	4618      	mov	r0, r3
 801047c:	3730      	adds	r7, #48	; 0x30
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	24000874 	.word	0x24000874
 8010488:	080107ad 	.word	0x080107ad
 801048c:	2400090c 	.word	0x2400090c

08010490 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b08e      	sub	sp, #56	; 0x38
 8010494:	af02      	add	r7, sp, #8
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
 801049c:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	2200      	movs	r2, #0
 80104a2:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 80104a4:	2301      	movs	r3, #1
 80104a6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d101      	bne.n	80104b4 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 80104b0:	2312      	movs	r3, #18
 80104b2:	e07b      	b.n	80105ac <_nx_packet_copy+0x11c>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 80104b4:	f107 0114 	add.w	r1, r7, #20
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2200      	movs	r2, #0
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f7ff ff1b 	bl	80102f8 <_nx_packet_allocate>
 80104c2:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 80104c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 80104ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104cc:	e06e      	b.n	80105ac <_nx_packet_copy+0x11c>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	68fa      	ldr	r2, [r7, #12]
 80104d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80104d4:	635a      	str	r2, [r3, #52]	; 0x34

#ifdef FEATURE_NX_IPV6

    /* Copy the IP version information. */
    work_ptr -> nx_packet_ip_version = packet_ptr -> nx_packet_ip_version;
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80104de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 80104e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d110      	bne.n	801050e <_nx_packet_copy+0x7e>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	68da      	ldr	r2, [r3, #12]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	691b      	ldr	r3, [r3, #16]
 80104f4:	1ad3      	subs	r3, r2, r3
 80104f6:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 80104f8:	6978      	ldr	r0, [r7, #20]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6919      	ldr	r1, [r3, #16]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6a3a      	ldr	r2, [r7, #32]
 8010506:	f000 f855 	bl	80105b4 <_nx_packet_data_append>
 801050a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801050c:	e00f      	b.n	801052e <_nx_packet_copy+0x9e>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	68da      	ldr	r2, [r3, #12]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 801051a:	6978      	ldr	r0, [r7, #20]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6899      	ldr	r1, [r3, #8]
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	9300      	str	r3, [sp, #0]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6a3a      	ldr	r2, [r7, #32]
 8010528:	f000 f844 	bl	80105b4 <_nx_packet_data_append>
 801052c:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 801052e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010530:	2b00      	cmp	r3, #0
 8010532:	d005      	beq.n	8010540 <_nx_packet_copy+0xb0>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	4618      	mov	r0, r3
 8010538:	f000 fa7e 	bl	8010a38 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 801053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053e:	e035      	b.n	80105ac <_nx_packet_copy+0x11c>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 8010546:	2300      	movs	r3, #0
 8010548:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d1ca      	bne.n	80104e6 <_nx_packet_copy+0x56>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010552:	689a      	ldr	r2, [r3, #8]
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	691b      	ldr	r3, [r3, #16]
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	6919      	ldr	r1, [r3, #16]
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	69fa      	ldr	r2, [r7, #28]
 8010564:	440a      	add	r2, r1
 8010566:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	69fa      	ldr	r2, [r7, #28]
 8010570:	1a8a      	subs	r2, r1, r2
 8010572:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 8010574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057a:	691b      	ldr	r3, [r3, #16]
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	6919      	ldr	r1, [r3, #16]
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	69ba      	ldr	r2, [r7, #24]
 8010588:	440a      	add	r2, r1
 801058a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010594:	429a      	cmp	r2, r3
 8010596:	d005      	beq.n	80105a4 <_nx_packet_copy+0x114>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	4618      	mov	r0, r3
 801059c:	f000 fa4c 	bl	8010a38 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 80105a0:	2312      	movs	r3, #18
 80105a2:	e003      	b.n	80105ac <_nx_packet_copy+0x11c>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 80105a4:	697a      	ldr	r2, [r7, #20]
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 80105aa:	2300      	movs	r3, #0
    }
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3730      	adds	r7, #48	; 0x30
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b08c      	sub	sp, #48	; 0x30
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
 80105c0:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 80105c2:	2300      	movs	r3, #0
 80105c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	699b      	ldr	r3, [r3, #24]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d016      	beq.n	80105fc <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	699b      	ldr	r3, [r3, #24]
 80105d6:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	695a      	ldr	r2, [r3, #20]
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 80105e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e6:	4413      	add	r3, r2
 80105e8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1ee      	bne.n	80105d8 <_nx_packet_data_append+0x24>
 80105fa:	e005      	b.n	8010608 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	695a      	ldr	r2, [r3, #20]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	1ad3      	subs	r3, r2, r3
 8010606:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 8010608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d247      	bcs.n	80106a0 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 8010610:	2300      	movs	r3, #0
 8010612:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 8010614:	e033      	b.n	801067e <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8010616:	f107 0114 	add.w	r1, r7, #20
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	2200      	movs	r2, #0
 801061e:	6838      	ldr	r0, [r7, #0]
 8010620:	f7ff fe6a 	bl	80102f8 <_nx_packet_allocate>
 8010624:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d007      	beq.n	801063c <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 801062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062e:	2b00      	cmp	r3, #0
 8010630:	d002      	beq.n	8010638 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 8010632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010634:	f000 fa00 	bl	8010a38 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	e078      	b.n	801072e <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 801063c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063e:	2b00      	cmp	r3, #0
 8010640:	d012      	beq.n	8010668 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 8010642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010644:	699b      	ldr	r3, [r3, #24]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d007      	beq.n	801065a <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	699b      	ldr	r3, [r3, #24]
 801064e:	697a      	ldr	r2, [r7, #20]
 8010650:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 8010652:	697a      	ldr	r2, [r7, #20]
 8010654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010656:	619a      	str	r2, [r3, #24]
 8010658:	e008      	b.n	801066c <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 801065a:	697a      	ldr	r2, [r7, #20]
 801065c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065e:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 8010660:	697a      	ldr	r2, [r7, #20]
 8010662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010664:	605a      	str	r2, [r3, #4]
 8010666:	e001      	b.n	801066c <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	695a      	ldr	r2, [r3, #20]
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	1ad3      	subs	r3, r2, r3
 8010676:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 8010678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067a:	4413      	add	r3, r2
 801067c:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 801067e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	429a      	cmp	r2, r3
 8010684:	d3c7      	bcc.n	8010616 <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 8010686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010688:	2b00      	cmp	r3, #0
 801068a:	d003      	beq.n	8010694 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 801068c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010690:	605a      	str	r2, [r3, #4]
 8010692:	e002      	b.n	801069a <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010698:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	2200      	movs	r2, #0
 801069e:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	441a      	add	r2, r3
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d003      	beq.n	80106c0 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	699b      	ldr	r3, [r3, #24]
 80106bc:	617b      	str	r3, [r7, #20]
 80106be:	e032      	b.n	8010726 <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 80106c4:	e02f      	b.n	8010726 <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	695a      	ldr	r2, [r3, #20]
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	1ad3      	subs	r3, r2, r3
 80106d0:	461a      	mov	r2, r3
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d202      	bcs.n	80106de <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	623b      	str	r3, [r7, #32]
 80106dc:	e005      	b.n	80106ea <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	695a      	ldr	r2, [r3, #20]
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	68db      	ldr	r3, [r3, #12]
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified.  lgtm[cpp/banned-api-usage-required-any] */
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	6a3a      	ldr	r2, [r7, #32]
 80106f0:	69f9      	ldr	r1, [r7, #28]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f009 fdee 	bl	801a2d4 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	6a3b      	ldr	r3, [r7, #32]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	68d9      	ldr	r1, [r3, #12]
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	6a3a      	ldr	r2, [r7, #32]
 8010708:	440a      	add	r2, r1
 801070a:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d009      	beq.n	8010726 <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 8010712:	69fa      	ldr	r2, [r7, #28]
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	4413      	add	r3, r2
 8010718:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 8010720:	697a      	ldr	r2, [r7, #20]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	619a      	str	r2, [r3, #24]
    while (data_size)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1cc      	bne.n	80106c6 <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 801072c:	2300      	movs	r3, #0
}
 801072e:	4618      	mov	r0, r3
 8010730:	3730      	adds	r7, #48	; 0x30
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <_nx_packet_data_retrieve>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b088      	sub	sp, #32
 801073a:	af00      	add	r7, sp, #0
 801073c:	60f8      	str	r0, [r7, #12]
 801073e:	60b9      	str	r1, [r7, #8]
 8010740:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_RETRIEVE, packet_ptr, buffer_start, bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	61bb      	str	r3, [r7, #24]

    /* Pickup the amount of bytes to copy.  */
    *bytes_copied =  packet_ptr -> nx_packet_length;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	601a      	str	r2, [r3, #0]

    /* Setup the remaining bytes.  */
    remaining_bytes =  packet_ptr -> nx_packet_length;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010752:	61fb      	str	r3, [r7, #28]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (packet_ptr)
 8010754:	e017      	b.n	8010786 <_nx_packet_data_retrieve+0x50>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate the bytes to copy in this packet. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	68da      	ldr	r2, [r3, #12]
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	689b      	ldr	r3, [r3, #8]
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	617b      	str	r3, [r7, #20]

        /* Copy data to destination. */
        /* Note: The buffer size must be not less than packet_ptr -> nx_packet_length.  */
        memcpy(destination_ptr, packet_ptr -> nx_packet_prepend_ptr, bytes_to_copy); /* Use case of memcpy is verified. The buffer is provided by user.  lgtm[cpp/banned-api-usage-required-any] */
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	4619      	mov	r1, r3
 801076a:	69b8      	ldr	r0, [r7, #24]
 801076c:	f009 fdb2 	bl	801a2d4 <memcpy>

        remaining_bytes -= bytes_to_copy;
 8010770:	69fa      	ldr	r2, [r7, #28]
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	1ad3      	subs	r3, r2, r3
 8010776:	61fb      	str	r3, [r7, #28]
        destination_ptr += bytes_to_copy;
 8010778:	69ba      	ldr	r2, [r7, #24]
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	4413      	add	r3, r2
 801077e:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	60fb      	str	r3, [r7, #12]
    while (packet_ptr)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d1e4      	bne.n	8010756 <_nx_packet_data_retrieve+0x20>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if the packet chain was valid.  */
    if (remaining_bytes)
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d007      	beq.n	80107a2 <_nx_packet_data_retrieve+0x6c>
    {

        /* Invalid packet chain.  Calculate the actual number of bytes
           copied.  */
        *bytes_copied =  *bytes_copied - remaining_bytes;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	1ad2      	subs	r2, r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	601a      	str	r2, [r3, #0]

        /* Return an error.  */
        return(NX_INVALID_PACKET);
 801079e:	2312      	movs	r3, #18
 80107a0:	e000      	b.n	80107a4 <_nx_packet_data_retrieve+0x6e>
    }

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80107a2:	2300      	movs	r3, #0
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3720      	adds	r7, #32
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b088      	sub	sp, #32
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80107bc:	f3ef 8310 	mrs	r3, PRIMASK
 80107c0:	617b      	str	r3, [r7, #20]
    return(posture);
 80107c2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80107c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80107c6:	b672      	cpsid	i
    return(int_posture);
 80107c8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 80107ca:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d042      	beq.n	801085a <_nx_packet_pool_cleanup+0xae>
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d03f      	beq.n	801085a <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 80107de:	4a23      	ldr	r2, [pc, #140]	; (801086c <_nx_packet_pool_cleanup+0xc0>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d13a      	bne.n	801085a <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d103      	bne.n	80107fc <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	2200      	movs	r2, #0
 80107f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80107fa:	e012      	b.n	8010822 <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	429a      	cmp	r2, r3
 8010804:	d103      	bne.n	801080e <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801080a:	69fb      	ldr	r3, [r7, #28]
 801080c:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010816:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010820:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010826:	1e5a      	subs	r2, r3, #1
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010830:	2b0c      	cmp	r3, #12
 8010832:	d112      	bne.n	801085a <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2201      	movs	r2, #1
 8010838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801083c:	4b0c      	ldr	r3, [pc, #48]	; (8010870 <_nx_packet_pool_cleanup+0xc4>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	3301      	adds	r3, #1
 8010842:	4a0b      	ldr	r2, [pc, #44]	; (8010870 <_nx_packet_pool_cleanup+0xc4>)
 8010844:	6013      	str	r3, [r2, #0]
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f383 8810 	msr	PRIMASK, r3
}
 8010850:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f008 fbf2 	bl	801903c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8010858:	e005      	b.n	8010866 <_nx_packet_pool_cleanup+0xba>
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	f383 8810 	msr	PRIMASK, r3
}
 8010864:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010866:	3720      	adds	r7, #32
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	5041434b 	.word	0x5041434b
 8010870:	2400090c 	.word	0x2400090c

08010874 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b092      	sub	sp, #72	; 0x48
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	3303      	adds	r3, #3
 801088a:	f023 0303 	bic.w	r3, r3, #3
 801088e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8010890:	683a      	ldr	r2, [r7, #0]
 8010892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010894:	1ad2      	subs	r2, r2, r3
 8010896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010898:	4413      	add	r3, r2
 801089a:	f023 0303 	bic.w	r3, r3, #3
 801089e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 80108a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a2:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 80108a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a6:	333c      	adds	r3, #60	; 0x3c
 80108a8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 80108aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ac:	3303      	adds	r3, #3
 80108ae:	f023 0303 	bic.w	r3, r3, #3
 80108b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 80108b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 80108bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4413      	add	r3, r2
 80108c2:	3303      	adds	r3, #3
 80108c4:	f023 0203 	bic.w	r2, r3, #3
 80108c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 80108ce:	223c      	movs	r2, #60	; 0x3c
 80108d0:	2100      	movs	r1, #0
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f009 fd26 	bl	801a324 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	68ba      	ldr	r2, [r7, #8]
 80108dc:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2200      	movs	r2, #0
 80108e2:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	2200      	movs	r2, #0
 80108e8:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108f4:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 80108fc:	683a      	ldr	r2, [r7, #0]
 80108fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010900:	4413      	add	r3, r2
 8010902:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 8010904:	2300      	movs	r3, #0
 8010906:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 8010908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090a:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010910:	4413      	add	r3, r2
 8010912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010914:	4413      	add	r3, r2
 8010916:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 8010918:	e023      	b.n	8010962 <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 801091a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801091c:	3301      	adds	r3, #1
 801091e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 8010920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010924:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 8010926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 801092c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801092e:	2200      	movs	r2, #0
 8010930:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8010932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010934:	f04f 32ff 	mov.w	r2, #4294967295
 8010938:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 801093a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	441a      	add	r2, r3
 8010940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010942:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 8010944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010948:	4413      	add	r3, r2
 801094a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801094c:	441a      	add	r2, r3
 801094e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010950:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 8010952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010954:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095a:	4413      	add	r3, r2
 801095c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801095e:	4413      	add	r3, r2
 8010960:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 8010962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010966:	429a      	cmp	r2, r3
 8010968:	d9d7      	bls.n	801091a <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096e:	4413      	add	r3, r2
 8010970:	425b      	negs	r3, r3
 8010972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010974:	4413      	add	r3, r2
 8010976:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 8010978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801097a:	2200      	movs	r2, #0
 801097c:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010982:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010988:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	683a      	ldr	r2, [r7, #0]
 801098e:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010990:	f3ef 8310 	mrs	r3, PRIMASK
 8010994:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010996:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010998:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801099a:	b672      	cpsid	i
    return(int_posture);
 801099c:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 801099e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	4a19      	ldr	r2, [pc, #100]	; (8010a08 <_nx_packet_pool_create+0x194>)
 80109a4:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 80109a6:	4b19      	ldr	r3, [pc, #100]	; (8010a0c <_nx_packet_pool_create+0x198>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d012      	beq.n	80109d4 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 80109ae:	4b17      	ldr	r3, [pc, #92]	; (8010a0c <_nx_packet_pool_create+0x198>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b4:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 80109b6:	4b15      	ldr	r3, [pc, #84]	; (8010a0c <_nx_packet_pool_create+0x198>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	68fa      	ldr	r2, [r7, #12]
 80109bc:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 80109be:	6a3b      	ldr	r3, [r7, #32]
 80109c0:	68fa      	ldr	r2, [r7, #12]
 80109c2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6a3a      	ldr	r2, [r7, #32]
 80109c8:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 80109ca:	4b10      	ldr	r3, [pc, #64]	; (8010a0c <_nx_packet_pool_create+0x198>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	635a      	str	r2, [r3, #52]	; 0x34
 80109d2:	e008      	b.n	80109e6 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 80109d4:	4a0d      	ldr	r2, [pc, #52]	; (8010a0c <_nx_packet_pool_create+0x198>)
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	68fa      	ldr	r2, [r7, #12]
 80109e4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 80109e6:	4b0a      	ldr	r3, [pc, #40]	; (8010a10 <_nx_packet_pool_create+0x19c>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	3301      	adds	r3, #1
 80109ec:	4a08      	ldr	r2, [pc, #32]	; (8010a10 <_nx_packet_pool_create+0x19c>)
 80109ee:	6013      	str	r3, [r2, #0]
 80109f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	f383 8810 	msr	PRIMASK, r3
}
 80109fa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3748      	adds	r7, #72	; 0x48
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	5041434b 	.word	0x5041434b
 8010a0c:	24000810 	.word	0x24000810
 8010a10:	24000814 	.word	0x24000814

08010a14 <_nx_packet_pool_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _nx_packet_pool_initialize(VOID)
{
 8010a14:	b480      	push	{r7}
 8010a16:	af00      	add	r7, sp, #0

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 8010a18:	4b05      	ldr	r3, [pc, #20]	; (8010a30 <_nx_packet_pool_initialize+0x1c>)
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	601a      	str	r2, [r3, #0]
    _nx_packet_pool_created_count =      0;
 8010a1e:	4b05      	ldr	r3, [pc, #20]	; (8010a34 <_nx_packet_pool_initialize+0x20>)
 8010a20:	2200      	movs	r2, #0
 8010a22:	601a      	str	r2, [r3, #0]
}
 8010a24:	bf00      	nop
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop
 8010a30:	24000810 	.word	0x24000810
 8010a34:	24000814 	.word	0x24000814

08010a38 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b08a      	sub	sp, #40	; 0x28
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 8010a40:	e0a6      	b.n	8010b90 <_nx_packet_release+0x158>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6a1b      	ldr	r3, [r3, #32]
 8010a46:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8010a4a:	d011      	beq.n	8010a70 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d009      	beq.n	8010a6c <_nx_packet_release+0x34>
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a51      	ldr	r2, [pc, #324]	; (8010ba4 <_nx_packet_release+0x16c>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d104      	bne.n	8010a6c <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 8010a62:	69fb      	ldr	r3, [r7, #28]
 8010a64:	699b      	ldr	r3, [r3, #24]
 8010a66:	1c5a      	adds	r2, r3, #1
 8010a68:	69fb      	ldr	r3, [r7, #28]
 8010a6a:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 8010a6c:	2307      	movs	r3, #7
 8010a6e:	e094      	b.n	8010b9a <_nx_packet_release+0x162>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a76:	f3ef 8310 	mrs	r3, PRIMASK
 8010a7a:	617b      	str	r3, [r7, #20]
    return(posture);
 8010a7c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010a7e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010a80:	b672      	cpsid	i
    return(int_posture);
 8010a82:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 8010a84:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a90:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d063      	beq.n	8010b60 <_nx_packet_release+0x128>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8010a98:	69bb      	ldr	r3, [r7, #24]
 8010a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a9c:	69ba      	ldr	r2, [r7, #24]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d103      	bne.n	8010aaa <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8010aa8:	e00d      	b.n	8010ac6 <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010aaa:	69bb      	ldr	r3, [r7, #24]
 8010aac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8010ab6:	69ba      	ldr	r2, [r7, #24]
 8010ab8:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010aba:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8010ac0:	69ba      	ldr	r2, [r7, #24]
 8010ac2:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010ac4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aca:	1e5a      	subs	r2, r3, #1
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010ad6:	4b34      	ldr	r3, [pc, #208]	; (8010ba8 <_nx_packet_release+0x170>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	3301      	adds	r3, #1
 8010adc:	4a32      	ldr	r2, [pc, #200]	; (8010ba8 <_nx_packet_release+0x170>)
 8010ade:	6013      	str	r3, [r2, #0]
 8010ae0:	6a3b      	ldr	r3, [r7, #32]
 8010ae2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f383 8810 	msr	PRIMASK, r3
}
 8010aea:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2200      	movs	r2, #0
 8010b02:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	691a      	ldr	r2, [r3, #16]
 8010b08:	69bb      	ldr	r3, [r7, #24]
 8010b0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b0c:	441a      	add	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	689a      	ldr	r2, [r3, #8]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	635a      	str	r2, [r3, #52]	; 0x34
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8010b26:	621a      	str	r2, [r3, #32]

#ifdef FEATURE_NX_IPV6

            /* Clear the option state. */
            packet_ptr -> nx_packet_option_state = 0;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8010b50:	69bb      	ldr	r3, [r7, #24]
 8010b52:	2200      	movs	r2, #0
 8010b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8010b58:	69b8      	ldr	r0, [r7, #24]
 8010b5a:	f008 fa6f 	bl	801903c <_tx_thread_system_resume>
 8010b5e:	e015      	b.n	8010b8c <_nx_packet_release+0x154>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f04f 32ff 	mov.w	r2, #4294967295
 8010b66:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	69da      	ldr	r2, [r3, #28]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	689b      	ldr	r3, [r3, #8]
 8010b7a:	1c5a      	adds	r2, r3, #1
 8010b7c:	69fb      	ldr	r3, [r7, #28]
 8010b7e:	609a      	str	r2, [r3, #8]
 8010b80:	6a3b      	ldr	r3, [r7, #32]
 8010b82:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	f383 8810 	msr	PRIMASK, r3
}
 8010b8a:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8e:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f47f af55 	bne.w	8010a42 <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 8010b98:	2300      	movs	r3, #0
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3728      	adds	r7, #40	; 0x28
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	5041434b 	.word	0x5041434b
 8010ba8:	2400090c 	.word	0x2400090c

08010bac <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b088      	sub	sp, #32
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8010bb8:	617b      	str	r3, [r7, #20]
    return(posture);
 8010bba:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010bbc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010bbe:	b672      	cpsid	i
    return(int_posture);
 8010bc0:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 8010bc2:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6a1b      	ldr	r3, [r3, #32]
 8010bc8:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8010bcc:	d025      	beq.n	8010c1a <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8010bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd6:	d020      	beq.n	8010c1a <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 8010bde:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	689b      	ldr	r3, [r3, #8]
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8010bea:	441a      	add	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8010bfa:	1a9a      	subs	r2, r3, r2
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2200      	movs	r2, #0
 8010c04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8010c08:	69bb      	ldr	r3, [r7, #24]
 8010c0a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f383 8810 	msr	PRIMASK, r3
}
 8010c12:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 8010c14:	2300      	movs	r3, #0
 8010c16:	61fb      	str	r3, [r7, #28]
 8010c18:	e009      	b.n	8010c2e <_nx_packet_transmit_release+0x82>
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	f383 8810 	msr	PRIMASK, r3
}
 8010c24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff ff06 	bl	8010a38 <_nx_packet_release>
 8010c2c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8010c2e:	69fb      	ldr	r3, [r7, #28]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3720      	adds	r7, #32
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b088      	sub	sp, #32
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c42:	f3ef 8310 	mrs	r3, PRIMASK
 8010c46:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010c48:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010c4a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c4c:	b672      	cpsid	i
    return(int_posture);
 8010c4e:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8010c50:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d110      	bne.n	8010c7e <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 8010c62:	1c5a      	adds	r2, r3, #1
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	f383 8810 	msr	PRIMASK, r3
}
 8010c74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8010c76:	6838      	ldr	r0, [r7, #0]
 8010c78:	f7ff fede 	bl	8010a38 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8010c7c:	e02f      	b.n	8010cde <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d011      	beq.n	8010cac <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
 8010c8e:	683a      	ldr	r2, [r7, #0]
 8010c90:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	2200      	movs	r2, #0
 8010c96:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	683a      	ldr	r2, [r7, #0]
 8010c9c:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
 8010ca0:	69fb      	ldr	r3, [r7, #28]
 8010ca2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f383 8810 	msr	PRIMASK, r3
}
 8010caa:	e018      	b.n	8010cde <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	683a      	ldr	r2, [r7, #0]
 8010cb0:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	683a      	ldr	r2, [r7, #0]
 8010cb8:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	61da      	str	r2, [r3, #28]
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	f383 8810 	msr	PRIMASK, r3
}
 8010ccc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	2120      	movs	r1, #32
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f006 feaf 	bl	8017a3c <_tx_event_flags_set>
    }
}
 8010cde:	3720      	adds	r7, #32
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_nx_system_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	af00      	add	r7, sp, #0

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8010ce8:	4b38      	ldr	r3, [pc, #224]	; (8010dcc <_nx_system_initialize+0xe8>)
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	4b38      	ldr	r3, [pc, #224]	; (8010dd0 <_nx_system_initialize+0xec>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	431a      	orrs	r2, r3
 8010cf2:	4b38      	ldr	r3, [pc, #224]	; (8010dd4 <_nx_system_initialize+0xf0>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	431a      	orrs	r2, r3
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8010cf8:	4b37      	ldr	r3, [pc, #220]	; (8010dd8 <_nx_system_initialize+0xf4>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	431a      	orrs	r2, r3
 8010cfe:	4b37      	ldr	r3, [pc, #220]	; (8010ddc <_nx_system_initialize+0xf8>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4313      	orrs	r3, r2
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d15e      	bne.n	8010dc6 <_nx_system_initialize+0xe2>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 8010d08:	f7ff fe84 	bl	8010a14 <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 8010d0c:	f7fc fa6c 	bl	800d1e8 <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 8010d10:	f000 fc14 	bl	801153c <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 8010d14:	4b2d      	ldr	r3, [pc, #180]	; (8010dcc <_nx_system_initialize+0xe8>)
 8010d16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010d1a:	601a      	str	r2, [r3, #0]

    /* Add the retry shift value to the options.  */
#if (NX_TCP_RETRY_SHIFT > 0xF)
    _nx_system_build_options_1 |=  0xF;
#else
    _nx_system_build_options_1 |=  NX_TCP_RETRY_SHIFT;
 8010d1c:	4b2b      	ldr	r3, [pc, #172]	; (8010dcc <_nx_system_initialize+0xe8>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4a2a      	ldr	r2, [pc, #168]	; (8010dcc <_nx_system_initialize+0xe8>)
 8010d22:	6013      	str	r3, [r2, #0]
#endif

#if (NX_IP_PERIODIC_RATE > 0xFFFFUL)
    _nx_system_build_options_2 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_2 =  ((ULONG)NX_IP_PERIODIC_RATE) << 16;
 8010d24:	4b2a      	ldr	r3, [pc, #168]	; (8010dd0 <_nx_system_initialize+0xec>)
 8010d26:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 8010d2a:	601a      	str	r2, [r3, #0]
#endif

#if (NX_ARP_EXPIRATION_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
 8010d2c:	4b28      	ldr	r3, [pc, #160]	; (8010dd0 <_nx_system_initialize+0xec>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	4a27      	ldr	r2, [pc, #156]	; (8010dd0 <_nx_system_initialize+0xec>)
 8010d32:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 8010d34:	4b26      	ldr	r3, [pc, #152]	; (8010dd0 <_nx_system_initialize+0xec>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f043 030a 	orr.w	r3, r3, #10
 8010d3c:	4a24      	ldr	r2, [pc, #144]	; (8010dd0 <_nx_system_initialize+0xec>)
 8010d3e:	6013      	str	r3, [r2, #0]

    /* Setup third option word.  */
#if (NX_TCP_ACK_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_3 =  ((ULONG)NX_TCP_ACK_TIMER_RATE) << 24;
 8010d40:	4b24      	ldr	r3, [pc, #144]	; (8010dd4 <_nx_system_initialize+0xf0>)
 8010d42:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 8010d46:	601a      	str	r2, [r3, #0]
#endif
#if (NX_TCP_FAST_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_FAST_TIMER_RATE) << 16;
 8010d48:	4b22      	ldr	r3, [pc, #136]	; (8010dd4 <_nx_system_initialize+0xf0>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8010d50:	4a20      	ldr	r2, [pc, #128]	; (8010dd4 <_nx_system_initialize+0xf0>)
 8010d52:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_TRANSMIT_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
 8010d54:	4b1f      	ldr	r3, [pc, #124]	; (8010dd4 <_nx_system_initialize+0xf0>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d5c:	4a1d      	ldr	r2, [pc, #116]	; (8010dd4 <_nx_system_initialize+0xf0>)
 8010d5e:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 8010d60:	4b1c      	ldr	r3, [pc, #112]	; (8010dd4 <_nx_system_initialize+0xf0>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f043 034b 	orr.w	r3, r3, #75	; 0x4b
 8010d68:	4a1a      	ldr	r2, [pc, #104]	; (8010dd4 <_nx_system_initialize+0xf0>)
 8010d6a:	6013      	str	r3, [r2, #0]

    /* Setup the fourth option word.  */
#if (NX_TCP_KEEPALIVE_INITIAL > 0xFFFFUL)
    _nx_system_build_options_4 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_4 =  ((ULONG)NX_TCP_KEEPALIVE_INITIAL) << 16;
 8010d6c:	4b1a      	ldr	r3, [pc, #104]	; (8010dd8 <_nx_system_initialize+0xf4>)
 8010d6e:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
 8010d72:	601a      	str	r2, [r3, #0]
#endif
#if (NX_ARP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_4 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAXIMUM_RETRIES) << 8;
 8010d74:	4b18      	ldr	r3, [pc, #96]	; (8010dd8 <_nx_system_initialize+0xf4>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8010d7c:	4a16      	ldr	r2, [pc, #88]	; (8010dd8 <_nx_system_initialize+0xf4>)
 8010d7e:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_MAX_QUEUE_DEPTH > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF) << 4;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
 8010d80:	4b15      	ldr	r3, [pc, #84]	; (8010dd8 <_nx_system_initialize+0xf4>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d88:	4a13      	ldr	r2, [pc, #76]	; (8010dd8 <_nx_system_initialize+0xf4>)
 8010d8a:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8010d8c:	4b12      	ldr	r3, [pc, #72]	; (8010dd8 <_nx_system_initialize+0xf4>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f043 030a 	orr.w	r3, r3, #10
 8010d94:	4a10      	ldr	r2, [pc, #64]	; (8010dd8 <_nx_system_initialize+0xf4>)
 8010d96:	6013      	str	r3, [r2, #0]

    /* Setup the fifth option word.  */
#if (NX_MAX_MULTICAST_GROUPS > 0xFF)
    _nx_system_build_options_5 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_5 =  ((ULONG)NX_MAX_MULTICAST_GROUPS) << 24;
 8010d98:	4b10      	ldr	r3, [pc, #64]	; (8010ddc <_nx_system_initialize+0xf8>)
 8010d9a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8010d9e:	601a      	str	r2, [r3, #0]
#endif
#if (NX_MAX_LISTEN_REQUESTS > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_MAX_LISTEN_REQUESTS) << 16;
 8010da0:	4b0e      	ldr	r3, [pc, #56]	; (8010ddc <_nx_system_initialize+0xf8>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8010da8:	4a0c      	ldr	r2, [pc, #48]	; (8010ddc <_nx_system_initialize+0xf8>)
 8010daa:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
 8010dac:	4b0b      	ldr	r3, [pc, #44]	; (8010ddc <_nx_system_initialize+0xf8>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8010db4:	4a09      	ldr	r2, [pc, #36]	; (8010ddc <_nx_system_initialize+0xf8>)
 8010db6:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8010db8:	4b08      	ldr	r3, [pc, #32]	; (8010ddc <_nx_system_initialize+0xf8>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f043 0314 	orr.w	r3, r3, #20
 8010dc0:	4a06      	ldr	r2, [pc, #24]	; (8010ddc <_nx_system_initialize+0xf8>)
 8010dc2:	6013      	str	r3, [r2, #0]
 8010dc4:	e000      	b.n	8010dc8 <_nx_system_initialize+0xe4>
        return;
 8010dc6:	bf00      	nop
#endif
}
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	24000818 	.word	0x24000818
 8010dd0:	2400081c 	.word	0x2400081c
 8010dd4:	24000820 	.word	0x24000820
 8010dd8:	24000824 	.word	0x24000824
 8010ddc:	24000828 	.word	0x24000828

08010de0 <_nx_tcp_cleanup_deferred>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_cleanup_deferred(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
    NX_PARAMETER_NOT_USED(thread_ptr);

    NX_CLEANUP_EXTENSION
    /* This function is never called... so do nothing!  */
}
 8010dea:	bf00      	nop
 8010dec:	370c      	adds	r7, #12
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
	...

08010df8 <_nx_tcp_client_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_client_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b08e      	sub	sp, #56	; 0x38
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e02:	f3ef 8310 	mrs	r3, PRIMASK
 8010e06:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8010e0a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e0c:	b672      	cpsid	i
    return(int_posture);
 8010e0e:	6a3b      	ldr	r3, [r7, #32]
NX_TCP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts to remove the suspended thread from the TCP socket.  */
    TX_DISABLE
 8010e10:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e16:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8010e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d004      	beq.n	8010e28 <_nx_tcp_client_bind_cleanup+0x30>
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	4a42      	ldr	r2, [pc, #264]	; (8010f2c <_nx_tcp_client_bind_cleanup+0x134>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d006      	beq.n	8010e36 <_nx_tcp_client_bind_cleanup+0x3e>
 8010e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	f383 8810 	msr	PRIMASK, r3
}
 8010e32:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8010e34:	e077      	b.n	8010f26 <_nx_tcp_client_bind_cleanup+0x12e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <_nx_tcp_client_bind_cleanup+0x54>
 8010e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e40:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	f383 8810 	msr	PRIMASK, r3
}
 8010e48:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8010e4a:	e06c      	b.n	8010f26 <_nx_tcp_client_bind_cleanup+0x12e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010e4c:	f3ef 8305 	mrs	r3, IPSR
 8010e50:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010e52:	697a      	ldr	r2, [r7, #20]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8010e54:	4b36      	ldr	r3, [pc, #216]	; (8010f30 <_nx_tcp_client_bind_cleanup+0x138>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d104      	bne.n	8010e68 <_nx_tcp_client_bind_cleanup+0x70>
 8010e5e:	4b35      	ldr	r3, [pc, #212]	; (8010f34 <_nx_tcp_client_bind_cleanup+0x13c>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a35      	ldr	r2, [pc, #212]	; (8010f38 <_nx_tcp_client_bind_cleanup+0x140>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d116      	bne.n	8010e96 <_nx_tcp_client_bind_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	4a34      	ldr	r2, [pc, #208]	; (8010f3c <_nx_tcp_client_bind_cleanup+0x144>)
 8010e6c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8010e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e78:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	f383 8810 	msr	PRIMASK, r3
}
 8010e80:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8010e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e84:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f006 fdd4 	bl	8017a3c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8010e94:	e047      	b.n	8010f26 <_nx_tcp_client_bind_cleanup+0x12e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 8010e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_tcp_socket_bound_previous;
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d104      	bne.n	8010ec0 <_nx_tcp_client_bind_cleanup+0xc8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 8010eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8010ebe:	e00e      	b.n	8010ede <_nx_tcp_client_bind_cleanup+0xe6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010ed2:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010edc:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 8010ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010ee4:	1e5a      	subs	r2, r3, #1
 8010ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ef0:	2b0c      	cmp	r3, #12
 8010ef2:	d112      	bne.n	8010f1a <_nx_tcp_client_bind_cleanup+0x122>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2223      	movs	r2, #35	; 0x23
 8010ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010efc:	4b10      	ldr	r3, [pc, #64]	; (8010f40 <_nx_tcp_client_bind_cleanup+0x148>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	3301      	adds	r3, #1
 8010f02:	4a0f      	ldr	r2, [pc, #60]	; (8010f40 <_nx_tcp_client_bind_cleanup+0x148>)
 8010f04:	6013      	str	r3, [r2, #0]
 8010f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f08:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	f383 8810 	msr	PRIMASK, r3
}
 8010f10:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f008 f892 	bl	801903c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8010f18:	e005      	b.n	8010f26 <_nx_tcp_client_bind_cleanup+0x12e>
 8010f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f1c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	f383 8810 	msr	PRIMASK, r3
}
 8010f24:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010f26:	3738      	adds	r7, #56	; 0x38
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	54435020 	.word	0x54435020
 8010f30:	2400008c 	.word	0x2400008c
 8010f34:	24000874 	.word	0x24000874
 8010f38:	240009bc 	.word	0x240009bc
 8010f3c:	08010de1 	.word	0x08010de1
 8010f40:	2400090c 	.word	0x2400090c

08010f44 <_nx_tcp_connect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_connect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b08e      	sub	sp, #56	; 0x38
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8010f52:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8010f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8010f56:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8010f58:	b672      	cpsid	i
    return(int_posture);
 8010f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 8010f5c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f62:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8010f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d004      	beq.n	8010f74 <_nx_tcp_connect_cleanup+0x30>
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	4a3a      	ldr	r2, [pc, #232]	; (8011058 <_nx_tcp_connect_cleanup+0x114>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d006      	beq.n	8010f82 <_nx_tcp_connect_cleanup+0x3e>
 8010f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f76:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f78:	6a3b      	ldr	r3, [r7, #32]
 8010f7a:	f383 8810 	msr	PRIMASK, r3
}
 8010f7e:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8010f80:	e067      	b.n	8011052 <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d106      	bne.n	8010f98 <_nx_tcp_connect_cleanup+0x54>
 8010f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	f383 8810 	msr	PRIMASK, r3
}
 8010f94:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8010f96:	e05c      	b.n	8011052 <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Pickup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8010f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010fa0:	f3ef 8305 	mrs	r3, IPSR
 8010fa4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010fa6:	69ba      	ldr	r2, [r7, #24]

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8010fa8:	4b2c      	ldr	r3, [pc, #176]	; (801105c <_nx_tcp_connect_cleanup+0x118>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4313      	orrs	r3, r2
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d104      	bne.n	8010fbc <_nx_tcp_connect_cleanup+0x78>
 8010fb2:	4b2b      	ldr	r3, [pc, #172]	; (8011060 <_nx_tcp_connect_cleanup+0x11c>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	4a2b      	ldr	r2, [pc, #172]	; (8011064 <_nx_tcp_connect_cleanup+0x120>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d112      	bne.n	8010fe2 <_nx_tcp_connect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4a2a      	ldr	r2, [pc, #168]	; (8011068 <_nx_tcp_connect_cleanup+0x124>)
 8010fc0:	669a      	str	r2, [r3, #104]	; 0x68
 8010fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	f383 8810 	msr	PRIMASK, r3
}
 8010fcc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8010fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd0:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f006 fd2e 	bl	8017a3c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8010fe0:	e037      	b.n	8011052 <_nx_tcp_connect_cleanup+0x10e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_connect_suspended_thread =  NX_NULL;
 8010fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fea:	2200      	movs	r2, #0
 8010fec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8010ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Return to the proper socket state.  */
        if (socket_ptr -> nx_tcp_socket_client_type)
 8010ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffa:	689b      	ldr	r3, [r3, #8]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d003      	beq.n	8011008 <_nx_tcp_connect_cleanup+0xc4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Client socket, return to a CLOSED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 8011000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011002:	2201      	movs	r2, #1
 8011004:	645a      	str	r2, [r3, #68]	; 0x44
 8011006:	e007      	b.n	8011018 <_nx_tcp_connect_cleanup+0xd4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Server socket, return to LISTEN state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8011008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100a:	2202      	movs	r2, #2
 801100c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Move back the acknowledgment number just in case there is a retry.  */
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 801100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011012:	1e5a      	subs	r2, r3, #1
 8011014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011016:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801101c:	2b0c      	cmp	r3, #12
 801101e:	d112      	bne.n	8011046 <_nx_tcp_connect_cleanup+0x102>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2238      	movs	r2, #56	; 0x38
 8011024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011028:	4b10      	ldr	r3, [pc, #64]	; (801106c <_nx_tcp_connect_cleanup+0x128>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	3301      	adds	r3, #1
 801102e:	4a0f      	ldr	r2, [pc, #60]	; (801106c <_nx_tcp_connect_cleanup+0x128>)
 8011030:	6013      	str	r3, [r2, #0]
 8011032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011034:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	f383 8810 	msr	PRIMASK, r3
}
 801103c:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f007 fffc 	bl	801903c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8011044:	e005      	b.n	8011052 <_nx_tcp_connect_cleanup+0x10e>
 8011046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011048:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	f383 8810 	msr	PRIMASK, r3
}
 8011050:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8011052:	3738      	adds	r7, #56	; 0x38
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	54435020 	.word	0x54435020
 801105c:	2400008c 	.word	0x2400008c
 8011060:	24000874 	.word	0x24000874
 8011064:	240009bc 	.word	0x240009bc
 8011068:	08010de1 	.word	0x08010de1
 801106c:	2400090c 	.word	0x2400090c

08011070 <_nx_tcp_deferred_cleanup_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_deferred_cleanup_check(NX_IP *ip_ptr)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
NX_TCP_SOCKET *socket_ptr;
TX_THREAD     *thread_ptr;


    /* Pickup the first socket and the created count.  */
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 39a0 	ldr.w	r3, [r3, #2464]	; 0x9a0
 801107e:	60fb      	str	r3, [r7, #12]
    created_sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8011086:	617b      	str	r3, [r7, #20]

    /* Loop through all created TCP sockets on the IP instance.  */
    while (created_sockets--)
 8011088:	e07a      	b.n	8011180 <_nx_tcp_deferred_cleanup_check+0x110>
    {

        /* Check the socket for deferred bind cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_bind_suspended_count;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8011090:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d015      	beq.n	80110c4 <_nx_tcp_deferred_cleanup_check+0x54>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_bind_suspension_list;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801109e:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110a4:	4a3c      	ldr	r2, [pc, #240]	; (8011198 <_nx_tcp_deferred_cleanup_check+0x128>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d103      	bne.n	80110b2 <_nx_tcp_deferred_cleanup_check+0x42>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_client_bind_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 80110aa:	2100      	movs	r1, #0
 80110ac:	68b8      	ldr	r0, [r7, #8]
 80110ae:	f7ff fea3 	bl	8010df8 <_nx_tcp_client_bind_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110b6:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	3b01      	subs	r3, #1
 80110bc:	613b      	str	r3, [r7, #16]
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d1ed      	bne.n	80110a0 <_nx_tcp_deferred_cleanup_check+0x30>
        }

        /* Check the socket for deferred connect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_connect_suspended_thread;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80110ca:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d008      	beq.n	80110e4 <_nx_tcp_deferred_cleanup_check+0x74>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110d6:	4a30      	ldr	r2, [pc, #192]	; (8011198 <_nx_tcp_deferred_cleanup_check+0x128>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d103      	bne.n	80110e4 <_nx_tcp_deferred_cleanup_check+0x74>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 80110dc:	2100      	movs	r1, #0
 80110de:	68b8      	ldr	r0, [r7, #8]
 80110e0:	f7ff ff30 	bl	8010f44 <_nx_tcp_connect_cleanup>
            }
        }

        /* Check the socket for deferred disconnect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_disconnect_suspended_thread;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80110ea:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d008      	beq.n	8011104 <_nx_tcp_deferred_cleanup_check+0x94>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110f6:	4a28      	ldr	r2, [pc, #160]	; (8011198 <_nx_tcp_deferred_cleanup_check+0x128>)
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d103      	bne.n	8011104 <_nx_tcp_deferred_cleanup_check+0x94>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 80110fc:	2100      	movs	r1, #0
 80110fe:	68b8      	ldr	r0, [r7, #8]
 8011100:	f000 f84c 	bl	801119c <_nx_tcp_disconnect_cleanup>
            }
        }

        /* Check the socket for deferred receive cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_receive_suspended_count;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801110a:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d015      	beq.n	801113e <_nx_tcp_deferred_cleanup_check+0xce>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8011118:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801111e:	4a1e      	ldr	r2, [pc, #120]	; (8011198 <_nx_tcp_deferred_cleanup_check+0x128>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d103      	bne.n	801112c <_nx_tcp_deferred_cleanup_check+0xbc>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_receive_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8011124:	2100      	movs	r1, #0
 8011126:	68b8      	ldr	r0, [r7, #8]
 8011128:	f001 fa64 	bl	80125f4 <_nx_tcp_receive_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011130:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	3b01      	subs	r3, #1
 8011136:	613b      	str	r3, [r7, #16]
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d1ed      	bne.n	801111a <_nx_tcp_deferred_cleanup_check+0xaa>
        }

        /* Check the socket for deferred transmit cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_transmit_suspended_count;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011144:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d015      	beq.n	8011178 <_nx_tcp_deferred_cleanup_check+0x108>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_transmit_suspension_list;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8011152:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011158:	4a0f      	ldr	r2, [pc, #60]	; (8011198 <_nx_tcp_deferred_cleanup_check+0x128>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d103      	bne.n	8011166 <_nx_tcp_deferred_cleanup_check+0xf6>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_transmit_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 801115e:	2100      	movs	r1, #0
 8011160:	68b8      	ldr	r0, [r7, #8]
 8011162:	f003 f95b 	bl	801441c <_nx_tcp_transmit_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801116a:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	3b01      	subs	r3, #1
 8011170:	613b      	str	r3, [r7, #16]
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d1ed      	bne.n	8011154 <_nx_tcp_deferred_cleanup_check+0xe4>
        }

        /* Move to next created TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801117e:	60fb      	str	r3, [r7, #12]
    while (created_sockets--)
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	1e5a      	subs	r2, r3, #1
 8011184:	617a      	str	r2, [r7, #20]
 8011186:	2b00      	cmp	r3, #0
 8011188:	f47f af7f 	bne.w	801108a <_nx_tcp_deferred_cleanup_check+0x1a>
    }
}
 801118c:	bf00      	nop
 801118e:	bf00      	nop
 8011190:	3718      	adds	r7, #24
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	08010de1 	.word	0x08010de1

0801119c <_nx_tcp_disconnect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_disconnect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b08e      	sub	sp, #56	; 0x38
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80111a6:	f3ef 8310 	mrs	r3, PRIMASK
 80111aa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80111ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80111ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80111b0:	b672      	cpsid	i
    return(int_posture);
 80111b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 80111b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 80111bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d004      	beq.n	80111cc <_nx_tcp_disconnect_cleanup+0x30>
 80111c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a30      	ldr	r2, [pc, #192]	; (8011288 <_nx_tcp_disconnect_cleanup+0xec>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d006      	beq.n	80111da <_nx_tcp_disconnect_cleanup+0x3e>
 80111cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	f383 8810 	msr	PRIMASK, r3
}
 80111d6:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 80111d8:	e053      	b.n	8011282 <_nx_tcp_disconnect_cleanup+0xe6>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d106      	bne.n	80111f0 <_nx_tcp_disconnect_cleanup+0x54>
 80111e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111e6:	69fb      	ldr	r3, [r7, #28]
 80111e8:	f383 8810 	msr	PRIMASK, r3
}
 80111ec:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 80111ee:	e048      	b.n	8011282 <_nx_tcp_disconnect_cleanup+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80111f0:	f3ef 8305 	mrs	r3, IPSR
 80111f4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80111f6:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 80111f8:	4b24      	ldr	r3, [pc, #144]	; (801128c <_nx_tcp_disconnect_cleanup+0xf0>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4313      	orrs	r3, r2
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d104      	bne.n	801120c <_nx_tcp_disconnect_cleanup+0x70>
 8011202:	4b23      	ldr	r3, [pc, #140]	; (8011290 <_nx_tcp_disconnect_cleanup+0xf4>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	4a23      	ldr	r2, [pc, #140]	; (8011294 <_nx_tcp_disconnect_cleanup+0xf8>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d116      	bne.n	801123a <_nx_tcp_disconnect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4a22      	ldr	r2, [pc, #136]	; (8011298 <_nx_tcp_disconnect_cleanup+0xfc>)
 8011210:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8011212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011214:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011218:	62fb      	str	r3, [r7, #44]	; 0x2c
 801121a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	f383 8810 	msr	PRIMASK, r3
}
 8011224:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8011226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011228:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 801122c:	2200      	movs	r2, #0
 801122e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011232:	4618      	mov	r0, r3
 8011234:	f006 fc02 	bl	8017a3c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8011238:	e023      	b.n	8011282 <_nx_tcp_disconnect_cleanup+0xe6>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2200      	movs	r2, #0
 801123e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_disconnect_suspended_thread =  NX_NULL;
 8011240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011242:	2200      	movs	r2, #0
 8011244:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801124c:	2b0c      	cmp	r3, #12
 801124e:	d112      	bne.n	8011276 <_nx_tcp_disconnect_cleanup+0xda>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2241      	movs	r2, #65	; 0x41
 8011254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011258:	4b10      	ldr	r3, [pc, #64]	; (801129c <_nx_tcp_disconnect_cleanup+0x100>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	3301      	adds	r3, #1
 801125e:	4a0f      	ldr	r2, [pc, #60]	; (801129c <_nx_tcp_disconnect_cleanup+0x100>)
 8011260:	6013      	str	r3, [r2, #0]
 8011262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011264:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	f383 8810 	msr	PRIMASK, r3
}
 801126c:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f007 fee4 	bl	801903c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8011274:	e005      	b.n	8011282 <_nx_tcp_disconnect_cleanup+0xe6>
 8011276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011278:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f383 8810 	msr	PRIMASK, r3
}
 8011280:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8011282:	3738      	adds	r7, #56	; 0x38
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	54435020 	.word	0x54435020
 801128c:	2400008c 	.word	0x2400008c
 8011290:	24000874 	.word	0x24000874
 8011294:	240009bc 	.word	0x240009bc
 8011298:	08010de1 	.word	0x08010de1
 801129c:	2400090c 	.word	0x2400090c

080112a0 <_nx_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_enable(NX_IP *ip_ptr)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);
    /* Place all server listen request structures on the available list.   */

    /* Setup a pointer to the first listen.  */
    listen_ptr =  &(ip_ptr -> nx_ip_tcp_server_listen_reqs[0]);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80112ae:	60bb      	str	r3, [r7, #8]

    /* Setup the available listen requests head pointer.  */
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	f8c3 2b2c 	str.w	r2, [r3, #2860]	; 0xb2c

    /* Loop through the listen requests and link them on the available list.  */
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 80112b8:	2300      	movs	r3, #0
 80112ba:	60fb      	str	r3, [r7, #12]
 80112bc:	e00d      	b.n	80112da <_nx_tcp_enable+0x3a>
    {

        /* Link listen request to next listen request.  */
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	61da      	str	r2, [r3, #28]

        /* Determine if we need to move to the next listen request.  */
        if (i < (NX_MAX_LISTEN_REQUESTS - 1))
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b08      	cmp	r3, #8
 80112cc:	d802      	bhi.n	80112d4 <_nx_tcp_enable+0x34>
        {
            listen_ptr++;
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	3324      	adds	r3, #36	; 0x24
 80112d2:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	3301      	adds	r3, #1
 80112d8:	60fb      	str	r3, [r7, #12]
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2b09      	cmp	r3, #9
 80112de:	d9ee      	bls.n	80112be <_nx_tcp_enable+0x1e>
        }
    }

    /* Make sure the last listen request has a NULL pointer.  */
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	2200      	movs	r2, #0
 80112e4:	61da      	str	r2, [r3, #28]

    /* Set the TCP packet queue processing function.  */
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a13      	ldr	r2, [pc, #76]	; (8011338 <_nx_tcp_enable+0x98>)
 80112ea:	f8c3 29b4 	str.w	r2, [r3, #2484]	; 0x9b4

    /* Set the TCP periodic processing function.  */
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4a12      	ldr	r2, [pc, #72]	; (801133c <_nx_tcp_enable+0x9c>)
 80112f2:	f8c3 29ac 	str.w	r2, [r3, #2476]	; 0x9ac

    /* Set the TCP fast periodic processing function.  */
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4a11      	ldr	r2, [pc, #68]	; (8011340 <_nx_tcp_enable+0xa0>)
 80112fa:	f8c3 29b0 	str.w	r2, [r3, #2480]	; 0x9b0

    /* Set the TCP deferred cleanup check function.  */
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4a10      	ldr	r2, [pc, #64]	; (8011344 <_nx_tcp_enable+0xa4>)
 8011302:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30

    /* Setup base timer variables.  */
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 8011306:	4b10      	ldr	r3, [pc, #64]	; (8011348 <_nx_tcp_enable+0xa8>)
 8011308:	220a      	movs	r2, #10
 801130a:	601a      	str	r2, [r3, #0]
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 801130c:	4b0f      	ldr	r3, [pc, #60]	; (801134c <_nx_tcp_enable+0xac>)
 801130e:	2214      	movs	r2, #20
 8011310:	601a      	str	r2, [r3, #0]

    /*lint -e{778} suppress constant expression, since NX_TCP_TRANSMIT_TIMER_RATE can be redefined. */
    /*lint -e{835} -e{845} suppress operating on zero. */
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 8011312:	4b0f      	ldr	r3, [pc, #60]	; (8011350 <_nx_tcp_enable+0xb0>)
 8011314:	2264      	movs	r2, #100	; 0x64
 8011316:	601a      	str	r2, [r3, #0]

    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 8011318:	4b0e      	ldr	r3, [pc, #56]	; (8011354 <_nx_tcp_enable+0xb4>)
 801131a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 801131e:	601a      	str	r2, [r3, #0]

    _nx_ip_fast_periodic_timer_create(ip_ptr);
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f7fb fe73 	bl	800d00c <_nx_ip_fast_periodic_timer_create>

    /* Set the TCP packet receive function in the IP structure to indicate
       we are ready to receive TCP packets.  */
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a0b      	ldr	r2, [pc, #44]	; (8011358 <_nx_tcp_enable+0xb8>)
 801132a:	f8c3 29a8 	str.w	r2, [r3, #2472]	; 0x9a8

    /* Return successful completion.  */
    return(NX_SUCCESS);
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	08012585 	.word	0x08012585
 801133c:	08012571 	.word	0x08012571
 8011340:	0801135d 	.word	0x0801135d
 8011344:	08011071 	.word	0x08011071
 8011348:	2400082c 	.word	0x2400082c
 801134c:	24000830 	.word	0x24000830
 8011350:	24000834 	.word	0x24000834
 8011354:	24000838 	.word	0x24000838
 8011358:	08012029 	.word	0x08012029

0801135c <_nx_tcp_fast_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_fast_periodic_processing(NX_IP *ip_ptr)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b086      	sub	sp, #24
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
ULONG          sockets;
ULONG          timer_rate;


    /* Pickup this timer's periodic rate.  */
    timer_rate =  _nx_tcp_fast_timer_rate;
 8011364:	4b74      	ldr	r3, [pc, #464]	; (8011538 <_nx_tcp_fast_periodic_processing+0x1dc>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	60fb      	str	r3, [r7, #12]

    /* Pickup the number of created TCP sockets.  */
    sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8011370:	613b      	str	r3, [r7, #16]

    /* Pickup the first socket.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8d3 39a0 	ldr.w	r3, [r3, #2464]	; 0x9a0
 8011378:	617b      	str	r3, [r7, #20]

    /* Loop through the created sockets.  */
    while (sockets--)
 801137a:	e0d1      	b.n	8011520 <_nx_tcp_fast_periodic_processing+0x1c4>
    {

        /* Determine if the socket is in an established or disconnect state and has delayed sending an ACK
           from a previous receive packet event.  */
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011380:	2b04      	cmp	r3, #4
 8011382:	d91f      	bls.n	80113c4 <_nx_tcp_fast_periodic_processing+0x68>
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 801138c:	429a      	cmp	r2, r3
 801138e:	d107      	bne.n	80113a0 <_nx_tcp_fast_periodic_processing+0x44>
             (socket_ptr -> nx_tcp_socket_rx_window_last_sent < socket_ptr -> nx_tcp_socket_rx_window_current)))
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 801139c:	429a      	cmp	r2, r3
 801139e:	d211      	bcs.n	80113c4 <_nx_tcp_fast_periodic_processing+0x68>
        {

            /* Determine if the ACK has expired.  */
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113a4:	68fa      	ldr	r2, [r7, #12]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d306      	bcc.n	80113b8 <_nx_tcp_fast_periodic_processing+0x5c>
            {

                /* Send the delayed ACK, which also resets the ACK timeout.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113ae:	4619      	mov	r1, r3
 80113b0:	6978      	ldr	r0, [r7, #20]
 80113b2:	f000 fea7 	bl	8012104 <_nx_tcp_packet_send_ack>
 80113b6:	e005      	b.n	80113c4 <_nx_tcp_fast_periodic_processing+0x68>
            }
            else
            {

                /* No, it hasn't expired yet.  Just decrement it for now.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout -= timer_rate;
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	1ad2      	subs	r2, r2, r3
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	655a      	str	r2, [r3, #84]	; 0x54
            }
        }

        /* Determine if a timeout is active.  */
        if (socket_ptr -> nx_tcp_socket_timeout)
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	f000 80a4 	beq.w	8011518 <_nx_tcp_fast_periodic_processing+0x1bc>
        {

            /* Yes, a timeout is active.  Determine if it has expired.  */
            if (socket_ptr -> nx_tcp_socket_timeout > timer_rate)
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80113d6:	68fa      	ldr	r2, [r7, #12]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d208      	bcs.n	80113ee <_nx_tcp_fast_periodic_processing+0x92>
            {

                /* No, it hasn't expired yet.  Just decrement the timeout value.  */
                socket_ptr -> nx_tcp_socket_timeout -= timer_rate;
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	1ad2      	subs	r2, r2, r3
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80113ec:	e094      	b.n	8011518 <_nx_tcp_fast_periodic_processing+0x1bc>
            }
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d304      	bcc.n	8011408 <_nx_tcp_fast_periodic_processing+0xac>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8011404:	2b00      	cmp	r3, #0
 8011406:	d00c      	beq.n	8011422 <_nx_tcp_fast_periodic_processing+0xc6>
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 8011414:	429a      	cmp	r2, r3
 8011416:	d308      	bcc.n	801142a <_nx_tcp_fast_periodic_processing+0xce>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE))
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 801141e:	2b01      	cmp	r3, #1
 8011420:	d103      	bne.n	801142a <_nx_tcp_fast_periodic_processing+0xce>
            {

                /* Number of retries has been exceeded.  */

                /* Close the socket via a connection reset.  */
                _nx_tcp_socket_connection_reset(socket_ptr);
 8011422:	6978      	ldr	r0, [r7, #20]
 8011424:	f001 f9bb 	bl	801279e <_nx_tcp_socket_connection_reset>
 8011428:	e076      	b.n	8011518 <_nx_tcp_fast_periodic_processing+0x1bc>
            }
            /* YUXIN MODIFIED HERE */
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801142e:	2b03      	cmp	r3, #3
 8011430:	d003      	beq.n	801143a <_nx_tcp_fast_periodic_processing+0xde>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 8011436:	2b04      	cmp	r3, #4
 8011438:	d11d      	bne.n	8011476 <_nx_tcp_fast_periodic_processing+0x11a>
            {

                /* Yes, the timeout on the SYN message has expired.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011440:	1c5a      	adds	r2, r3, #1
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011454:	6979      	ldr	r1, [r7, #20]
 8011456:	f8d1 10e8 	ldr.w	r1, [r1, #232]	; 0xe8
 801145a:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 801145e:	409a      	lsls	r2, r3
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

                /* Send the initial SYN message again.  Adjust the sequence number before and
                   after to ensure the same sequence as the initial SYN.  */
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801146a:	3b01      	subs	r3, #1
 801146c:	4619      	mov	r1, r3
 801146e:	6978      	ldr	r0, [r7, #20]
 8011470:	f001 f806 	bl	8012480 <_nx_tcp_packet_send_syn>
 8011474:	e050      	b.n	8011518 <_nx_tcp_fast_periodic_processing+0x1bc>
            }
            /* Has the TCP timeout for transmit packet or probing zero window expired?  */
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d107      	bne.n	8011490 <_nx_tcp_fast_periodic_processing+0x134>
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 8011484:	2b00      	cmp	r3, #0
 8011486:	d116      	bne.n	80114b6 <_nx_tcp_fast_periodic_processing+0x15a>
                      (socket_ptr -> nx_tcp_socket_state <= NX_TCP_CLOSE_WAIT)))
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 801148c:	2b06      	cmp	r3, #6
 801148e:	d812      	bhi.n	80114b6 <_nx_tcp_fast_periodic_processing+0x15a>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011494:	1e5a      	subs	r2, r3, #1
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Retransmit the packet. */
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 801149a:	2200      	movs	r2, #0
 801149c:	6979      	ldr	r1, [r7, #20]
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f001 fb6a 	bl	8012b78 <_nx_tcp_socket_retransmit>

                /* Exit fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	2200      	movs	r2, #0
 80114a8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	665a      	str	r2, [r3, #100]	; 0x64
 80114b4:	e030      	b.n	8011518 <_nx_tcp_fast_periodic_processing+0x1bc>
            }
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ba:	2b07      	cmp	r3, #7
 80114bc:	d007      	beq.n	80114ce <_nx_tcp_fast_periodic_processing+0x172>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 80114c2:	2b09      	cmp	r3, #9
 80114c4:	d003      	beq.n	80114ce <_nx_tcp_fast_periodic_processing+0x172>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 80114ca:	2b0b      	cmp	r3, #11
 80114cc:	d11d      	bne.n	801150a <_nx_tcp_fast_periodic_processing+0x1ae>

                /* We have a timeout condition on sending the FIN... so it needs to be
                   retried.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114d4:	1c5a      	adds	r2, r3, #1
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114e8:	6979      	ldr	r1, [r7, #20]
 80114ea:	f8d1 10e8 	ldr.w	r1, [r1, #232]	; 0xe8
 80114ee:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 80114f2:	409a      	lsls	r2, r3
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

                /* Send another FIN packet.  */
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114fe:	3b01      	subs	r3, #1
 8011500:	4619      	mov	r1, r3
 8011502:	6978      	ldr	r0, [r7, #20]
 8011504:	f000 ff50 	bl	80123a8 <_nx_tcp_packet_send_fin>
 8011508:	e006      	b.n	8011518 <_nx_tcp_fast_periodic_processing+0x1bc>
            }
            else if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801150e:	2b0a      	cmp	r3, #10
 8011510:	d102      	bne.n	8011518 <_nx_tcp_fast_periodic_processing+0x1bc>
            {

                /* Clean the transmission control block.  */
                _nx_tcp_socket_block_cleanup(socket_ptr);
 8011512:	6978      	ldr	r0, [r7, #20]
 8011514:	f001 f916 	bl	8012744 <_nx_tcp_socket_block_cleanup>
            }
        }

        /* Move to the next TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801151e:	617b      	str	r3, [r7, #20]
    while (sockets--)
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	1e5a      	subs	r2, r3, #1
 8011524:	613a      	str	r2, [r7, #16]
 8011526:	2b00      	cmp	r3, #0
 8011528:	f47f af28 	bne.w	801137c <_nx_tcp_fast_periodic_processing+0x20>
    }
}
 801152c:	bf00      	nop
 801152e:	bf00      	nop
 8011530:	3718      	adds	r7, #24
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
 8011536:	bf00      	nop
 8011538:	2400082c 	.word	0x2400082c

0801153c <_nx_tcp_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
 801153c:	b480      	push	{r7}
 801153e:	af00      	add	r7, sp, #0
}
 8011540:	bf00      	nop
 8011542:	46bd      	mov	sp, r7
 8011544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011548:	4770      	bx	lr

0801154a <_nx_tcp_mss_option_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_mss_option_get(UCHAR *option_ptr, ULONG option_area_size, ULONG *mss)
{
 801154a:	b480      	push	{r7}
 801154c:	b087      	sub	sp, #28
 801154e:	af00      	add	r7, sp, #0
 8011550:	60f8      	str	r0, [r7, #12]
 8011552:	60b9      	str	r1, [r7, #8]
 8011554:	607a      	str	r2, [r7, #4]

ULONG option_length;

    /* Initialize the value.  */
    *mss = 0;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	601a      	str	r2, [r3, #0]

    /* Loop through the option area looking for the MSS.  */
    while (option_area_size >= 4)
 801155c:	e043      	b.n	80115e6 <_nx_tcp_mss_option_get+0x9c>
    {

        /* Is the current character the MSS type?  */
        if (*option_ptr == NX_TCP_MSS_KIND)
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	2b02      	cmp	r3, #2
 8011564:	d11a      	bne.n	801159c <_nx_tcp_mss_option_get+0x52>
        {

            /* Yes, we found it!  */

            /* Move the pointer forward by one.  */
            option_ptr++;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	3301      	adds	r3, #1
 801156a:	60fb      	str	r3, [r7, #12]

            /* Check the option length, if option length is not equal to 4, return NX_FALSE.  */
            if (*option_ptr++ != 4)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	1c5a      	adds	r2, r3, #1
 8011570:	60fa      	str	r2, [r7, #12]
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	2b04      	cmp	r3, #4
 8011576:	d001      	beq.n	801157c <_nx_tcp_mss_option_get+0x32>
            {
                return(NX_FALSE);
 8011578:	2300      	movs	r3, #0
 801157a:	e03a      	b.n	80115f2 <_nx_tcp_mss_option_get+0xa8>
            }

            /* Build the mss size.  */
            *mss = (ULONG)*option_ptr++;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	1c5a      	adds	r2, r3, #1
 8011580:	60fa      	str	r2, [r7, #12]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	461a      	mov	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	601a      	str	r2, [r3, #0]

            /* Get the LSB of the MSS.  */
            *mss = (*mss << 8) | (ULONG)*option_ptr;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	021b      	lsls	r3, r3, #8
 8011590:	68fa      	ldr	r2, [r7, #12]
 8011592:	7812      	ldrb	r2, [r2, #0]
 8011594:	431a      	orrs	r2, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	601a      	str	r2, [r3, #0]

            /* Finished, get out of the loop!  */
            break;
 801159a:	e029      	b.n	80115f0 <_nx_tcp_mss_option_get+0xa6>
        }

        /* Otherwise, process relative to the option type.  */

        /* Check for end of list.  */
        if (*option_ptr == NX_TCP_EOL_KIND)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d024      	beq.n	80115ee <_nx_tcp_mss_option_get+0xa4>
            /* Yes, end of list, get out!  */
            break;
        }

        /* Check for NOP.  */
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	1c5a      	adds	r2, r3, #1
 80115a8:	60fa      	str	r2, [r7, #12]
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d103      	bne.n	80115b8 <_nx_tcp_mss_option_get+0x6e>
        {

            /* One character option!  */
            option_area_size--;
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	3b01      	subs	r3, #1
 80115b4:	60bb      	str	r3, [r7, #8]
 80115b6:	e016      	b.n	80115e6 <_nx_tcp_mss_option_get+0x9c>
        }
        else
        {

            /* Derive the option length.  */
            option_length =  ((ULONG)*option_ptr);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	617b      	str	r3, [r7, #20]

            /* Return when option length is invalid. */
            if (option_length == 0)
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d101      	bne.n	80115c8 <_nx_tcp_mss_option_get+0x7e>
            {
                return(NX_FALSE);
 80115c4:	2300      	movs	r3, #0
 80115c6:	e014      	b.n	80115f2 <_nx_tcp_mss_option_get+0xa8>
            }

            /* Move the option pointer forward.  */
            option_ptr =  option_ptr + (option_length - 1);
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	3b01      	subs	r3, #1
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	4413      	add	r3, r2
 80115d0:	60fb      	str	r3, [r7, #12]

            /* Determine if this is greater than the option area size.  */
            if (option_length > option_area_size)
 80115d2:	697a      	ldr	r2, [r7, #20]
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d901      	bls.n	80115de <_nx_tcp_mss_option_get+0x94>
            {
                return(NX_FALSE);
 80115da:	2300      	movs	r3, #0
 80115dc:	e009      	b.n	80115f2 <_nx_tcp_mss_option_get+0xa8>
            }
            else
            {
                option_area_size =  option_area_size - option_length;
 80115de:	68ba      	ldr	r2, [r7, #8]
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	1ad3      	subs	r3, r2, r3
 80115e4:	60bb      	str	r3, [r7, #8]
    while (option_area_size >= 4)
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	2b03      	cmp	r3, #3
 80115ea:	d8b8      	bhi.n	801155e <_nx_tcp_mss_option_get+0x14>
 80115ec:	e000      	b.n	80115f0 <_nx_tcp_mss_option_get+0xa6>
            break;
 80115ee:	bf00      	nop
            }
        }
    }

    /* Return.  */
    return(NX_TRUE);
 80115f0:	2301      	movs	r3, #1
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	371c      	adds	r7, #28
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr

080115fe <_nx_tcp_no_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_no_connection_reset(NX_IP *ip_ptr, NX_PACKET *packet_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 80115fe:	b590      	push	{r4, r7, lr}
 8011600:	b0d7      	sub	sp, #348	; 0x15c
 8011602:	af00      	add	r7, sp, #0
 8011604:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011608:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801160c:	6018      	str	r0, [r3, #0]
 801160e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011612:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011616:	6019      	str	r1, [r3, #0]
 8011618:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801161c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011620:	601a      	str	r2, [r3, #0]
ULONG         data_offset = 0;
#endif /* NX_IPSEC_ENABLE */


    /* Clear the fake socket first.  */
    memset((void *)&fake_socket, 0, sizeof(NX_TCP_SOCKET));
 8011622:	f107 0310 	add.w	r3, r7, #16
 8011626:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801162a:	2100      	movs	r1, #0
 801162c:	4618      	mov	r0, r3
 801162e:	f008 fe79 	bl	801a324 <memset>

    /* Build a fake socket so we can send a reset TCP requests that are not valid.  */
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;
 8011632:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011636:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801163a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801163e:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8011642:	6812      	ldr	r2, [r2, #0]
 8011644:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

    /* Set the connection IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011648:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801164c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011656:	2b04      	cmp	r3, #4
 8011658:	d13b      	bne.n	80116d2 <_nx_tcp_no_connection_reset+0xd4>
    {
    NX_IPV4_HEADER *ip_header_ptr;

        /* Set the IP header.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 801165a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801165e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011666:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

        /* Set the connection ip.  */
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V4;
 801166a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801166e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011672:	2204      	movs	r2, #4
 8011674:	615a      	str	r2, [r3, #20]
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 8011676:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801167a:	68da      	ldr	r2, [r3, #12]
 801167c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011680:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011684:	619a      	str	r2, [r3, #24]

        /* Assume the interface that receives the incoming packet is the best interface
           for sending responses. */
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8011686:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801168a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011692:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011696:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801169a:	635a      	str	r2, [r3, #52]	; 0x34
        fake_socket.nx_tcp_socket_next_hop_address = NX_NULL;
 801169c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80116a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80116a4:	2200      	movs	r2, #0
 80116a6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Find the next hop info. */
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 80116a8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80116ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80116b0:	6999      	ldr	r1, [r3, #24]
 80116b2:	f107 0310 	add.w	r3, r7, #16
 80116b6:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80116ba:	f107 0310 	add.w	r3, r7, #16
 80116be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80116c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80116c6:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 80116ca:	4623      	mov	r3, r4
 80116cc:	6800      	ldr	r0, [r0, #0]
 80116ce:	f7fb feb3 	bl	800d438 <_nx_ip_route_find>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 80116d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80116d6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116e0:	2b06      	cmp	r3, #6
 80116e2:	d130      	bne.n	8011746 <_nx_tcp_no_connection_reset+0x148>
    {
    NX_IPV6_HEADER *ipv6_header_ptr;

        /* Set the IP header.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header_ptr = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 80116e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80116e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

        /* Set the connection ip.  */
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V6;
 80116f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80116f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80116fc:	2206      	movs	r2, #6
 80116fe:	615a      	str	r2, [r3, #20]
        COPY_IPV6_ADDRESS(&ipv6_header_ptr -> nx_ip_header_source_ip[0], fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8011700:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011704:	f103 0208 	add.w	r2, r3, #8
 8011708:	f107 0310 	add.w	r3, r7, #16
 801170c:	3318      	adds	r3, #24
 801170e:	4619      	mov	r1, r3
 8011710:	4610      	mov	r0, r2
 8011712:	f7fe f88d 	bl	800f830 <COPY_IPV6_ADDRESS>

        /* Set the outgoing address.  */
        fake_socket.nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8011716:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801171a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011722:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011726:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801172a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        /* Set the connect ip interface.  */
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 801172e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011732:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801173a:	685a      	ldr	r2, [r3, #4]
 801173c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011740:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011744:	635a      	str	r2, [r3, #52]	; 0x34
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* FEATURE_NX_IPV6 */

    /* Set the source port and destination port.  */
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 8011746:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801174a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	b29a      	uxth	r2, r3
 8011754:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011758:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801175c:	60da      	str	r2, [r3, #12]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 801175e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011762:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	0c1a      	lsrs	r2, r3, #16
 801176c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011770:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011774:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the sequence number only if the incoming segment does not have the ACK flag, according to
       Section 3.4, "Reset Generation" on page 37, RFC793. */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 8011776:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801177a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	68db      	ldr	r3, [r3, #12]
 8011782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011786:	2b00      	cmp	r3, #0
 8011788:	d136      	bne.n	80117f8 <_nx_tcp_no_connection_reset+0x1fa>
    {
        /* Get the header length.  */
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 801178a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801178e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	0f1b      	lsrs	r3, r3, #28
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

        /* Update sequence number to set the reset acknowledge number.  */
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 801179e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80117a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	685a      	ldr	r2, [r3, #4]
 80117aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80117ae:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80117b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80117ba:	1acb      	subs	r3, r1, r3
 80117bc:	441a      	add	r2, r3
 80117be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80117c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	605a      	str	r2, [r3, #4]

        /* Check the SYN and FIN bits.  */
        if (tcp_header_ptr -> nx_tcp_header_word_3 & (NX_TCP_SYN_BIT | NX_TCP_FIN_BIT))
 80117ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80117ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00c      	beq.n	80117f8 <_nx_tcp_no_connection_reset+0x1fa>
        {

            /* Update sequence number to set the reset acknowledge number.  */
            tcp_header_ptr -> nx_tcp_sequence_number++;
 80117de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80117e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	1c5a      	adds	r2, r3, #1
 80117ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80117f0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	605a      	str	r2, [r3, #4]
            fake_socket.nx_tcp_socket_egress_sa_data_offset = 0;
        }
    }
#endif

    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 80117f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80117fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011800:	2280      	movs	r2, #128	; 0x80
 8011802:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* Send a RST to indicate the connection was not available.  */
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 8011806:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801180a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801180e:	f107 0210 	add.w	r2, r7, #16
 8011812:	6819      	ldr	r1, [r3, #0]
 8011814:	4610      	mov	r0, r2
 8011816:	f000 fdff 	bl	8012418 <_nx_tcp_packet_send_rst>
}
 801181a:	bf00      	nop
 801181c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8011820:	46bd      	mov	sp, r7
 8011822:	bd90      	pop	{r4, r7, pc}

08011824 <_nx_tcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b09c      	sub	sp, #112	; 0x70
 8011828:	af02      	add	r7, sp, #8
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]

UINT                         index;
UINT                         port;
ULONG                       *source_ip = NX_NULL;
 801182e:	2300      	movs	r3, #0
 8011830:	667b      	str	r3, [r7, #100]	; 0x64
ULONG                       *dest_ip = NX_NULL;
 8011832:	2300      	movs	r3, #0
 8011834:	663b      	str	r3, [r7, #96]	; 0x60
NX_TCP_SOCKET               *socket_ptr;
NX_TCP_HEADER               *tcp_header_ptr;
struct NX_TCP_LISTEN_STRUCT *listen_ptr;
VOID                         (*listen_callback)(NX_TCP_SOCKET *socket_ptr, UINT port);
ULONG                        option_words;
ULONG                        mss = 0;
 8011836:	2300      	movs	r3, #0
 8011838:	60bb      	str	r3, [r7, #8]
ULONG                        checksum;
NX_INTERFACE                *interface_ptr = NX_NULL;
 801183a:	2300      	movs	r3, #0
 801183c:	657b      	str	r3, [r7, #84]	; 0x54
NX_PACKET                   *queued_ptr;
NX_PACKET                   *queued_prev_ptr;
ULONG                       *queued_source_ip;
UINT                         queued_source_port;
UINT                         is_a_RST_request;
UINT                         is_valid_option_flag = NX_TRUE;
 801183e:	2301      	movs	r3, #1
 8011840:	643b      	str	r3, [r7, #64]	; 0x40
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Pickup the source IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011848:	2b04      	cmp	r3, #4
 801184a:	d10e      	bne.n	801186a <_nx_tcp_packet_process+0x46>
    {

    NX_IPV4_HEADER *ip_header_ptr;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011850:	63bb      	str	r3, [r7, #56]	; 0x38

        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 8011852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011854:	330c      	adds	r3, #12
 8011856:	667b      	str	r3, [r7, #100]	; 0x64

        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 8011858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185a:	3310      	adds	r3, #16
 801185c:	663b      	str	r3, [r7, #96]	; 0x60

        mss = 536;
 801185e:	f44f 7306 	mov.w	r3, #536	; 0x218
 8011862:	60bb      	str	r3, [r7, #8]

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011868:	657b      	str	r3, [r7, #84]	; 0x54
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011870:	2b06      	cmp	r3, #6
 8011872:	d10f      	bne.n	8011894 <_nx_tcp_packet_process+0x70>

    /* IPv6 */
    NX_IPV6_HEADER *ipv6_header;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ipv6_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011878:	637b      	str	r3, [r7, #52]	; 0x34

        source_ip = &ipv6_header -> nx_ip_header_source_ip[0];
 801187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801187c:	3308      	adds	r3, #8
 801187e:	667b      	str	r3, [r7, #100]	; 0x64

        dest_ip = &ipv6_header -> nx_ip_header_destination_ip[0];
 8011880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011882:	3318      	adds	r3, #24
 8011884:	663b      	str	r3, [r7, #96]	; 0x60

        mss = 1220;
 8011886:	f240 43c4 	movw	r3, #1220	; 0x4c4
 801188a:	60bb      	str	r3, [r7, #8]

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
#endif /* defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                           (UINT)packet_ptr -> nx_packet_length,
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8011898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801189a:	9300      	str	r3, [sp, #0]
 801189c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801189e:	2106      	movs	r1, #6
 80118a0:	6838      	ldr	r0, [r7, #0]
 80118a2:	f7fa fcbc 	bl	800c21e <_nx_ip_checksum_compute>
 80118a6:	4603      	mov	r3, r0
 80118a8:	633b      	str	r3, [r7, #48]	; 0x30
                                           source_ip, dest_ip);

        checksum = NX_LOWER_16_MASK & ~checksum;
 80118aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ac:	43db      	mvns	r3, r3
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the checksum.  */
        if (checksum != 0)
 80118b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d011      	beq.n	80118dc <_nx_tcp_packet_process+0xb8>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP invalid packet error count.  */
            ip_ptr -> nx_ip_tcp_invalid_packets++;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 80118be:	1c5a      	adds	r2, r3, #1
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc

            /* Increment the TCP packet checksum error count.  */
            ip_ptr -> nx_ip_tcp_checksum_errors++;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 35c4 	ldr.w	r3, [r3, #1476]	; 0x5c4
 80118cc:	1c5a      	adds	r2, r3, #1
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
#endif

            /* Checksum error, just release the packet.  */
            _nx_packet_release(packet_ptr);
 80118d4:	6838      	ldr	r0, [r7, #0]
 80118d6:	f7ff f8af 	bl	8010a38 <_nx_packet_release>
            return;
 80118da:	e3a1      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
        }
    }

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 80118e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	ba1a      	rev	r2, r3
 80118e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ea:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 80118ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	ba1a      	rev	r2, r3
 80118f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f4:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 80118f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f8:	689b      	ldr	r3, [r3, #8]
 80118fa:	ba1a      	rev	r2, r3
 80118fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fe:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8011900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011902:	68db      	ldr	r3, [r3, #12]
 8011904:	ba1a      	rev	r2, r3
 8011906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011908:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 801190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190c:	691b      	ldr	r3, [r3, #16]
 801190e:	ba1a      	rev	r2, r3
 8011910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011912:	611a      	str	r2, [r3, #16]

    /* Determine if there are any option words...  Note there are always 5 words in a TCP header.  */
    option_words =  (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 8011914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	0f1b      	lsrs	r3, r3, #28
 801191a:	3b05      	subs	r3, #5
 801191c:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Check for valid packet length.  */
    if (((INT)option_words < 0) || (packet_ptr -> nx_packet_length < (sizeof(NX_TCP_HEADER) + (option_words << 2))))
 801191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011920:	2b00      	cmp	r3, #0
 8011922:	db06      	blt.n	8011932 <_nx_tcp_packet_process+0x10e>
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192a:	009b      	lsls	r3, r3, #2
 801192c:	3314      	adds	r3, #20
 801192e:	429a      	cmp	r2, r3
 8011930:	d20a      	bcs.n	8011948 <_nx_tcp_packet_process+0x124>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 8011938:	1c5a      	adds	r2, r3, #1
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8011940:	6838      	ldr	r0, [r7, #0]
 8011942:	f7ff f879 	bl	8010a38 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8011946:	e36b      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
    }
#endif

    if (option_words)
 8011948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194a:	2b00      	cmp	r3, #0
 801194c:	d024      	beq.n	8011998 <_nx_tcp_packet_process+0x174>
    {

        /* Yes, there are one or more option words.  */

        /* Derive the Maximum Segment Size (MSS) in the option words.  */
        status = _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	f103 0014 	add.w	r0, r3, #20
 8011956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	f107 0208 	add.w	r2, r7, #8
 801195e:	4619      	mov	r1, r3
 8011960:	f7ff fdf3 	bl	801154a <_nx_tcp_mss_option_get>
 8011964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Check the status. if status is NX_FALSE, means Option Length is invalid.  */
        if (status == NX_FALSE)
 8011966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011968:	2b00      	cmp	r3, #0
 801196a:	d102      	bne.n	8011972 <_nx_tcp_packet_process+0x14e>
        {

            /* The option is invalid.  */
            is_valid_option_flag = NX_FALSE;
 801196c:	2300      	movs	r3, #0
 801196e:	643b      	str	r3, [r7, #64]	; 0x40
 8011970:	e012      	b.n	8011998 <_nx_tcp_packet_process+0x174>
        else
        {

            /* Set the default MSS if the MSS value was not found.  */
            /*lint -e{644} suppress variable might not be initialized, since "mss" was initialized in _nx_tcp_mss_option_get. */
            if (mss == 0)
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d10f      	bne.n	8011998 <_nx_tcp_packet_process+0x174>
            {
#ifndef NX_DISABLE_IPV4
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801197e:	2b04      	cmp	r3, #4
 8011980:	d102      	bne.n	8011988 <_nx_tcp_packet_process+0x164>
                {
                    mss = 536;
 8011982:	f44f 7306 	mov.w	r3, #536	; 0x218
 8011986:	60bb      	str	r3, [r7, #8]
                }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801198e:	2b06      	cmp	r3, #6
 8011990:	d102      	bne.n	8011998 <_nx_tcp_packet_process+0x174>
                {
                    mss = 1220;
 8011992:	f240 43c4 	movw	r3, #1220	; 0x4c4
 8011996:	60bb      	str	r3, [r7, #8]
        }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
    }

    /* Pickup the destination TCP port.  */
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 8011998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	b29b      	uxth	r3, r3
 801199e:	623b      	str	r3, [r7, #32]

    /* Pickup the source TCP port.  */
    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 80119a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	0c1b      	lsrs	r3, r3, #16
 80119a6:	61fb      	str	r3, [r7, #28]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 80119a8:	6a3b      	ldr	r3, [r7, #32]
 80119aa:	0a1a      	lsrs	r2, r3, #8
 80119ac:	6a3b      	ldr	r3, [r7, #32]
 80119ae:	4413      	add	r3, r2
 80119b0:	f003 031f 	and.w	r3, r3, #31
 80119b4:	61bb      	str	r3, [r7, #24]

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	69ba      	ldr	r2, [r7, #24]
 80119ba:	f502 7212 	add.w	r2, r2, #584	; 0x248
 80119be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119c2:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if there are any sockets bound on this port index.  */
    if (socket_ptr)
 80119c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d076      	beq.n	8011ab8 <_nx_tcp_packet_process+0x294>

        /*  Yes, loop to examine the list of bound ports on this index.  */
        do
        {

            find_a_match = 0;
 80119ca:	2300      	movs	r3, #0
 80119cc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the port has been found.  */
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 80119ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	6a3a      	ldr	r2, [r7, #32]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d162      	bne.n	8011a9e <_nx_tcp_packet_process+0x27a>
                (socket_ptr -> nx_tcp_socket_connect_port == source_port))
 80119d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 80119dc:	69fa      	ldr	r2, [r7, #28]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d15d      	bne.n	8011a9e <_nx_tcp_packet_process+0x27a>
            {

                /* Make sure they are the same IP protocol */
                if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == packet_ptr -> nx_packet_ip_version)
 80119e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119e4:	695b      	ldr	r3, [r3, #20]
 80119e6:	683a      	ldr	r2, [r7, #0]
 80119e8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80119ec:	4293      	cmp	r3, r2
 80119ee:	d11c      	bne.n	8011a2a <_nx_tcp_packet_process+0x206>
                {

#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80119f6:	2b04      	cmp	r3, #4
 80119f8:	d107      	bne.n	8011a0a <_nx_tcp_packet_process+0x1e6>
                    {

                        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 == *source_ip)
 80119fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119fc:	699a      	ldr	r2, [r3, #24]
 80119fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	429a      	cmp	r2, r3
 8011a04:	d101      	bne.n	8011a0a <_nx_tcp_packet_process+0x1e6>
                        {
                            find_a_match = 1;
 8011a06:	2301      	movs	r3, #1
 8011a08:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a10:	2b06      	cmp	r3, #6
 8011a12:	d10a      	bne.n	8011a2a <_nx_tcp_packet_process+0x206>
                    {
                        if (CHECK_IPV6_ADDRESSES_SAME(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6, source_ip))
 8011a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a16:	3318      	adds	r3, #24
 8011a18:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fd fea3 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d001      	beq.n	8011a2a <_nx_tcp_packet_process+0x206>
                        {
                            find_a_match = 1;
 8011a26:	2301      	movs	r3, #1
 8011a28:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
#endif /* FEATURE_NX_IPV6 */
                }

                if (find_a_match)
 8011a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d036      	beq.n	8011a9e <_nx_tcp_packet_process+0x27a>
                    /* Determine if we need to update the tcp port head pointer.  This should
                       only be done if the found socket pointer is not the head pointer and
                       the mutex for this IP instance is available.  */

                    /* Move the port head pointer to this socket.  */
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	69ba      	ldr	r2, [r7, #24]
 8011a34:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8011a38:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* If this packet contains SYN */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 8011a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d024      	beq.n	8011a94 <_nx_tcp_packet_process+0x270>
                    {

                        /* Record the MSS value if it is present and the   Otherwise use 536, as
                           outlined in RFC 1122 section 4.2.2.6. */
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8011a4a:	68ba      	ldr	r2, [r7, #8]
 8011a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a4e:	631a      	str	r2, [r3, #48]	; 0x30

                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 8011a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a52:	691a      	ldr	r2, [r3, #16]
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d208      	bcs.n	8011a6c <_nx_tcp_packet_process+0x248>
 8011a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a5c:	691b      	ldr	r3, [r3, #16]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d004      	beq.n	8011a6c <_nx_tcp_packet_process+0x248>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = socket_ptr -> nx_tcp_socket_mss;
 8011a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a64:	691a      	ldr	r2, [r3, #16]
 8011a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a68:	62da      	str	r2, [r3, #44]	; 0x2c
 8011a6a:	e00b      	b.n	8011a84 <_nx_tcp_packet_process+0x260>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 8011a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a70:	2b03      	cmp	r3, #3
 8011a72:	d104      	bne.n	8011a7e <_nx_tcp_packet_process+0x25a>
                                 (socket_ptr -> nx_tcp_socket_connect_mss > mss))
 8011a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a78:	68bb      	ldr	r3, [r7, #8]
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d902      	bls.n	8011a84 <_nx_tcp_packet_process+0x260>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 8011a7e:	68ba      	ldr	r2, [r7, #8]
 8011a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a82:	62da      	str	r2, [r3, #44]	; 0x2c
                        }

                        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
                            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 8011a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011a8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011a8c:	fb03 f202 	mul.w	r2, r3, r2
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
 8011a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a92:	63da      	str	r2, [r3, #60]	; 0x3c
                        socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
                    }

                    /* Process the packet within an existing TCP connection.  */
                    _nx_tcp_socket_packet_process(socket_ptr, packet_ptr);
 8011a94:	6839      	ldr	r1, [r7, #0]
 8011a96:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011a98:	f000 fed6 	bl	8012848 <_nx_tcp_socket_packet_process>

                    /* Get out of the search loop and this function!  */
                    return;
 8011a9c:	e2c0      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
                }
            }

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
 8011a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011aa0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	69ba      	ldr	r2, [r7, #24]
 8011aaa:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8011aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ab2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d188      	bne.n	80119ca <_nx_tcp_packet_process+0x1a6>
    }

    /* At this point, we know there is not an existing TCP connection.  */

    /* If this packet contains the valid option.  */
    if (is_valid_option_flag == NX_FALSE)
 8011ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d10f      	bne.n	8011ade <_nx_tcp_packet_process+0x2ba>
    {

        /* Send RST message.
           TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
           a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 8011abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ac0:	6839      	ldr	r1, [r7, #0]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7ff fd9b 	bl	80115fe <_nx_tcp_no_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error count.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 8011ace:	1c5a      	adds	r2, r3, #1
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif /* NX_DISABLE_TCP_INFO */

        /* Not a connection request, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8011ad6:	6838      	ldr	r0, [r7, #0]
 8011ad8:	f7fe ffae 	bl	8010a38 <_nx_packet_release>

        return;
 8011adc:	e2a0      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
#endif

    /* Handle new connection requests without ACK bit in NX_TCP_SYN_RECEIVED state.
       NX_TCP_SYN_RECEIVED state is equal of LISTEN state of RFC.
       RFC793, Section3.9, Page65. */
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 8011ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f040 8276 	bne.w	8011fd8 <_nx_tcp_packet_process+0x7b4>
        (ip_ptr -> nx_ip_tcp_active_listen_requests))
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 3b30 	ldr.w	r3, [r3, #2864]	; 0xb30
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	f000 8270 	beq.w	8011fd8 <_nx_tcp_packet_process+0x7b4>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011afe:	2b04      	cmp	r3, #4
 8011b00:	d145      	bne.n	8011b8e <_nx_tcp_packet_process+0x36a>
        {

            /* Check for LAND attack packet. This is an incoming packet with matching
               Source and Destination IP address, and matching source and destination port. */
            if ((*source_ip == *dest_ip) && (source_port == port))
 8011b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b04:	681a      	ldr	r2, [r3, #0]
 8011b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d10e      	bne.n	8011b2c <_nx_tcp_packet_process+0x308>
 8011b0e:	69fa      	ldr	r2, [r7, #28]
 8011b10:	6a3b      	ldr	r3, [r7, #32]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d10a      	bne.n	8011b2c <_nx_tcp_packet_process+0x308>

                /* Bogus packet. Drop it! */

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 8011b1c:	1c5a      	adds	r2, r3, #1
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet we will not process any further.  */
                _nx_packet_release(packet_ptr);
 8011b24:	6838      	ldr	r0, [r7, #0]
 8011b26:	f7fe ff87 	bl	8010a38 <_nx_packet_release>
                return;
 8011b2a:	e279      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>

            /* It shall not make connections if the source IP address
               is broadcast or multicast.   */
            if (
                /* Check for Multicast address */
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8011b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
            if (
 8011b34:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8011b38:	d01e      	beq.n	8011b78 <_nx_tcp_packet_process+0x354>
                /* Check for subnet-directed broadcast */
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 8011b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b40:	699b      	ldr	r3, [r3, #24]
 8011b42:	401a      	ands	r2, r3
 8011b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b46:	69db      	ldr	r3, [r3, #28]
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d10a      	bne.n	8011b62 <_nx_tcp_packet_process+0x33e>
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 8011b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b52:	699b      	ldr	r3, [r3, #24]
 8011b54:	43db      	mvns	r3, r3
 8011b56:	401a      	ands	r2, r3
 8011b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b5a:	699b      	ldr	r3, [r3, #24]
 8011b5c:	43db      	mvns	r3, r3
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d00a      	beq.n	8011b78 <_nx_tcp_packet_process+0x354>
                /* Check for local subnet address */
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 8011b62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b68:	69db      	ldr	r3, [r3, #28]
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d004      	beq.n	8011b78 <_nx_tcp_packet_process+0x354>
                /* Check for limited broadcast */
                (*source_ip == NX_IP_LIMITED_BROADCAST)
 8011b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b70:	681b      	ldr	r3, [r3, #0]
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 8011b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b76:	d10a      	bne.n	8011b8e <_nx_tcp_packet_process+0x36a>
               )
            {

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 8011b7e:	1c5a      	adds	r2, r3, #1
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8011b86:	6838      	ldr	r0, [r7, #0]
 8011b88:	f7fe ff56 	bl	8010a38 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 8011b8c:	e248      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b94:	2b06      	cmp	r3, #6
 8011b96:	d128      	bne.n	8011bea <_nx_tcp_packet_process+0x3c6>
        {

            /* Check for LAND attack packet. This is an incoming packet with matching
               Source and Destination IP address, and matching source and destination port. */
            if ((CHECK_IPV6_ADDRESSES_SAME(source_ip, dest_ip)) && (source_port == port))
 8011b98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011b9a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011b9c:	f7fd fde3 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00e      	beq.n	8011bc4 <_nx_tcp_packet_process+0x3a0>
 8011ba6:	69fa      	ldr	r2, [r7, #28]
 8011ba8:	6a3b      	ldr	r3, [r7, #32]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d10a      	bne.n	8011bc4 <_nx_tcp_packet_process+0x3a0>

                /* Bogus packet. Drop it! */

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 8011bb4:	1c5a      	adds	r2, r3, #1
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet we will not process any further.  */
                _nx_packet_release(packet_ptr);
 8011bbc:	6838      	ldr	r0, [r7, #0]
 8011bbe:	f7fe ff3b 	bl	8010a38 <_nx_packet_release>
                return;
 8011bc2:	e22d      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
            }

            /* It shall not make connections if the source IP address
               is broadcast or multicast.   */
            if (IPv6_Address_Type(source_ip) & IPV6_ADDRESS_MULTICAST)
 8011bc4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011bc6:	f7fd fed3 	bl	800f970 <IPv6_Address_Type>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d00a      	beq.n	8011bea <_nx_tcp_packet_process+0x3c6>
            {

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 8011bda:	1c5a      	adds	r2, r3, #1
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8011be2:	6838      	ldr	r0, [r7, #0]
 8011be4:	f7fe ff28 	bl	8010a38 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 8011be8:	e21a      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
            }
        }
#endif /* FEATURE_NX_IPV6*/

        /* Search all ports in listen mode for a match. */
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8d3 3b30 	ldr.w	r3, [r3, #2864]	; 0xb30
 8011bf0:	65bb      	str	r3, [r7, #88]	; 0x58
        do
        {

            /* Determine if this port is in a listen mode.  */
            if (listen_ptr -> nx_tcp_listen_port == port)
 8011bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	6a3a      	ldr	r2, [r7, #32]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	f040 81e3 	bne.w	8011fc4 <_nx_tcp_packet_process+0x7a0>

                /* Determine if the packet is an initial connection request.
                   The incoming SYN packet is a connection request.
                   The incoming RST packet is related to a previous connection request.
                   Fourth other text or control. RFC793, Section3.9, Page66. */
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 8011bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d110      	bne.n	8011c2c <_nx_tcp_packet_process+0x408>
                    (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)))
 8011c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d10a      	bne.n	8011c2c <_nx_tcp_packet_process+0x408>
                {

#ifndef NX_DISABLE_TCP_INFO
                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	; 0x5c0
 8011c1c:	1c5a      	adds	r2, r3, #1
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif /* NX_DISABLE_TCP_INFO */

                    /* Release the packet.  */
                    _nx_packet_release(packet_ptr);
 8011c24:	6838      	ldr	r0, [r7, #0]
 8011c26:	f7fe ff07 	bl	8010a38 <_nx_packet_release>

                    return;
 8011c2a:	e1f9      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
                }

#ifndef NX_DISABLE_TCP_INFO

                /* Check for a SYN bit set.  */
                if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT))
 8011c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2e:	68db      	ldr	r3, [r3, #12]
 8011c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d00d      	beq.n	8011c54 <_nx_tcp_packet_process+0x430>
                {

                    /* Increment the passive TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_passive_connections++;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 35cc 	ldr.w	r3, [r3, #1484]	; 0x5cc
 8011c3e:	1c5a      	adds	r2, r3, #1
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8c3 25cc 	str.w	r2, [r3, #1484]	; 0x5cc

                    /* Increment the TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_connections++;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8011c4c:	1c5a      	adds	r2, r3, #1
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
#endif

                /* Okay, this port is in a listen mode.  We now need to see if
                   there is an available socket for the new connection request
                   present.  */
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 8011c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	f000 80c8 	beq.w	8011dee <_nx_tcp_packet_process+0x5ca>
                    ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT) == NX_NULL))
 8011c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	f040 80c1 	bne.w	8011dee <_nx_tcp_packet_process+0x5ca>
                    /* Yes there is indeed a socket present.  We now need to
                       fill in the appropriate info and call the server callback
                       routine.  */

                    /* Allocate the supplied server socket.  */
                    socket_ptr = listen_ptr -> nx_tcp_listen_socket_ptr;
 8011c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Clear the server socket pointer in the listen request.  If the
                       application wishes to honor more server connections on this port,
                       the application must call relisten with a new server socket
                       pointer.  */
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 8011c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c74:	2200      	movs	r2, #0
 8011c76:	609a      	str	r2, [r3, #8]

                    /* Fill the socket in with the appropriate information.  */


#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c7e:	2b04      	cmp	r3, #4
 8011c80:	d116      	bne.n	8011cb0 <_nx_tcp_packet_process+0x48c>
                    {

                        /* Assume the interface that receives the incoming packet is the best interface
                           for sending responses. */
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 8011c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c86:	635a      	str	r2, [r3, #52]	; 0x34
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 8011c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	639a      	str	r2, [r3, #56]	; 0x38

                        /* Set the next hop address.  */
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 8011c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c90:	6819      	ldr	r1, [r3, #0]
 8011c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c9a:	3338      	adds	r3, #56	; 0x38
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f7fb fbcb 	bl	800d438 <_nx_ip_route_find>
                                          &socket_ptr -> nx_tcp_socket_next_hop_address);

                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 8011ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ca4:	2204      	movs	r2, #4
 8011ca6:	615a      	str	r2, [r3, #20]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 8011ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cae:	619a      	str	r2, [r3, #24]
                    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011cb6:	2b06      	cmp	r3, #6
 8011cb8:	d110      	bne.n	8011cdc <_nx_tcp_packet_process+0x4b8>
                    {

                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V6;
 8011cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cbc:	2206      	movs	r2, #6
 8011cbe:	615a      	str	r2, [r3, #20]
                        COPY_IPV6_ADDRESS(source_ip, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8011cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cc2:	3318      	adds	r3, #24
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011cc8:	f7fd fdb2 	bl	800f830 <COPY_IPV6_ADDRESS>

                        /* Also record the outgoing interface information. */
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cd2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 8011cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011cda:	635a      	str	r2, [r3, #52]	; 0x34
                    }
#endif /* FEATURE_NX_IPV6 */

                    socket_ptr -> nx_tcp_socket_connect_port = source_port;
 8011cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cde:	69fa      	ldr	r2, [r7, #28]
 8011ce0:	629a      	str	r2, [r3, #40]	; 0x28
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 8011ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce4:	685a      	ldr	r2, [r3, #4]
 8011ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ce8:	64da      	str	r2, [r3, #76]	; 0x4c


                    /* Yes, MSS was found, so store it!  */
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 8011cea:	68ba      	ldr	r2, [r7, #8]
 8011cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cee:	631a      	str	r2, [r3, #48]	; 0x30
                     */
                    socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

                    /* Set the initial slow start threshold to be the advertised window size. */
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8011cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cf2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cf6:	641a      	str	r2, [r3, #64]	; 0x40

                    /* Slow start:  setup initial window (IW) to be MSS,  RFC 2581, 3.1 */
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = mss;
 8011cf8:	68ba      	ldr	r2, [r7, #8]
 8011cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cfc:	665a      	str	r2, [r3, #100]	; 0x64

                    /* Initialize the transmit outstanding byte count to zero. */
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8011cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d00:	2200      	movs	r2, #0
 8011d02:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
                    index = (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 8011d04:	6a3b      	ldr	r3, [r7, #32]
 8011d06:	0a1a      	lsrs	r2, r3, #8
 8011d08:	6a3b      	ldr	r3, [r7, #32]
 8011d0a:	4413      	add	r3, r2
 8011d0c:	f003 031f 	and.w	r3, r3, #31
 8011d10:	61bb      	str	r3, [r7, #24]

                    /* Determine if the list is NULL.  */
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	69ba      	ldr	r2, [r7, #24]
 8011d16:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8011d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d028      	beq.n	8011d74 <_nx_tcp_packet_process+0x550>
                    {

                        /* There are already sockets on this list... just add this one
                           to the end.  */
                        socket_ptr -> nx_tcp_socket_bound_next =
                            ip_ptr -> nx_ip_tcp_port_table[index];
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	69ba      	ldr	r2, [r7, #24]
 8011d26:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8011d2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                        socket_ptr -> nx_tcp_socket_bound_next =
 8011d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d30:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
                        socket_ptr -> nx_tcp_socket_bound_previous =
                            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	69ba      	ldr	r2, [r7, #24]
 8011d38:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8011d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d40:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
                        socket_ptr -> nx_tcp_socket_bound_previous =
 8011d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	69ba      	ldr	r2, [r7, #24]
 8011d4e:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8011d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8011d5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d5c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
                            socket_ptr;
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous = socket_ptr;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	69ba      	ldr	r2, [r7, #24]
 8011d64:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8011d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d6e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8011d72:	e00e      	b.n	8011d92 <_nx_tcp_packet_process+0x56e>
                    else
                    {

                        /* Nothing is on the TCP port list.  Add this TCP socket to an
                           empty list.  */
                        socket_ptr -> nx_tcp_socket_bound_next =      socket_ptr;
 8011d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d78:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 8011d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d80:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	69ba      	ldr	r2, [r7, #24]
 8011d88:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8011d8c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    }

                    /* Pickup the listen callback function.  */
                    listen_callback = listen_ptr -> nx_tcp_listen_callback;
 8011d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	617b      	str	r3, [r7, #20]

                    /* Release the incoming packet.  */
                    _nx_packet_release(packet_ptr);
 8011d98:	6838      	ldr	r0, [r7, #0]
 8011d9a:	f7fe fe4d 	bl	8010a38 <_nx_packet_release>

                    /* Determine if an accept call with suspension has already been made
                       for this socket.  If so, the SYN message needs to be sent from
                       here.  */
                    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 8011d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011da2:	2b04      	cmp	r3, #4
 8011da4:	d11a      	bne.n	8011ddc <_nx_tcp_packet_process+0x5b8>
                        /* The application is suspended on an accept call for this socket.
                           Simply send the SYN now and keep the thread suspended until the
                           other side completes the connection.  */

                        /* Send the SYN message, but increment the ACK first.  */
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8011da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011daa:	1c5a      	adds	r2, r3, #1
 8011dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dae:	64da      	str	r2, [r3, #76]	; 0x4c

                        /* Increment the sequence number for the SYN message.  */
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 8011db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011db4:	1c5a      	adds	r2, r3, #1
 8011db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011db8:	649a      	str	r2, [r3, #72]	; 0x48

                        /* Setup a timeout so the connection attempt can be sent again.  */
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8011dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dbc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8011dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dc2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8011dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

                        /* Send the SYN+ACK message.  */
                        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8011dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011dd2:	3b01      	subs	r3, #1
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011dd8:	f000 fb52 	bl	8012480 <_nx_tcp_packet_send_syn>
                    }

                    /* Determine if there is a listen callback function.  */
                    if (listen_callback)
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	f000 80ef 	beq.w	8011fc2 <_nx_tcp_packet_process+0x79e>
                    {
                        /* Call the user's listen callback function.  */
                        (listen_callback)(socket_ptr, port);
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	6a39      	ldr	r1, [r7, #32]
 8011de8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011dea:	4798      	blx	r3
                    if (listen_callback)
 8011dec:	e0e9      	b.n	8011fc2 <_nx_tcp_packet_process+0x79e>
                        /* If trace is enabled, insert this event into the trace buffer.  */
                        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_SYN_RECEIVE, ip_ptr, NX_NULL, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
                    }

                    /* Check for the same connection request already in the queue.  */
                    queued_count = listen_ptr -> nx_tcp_listen_queue_current;
 8011dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	653b      	str	r3, [r7, #80]	; 0x50
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 8011df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011df6:	695b      	ldr	r3, [r3, #20]
 8011df8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    queued_prev_ptr = queued_ptr;
 8011dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dfc:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Initialize the check for queued request to false.*/
                    is_a_RST_request = NX_FALSE;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Loop through the queued list in order to search for duplicate request.  */
                    while (queued_count--)
 8011e02:	e084      	b.n	8011f0e <_nx_tcp_packet_process+0x6ea>
                    {

                        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 8011e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	0c1b      	lsrs	r3, r3, #16
 8011e0c:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_IPV4
                        /* Pickup the queued source port and source IP address for comparison.  */
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011e14:	2b04      	cmp	r3, #4
 8011e16:	d121      	bne.n	8011e5c <_nx_tcp_packet_process+0x638>
                        {

                            /*lint -e{929} -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                            queued_source_ip = (ULONG *)(((ULONG *)queued_ptr -> nx_packet_prepend_ptr) - 2);
 8011e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e1a:	689b      	ldr	r3, [r3, #8]
 8011e1c:	3b08      	subs	r3, #8
 8011e1e:	60fb      	str	r3, [r7, #12]

                            /* Determine if this matches the current connection request.  */
                            if ((*queued_source_ip == *source_ip) && (queued_source_port == source_port))
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681a      	ldr	r2, [r3, #0]
 8011e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d117      	bne.n	8011e5c <_nx_tcp_packet_process+0x638>
 8011e2c:	693a      	ldr	r2, [r7, #16]
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d113      	bne.n	8011e5c <_nx_tcp_packet_process+0x638>
                            {

                                /* Possible duplicate connection request to one that is already queued.  */

                                /* Check for a RST (reset) bit set.  */
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8011e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d002      	beq.n	8011e46 <_nx_tcp_packet_process+0x622>
                                {

                                    /* RST packet matches a previously queued connection request. */
                                    is_a_RST_request = NX_TRUE;
 8011e40:	2301      	movs	r3, #1
 8011e42:	647b      	str	r3, [r7, #68]	; 0x44
 8011e44:	e00a      	b.n	8011e5c <_nx_tcp_packet_process+0x638>
                                }
                                else
                                {
#ifndef NX_DISABLE_TCP_INFO
                                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	; 0x5c0
 8011e4c:	1c5a      	adds	r2, r3, #1
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif
                                    /* Simply release the packet and return.  */
                                    _nx_packet_release(packet_ptr);
 8011e54:	6838      	ldr	r0, [r7, #0]
 8011e56:	f7fe fdef 	bl	8010a38 <_nx_packet_release>

                                    /* Return!  */
                                    return;
 8011e5a:	e0e1      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
                            }
                        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8011e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011e62:	2b06      	cmp	r3, #6
 8011e64:	d122      	bne.n	8011eac <_nx_tcp_packet_process+0x688>
                        {

                            /*lint -e{929} -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                            queued_source_ip = (ULONG *)(((ULONG *)queued_ptr -> nx_packet_prepend_ptr) - 8);
 8011e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e68:	689b      	ldr	r3, [r3, #8]
 8011e6a:	3b20      	subs	r3, #32
 8011e6c:	60fb      	str	r3, [r7, #12]

                            /* Determine if this matches the current connection request.  */
                            if ((CHECK_IPV6_ADDRESSES_SAME(queued_source_ip, source_ip)) && (queued_source_port == source_port))
 8011e6e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011e70:	68f8      	ldr	r0, [r7, #12]
 8011e72:	f7fd fc78 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d017      	beq.n	8011eac <_nx_tcp_packet_process+0x688>
 8011e7c:	693a      	ldr	r2, [r7, #16]
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d113      	bne.n	8011eac <_nx_tcp_packet_process+0x688>
                            {

                                /* Possible duplicate connection request to one that is already queued.  */

                                /* Check for a RST (reset) bit set.  */
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8011e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d002      	beq.n	8011e96 <_nx_tcp_packet_process+0x672>
                                {

                                    /* RST packet matches a previously queued connection request. */
                                    is_a_RST_request = NX_TRUE;
 8011e90:	2301      	movs	r3, #1
 8011e92:	647b      	str	r3, [r7, #68]	; 0x44
 8011e94:	e00a      	b.n	8011eac <_nx_tcp_packet_process+0x688>
                                }
                                else
                                {
#ifndef NX_DISABLE_TCP_INFO
                                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	; 0x5c0
 8011e9c:	1c5a      	adds	r2, r3, #1
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif
                                    /* Simply release the packet and return.  */
                                    _nx_packet_release(packet_ptr);
 8011ea4:	6838      	ldr	r0, [r7, #0]
 8011ea6:	f7fe fdc7 	bl	8010a38 <_nx_packet_release>

                                    /* Return!  */
                                    return;
 8011eaa:	e0b9      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
                        }
#endif /* FEATURE_NX_IPV6  */

                        /* Handle the case of the RST packet which cancels a previously received
                           connection request. */
                        if (is_a_RST_request)
 8011eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d028      	beq.n	8011f04 <_nx_tcp_packet_process+0x6e0>
                        {

                            /* A previous connection request needs to be removed from the listen queue. */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 8011eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011eb4:	695b      	ldr	r3, [r3, #20]
 8011eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d104      	bne.n	8011ec6 <_nx_tcp_packet_process+0x6a2>
                            {

                                /* Reset the front (oldest) of the queue to the next request. */
                                listen_ptr -> nx_tcp_listen_queue_head = queued_ptr -> nx_packet_queue_next;
 8011ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ebe:	69da      	ldr	r2, [r3, #28]
 8011ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ec2:	615a      	str	r2, [r3, #20]
 8011ec4:	e003      	b.n	8011ece <_nx_tcp_packet_process+0x6aa>
                            else
                            {

                                /* Link around the request we are removing. */
                                /*lint -e{613} suppress possible use of null pointer, since 'queued_prev_ptr' must not be NULL.  */
                                queued_prev_ptr -> nx_packet_queue_next = queued_ptr -> nx_packet_queue_next;
 8011ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ec8:	69da      	ldr	r2, [r3, #28]
 8011eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ecc:	61da      	str	r2, [r3, #28]
                            }

                            /* Is the request being removed the tail (most recent connection?)   */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 8011ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ed0:	699b      	ldr	r3, [r3, #24]
 8011ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d102      	bne.n	8011ede <_nx_tcp_packet_process+0x6ba>
                            {

                                /* Yes, set the previous connection request as the tail. */
                                listen_ptr -> nx_tcp_listen_queue_tail = queued_prev_ptr;
 8011ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011edc:	619a      	str	r2, [r3, #24]
                            }

                            /* Release the connection request packet.  */
                            _nx_packet_release(queued_ptr);
 8011ede:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011ee0:	f7fe fdaa 	bl	8010a38 <_nx_packet_release>

                            /* Update the listen queue. */
                            listen_ptr -> nx_tcp_listen_queue_current--;
 8011ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ee6:	691b      	ldr	r3, [r3, #16]
 8011ee8:	1e5a      	subs	r2, r3, #1
 8011eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011eec:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_TCP_INFO
                            /* Increment the TCP dropped packet count.  */
                            ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	; 0x5c0
 8011ef4:	1c5a      	adds	r2, r3, #1
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif

                            /* Simply release the packet and return.  */
                            _nx_packet_release(packet_ptr);
 8011efc:	6838      	ldr	r0, [r7, #0]
 8011efe:	f7fe fd9b 	bl	8010a38 <_nx_packet_release>

                            /* Return!  */
                            return;
 8011f02:	e08d      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
                        }

                        /* Move to next item in the queue.  */
                        queued_prev_ptr = queued_ptr;
 8011f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f06:	64bb      	str	r3, [r7, #72]	; 0x48
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 8011f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f0a:	69db      	ldr	r3, [r3, #28]
 8011f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    while (queued_count--)
 8011f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f10:	1e5a      	subs	r2, r3, #1
 8011f12:	653a      	str	r2, [r7, #80]	; 0x50
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f47f af75 	bne.w	8011e04 <_nx_tcp_packet_process+0x5e0>
                    }

                    /* Not a duplicate connection request, place this request on the listen queue.  */

                    /* Is this a RST packet? */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8011f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00a      	beq.n	8011f3c <_nx_tcp_packet_process+0x718>
                    {

                        /* Yes, so not a connection request. Do not place on the listen queue. */
#ifndef NX_DISABLE_TCP_INFO
                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	; 0x5c0
 8011f2c:	1c5a      	adds	r2, r3, #1
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 8011f34:	6838      	ldr	r0, [r7, #0]
 8011f36:	f7fe fd7f 	bl	8010a38 <_nx_packet_release>

                        /* Return!  */
                        return;
 8011f3a:	e071      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
                    }

                    /* Set the next pointer of the packet to NULL.  */
                    packet_ptr -> nx_packet_queue_next = NX_NULL;
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	61da      	str	r2, [r3, #28]

                    /* Queue the new connection request.  */
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 8011f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f44:	695b      	ldr	r3, [r3, #20]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d004      	beq.n	8011f54 <_nx_tcp_packet_process+0x730>
                    {

                        /* There is a connection request already queued, just link packet to tail.  */
                        (listen_ptr -> nx_tcp_listen_queue_tail) -> nx_packet_queue_next = packet_ptr;
 8011f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f4c:	699b      	ldr	r3, [r3, #24]
 8011f4e:	683a      	ldr	r2, [r7, #0]
 8011f50:	61da      	str	r2, [r3, #28]
 8011f52:	e002      	b.n	8011f5a <_nx_tcp_packet_process+0x736>
                    }
                    else
                    {

                        /* The queue is empty.  Setup head pointer to the new packet.  */
                        listen_ptr -> nx_tcp_listen_queue_head = packet_ptr;
 8011f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f56:	683a      	ldr	r2, [r7, #0]
 8011f58:	615a      	str	r2, [r3, #20]
                    }

                    /* Setup the tail pointer to the new packet and increment the queue count.  */
                    listen_ptr -> nx_tcp_listen_queue_tail =  packet_ptr;
 8011f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f5c:	683a      	ldr	r2, [r7, #0]
 8011f5e:	619a      	str	r2, [r3, #24]
                    listen_ptr -> nx_tcp_listen_queue_current++;
 8011f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f62:	691b      	ldr	r3, [r3, #16]
 8011f64:	1c5a      	adds	r2, r3, #1
 8011f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f68:	611a      	str	r2, [r3, #16]

                    /* Add debug information. */
                    NX_PACKET_DEBUG(NX_PACKET_TCP_LISTEN_QUEUE, __LINE__, packet_ptr);

                    /* Determine if the queue depth has been exceeded.  */
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 8011f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f6c:	691a      	ldr	r2, [r3, #16]
 8011f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f70:	68db      	ldr	r3, [r3, #12]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d953      	bls.n	801201e <_nx_tcp_packet_process+0x7fa>
                    {

#ifndef NX_DISABLE_TCP_INFO

                        /* Increment the TCP connections dropped count.  */
                        ip_ptr -> nx_ip_tcp_connections_dropped++;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 8011f7c:	1c5a      	adds	r2, r3, #1
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
                        ip_ptr -> nx_ip_tcp_connections--;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8011f8a:	1e5a      	subs	r2, r3, #1
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8

                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	; 0x5c0
 8011f98:	1c5a      	adds	r2, r3, #1
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif

                        /* Save the head packet pointer, since this will be released below.  */
                        packet_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 8011fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fa2:	695b      	ldr	r3, [r3, #20]
 8011fa4:	603b      	str	r3, [r7, #0]

                        /* Remove the oldest packet from the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_head = (listen_ptr -> nx_tcp_listen_queue_head) -> nx_packet_queue_next;
 8011fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fa8:	695b      	ldr	r3, [r3, #20]
 8011faa:	69da      	ldr	r2, [r3, #28]
 8011fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fae:	615a      	str	r2, [r3, #20]

                        /* Decrement the number of packets in the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_current--;
 8011fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fb2:	691b      	ldr	r3, [r3, #16]
 8011fb4:	1e5a      	subs	r2, r3, #1
 8011fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fb8:	611a      	str	r2, [r3, #16]

                        /* We have exceeded the number of connections that can be
                           queued for this port.  */

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 8011fba:	6838      	ldr	r0, [r7, #0]
 8011fbc:	f7fe fd3c 	bl	8010a38 <_nx_packet_release>
                    }
                }

                /* Finished processing, just return.  */
                return;
 8011fc0:	e02d      	b.n	801201e <_nx_tcp_packet_process+0x7fa>
 8011fc2:	e02c      	b.n	801201e <_nx_tcp_packet_process+0x7fa>
            }

            /* Move to the next listen request.  */
            listen_ptr = listen_ptr -> nx_tcp_listen_next;
 8011fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fc6:	69db      	ldr	r3, [r3, #28]
 8011fc8:	65bb      	str	r3, [r7, #88]	; 0x58
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8d3 3b30 	ldr.w	r3, [r3, #2864]	; 0xb30
 8011fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	f47f ae0d 	bne.w	8011bf2 <_nx_tcp_packet_process+0x3ce>
    }

#ifndef NX_DISABLE_TCP_INFO

    /* Determine if a connection request is present.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 8011fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d006      	beq.n	8011ff2 <_nx_tcp_packet_process+0x7ce>
    {

        /* Yes, increment the TCP connections dropped count.  */
        ip_ptr -> nx_ip_tcp_connections_dropped++;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 8011fea:	1c5a      	adds	r2, r3, #1
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
    }

    /* Increment the TCP dropped packet count.  */
    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	; 0x5c0
 8011ff8:	1c5a      	adds	r2, r3, #1
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif /* NX_DISABLE_TCP_INFO  */

    /* Determine if a RST is present. If so, don't send a RST in response.  */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 8012000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012008:	2b00      	cmp	r3, #0
 801200a:	d104      	bne.n	8012016 <_nx_tcp_packet_process+0x7f2>
    {

        /* Non RST is present, send reset when no connection is present.  */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 801200c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801200e:	6839      	ldr	r1, [r7, #0]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7ff faf4 	bl	80115fe <_nx_tcp_no_connection_reset>
    }

    /* Not a connection request, just release the packet.  */
    _nx_packet_release(packet_ptr);
 8012016:	6838      	ldr	r0, [r7, #0]
 8012018:	f7fe fd0e 	bl	8010a38 <_nx_packet_release>

    return;
 801201c:	e000      	b.n	8012020 <_nx_tcp_packet_process+0x7fc>
                return;
 801201e:	bf00      	nop
}
 8012020:	3768      	adds	r7, #104	; 0x68
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
	...

08012028 <_nx_tcp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b088      	sub	sp, #32
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_TCP_HEADER))
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012036:	2b13      	cmp	r3, #19
 8012038:	d80a      	bhi.n	8012050 <_nx_tcp_packet_receive+0x28>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 35bc 	ldr.w	r3, [r3, #1468]	; 0x5bc
 8012040:	1c5a      	adds	r2, r3, #1
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8012048:	6838      	ldr	r0, [r7, #0]
 801204a:	f7fe fcf5 	bl	8010a38 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 801204e:	e052      	b.n	80120f6 <_nx_tcp_packet_receive+0xce>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012050:	f3ef 8305 	mrs	r3, IPSR
 8012054:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012056:	69ba      	ldr	r2, [r7, #24]
    }
#endif

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 8012058:	4b28      	ldr	r3, [pc, #160]	; (80120fc <_nx_tcp_packet_receive+0xd4>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4313      	orrs	r3, r2
 801205e:	2b00      	cmp	r3, #0
 8012060:	d106      	bne.n	8012070 <_nx_tcp_packet_receive+0x48>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f203 629c 	addw	r2, r3, #1692	; 0x69c
 8012068:	4b25      	ldr	r3, [pc, #148]	; (8012100 <_nx_tcp_packet_receive+0xd8>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	429a      	cmp	r2, r3
 801206e:	d03e      	beq.n	80120ee <_nx_tcp_packet_receive+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012070:	f3ef 8310 	mrs	r3, PRIMASK
 8012074:	617b      	str	r3, [r7, #20]
    return(posture);
 8012076:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012078:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801207a:	b672      	cpsid	i
    return(int_posture);
 801207c:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback.  Just place the message at the
           end of the TCP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 801207e:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the TCP message queue.  */
        if (ip_ptr -> nx_ip_tcp_queue_head)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 39b8 	ldr.w	r3, [r3, #2488]	; 0x9b8
 8012086:	2b00      	cmp	r3, #0
 8012088:	d013      	beq.n	80120b2 <_nx_tcp_packet_receive+0x8a>
        {

            /* Link the current packet at the end of the queue.  */
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8d3 39bc 	ldr.w	r3, [r3, #2492]	; 0x9bc
 8012090:	683a      	ldr	r2, [r7, #0]
 8012092:	61da      	str	r2, [r3, #28]
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	683a      	ldr	r2, [r7, #0]
 8012098:	f8c3 29bc 	str.w	r2, [r3, #2492]	; 0x9bc
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	2200      	movs	r2, #0
 80120a0:	61da      	str	r2, [r3, #28]

            /* Increment the count of incoming TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8d3 39c0 	ldr.w	r3, [r3, #2496]	; 0x9c0
 80120a8:	1c5a      	adds	r2, r3, #1
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
 80120b0:	e00e      	b.n	80120d0 <_nx_tcp_packet_receive+0xa8>
        }
        else
        {

            /* Empty queue, add to the head of the TCP message queue.  */
            ip_ptr -> nx_ip_tcp_queue_head =        packet_ptr;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	683a      	ldr	r2, [r7, #0]
 80120b6:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
            ip_ptr -> nx_ip_tcp_queue_tail =        packet_ptr;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	683a      	ldr	r2, [r7, #0]
 80120be:	f8c3 29bc 	str.w	r2, [r3, #2492]	; 0x9bc
            packet_ptr -> nx_packet_queue_next =    NX_NULL;
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2200      	movs	r2, #0
 80120c6:	61da      	str	r2, [r3, #28]

            /* Set the initial count TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2201      	movs	r2, #1
 80120cc:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	f383 8810 	msr	PRIMASK, r3
}
 80120da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the TCP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 80120e2:	2200      	movs	r2, #0
 80120e4:	2180      	movs	r1, #128	; 0x80
 80120e6:	4618      	mov	r0, r3
 80120e8:	f005 fca8 	bl	8017a3c <_tx_event_flags_set>
 80120ec:	e003      	b.n	80120f6 <_nx_tcp_packet_receive+0xce>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the TCP processing directly.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 80120ee:	6839      	ldr	r1, [r7, #0]
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f7ff fb97 	bl	8011824 <_nx_tcp_packet_process>
    }
}
 80120f6:	3720      	adds	r7, #32
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	2400008c 	.word	0x2400008c
 8012100:	24000874 	.word	0x24000874

08012104 <_nx_tcp_packet_send_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_ack(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b086      	sub	sp, #24
 8012108:	af04      	add	r7, sp, #16
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012112:	2200      	movs	r2, #0
 8012114:	9202      	str	r2, [sp, #8]
 8012116:	2200      	movs	r2, #0
 8012118:	9201      	str	r2, [sp, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	9200      	str	r2, [sp, #0]
 801211e:	683a      	ldr	r2, [r7, #0]
 8012120:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f000 f80b 	bl	8012140 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 801212a:	4b04      	ldr	r3, [pc, #16]	; (801213c <_nx_tcp_packet_send_ack+0x38>)
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	655a      	str	r2, [r3, #84]	; 0x54
}
 8012132:	bf00      	nop
 8012134:	3708      	adds	r7, #8
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	24000830 	.word	0x24000830

08012140 <_nx_tcp_packet_send_control>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_control(NX_TCP_SOCKET *socket_ptr, ULONG control_bits, ULONG tx_sequence,
                                  ULONG ack_number, ULONG option_word_1, ULONG option_word_2, UCHAR *data)
{
 8012140:	b5b0      	push	{r4, r5, r7, lr}
 8012142:	b092      	sub	sp, #72	; 0x48
 8012144:	af04      	add	r7, sp, #16
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	607a      	str	r2, [r7, #4]
 801214c:	603b      	str	r3, [r7, #0]

NX_IP         *ip_ptr;
NX_PACKET     *packet_ptr;
NX_TCP_HEADER *tcp_header_ptr;
ULONG          checksum;
ULONG          data_offset = 0;
 801214e:	2300      	movs	r3, #0
 8012150:	627b      	str	r3, [r7, #36]	; 0x24
ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 8012152:	2300      	movs	r3, #0
 8012154:	637b      	str	r3, [r7, #52]	; 0x34
 8012156:	2300      	movs	r3, #0
 8012158:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012160:	623b      	str	r3, [r7, #32]

    if (control_bits & NX_TCP_SYN_BIT)
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012168:	2b00      	cmp	r3, #0
 801216a:	d007      	beq.n	801217c <_nx_tcp_packet_send_control+0x3c>
    {

        /* Set header size. */
        header_size = NX_TCP_SYN_HEADER;
 801216c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012170:	62fb      	str	r3, [r7, #44]	; 0x2c
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012178:	62bb      	str	r3, [r7, #40]	; 0x28
 801217a:	e006      	b.n	801218a <_nx_tcp_packet_send_control+0x4a>
    }
    else
    {

        /* Set header size. */
        header_size = NX_TCP_HEADER_SIZE;
 801217c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8012180:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set window size. */
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current >> socket_ptr -> nx_tcp_rcv_win_scale_value;
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012188:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {

            /*lint -e{835} -e{845} suppress operating on zero. */
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 801218a:	6a3b      	ldr	r3, [r7, #32]
 801218c:	f8d3 063c 	ldr.w	r0, [r3, #1596]	; 0x63c
 8012190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012192:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012196:	f107 0114 	add.w	r1, r7, #20
 801219a:	2300      	movs	r3, #0
 801219c:	f7fe f8ac 	bl	80102f8 <_nx_packet_allocate>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	f040 80fc 	bne.w	80123a0 <_nx_tcp_packet_send_control+0x260>
        }
    }
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Check to see if the packet has enough room to fill with the max TCP header (SYN + probe data).  */
    if ((UINT)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr) < (NX_TCP_SYN_SIZE + 1))
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	695a      	ldr	r2, [r3, #20]
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	689b      	ldr	r3, [r3, #8]
 80121b0:	1ad3      	subs	r3, r2, r3
 80121b2:	2b1c      	cmp	r3, #28
 80121b4:	d804      	bhi.n	80121c0 <_nx_tcp_packet_send_control+0x80>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(packet_ptr);
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fe fc3d 	bl	8010a38 <_nx_packet_release>
        return;
 80121be:	e0f0      	b.n	80123a2 <_nx_tcp_packet_send_control+0x262>
    }

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized in _nx_packet_allocate. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	695a      	ldr	r2, [r3, #20]
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	b2d2      	uxtb	r2, r2
 80121c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Allocate a packet for the control message.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	695b      	ldr	r3, [r3, #20]
 80121d0:	2b04      	cmp	r3, #4
 80121d2:	d103      	bne.n	80121dc <_nx_tcp_packet_send_control+0x9c>
    {

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	68fa      	ldr	r2, [r7, #12]
 80121d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80121da:	635a      	str	r2, [r3, #52]	; 0x34
#ifdef NX_IPSEC_ENABLE
    packet_ptr -> nx_packet_ipsec_sa_ptr = socket_ptr -> nx_tcp_socket_egress_sa;
#endif

    /* Setup the packet payload pointers and length for a basic TCP packet.  */
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	689a      	ldr	r2, [r3, #8]
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	3214      	adds	r2, #20
 80121e4:	60da      	str	r2, [r3, #12]

    /* Setup the packet length.  */
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	2214      	movs	r2, #20
 80121ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	689b      	ldr	r3, [r3, #8]
 80121f0:	61fb      	str	r3, [r7, #28]

    /* Build the control request in the TCP header.  */
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	041a      	lsls	r2, r3, #16
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121fc:	431a      	orrs	r2, r3
 80121fe:	69fb      	ldr	r3, [r7, #28]
 8012200:	601a      	str	r2, [r3, #0]
    tcp_header_ptr -> nx_tcp_sequence_number =      tx_sequence;
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	605a      	str	r2, [r3, #4]
    tcp_header_ptr -> nx_tcp_acknowledgment_number = ack_number;
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	683a      	ldr	r2, [r7, #0]
 801220c:	609a      	str	r2, [r3, #8]
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 801220e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	431a      	orrs	r2, r3
 8012214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012216:	431a      	orrs	r2, r3
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	60da      	str	r2, [r3, #12]
    tcp_header_ptr -> nx_tcp_header_word_4 =        0;
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	2200      	movs	r2, #0
 8012220:	611a      	str	r2, [r3, #16]

    /* Remember the last ACKed sequence and the last reported window size.  */
    socket_ptr -> nx_tcp_socket_rx_sequence_acked =    ack_number;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	683a      	ldr	r2, [r7, #0]
 8012226:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	ba1a      	rev	r2, r3
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	ba1a      	rev	r2, r3
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	ba1a      	rev	r2, r3
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 8012252:	69fb      	ldr	r3, [r7, #28]
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	ba1a      	rev	r2, r3
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	691b      	ldr	r3, [r3, #16]
 8012260:	ba1a      	rev	r2, r3
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	611a      	str	r2, [r3, #16]

    /* Check whether or not data is set. */
    if (data)
 8012266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012268:	2b00      	cmp	r3, #0
 801226a:	d00a      	beq.n	8012282 <_nx_tcp_packet_send_control+0x142>
    {

        /* Zero window probe data exist. */
        *packet_ptr -> nx_packet_append_ptr++ = *data;
 801226c:	697a      	ldr	r2, [r7, #20]
 801226e:	68d3      	ldr	r3, [r2, #12]
 8012270:	1c59      	adds	r1, r3, #1
 8012272:	60d1      	str	r1, [r2, #12]
 8012274:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012276:	7812      	ldrb	r2, [r2, #0]
 8012278:	701a      	strb	r2, [r3, #0]
        packet_ptr -> nx_packet_length++;
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801227e:	3201      	adds	r2, #1
 8012280:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Whether it is a SYN packet. */
    if (control_bits & NX_TCP_SYN_BIT)
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012288:	2b00      	cmp	r3, #0
 801228a:	d018      	beq.n	80122be <_nx_tcp_packet_send_control+0x17e>
    {

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the TCP header.  */
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 801228c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801228e:	ba1b      	rev	r3, r3
 8012290:	64bb      	str	r3, [r7, #72]	; 0x48
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 8012292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012294:	ba1b      	rev	r3, r3
 8012296:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Set options. */
        /*lint --e{927} --e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	68db      	ldr	r3, [r3, #12]
 801229c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801229e:	601a      	str	r2, [r3, #0]
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	3304      	adds	r3, #4
 80122a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122a8:	601a      	str	r2, [r3, #0]

        /* Adjust packet information. */
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	68da      	ldr	r2, [r3, #12]
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	3208      	adds	r2, #8
 80122b2:	60da      	str	r2, [r3, #12]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	3208      	adds	r2, #8
 80122bc:	625a      	str	r2, [r3, #36]	; 0x24
    {


        /* Set the packet source IP address. */
#ifndef NX_DISABLE_IPV4
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	695b      	ldr	r3, [r3, #20]
 80122c2:	2b04      	cmp	r3, #4
 80122c4:	d106      	bne.n	80122d4 <_nx_tcp_packet_send_control+0x194>
        {

            /* For IPv4 the IP instance has only one global address. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122ca:	3314      	adds	r3, #20
 80122cc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	3318      	adds	r3, #24
 80122d2:	633b      	str	r3, [r7, #48]	; 0x30
        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	695b      	ldr	r3, [r3, #20]
 80122d8:	2b06      	cmp	r3, #6
 80122da:	d107      	bne.n	80122ec <_nx_tcp_packet_send_control+0x1ac>
        {

            /* For IPv6, use the source address specified in the socket outgoing interface. */
            source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80122e2:	3308      	adds	r3, #8
 80122e4:	637b      	str	r3, [r7, #52]	; 0x34

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	3318      	adds	r3, #24
 80122ea:	633b      	str	r3, [r7, #48]	; 0x30
        }
#endif /* FEATURE_NX_IPV6 */

        /* Calculate the TCP checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 80122ec:	6978      	ldr	r0, [r7, #20]
                                            (UINT)packet_ptr -> nx_packet_length, source_ip, dest_ip);
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 80122f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f4:	9300      	str	r3, [sp, #0]
 80122f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f8:	2106      	movs	r1, #6
 80122fa:	f7f9 ff90 	bl	800c21e <_nx_ip_checksum_compute>
 80122fe:	4603      	mov	r3, r0
 8012300:	61bb      	str	r3, [r7, #24]

        checksum = ~checksum & NX_LOWER_16_MASK;
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	43db      	mvns	r3, r3
 8012306:	b29b      	uxth	r3, r3
 8012308:	61bb      	str	r3, [r7, #24]

        /* Move the checksum into header.  */
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	ba1a      	rev	r2, r3
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	611a      	str	r2, [r3, #16]
        tcp_header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 8012314:	69bb      	ldr	r3, [r7, #24]
 8012316:	041a      	lsls	r2, r3, #16
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	611a      	str	r2, [r3, #16]
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	691b      	ldr	r3, [r3, #16]
 8012320:	ba1a      	rev	r2, r3
 8012322:	69fb      	ldr	r3, [r7, #28]
 8012324:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

#ifndef NX_DISABLE_IPV4
    /* Send the TCP packet to the IP component.  */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	695b      	ldr	r3, [r3, #20]
 801232a:	2b04      	cmp	r3, #4
 801232c:	d119      	bne.n	8012362 <_nx_tcp_packet_send_control+0x222>
    {

        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 801232e:	6978      	ldr	r0, [r7, #20]
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	699c      	ldr	r4, [r3, #24]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
                           socket_ptr -> nx_tcp_socket_type_of_service, socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8012346:	68f9      	ldr	r1, [r7, #12]
 8012348:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801234a:	9103      	str	r1, [sp, #12]
 801234c:	9202      	str	r2, [sp, #8]
 801234e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8012352:	9201      	str	r2, [sp, #4]
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	462b      	mov	r3, r5
 8012358:	4622      	mov	r2, r4
 801235a:	4601      	mov	r1, r0
 801235c:	6a38      	ldr	r0, [r7, #32]
 801235e:	f7fa ffee 	bl	800d33e <_nx_ip_packet_send>
                           socket_ptr -> nx_tcp_socket_next_hop_address);
    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	695b      	ldr	r3, [r3, #20]
 8012366:	2b06      	cmp	r3, #6
 8012368:	d11b      	bne.n	80123a2 <_nx_tcp_packet_send_control+0x262>
    {

        /* The IPv6 packet interface must be set before sending. Set to the TCP socket outgoing interface. */
        packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 8012372:	635a      	str	r2, [r3, #52]	; 0x34

        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
 8012374:	6978      	ldr	r0, [r7, #20]
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801237a:	6a3b      	ldr	r3, [r7, #32]
 801237c:	f8d3 3ecc 	ldr.w	r3, [r3, #3788]	; 0xecc
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
 8012380:	68fa      	ldr	r2, [r7, #12]
 8012382:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 8012386:	3208      	adds	r2, #8
                             socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8012388:	68f9      	ldr	r1, [r7, #12]
 801238a:	3118      	adds	r1, #24
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
 801238c:	9102      	str	r1, [sp, #8]
 801238e:	9201      	str	r2, [sp, #4]
 8012390:	9300      	str	r3, [sp, #0]
 8012392:	4623      	mov	r3, r4
 8012394:	2206      	movs	r2, #6
 8012396:	4601      	mov	r1, r0
 8012398:	6a38      	ldr	r0, [r7, #32]
 801239a:	f7fc fcb8 	bl	800ed0e <_nx_ipv6_packet_send>
 801239e:	e000      	b.n	80123a2 <_nx_tcp_packet_send_control+0x262>
                return;
 80123a0:	bf00      	nop
    }
#endif /* FEATURE_NX_IPV6 */
}
 80123a2:	3738      	adds	r7, #56	; 0x38
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bdb0      	pop	{r4, r5, r7, pc}

080123a8 <_nx_tcp_packet_send_fin>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_fin(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b086      	sub	sp, #24
 80123ac:	af04      	add	r7, sp, #16
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123b6:	2200      	movs	r2, #0
 80123b8:	9202      	str	r2, [sp, #8]
 80123ba:	2200      	movs	r2, #0
 80123bc:	9201      	str	r2, [sp, #4]
 80123be:	2200      	movs	r2, #0
 80123c0:	9200      	str	r2, [sp, #0]
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7ff feb9 	bl	8012140 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);
}
 80123ce:	bf00      	nop
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <_nx_tcp_packet_send_probe>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_probe(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence, UCHAR data)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b088      	sub	sp, #32
 80123dc:	af04      	add	r7, sp, #16
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	4613      	mov	r3, r2
 80123e4:	71fb      	strb	r3, [r7, #7]

    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80123ea:	1dfb      	adds	r3, r7, #7
 80123ec:	9302      	str	r3, [sp, #8]
 80123ee:	2300      	movs	r3, #0
 80123f0:	9301      	str	r3, [sp, #4]
 80123f2:	2300      	movs	r3, #0
 80123f4:	9300      	str	r3, [sp, #0]
 80123f6:	4613      	mov	r3, r2
 80123f8:	68ba      	ldr	r2, [r7, #8]
 80123fa:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f7ff fe9e 	bl	8012140 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, &data);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8012404:	4b03      	ldr	r3, [pc, #12]	; (8012414 <_nx_tcp_packet_send_probe+0x3c>)
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	655a      	str	r2, [r3, #84]	; 0x54
}
 801240c:	bf00      	nop
 801240e:	3710      	adds	r7, #16
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	24000830 	.word	0x24000830

08012418 <_nx_tcp_packet_send_rst>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_rst(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *header_ptr)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b086      	sub	sp, #24
 801241c:	af04      	add	r7, sp, #16
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
    /* Reset Generation, RFC793, Section3.4, Page37, the RST packet is set up based on if the incoming packet has the ACK bit set. */
    /* If the incoming segment has an ACK field, the reset takes its sequence number from the ACK field of the segment,
       otherwise the reset has sequence number zero and the ACK field is set to the sum of the sequence number and segment length of the incoming segment.  */

    /* Check for the ACK bit in the incoming TCP header.  */
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00e      	beq.n	801244c <_nx_tcp_packet_send_rst+0x34>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	689a      	ldr	r2, [r3, #8]
 8012432:	2300      	movs	r3, #0
 8012434:	9302      	str	r3, [sp, #8]
 8012436:	2300      	movs	r3, #0
 8012438:	9301      	str	r3, [sp, #4]
 801243a:	2300      	movs	r3, #0
 801243c:	9300      	str	r3, [sp, #0]
 801243e:	2300      	movs	r3, #0
 8012440:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7ff fe7b 	bl	8012140 <_nx_tcp_packet_send_control>
 801244a:	e00d      	b.n	8012468 <_nx_tcp_packet_send_rst+0x50>
                                    0, 0, 0, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_RST_BIT | NX_TCP_ACK_BIT), 0,
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	2200      	movs	r2, #0
 8012452:	9202      	str	r2, [sp, #8]
 8012454:	2200      	movs	r2, #0
 8012456:	9201      	str	r2, [sp, #4]
 8012458:	2200      	movs	r2, #0
 801245a:	9200      	str	r2, [sp, #0]
 801245c:	2200      	movs	r2, #0
 801245e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7ff fe6c 	bl	8012140 <_nx_tcp_packet_send_control>
                                    header_ptr -> nx_tcp_sequence_number, 0, 0, NX_NULL);
    }

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the resets sent count.  */
    socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_resets_sent++;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801246e:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	; 0x5e4
 8012472:	3201      	adds	r2, #1
 8012474:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
#endif /* NX_DISABLE_TCP_INFO */
}
 8012478:	bf00      	nop
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <_nx_tcp_packet_send_syn>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_syn(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b08a      	sub	sp, #40	; 0x28
 8012484:	af04      	add	r7, sp, #16
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
ULONG        option_word_2;
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
UINT         include_window_scaling = NX_FALSE;
UINT         scale_factor;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
ULONG        mss = 0;
 801248a:	2300      	movs	r3, #0
 801248c:	617b      	str	r3, [r7, #20]
    }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
    /* Update the mss value based on IP version type. */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	695b      	ldr	r3, [r3, #20]
 8012492:	2b04      	cmp	r3, #4
 8012494:	d104      	bne.n	80124a0 <_nx_tcp_packet_send_syn+0x20>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801249c:	3b28      	subs	r3, #40	; 0x28
 801249e:	617b      	str	r3, [r7, #20]

    }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	695b      	ldr	r3, [r3, #20]
 80124a4:	2b06      	cmp	r3, #6
 80124a6:	d104      	bne.n	80124b2 <_nx_tcp_packet_send_syn+0x32>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV6_HEADER)) - sizeof(NX_TCP_HEADER));
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ae:	3b3c      	subs	r3, #60	; 0x3c
 80124b0:	617b      	str	r3, [r7, #20]
        }
#endif /* NX_IPSEC_ENABLE */
    }
#endif /* FEATURE_NX_IPV6 */

    mss &= 0x0000FFFFUL;
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	617b      	str	r3, [r7, #20]

    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	691b      	ldr	r3, [r3, #16]
 80124bc:	697a      	ldr	r2, [r7, #20]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d906      	bls.n	80124d0 <_nx_tcp_packet_send_syn+0x50>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	691b      	ldr	r3, [r3, #16]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d002      	beq.n	80124d0 <_nx_tcp_packet_send_syn+0x50>
    {

        /* Use the custom MSS. */
        mss = socket_ptr -> nx_tcp_socket_mss;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	691b      	ldr	r3, [r3, #16]
 80124ce:	617b      	str	r3, [r7, #20]
    }

    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124d4:	2b04      	cmp	r3, #4
 80124d6:	d115      	bne.n	8012504 <_nx_tcp_packet_send_syn+0x84>
    {

        /* Update the connect MSS for TCP server socket. */
        if (mss < socket_ptr -> nx_tcp_socket_peer_mss)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d203      	bcs.n	80124ea <_nx_tcp_packet_send_syn+0x6a>
        {
            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	697a      	ldr	r2, [r7, #20]
 80124e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80124e8:	e003      	b.n	80124f2 <_nx_tcp_packet_send_syn+0x72>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_connect_mss =  socket_ptr -> nx_tcp_socket_peer_mss;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
        socket_ptr -> nx_tcp_socket_connect_mss2 =
            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80124fa:	fb03 f202 	mul.w	r2, r3, r2
        socket_ptr -> nx_tcp_socket_connect_mss2 =
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	63da      	str	r2, [r3, #60]	; 0x3c
 8012502:	e002      	b.n	801250a <_nx_tcp_packet_send_syn+0x8a>
    }
    else
    {

        /* Set the MSS. */
        socket_ptr -> nx_tcp_socket_connect_mss = mss;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	697a      	ldr	r2, [r7, #20]
 8012508:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Build the MSS option.  */
    option_word_1 = NX_TCP_MSS_OPTION | mss;
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012510:	613b      	str	r3, [r7, #16]

    /* Set default option word2. */
    option_word_2 = NX_TCP_OPTION_END;
 8012512:	4b16      	ldr	r3, [pc, #88]	; (801256c <_nx_tcp_packet_send_syn+0xec>)
 8012514:	60fb      	str	r3, [r7, #12]
        socket_ptr -> nx_tcp_rcv_win_scale_value = scale_factor;
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Send SYN or SYN+ACK packet according to socket state. */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801251a:	2b03      	cmp	r3, #3
 801251c:	d10d      	bne.n	801253a <_nx_tcp_packet_send_syn+0xba>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
 801251e:	2300      	movs	r3, #0
 8012520:	9302      	str	r3, [sp, #8]
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	9301      	str	r3, [sp, #4]
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	9300      	str	r3, [sp, #0]
 801252a:	2300      	movs	r3, #0
 801252c:	683a      	ldr	r2, [r7, #0]
 801252e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f7ff fe04 	bl	8012140 <_nx_tcp_packet_send_control>
 8012538:	e00e      	b.n	8012558 <_nx_tcp_packet_send_syn+0xd8>
                                    0, option_word_1, option_word_2, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_SYN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801253e:	2300      	movs	r3, #0
 8012540:	9302      	str	r3, [sp, #8]
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	9301      	str	r3, [sp, #4]
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	4613      	mov	r3, r2
 801254c:	683a      	ldr	r2, [r7, #0]
 801254e:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f7ff fdf4 	bl	8012140 <_nx_tcp_packet_send_control>
                                    socket_ptr -> nx_tcp_socket_rx_sequence, option_word_1, option_word_2, NX_NULL);
    }

    /* Initialize recover sequence and previous cumulative acknowledgment. */
    socket_ptr -> nx_tcp_socket_tx_sequence_recover = tx_sequence;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	683a      	ldr	r2, [r7, #0]
 801255c:	66da      	str	r2, [r3, #108]	; 0x6c
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	683a      	ldr	r2, [r7, #0]
 8012562:	671a      	str	r2, [r3, #112]	; 0x70
}
 8012564:	bf00      	nop
 8012566:	3718      	adds	r7, #24
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	01010100 	.word	0x01010100

08012570 <_nx_tcp_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_periodic_processing(NX_IP *ip_ptr)
{
 8012570:	b480      	push	{r7}
 8012572:	b083      	sub	sp, #12
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
        keepalive_enabled = socket_ptr -> nx_tcp_socket_keepalive_enabled;
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif
}
 8012578:	bf00      	nop
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <_nx_tcp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_queue_process(NX_IP *ip_ptr)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b088      	sub	sp, #32
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801258c:	f3ef 8310 	mrs	r3, PRIMASK
 8012590:	60fb      	str	r3, [r7, #12]
    return(posture);
 8012592:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8012594:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012596:	b672      	cpsid	i
    return(int_posture);
 8012598:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 801259a:	61bb      	str	r3, [r7, #24]

    /* Remove the TCP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 39b8 	ldr.w	r3, [r3, #2488]	; 0x9b8
 80125a2:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2200      	movs	r2, #0
 80125a8:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
    ip_ptr -> nx_ip_tcp_queue_tail =  NX_NULL;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2200      	movs	r2, #0
 80125b0:	f8c3 29bc 	str.w	r2, [r3, #2492]	; 0x9bc
    ip_ptr -> nx_ip_tcp_received_packet_count =  0;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	f8c3 29c0 	str.w	r2, [r3, #2496]	; 0x9c0
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	f383 8810 	msr	PRIMASK, r3
}
 80125c6:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire TCP message queue and process packets
       one by one.  */
    while (queue_head)
 80125c8:	e00b      	b.n	80125e2 <_nx_tcp_queue_process+0x5e>
    {

        /* Pickup the first queue TCP message and remove it from the
           TCP queue.  */
        packet_ptr =  queue_head;
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	69db      	ldr	r3, [r3, #28]
 80125d2:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	2200      	movs	r2, #0
 80125d8:	61da      	str	r2, [r3, #28]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Process the packet.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 80125da:	6979      	ldr	r1, [r7, #20]
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f7ff f921 	bl	8011824 <_nx_tcp_packet_process>
    while (queue_head)
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d1f0      	bne.n	80125ca <_nx_tcp_queue_process+0x46>
    }
}
 80125e8:	bf00      	nop
 80125ea:	bf00      	nop
 80125ec:	3720      	adds	r7, #32
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
	...

080125f4 <_nx_tcp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b08e      	sub	sp, #56	; 0x38
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125fe:	f3ef 8310 	mrs	r3, PRIMASK
 8012602:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8012604:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8012606:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8012608:	b672      	cpsid	i
    return(int_posture);
 801260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 801260c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012612:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012616:	2b00      	cmp	r3, #0
 8012618:	d004      	beq.n	8012624 <_nx_tcp_receive_cleanup+0x30>
 801261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	4a43      	ldr	r2, [pc, #268]	; (801272c <_nx_tcp_receive_cleanup+0x138>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d006      	beq.n	8012632 <_nx_tcp_receive_cleanup+0x3e>
 8012624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012626:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012628:	6a3b      	ldr	r3, [r7, #32]
 801262a:	f383 8810 	msr	PRIMASK, r3
}
 801262e:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8012630:	e078      	b.n	8012724 <_nx_tcp_receive_cleanup+0x130>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012636:	2b00      	cmp	r3, #0
 8012638:	d106      	bne.n	8012648 <_nx_tcp_receive_cleanup+0x54>
 801263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801263c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	f383 8810 	msr	PRIMASK, r3
}
 8012644:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8012646:	e06d      	b.n	8012724 <_nx_tcp_receive_cleanup+0x130>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012648:	f3ef 8305 	mrs	r3, IPSR
 801264c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801264e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8012650:	4b37      	ldr	r3, [pc, #220]	; (8012730 <_nx_tcp_receive_cleanup+0x13c>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4313      	orrs	r3, r2
 8012656:	2b00      	cmp	r3, #0
 8012658:	d104      	bne.n	8012664 <_nx_tcp_receive_cleanup+0x70>
 801265a:	4b36      	ldr	r3, [pc, #216]	; (8012734 <_nx_tcp_receive_cleanup+0x140>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	4a36      	ldr	r2, [pc, #216]	; (8012738 <_nx_tcp_receive_cleanup+0x144>)
 8012660:	4293      	cmp	r3, r2
 8012662:	d116      	bne.n	8012692 <_nx_tcp_receive_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4a35      	ldr	r2, [pc, #212]	; (801273c <_nx_tcp_receive_cleanup+0x148>)
 8012668:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 801266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012674:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	f383 8810 	msr	PRIMASK, r3
}
 801267c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 801267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012680:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 8012684:	2200      	movs	r2, #0
 8012686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801268a:	4618      	mov	r0, r3
 801268c:	f005 f9d6 	bl	8017a3c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8012690:	e048      	b.n	8012724 <_nx_tcp_receive_cleanup+0x130>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2200      	movs	r2, #0
 8012696:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801269c:	687a      	ldr	r2, [r7, #4]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d104      	bne.n	80126ac <_nx_tcp_receive_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  NX_NULL;
 80126a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a4:	2200      	movs	r2, #0
 80126a6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80126aa:	e00e      	b.n	80126ca <_nx_tcp_receive_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80126b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80126be:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80126c8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 80126ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80126d0:	1e5a      	subs	r2, r3, #1
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126dc:	2b0c      	cmp	r3, #12
 80126de:	d11b      	bne.n	8012718 <_nx_tcp_receive_cleanup+0x124>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which receive error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 80126e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126e4:	2b05      	cmp	r3, #5
 80126e6:	d004      	beq.n	80126f2 <_nx_tcp_receive_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2238      	movs	r2, #56	; 0x38
 80126ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80126f0:	e003      	b.n	80126fa <_nx_tcp_receive_cleanup+0x106>
            }
            else
            {

                /* Setup return status.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2201      	movs	r2, #1
 80126f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80126fa:	4b11      	ldr	r3, [pc, #68]	; (8012740 <_nx_tcp_receive_cleanup+0x14c>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	3301      	adds	r3, #1
 8012700:	4a0f      	ldr	r2, [pc, #60]	; (8012740 <_nx_tcp_receive_cleanup+0x14c>)
 8012702:	6013      	str	r3, [r2, #0]
 8012704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012706:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	f383 8810 	msr	PRIMASK, r3
}
 801270e:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f006 fc93 	bl	801903c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8012716:	e005      	b.n	8012724 <_nx_tcp_receive_cleanup+0x130>
 8012718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801271a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f383 8810 	msr	PRIMASK, r3
}
 8012722:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8012724:	3738      	adds	r7, #56	; 0x38
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	54435020 	.word	0x54435020
 8012730:	2400008c 	.word	0x2400008c
 8012734:	24000874 	.word	0x24000874
 8012738:	240009bc 	.word	0x240009bc
 801273c:	08010de1 	.word	0x08010de1
 8012740:	2400090c 	.word	0x2400090c

08012744 <_nx_tcp_socket_block_cleanup>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_block_cleanup(NX_TCP_SOCKET *socket_ptr)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]

    /* Clean up the connect IP address.  */

    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2200      	movs	r2, #0
 8012750:	615a      	str	r2, [r3, #20]
#ifdef FEATURE_NX_IPV6
    /* Clean up the IP address field. */
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	3318      	adds	r3, #24
 8012756:	4618      	mov	r0, r3
 8012758:	f7fd f851 	bl	800f7fe <SET_UNSPECIFIED_ADDRESS>
#else /* FEATURE_NX_IPV6 */
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = 0;
#endif /* FEATURE_NX_IPV6 */

    /* Clean up the connect port.  */
    socket_ptr -> nx_tcp_socket_connect_port = 0;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2200      	movs	r2, #0
 8012760:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset zero window probe flag. */
    socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2200      	movs	r2, #0
 8012766:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

    /* Simply clear the timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = 0;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2200      	movs	r2, #0
 801276e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

    /* Reset duplicated ack received. */
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	679a      	str	r2, [r3, #120]	; 0x78

    /* Reset fast recovery stage. */
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

    /* Connection needs to be closed down immediately.  */
    if (socket_ptr -> nx_tcp_socket_client_type)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	689b      	ldr	r3, [r3, #8]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d003      	beq.n	8012790 <_nx_tcp_socket_block_cleanup+0x4c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Client socket, return to a CLOSED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2201      	movs	r2, #1
 801278c:	645a      	str	r2, [r3, #68]	; 0x44
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Server socket, return to LISTEN state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
    }
}
 801278e:	e002      	b.n	8012796 <_nx_tcp_socket_block_cleanup+0x52>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2202      	movs	r2, #2
 8012794:	645a      	str	r2, [r3, #68]	; 0x44
}
 8012796:	bf00      	nop
 8012798:	3708      	adds	r7, #8
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}

0801279e <_nx_tcp_socket_connection_reset>:
/*                                            flushing receive queue.     */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_connection_reset(NX_TCP_SOCKET *socket_ptr)
{
 801279e:	b580      	push	{r7, lr}
 80127a0:	b084      	sub	sp, #16
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	6078      	str	r0, [r7, #4]

UINT saved_state;

    /* Save the current state of the socket.  */
    saved_state =  socket_ptr -> nx_tcp_socket_state;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127aa:	60fb      	str	r3, [r7, #12]

    /* Cleanup the transmission control block.  */
    _nx_tcp_socket_block_cleanup(socket_ptr);
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7ff ffc9 	bl	8012744 <_nx_tcp_socket_block_cleanup>

    /* Check for queued sent packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d00a      	beq.n	80127d2 <_nx_tcp_socket_connection_reset+0x34>
    {

        /* Release all transmit packets.  */
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f001 fde5 	bl	801438c <_nx_tcp_socket_transmit_queue_flush>
    }

    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 80127c2:	e006      	b.n	80127d2 <_nx_tcp_socket_connection_reset+0x34>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80127ca:	2100      	movs	r1, #0
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7ff ff11 	bl	80125f4 <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d1f3      	bne.n	80127c4 <_nx_tcp_socket_connection_reset+0x26>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 80127dc:	e006      	b.n	80127ec <_nx_tcp_socket_connection_reset+0x4e>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80127e4:	2100      	movs	r1, #0
 80127e6:	4618      	mov	r0, r3
 80127e8:	f001 fe18 	bl	801441c <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1f3      	bne.n	80127de <_nx_tcp_socket_connection_reset+0x40>
    }

    /* Check for suspended connect thread.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d006      	beq.n	801280e <_nx_tcp_socket_connection_reset+0x70>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8012806:	2100      	movs	r1, #0
 8012808:	4618      	mov	r0, r3
 801280a:	f7fe fb9b 	bl	8010f44 <_nx_tcp_connect_cleanup>
    }

    /* Check for suspended disconnect thread.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8012814:	2b00      	cmp	r3, #0
 8012816:	d006      	beq.n	8012826 <_nx_tcp_socket_connection_reset+0x88>
    {

        /* Resume the thread suspended on the disconnect.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801281e:	2100      	movs	r1, #0
 8012820:	4618      	mov	r0, r3
 8012822:	f7fe fcbb 	bl	801119c <_nx_tcp_disconnect_cleanup>
    }

    /* Determine if the socket was in an established state.  */
    if (saved_state == NX_TCP_ESTABLISHED)
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	2b05      	cmp	r3, #5
 801282a:	d109      	bne.n	8012840 <_nx_tcp_socket_connection_reset+0xa2>
    {

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8012832:	2b00      	cmp	r3, #0
 8012834:	d004      	beq.n	8012840 <_nx_tcp_socket_connection_reset+0xa2>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	4798      	blx	r3

        /* Notify the application through the socket disconnect_complete callback.  */
        (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
    }
#endif
}
 8012840:	bf00      	nop
 8012842:	3710      	adds	r7, #16
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <_nx_tcp_socket_packet_process>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_packet_process(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 8012848:	b5b0      	push	{r4, r5, r7, lr}
 801284a:	b090      	sub	sp, #64	; 0x40
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]

UINT          packet_queued =  NX_FALSE;
 8012852:	2300      	movs	r3, #0
 8012854:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG         packet_data_length;
ULONG         packet_sequence;
ULONG         rx_sequence;
ULONG         rx_window;
UINT          outside_of_window;
ULONG         mss = 0;
 8012856:	2300      	movs	r3, #0
 8012858:	60bb      	str	r3, [r7, #8]

    /* Copy the TCP header, since the actual packet can be delivered to
       a waiting socket/thread during this routine and before we are done
       using the header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	689b      	ldr	r3, [r3, #8]
 801285e:	f107 040c 	add.w	r4, r7, #12
 8012862:	461d      	mov	r5, r3
 8012864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012868:	682b      	ldr	r3, [r5, #0]
 801286a:	6023      	str	r3, [r4, #0]

    /* Get the size of the TCP header.  */
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	0f1b      	lsrs	r3, r3, #28
 8012870:	009b      	lsls	r3, r3, #2
 8012872:	637b      	str	r3, [r7, #52]	; 0x34

    /* Process the segment if socket state is equal or greater than NX_TCP_SYN_RECEIVED. According to RFC 793, Section 3.9, Page 69.  */
    if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012878:	2b03      	cmp	r3, #3
 801287a:	f240 80b6 	bls.w	80129ea <_nx_tcp_socket_packet_process+0x1a2>
    {

        /* Step1: Check sequence number. According to RFC 793, Section 3.9, Page 69.  */

        /* Pickup the sequence of this packet. */
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the data length in the packet.  */
        packet_data_length = packet_ptr -> nx_packet_length - header_length;
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012888:	1ad3      	subs	r3, r2, r3
 801288a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup the rx sequence.  */
        rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012890:	62bb      	str	r3, [r7, #40]	; 0x28
            socket_ptr -> nx_tcp_socket_rx_window_current =  socket_ptr -> nx_tcp_socket_rx_window_default;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Pickup the rx window.  */
        rx_window = socket_ptr -> nx_tcp_socket_rx_window_current;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012898:	627b      	str	r3, [r7, #36]	; 0x24

        /* There are four cases for the acceptability test for an incoming segment.
           Section 3.9 Page 69, RFC 793.  */
        outside_of_window = NX_TRUE;
 801289a:	2301      	movs	r3, #1
 801289c:	63bb      	str	r3, [r7, #56]	; 0x38

        if (packet_data_length == 0)
 801289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d12b      	bne.n	80128fc <_nx_tcp_socket_packet_process+0xb4>
        {
            if (rx_window == 0)
 80128a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d119      	bne.n	80128de <_nx_tcp_socket_packet_process+0x96>
            {
                if (packet_sequence == rx_sequence)
 80128aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d102      	bne.n	80128b8 <_nx_tcp_socket_packet_process+0x70>
                {
                    outside_of_window = NX_FALSE;
 80128b2:	2300      	movs	r3, #0
 80128b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80128b6:	e044      	b.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
                }
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10a      	bne.n	80128d8 <_nx_tcp_socket_packet_process+0x90>
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d105      	bne.n	80128d8 <_nx_tcp_socket_packet_process+0x90>
                         ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_CONTROL_MASK) == NX_TCP_ACK_BIT))
 80128cc:	69bb      	ldr	r3, [r7, #24]
 80128ce:	f403 13b8 	and.w	r3, r3, #1507328	; 0x170000
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 80128d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128d6:	d134      	bne.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
                {

                    /* If the RCV.WND is zero, no segments will be acceptable, but
                       special allowance should be made to accept valid ACKs, URGs and RSTs.
                       Section 3.9 Page 69, RFC 793. */
                    outside_of_window = NX_FALSE;
 80128d8:	2300      	movs	r3, #0
 80128da:	63bb      	str	r3, [r7, #56]	; 0x38
 80128dc:	e031      	b.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
                }
            }
            else if (((INT)(packet_sequence - rx_sequence) >= 0) &&
 80128de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e2:	1ad3      	subs	r3, r2, r3
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	db2c      	blt.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
                     ((INT)(rx_sequence + rx_window - packet_sequence) > 0))
 80128e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ec:	441a      	add	r2, r3
 80128ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f0:	1ad3      	subs	r3, r2, r3
            else if (((INT)(packet_sequence - rx_sequence) >= 0) &&
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	dd25      	ble.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
            {
                outside_of_window = NX_FALSE;
 80128f6:	2300      	movs	r3, #0
 80128f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80128fa:	e022      	b.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
            }
        }
        else
        {
            if ((rx_window > 0) &&
 80128fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d01f      	beq.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
                ((((INT)(packet_sequence - rx_sequence) >= 0) &&
 8012902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012906:	1ad3      	subs	r3, r2, r3
            if ((rx_window > 0) &&
 8012908:	2b00      	cmp	r3, #0
 801290a:	db06      	blt.n	801291a <_nx_tcp_socket_packet_process+0xd2>
                  ((INT)(rx_sequence + rx_window - packet_sequence) > 0)) ||
 801290c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012910:	441a      	add	r2, r3
 8012912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012914:	1ad3      	subs	r3, r2, r3
                ((((INT)(packet_sequence - rx_sequence) >= 0) &&
 8012916:	2b00      	cmp	r3, #0
 8012918:	dc11      	bgt.n	801293e <_nx_tcp_socket_packet_process+0xf6>
                 (((INT)(packet_sequence + (packet_data_length - 1) - rx_sequence) >= 0) &&
 801291a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291e:	441a      	add	r2, r3
 8012920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012922:	1ad3      	subs	r3, r2, r3
 8012924:	3b01      	subs	r3, #1
                  ((INT)(rx_sequence + rx_window - packet_sequence) > 0)) ||
 8012926:	2b00      	cmp	r3, #0
 8012928:	db0b      	blt.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
                  ((INT)(rx_sequence + 1 + (rx_window - packet_sequence) - packet_data_length) > 0))))
 801292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292e:	1ad2      	subs	r2, r2, r3
 8012930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012932:	441a      	add	r2, r3
 8012934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	3301      	adds	r3, #1
                 (((INT)(packet_sequence + (packet_data_length - 1) - rx_sequence) >= 0) &&
 801293a:	2b00      	cmp	r3, #0
 801293c:	dd01      	ble.n	8012942 <_nx_tcp_socket_packet_process+0xfa>
            {
                outside_of_window = NX_FALSE;
 801293e:	2300      	movs	r3, #0
 8012940:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* Detect whether or not the data is outside the window.  */
        if (outside_of_window)
 8012942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012944:	2b00      	cmp	r3, #0
 8012946:	d016      	beq.n	8012976 <_nx_tcp_socket_packet_process+0x12e>
        {

            /* If an incoming segment is not acceptable, an acknowledgment should be sent in reply
               (unless the RST bit is set, if so drop the segment and return).
               Section 3.9, Page 69, RFC 793.  */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 8012948:	69bb      	ldr	r3, [r7, #24]
 801294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801294e:	2b00      	cmp	r3, #0
 8012950:	d105      	bne.n	801295e <_nx_tcp_socket_packet_process+0x116>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012956:	4619      	mov	r1, r3
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f7ff fbd3 	bl	8012104 <_nx_tcp_packet_send_ack>
            }

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP dropped packet count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012964:	f8d3 25c0 	ldr.w	r2, [r3, #1472]	; 0x5c0
 8012968:	3201      	adds	r2, #1
 801296a:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
#endif

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 801296e:	6838      	ldr	r0, [r7, #0]
 8012970:	f7fe f862 	bl	8010a38 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 8012974:	e0fd      	b.n	8012b72 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step2: Check the RST bit. According to RFC 793, Section 3.9, Page 70.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8012976:	69bb      	ldr	r3, [r7, #24]
 8012978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801297c:	2b00      	cmp	r3, #0
 801297e:	d00e      	beq.n	801299e <_nx_tcp_socket_packet_process+0x156>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012986:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 801298a:	3201      	adds	r2, #1
 801298c:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_copy.nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f7ff ff04 	bl	801279e <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 8012996:	6838      	ldr	r0, [r7, #0]
 8012998:	f7fe f84e 	bl	8010a38 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 801299c:	e0e9      	b.n	8012b72 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step3: Check the SYN bit. According to RFC 793, Section 3.9, Page 71.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 801299e:	69bb      	ldr	r3, [r7, #24]
 80129a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d00f      	beq.n	80129c8 <_nx_tcp_socket_packet_process+0x180>

            /* The SYN is in the window it is an error, send a reset.  */

            /* Adjust the SEQ for the SYN bit. */
            /* The reset logic uses the sequence number in tcp_header_ptr as its ACK number. */
            tcp_header_copy.nx_tcp_sequence_number++;
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	3301      	adds	r3, #1
 80129ac:	613b      	str	r3, [r7, #16]

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 80129ae:	f107 030c 	add.w	r3, r7, #12
 80129b2:	4619      	mov	r1, r3
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f7ff fd2f 	bl	8012418 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f7ff feef 	bl	801279e <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 80129c0:	6838      	ldr	r0, [r7, #0]
 80129c2:	f7fe f839 	bl	8010a38 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 80129c6:	e0d4      	b.n	8012b72 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step4: Check the ACK field. According to RFC 793, Section 3.9, Page 72.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129cc:	2b04      	cmp	r3, #4
 80129ce:	d00c      	beq.n	80129ea <_nx_tcp_socket_packet_process+0x1a2>
        {

            /* Check the ACK field.  */
            if (_nx_tcp_socket_state_ack_check(socket_ptr, &tcp_header_copy) == NX_FALSE)
 80129d0:	f107 030c 	add.w	r3, r7, #12
 80129d4:	4619      	mov	r1, r3
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f000 faa2 	bl	8012f20 <_nx_tcp_socket_state_ack_check>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d103      	bne.n	80129ea <_nx_tcp_socket_packet_process+0x1a2>
            {

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 80129e2:	6838      	ldr	r0, [r7, #0]
 80129e4:	f7fe f828 	bl	8010a38 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 80129e8:	e0c3      	b.n	8012b72 <_nx_tcp_socket_packet_process+0x32a>
            }
        }
    }

    /* Illegal option length check. */
    if (header_length > sizeof(NX_TCP_HEADER))
 80129ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ec:	2b14      	cmp	r3, #20
 80129ee:	d93b      	bls.n	8012a68 <_nx_tcp_socket_packet_process+0x220>
    {

        /* There are one or more option words.  */
        /* The illegal option length is validated during MSS option get function. */
        if (!_nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)),
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	689b      	ldr	r3, [r3, #8]
 80129f4:	f103 0014 	add.w	r0, r3, #20
 80129f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129fa:	3b14      	subs	r3, #20
 80129fc:	f107 0208 	add.w	r2, r7, #8
 8012a00:	4619      	mov	r1, r3
 8012a02:	f7fe fda2 	bl	801154a <_nx_tcp_mss_option_get>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d12d      	bne.n	8012a68 <_nx_tcp_socket_packet_process+0x220>
            /* TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
               a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */

            /* Preprocess the sequence number if the incoming segment does not have an ACK field.
               Reset Generation, RFC793, Section3.4, Page37. */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d113      	bne.n	8012a3e <_nx_tcp_socket_packet_process+0x1f6>
            {

                /* Update sequence number to set the reset acknowledge number.  */
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 8012a16:	693a      	ldr	r2, [r7, #16]
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1e:	1acb      	subs	r3, r1, r3
 8012a20:	4413      	add	r3, r2
 8012a22:	613b      	str	r3, [r7, #16]

                /* Check the SYN and FIN bits.  */
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 8012a24:	69bb      	ldr	r3, [r7, #24]
 8012a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d104      	bne.n	8012a38 <_nx_tcp_socket_packet_process+0x1f0>
                    (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_FIN_BIT))
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d002      	beq.n	8012a3e <_nx_tcp_socket_packet_process+0x1f6>
                {

                    /* Update sequence number to set the reset acknowledge number.  */
                    tcp_header_copy.nx_tcp_sequence_number++;
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	3301      	adds	r3, #1
 8012a3c:	613b      	str	r3, [r7, #16]
                }
            }

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 8012a3e:	f107 030c 	add.w	r3, r7, #12
 8012a42:	4619      	mov	r1, r3
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f7ff fce7 	bl	8012418 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f7ff fea7 	bl	801279e <_nx_tcp_socket_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
            /* Increment the TCP invalid packet error count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_invalid_packets++;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012a56:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	; 0x5bc
 8012a5a:	3201      	adds	r2, #1
 8012a5c:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
#endif /* NX_DISABLE_TCP_INFO */

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 8012a60:	6838      	ldr	r0, [r7, #0]
 8012a62:	f7fd ffe9 	bl	8010a38 <_nx_packet_release>

            return;
 8012a66:	e084      	b.n	8012b72 <_nx_tcp_socket_packet_process+0x32a>
        }

    }

    /* Process relative to the state of the socket.  */
    switch (socket_ptr -> nx_tcp_socket_state)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a6c:	3b03      	subs	r3, #3
 8012a6e:	2b08      	cmp	r3, #8
 8012a70:	d865      	bhi.n	8012b3e <_nx_tcp_socket_packet_process+0x2f6>
 8012a72:	a201      	add	r2, pc, #4	; (adr r2, 8012a78 <_nx_tcp_socket_packet_process+0x230>)
 8012a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a78:	08012a9d 	.word	0x08012a9d
 8012a7c:	08012abf 	.word	0x08012abf
 8012a80:	08012adf 	.word	0x08012adf
 8012a84:	08012af7 	.word	0x08012af7
 8012a88:	08012b0d 	.word	0x08012b0d
 8012a8c:	08012b1f 	.word	0x08012b1f
 8012a90:	08012b31 	.word	0x08012b31
 8012a94:	08012b3f 	.word	0x08012b3f
 8012a98:	08012aff 	.word	0x08012aff

    case  NX_TCP_SYN_SENT:

        /* Call the SYN SENT state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_sent(socket_ptr, &tcp_header_copy, packet_ptr);
 8012a9c:	f107 030c 	add.w	r3, r7, #12
 8012aa0:	683a      	ldr	r2, [r7, #0]
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f001 fadb 	bl	8014060 <_nx_tcp_socket_state_syn_sent>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aae:	2b05      	cmp	r3, #5
 8012ab0:	d147      	bne.n	8012b42 <_nx_tcp_socket_packet_process+0x2fa>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8012ab2:	6839      	ldr	r1, [r7, #0]
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f000 fe1b 	bl	80136f0 <_nx_tcp_socket_state_data_check>
 8012aba:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 8012abc:	e041      	b.n	8012b42 <_nx_tcp_socket_packet_process+0x2fa>

    case  NX_TCP_SYN_RECEIVED:

        /* Call the SYN RECEIVED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_received(socket_ptr, &tcp_header_copy);
 8012abe:	f107 030c 	add.w	r3, r7, #12
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f001 fa6d 	bl	8013fa4 <_nx_tcp_socket_state_syn_received>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ace:	2b05      	cmp	r3, #5
 8012ad0:	d139      	bne.n	8012b46 <_nx_tcp_socket_packet_process+0x2fe>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8012ad2:	6839      	ldr	r1, [r7, #0]
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f000 fe0b 	bl	80136f0 <_nx_tcp_socket_state_data_check>
 8012ada:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 8012adc:	e033      	b.n	8012b46 <_nx_tcp_socket_packet_process+0x2fe>

    case  NX_TCP_ESTABLISHED:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8012ade:	6839      	ldr	r1, [r7, #0]
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f000 fe05 	bl	80136f0 <_nx_tcp_socket_state_data_check>
 8012ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
        {

            /* Call the ESTABLISHED state handling function to process any state
            changes caused by this new packet.  */
            _nx_tcp_socket_state_established(socket_ptr);
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f001 f943 	bl	8013d74 <_nx_tcp_socket_state_established>

            /* Determine if any transmit suspension can be lifted.  */
            _nx_tcp_socket_state_transmit_check(socket_ptr);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f001 fba0 	bl	8014234 <_nx_tcp_socket_state_transmit_check>
        }

        /* State processing is complete.  */
        break;
 8012af4:	e028      	b.n	8012b48 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSE_WAIT:

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f001 fb9c 	bl	8014234 <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 8012afc:	e024      	b.n	8012b48 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_LAST_ACK:

        /* Call the LAST ACK state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_last_ack(socket_ptr, &tcp_header_copy);
 8012afe:	f107 030c 	add.w	r3, r7, #12
 8012b02:	4619      	mov	r1, r3
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f001 fa23 	bl	8013f50 <_nx_tcp_socket_state_last_ack>

        /* State processing is complete.  */
        break;
 8012b0a:	e01d      	b.n	8012b48 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_1:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8012b0c:	6839      	ldr	r1, [r7, #0]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 fdee 	bl	80136f0 <_nx_tcp_socket_state_data_check>
 8012b14:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 1 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait1(socket_ptr);
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f001 f970 	bl	8013dfc <_nx_tcp_socket_state_fin_wait1>

        /* State processing is complete.  */
        break;
 8012b1c:	e014      	b.n	8012b48 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_2:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8012b1e:	6839      	ldr	r1, [r7, #0]
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f000 fde5 	bl	80136f0 <_nx_tcp_socket_state_data_check>
 8012b26:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 2 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait2(socket_ptr);
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f001 f9d3 	bl	8013ed4 <_nx_tcp_socket_state_fin_wait2>

        /* State processing is complete.  */
        break;
 8012b2e:	e00b      	b.n	8012b48 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSING:

        /* Call the CLOSING state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_closing(socket_ptr, &tcp_header_copy);
 8012b30:	f107 030c 	add.w	r3, r7, #12
 8012b34:	4619      	mov	r1, r3
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f000 fcde 	bl	80134f8 <_nx_tcp_socket_state_closing>

        /* State processing is complete.  */
        break;
 8012b3c:	e004      	b.n	8012b48 <_nx_tcp_socket_packet_process+0x300>

        /* State processing is complete.  */
        break;

    default:
        break;
 8012b3e:	bf00      	nop
 8012b40:	e002      	b.n	8012b48 <_nx_tcp_socket_packet_process+0x300>
        break;
 8012b42:	bf00      	nop
 8012b44:	e000      	b.n	8012b48 <_nx_tcp_socket_packet_process+0x300>
        break;
 8012b46:	bf00      	nop
    }
#endif /* NX_ENABLE_HTTP_PROXY */

    /* Check for an URG (urgent) bit set.  */
    /*lint -e{644} suppress variable might not be initialized, since "tcp_header_copy" was initialized. */
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d009      	beq.n	8012b66 <_nx_tcp_socket_packet_process+0x31e>
    {

        /* Yes, an Urgent bit is set.  */

        /* Pickup the urgent callback function specified when the socket was created.  */
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012b58:	623b      	str	r3, [r7, #32]

        /* Determine if there is an urgent callback function specified.  */
        if (urgent_callback)
 8012b5a:	6a3b      	ldr	r3, [r7, #32]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d002      	beq.n	8012b66 <_nx_tcp_socket_packet_process+0x31e>
        {

            /* Yes, call the application's urgent callback function to alert the application
               of the presence of the urgent bit.  */
            (urgent_callback)(socket_ptr);
 8012b60:	6a3b      	ldr	r3, [r7, #32]
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	4798      	blx	r3
        }
    }

    /* Determine if we need to release the packet.  */
    if (!packet_queued)
 8012b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d102      	bne.n	8012b72 <_nx_tcp_socket_packet_process+0x32a>
    {

        /* Yes, the packet was not queued up above, so it needs to be released.  */
        _nx_packet_release(packet_ptr);
 8012b6c:	6838      	ldr	r0, [r7, #0]
 8012b6e:	f7fd ff63 	bl	8010a38 <_nx_packet_release>
    }
}
 8012b72:	3740      	adds	r7, #64	; 0x40
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bdb0      	pop	{r4, r5, r7, pc}

08012b78 <_nx_tcp_socket_retransmit>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_retransmit(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, UINT need_fast_retransmit)
{
 8012b78:	b590      	push	{r4, r7, lr}
 8012b7a:	b097      	sub	sp, #92	; 0x5c
 8012b7c:	af04      	add	r7, sp, #16
 8012b7e:	60f8      	str	r0, [r7, #12]
 8012b80:	60b9      	str	r1, [r7, #8]
 8012b82:	607a      	str	r2, [r7, #4]
       RFC 793 Sec 3.7, p42: keep send new data.

       In the zero window probe phase, we send the zero window probe, and increase
       exponentially the interval between successive probes.
       RFC 1122 Sec 4.2.2.17, p92.  */
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d164      	bne.n	8012c56 <_nx_tcp_socket_retransmit+0xde>
    {

        /* Pickup the head of the transmit queue.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8012b92:	647b      	str	r3, [r7, #68]	; 0x44

        if (packet_ptr)
 8012b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d02f      	beq.n	8012bfa <_nx_tcp_socket_retransmit+0x82>
        {

        /* Get one byte from send queue. */
        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_TCP_HEADER *header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8012b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b9c:	689b      	ldr	r3, [r3, #8]
 8012b9e:	617b      	str	r3, [r7, #20]

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	ba1a      	rev	r2, r3
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	60da      	str	r2, [r3, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	ba1a      	rev	r2, r3
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	605a      	str	r2, [r3, #4]

            /* Get sequence number and first byte. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 8012bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bb6:	689a      	ldr	r2, [r3, #8]
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	0f1b      	lsrs	r3, r3, #28
 8012bbe:	009b      	lsls	r3, r3, #2
 8012bc0:	4413      	add	r3, r2
 8012bc2:	781a      	ldrb	r2, [r3, #0]
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

            /* Now set zero window probe started. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	685a      	ldr	r2, [r3, #4]
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	2200      	movs	r2, #0
 8012be0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	ba1a      	rev	r2, r3
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	605a      	str	r2, [r3, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	ba1a      	rev	r2, r3
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	60da      	str	r2, [r3, #12]
 8012bf8:	e005      	b.n	8012c06 <_nx_tcp_socket_retransmit+0x8e>
        }
        else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	f000 8184 	beq.w	8012f0e <_nx_tcp_socket_retransmit+0x396>

        /* In the zero window probe phase, we send the zero window probe, and increase
           exponentially the interval between successive probes.  */

        /* Increment the retry counter.  */
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c0c:	1c5a      	adds	r2, r3, #1
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012c1a:	1c5a      	adds	r2, r3, #1
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Setup the next timeout.  */
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c2e:	68b9      	ldr	r1, [r7, #8]
 8012c30:	f8d1 10e8 	ldr.w	r1, [r1, #232]	; 0xe8
 8012c34:	fb01 f303 	mul.w	r3, r1, r3
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8012c38:	409a      	lsls	r2, r3
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Send the zero window probe.  */
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	68b8      	ldr	r0, [r7, #8]
 8012c50:	f7ff fbc2 	bl	80123d8 <_nx_tcp_packet_send_probe>
                                  socket_ptr -> nx_tcp_socket_zero_window_probe_data);

        return;
 8012c54:	e15e      	b.n	8012f14 <_nx_tcp_socket_retransmit+0x39c>
    }
    else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE)
 8012c56:	68bb      	ldr	r3, [r7, #8]
 8012c58:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d103      	bne.n	8012c68 <_nx_tcp_socket_retransmit+0xf0>
    {

        /* If advertised window isn't zero, reset zero window probe flag. */
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	2200      	movs	r2, #0
 8012c64:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    }

    /* Increment the retry counter only if the receiver window is open. */
    /* Increment the retry counter.  */
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c6e:	1c5a      	adds	r2, r3, #1
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	d004      	beq.n	8012c86 <_nx_tcp_socket_retransmit+0x10e>
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d12a      	bne.n	8012cdc <_nx_tcp_socket_retransmit+0x164>
    {

        /* Timed out on an outgoing packet.  Enter slow start mode. */
        /* Compute the flight size / 2 value. */
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c8a:	085b      	lsrs	r3, r3, #1
 8012c8c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Make sure we have at least 2 * MSS */
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c92:	005b      	lsls	r3, r3, #1
 8012c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d203      	bcs.n	8012ca2 <_nx_tcp_socket_retransmit+0x12a>
        {
            window = socket_ptr -> nx_tcp_socket_connect_mss << 1;
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c9e:	005b      	lsls	r3, r3, #1
 8012ca0:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Set the slow_start_threshold */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ca6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the current window to be MSS size. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	665a      	str	r2, [r3, #100]	; 0x64

        /* Determine if this socket needs fast retransmit.  */
        if (need_fast_retransmit == NX_TRUE)
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d112      	bne.n	8012cdc <_nx_tcp_socket_retransmit+0x164>
        {

            /* Update cwnd to ssthreshold plus 3 * MSS.  */
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cbe:	0059      	lsls	r1, r3, #1
 8012cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cc2:	440b      	add	r3, r1
 8012cc4:	441a      	add	r2, r3
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	665a      	str	r2, [r3, #100]	; 0x64

            /* Now TCP is in fast recovery procedure. */
            socket_ptr -> nx_tcp_socket_fast_recovery = NX_TRUE;
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	2201      	movs	r2, #1
 8012cce:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

            /* Update the transmit sequence that enters fast transmit. */
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cd6:	1e5a      	subs	r2, r3, #1
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	66da      	str	r2, [r3, #108]	; 0x6c
        }
    }

    /* Setup the next timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ce8:	68b9      	ldr	r1, [r7, #8]
 8012cea:	f8d1 10e8 	ldr.w	r1, [r1, #232]	; 0xe8
 8012cee:	fb01 f303 	mul.w	r3, r1, r3
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8012cf2:	409a      	lsls	r2, r3
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

    /* Get available size of packet that can be sent. */
    available = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cfe:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Pickup the head of the transmit queue.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8012d06:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if the packet has been released by the
       application I/O driver.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 8012d08:	e0f7      	b.n	8012efa <_nx_tcp_socket_retransmit+0x382>
    {

    /* Update the ACK number in case it has changed since the data was originally transmitted. */
    ULONG          checksum;
    NX_TCP_HEADER *header_ptr;
    ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8012d0e:	2300      	movs	r3, #0
 8012d10:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef NX_DISABLE_TCP_TX_CHECKSUM
        compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 8012d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d18:	3314      	adds	r3, #20
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	f200 80f9 	bhi.w	8012f12 <_nx_tcp_socket_retransmit+0x39a>
            /* This packet can not be sent. */
            break;
        }

        /* Decrease the available size. */
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8012d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d26:	1ad3      	subs	r3, r2, r3
 8012d28:	3314      	adds	r3, #20
 8012d2a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Pickup next packet. */
        next_ptr = packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8012d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d2e:	6a1b      	ldr	r3, [r3, #32]
 8012d30:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	695b      	ldr	r3, [r3, #20]
 8012d36:	2b04      	cmp	r3, #4
 8012d38:	d10a      	bne.n	8012d50 <_nx_tcp_socket_retransmit+0x1d8>
        {

            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8012d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d3c:	2204      	movs	r2, #4
 8012d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

            /* Get the source and destination addresses. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d46:	3314      	adds	r3, #20
 8012d48:	63bb      	str	r3, [r7, #56]	; 0x38
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	3318      	adds	r3, #24
 8012d4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	695b      	ldr	r3, [r3, #20]
 8012d54:	2b06      	cmp	r3, #6
 8012d56:	d10b      	bne.n	8012d70 <_nx_tcp_socket_retransmit+0x1f8>
        {

            /* Set the packet for IPv6 connectivity. */
            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V6;
 8012d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d5a:	2206      	movs	r2, #6
 8012d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

            /* Get the source and destination addresses. */
            source_ip = socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address;
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8012d66:	3308      	adds	r3, #8
 8012d68:	63bb      	str	r3, [r7, #56]	; 0x38
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	3318      	adds	r3, #24
 8012d6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif /* FEATURE_NX_IPV6 */

        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8012d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d72:	689b      	ldr	r3, [r3, #8]
 8012d74:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Record the original data.  */
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 8012d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d78:	689b      	ldr	r3, [r3, #8]
 8012d7a:	62bb      	str	r3, [r7, #40]	; 0x28
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 8012d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	627b      	str	r3, [r7, #36]	; 0x24
        original_header_word_4 = header_ptr -> nx_tcp_header_word_4;
 8012d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d84:	691b      	ldr	r3, [r3, #16]
 8012d86:	623b      	str	r3, [r7, #32]

        /* Update the ACK number in the TCP header.  */
        header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8e:	609a      	str	r2, [r3, #8]

        /* Convert to network byte order for checksum */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8012d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d92:	689b      	ldr	r3, [r3, #8]
 8012d94:	ba1a      	rev	r2, r3
 8012d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d98:	609a      	str	r2, [r3, #8]
        if (window_size > 0xFFFF)
        {
            window_size = 0xFFFF;
        }
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012da0:	61fb      	str	r3, [r7, #28]
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 8012da2:	69fa      	ldr	r2, [r7, #28]
 8012da4:	4b5d      	ldr	r3, [pc, #372]	; (8012f1c <_nx_tcp_socket_retransmit+0x3a4>)
 8012da6:	4313      	orrs	r3, r2
 8012da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012daa:	60d3      	str	r3, [r2, #12]

        /* Swap the content to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8012dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	ba1a      	rev	r2, r3
 8012db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db4:	60da      	str	r2, [r3, #12]

        /* Convert back to host byte order to so we can zero out the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8012db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db8:	691b      	ldr	r3, [r3, #16]
 8012dba:	ba1a      	rev	r2, r3
 8012dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dbe:	611a      	str	r2, [r3, #16]

        /* Remember the last ACKed sequence and the last reported window size.  */
        socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	651a      	str	r2, [r3, #80]	; 0x50
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Zero out existing checksum before computing new one. */
        header_ptr -> nx_tcp_header_word_4 = header_ptr -> nx_tcp_header_word_4 & 0x0000FFFF;
 8012dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd6:	691b      	ldr	r3, [r3, #16]
 8012dd8:	b29a      	uxth	r2, r3
 8012dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ddc:	611a      	str	r2, [r3, #16]

        /* Convert back to network byte order to so we can do the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8012dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de0:	691b      	ldr	r3, [r3, #16]
 8012de2:	ba1a      	rev	r2, r3
 8012de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de6:	611a      	str	r2, [r3, #16]
        if (compute_checksum)
#endif /* defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
        {
            /* Calculate the TCP checksum without protection.  */
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                                packet_ptr -> nx_packet_length,
 8012de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8012dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dee:	9300      	str	r3, [sp, #0]
 8012df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df2:	2106      	movs	r1, #6
 8012df4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012df6:	f7f9 fa12 	bl	800c21e <_nx_ip_checksum_compute>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	61bb      	str	r3, [r7, #24]
                                                source_ip, dest_ip);
            checksum = ~checksum & NX_LOWER_16_MASK;
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	43db      	mvns	r3, r3
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	61bb      	str	r3, [r7, #24]

            /* Convert back to host byte order */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8012e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e08:	691b      	ldr	r3, [r3, #16]
 8012e0a:	ba1a      	rev	r2, r3
 8012e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0e:	611a      	str	r2, [r3, #16]

            /* Move the checksum into header.  */
            header_ptr -> nx_tcp_header_word_4 =  header_ptr -> nx_tcp_header_word_4 | (checksum << NX_SHIFT_BY_16);
 8012e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e12:	691a      	ldr	r2, [r3, #16]
 8012e14:	69bb      	ldr	r3, [r7, #24]
 8012e16:	041b      	lsls	r3, r3, #16
 8012e18:	431a      	orrs	r2, r3
 8012e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1c:	611a      	str	r2, [r3, #16]

            /* Convert back to network byte order for transmit. */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8012e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e20:	691b      	ldr	r3, [r3, #16]
 8012e22:	ba1a      	rev	r2, r3
 8012e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e26:	611a      	str	r2, [r3, #16]
        }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

        /* Determine if the retransmitted packet is identical to the original packet.
           RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 8012e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2a:	689b      	ldr	r3, [r3, #8]
 8012e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d10d      	bne.n	8012e4e <_nx_tcp_socket_retransmit+0x2d6>
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 8012e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e34:	68db      	ldr	r3, [r3, #12]
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 8012e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d108      	bne.n	8012e4e <_nx_tcp_socket_retransmit+0x2d6>
            (header_ptr -> nx_tcp_header_word_4 == original_header_word_4))
 8012e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e3e:	691b      	ldr	r3, [r3, #16]
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 8012e40:	6a3a      	ldr	r2, [r7, #32]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d103      	bne.n	8012e4e <_nx_tcp_socket_retransmit+0x2d6>
        {

            /* Yes, identical packet, update the identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 8012e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e48:	2201      	movs	r2, #1
 8012e4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        }


#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP retransmit count.  */
        ip_ptr -> nx_ip_tcp_retransmit_packets++;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 8012e54:	1c5a      	adds	r2, r3, #1
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc

        /* Increment the TCP retransmit count for the socket.  */
        socket_ptr -> nx_tcp_socket_retransmit_packets++;
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012e62:	1c5a      	adds	r2, r3, #1
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RETRY, ip_ptr, socket_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_timeout_retries, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8012e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	61da      	str	r2, [r3, #28]
        /* Yes, the driver has finished with the packet at the head of the
           transmit sent list... so it can be sent again!  */

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	695b      	ldr	r3, [r3, #20]
 8012e74:	2b04      	cmp	r3, #4
 8012e76:	d118      	bne.n	8012eaa <_nx_tcp_socket_retransmit+0x332>
        {
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	6998      	ldr	r0, [r3, #24]
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
                               socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
                               socket_ptr -> nx_tcp_socket_type_of_service,
                               socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 8012e88:	68ba      	ldr	r2, [r7, #8]
 8012e8a:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8012e8e:	68b9      	ldr	r1, [r7, #8]
 8012e90:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8012e92:	9103      	str	r1, [sp, #12]
 8012e94:	9202      	str	r2, [sp, #8]
 8012e96:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8012e9a:	9201      	str	r2, [sp, #4]
 8012e9c:	9300      	str	r3, [sp, #0]
 8012e9e:	4623      	mov	r3, r4
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f7fa fa4a 	bl	800d33e <_nx_ip_packet_send>
                               socket_ptr -> nx_tcp_socket_next_hop_address);
        }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V6)
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	695b      	ldr	r3, [r3, #20]
 8012eae:	2b06      	cmp	r3, #6
 8012eb0:	d118      	bne.n	8012ee4 <_nx_tcp_socket_retransmit+0x36c>
        {

            /* Handle for an IPv6 connection. */
            /* Set the packet transmit interface before sending. */
            packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr = socket_ptr -> nx_tcp_socket_ipv6_addr;
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8012eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eba:	635a      	str	r2, [r3, #52]	; 0x34

            _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP,
 8012ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ebe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f8d3 3ecc 	ldr.w	r3, [r3, #3788]	; 0xecc
                                 packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
                                 socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
 8012ec6:	68ba      	ldr	r2, [r7, #8]
 8012ec8:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 8012ecc:	3208      	adds	r2, #8
                                 socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
 8012ece:	68b9      	ldr	r1, [r7, #8]
 8012ed0:	3118      	adds	r1, #24
            _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP,
 8012ed2:	9102      	str	r1, [sp, #8]
 8012ed4:	9201      	str	r2, [sp, #4]
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2206      	movs	r2, #6
 8012edc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012ede:	68f8      	ldr	r0, [r7, #12]
 8012ee0:	f7fb ff15 	bl	800ed0e <_nx_ipv6_packet_send>
#endif /* FEATURE_NX_IPV6 */

        /* Move to next packet. */
        /* During fast recovery, only one packet is retransmitted at once. */
        /* After a timeout, the sending data can be at most one SMSS. */
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 8012ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee6:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 8012eea:	d013      	beq.n	8012f14 <_nx_tcp_socket_retransmit+0x39c>
            (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 8012ef2:	2b01      	cmp	r3, #1
 8012ef4:	d00e      	beq.n	8012f14 <_nx_tcp_socket_retransmit+0x39c>
        {
            break;
        }
        else
        {
            packet_ptr = next_ptr;
 8012ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef8:	647b      	str	r3, [r7, #68]	; 0x44
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 8012efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d009      	beq.n	8012f14 <_nx_tcp_socket_retransmit+0x39c>
 8012f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f02:	69db      	ldr	r3, [r3, #28]
 8012f04:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 8012f08:	f43f aeff 	beq.w	8012d0a <_nx_tcp_socket_retransmit+0x192>
 8012f0c:	e002      	b.n	8012f14 <_nx_tcp_socket_retransmit+0x39c>
            return;
 8012f0e:	bf00      	nop
 8012f10:	e000      	b.n	8012f14 <_nx_tcp_socket_retransmit+0x39c>
            break;
 8012f12:	bf00      	nop
        }
    }
}
 8012f14:	374c      	adds	r7, #76	; 0x4c
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd90      	pop	{r4, r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	50180000 	.word	0x50180000

08012f20 <_nx_tcp_socket_state_ack_check>:
/*                                            comparison,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_ack_check(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b096      	sub	sp, #88	; 0x58
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_TCP_HEADER *search_header_ptr = NX_NULL;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	657b      	str	r3, [r7, #84]	; 0x54
ULONG          starting_tx_sequence;
ULONG          ending_tx_sequence;
ULONG          ending_rx_sequence;
ULONG          acked_bytes;
ULONG          tcp_payload_length;
UINT           wrapped_flag = NX_FALSE;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	63bb      	str	r3, [r7, #56]	; 0x38


    /* Determine if the header has an ACK bit set.  This is an
       acknowledgement of a previous transmission.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	68db      	ldr	r3, [r3, #12]
 8012f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	f000 82d6 	beq.w	80134ec <_nx_tcp_socket_state_ack_check+0x5cc>
    {

        /* Initialize tx sequence. */
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d004      	beq.n	8012f54 <_nx_tcp_socket_state_ack_check+0x34>
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence + 1;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f4e:	3301      	adds	r3, #1
 8012f50:	643b      	str	r3, [r7, #64]	; 0x40
 8012f52:	e002      	b.n	8012f5a <_nx_tcp_socket_state_ack_check+0x3a>
        }
        else
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f58:	643b      	str	r3, [r7, #64]	; 0x40
        }
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f62:	1ad3      	subs	r3, r2, r3
 8012f64:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize ending rx sequence. */
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d033      	beq.n	8012fd8 <_nx_tcp_socket_state_ack_check+0xb8>
        {
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012f76:	653b      	str	r3, [r7, #80]	; 0x50

            /* Setup a pointer to header of this packet in the sent list.  */
#ifndef NX_DISABLE_IPV4
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8012f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f7e:	2b04      	cmp	r3, #4
 8012f80:	d104      	bne.n	8012f8c <_nx_tcp_socket_state_ack_check+0x6c>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8012f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f86:	3314      	adds	r3, #20
 8012f88:	657b      	str	r3, [r7, #84]	; 0x54
 8012f8a:	e00b      	b.n	8012fa4 <_nx_tcp_socket_state_ack_check+0x84>
                                                       sizeof(NX_IPV4_HEADER));
            }
            else
#endif /* NX_DISABLE_IPV4 */
#ifdef FEATURE_NX_IPV6
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8012f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f92:	2b06      	cmp	r3, #6
 8012f94:	d104      	bne.n	8012fa0 <_nx_tcp_socket_state_ack_check+0x80>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8012f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f9a:	3328      	adds	r3, #40	; 0x28
 8012f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8012f9e:	e001      	b.n	8012fa4 <_nx_tcp_socket_state_ack_check+0x84>
                                                       sizeof(NX_IPV6_HEADER));
            }
            else
#endif /* FEATURE_NX_IPV6 */
            {
                return(NX_FALSE);
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	e2a4      	b.n	80134ee <_nx_tcp_socket_state_ack_check+0x5ce>
            }

            /* Determine the size of the TCP header.  */
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 8012fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	64bb      	str	r3, [r7, #72]	; 0x48
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8012faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fac:	0f1b      	lsrs	r3, r3, #28
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Determine the sequence number in the TCP header.  */
            search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 8012fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate the payload length of TCP. */
            tcp_payload_length = (search_ptr -> nx_packet_length -
 8012fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  (header_length +
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
                                           (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 8012fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fbe:	689b      	ldr	r3, [r3, #8]
 8012fc0:	4619      	mov	r1, r3
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
 8012fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fc4:	1ac9      	subs	r1, r1, r3
                                  (header_length +
 8012fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc8:	1acb      	subs	r3, r1, r3
            tcp_payload_length = (search_ptr -> nx_packet_length -
 8012fca:	4413      	add	r3, r2
 8012fcc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Calculate the ending packet sequence.  */
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 8012fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd2:	4413      	add	r3, r2
 8012fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012fd6:	e002      	b.n	8012fde <_nx_tcp_socket_state_ack_check+0xbe>
        }
        else
        {
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
#endif

        /* First, determine if incoming ACK matches our transmit sequence.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	689b      	ldr	r3, [r3, #8]
 8012fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d111      	bne.n	801300c <_nx_tcp_socket_state_ack_check+0xec>
        {

            /* In this case, everything on the transmit list is acknowledged.  Simply set the packet
               release count to the number of packets in the transmit queue.  */
            packet_release_count =  socket_ptr -> nx_tcp_socket_transmit_sent_count;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012fee:	647b      	str	r3, [r7, #68]	; 0x44

            /* Set the previous pointer to the socket transmit tail pointer.  */
            previous_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_tail;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8012ff6:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Is this ACK to FIN? */
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ffc:	2b06      	cmp	r3, #6
 8012ffe:	f240 80d3 	bls.w	80131a8 <_nx_tcp_socket_state_ack_check+0x288>
            {

                /* Yes it is. */
                socket_ptr -> nx_tcp_socket_fin_acked = NX_TRUE;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2201      	movs	r2, #1
 8013006:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 801300a:	e0cd      	b.n	80131a8 <_nx_tcp_socket_state_ack_check+0x288>
        {

            /* Calculate the start and end of the transmit sequence.  */

            /* Pickup the head of the transmit queue.  */
            search_ptr =    socket_ptr -> nx_tcp_socket_transmit_sent_head;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8013012:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is a packet on the transmit queue... and determine if the packet has been
               transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if ((search_ptr) && (search_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_DRIVER_TX_DONE)))
 8013014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013016:	2b00      	cmp	r3, #0
 8013018:	d056      	beq.n	80130c8 <_nx_tcp_socket_state_ack_check+0x1a8>
 801301a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801301c:	69db      	ldr	r3, [r3, #28]
 801301e:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 8013022:	d151      	bne.n	80130c8 <_nx_tcp_socket_state_ack_check+0x1a8>
            {

                /* Determine if the incoming ACK matches the front of our transmit queue. */
                if (tcp_header_ptr -> nx_tcp_acknowledgment_number == starting_tx_sequence)
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801302a:	429a      	cmp	r2, r3
 801302c:	d143      	bne.n	80130b6 <_nx_tcp_socket_state_ack_check+0x196>
                {

                    /* Handle duplicated ACK packet.  */
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013032:	1c5a      	adds	r2, r3, #1
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	679a      	str	r2, [r3, #120]	; 0x78

                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801303c:	2b03      	cmp	r3, #3
 801303e:	d12a      	bne.n	8013096 <_nx_tcp_socket_state_ack_check+0x176>
                    {
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	689a      	ldr	r2, [r3, #8]
                                  socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 8013048:	1ad3      	subs	r3, r2, r3
 801304a:	3b01      	subs	r3, #1
 801304c:	2b00      	cmp	r3, #0
 801304e:	dd08      	ble.n	8013062 <_nx_tcp_socket_state_ack_check+0x142>
                        {

                            /* Cumulative acknowledge covers more than recover. */
                            /* Section 3.2, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013056:	2201      	movs	r2, #1
 8013058:	6879      	ldr	r1, [r7, #4]
 801305a:	4618      	mov	r0, r3
 801305c:	f7ff fd8c 	bl	8012b78 <_nx_tcp_socket_retransmit>
 8013060:	e029      	b.n	80130b6 <_nx_tcp_socket_state_ack_check+0x196>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801306a:	429a      	cmp	r2, r3
 801306c:	d923      	bls.n	80130b6 <_nx_tcp_socket_state_ack_check+0x196>
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	689a      	ldr	r2, [r3, #8]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6f19      	ldr	r1, [r3, #112]	; 0x70
                                                                                          (socket_ptr -> nx_tcp_socket_connect_mss << 2))) < 0))
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307a:	009b      	lsls	r3, r3, #2
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 801307c:	440b      	add	r3, r1
 801307e:	1ad3      	subs	r3, r2, r3
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 8013080:	2b00      	cmp	r3, #0
 8013082:	da18      	bge.n	80130b6 <_nx_tcp_socket_state_ack_check+0x196>

                            /* Congestion window is greater than SMSS bytes and
                               the difference between highest_ack and prev_highest_ack is at most 4*SMSS bytes.*/
                            /* Section 4.1, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801308a:	2201      	movs	r2, #1
 801308c:	6879      	ldr	r1, [r7, #4]
 801308e:	4618      	mov	r0, r3
 8013090:	f7ff fd72 	bl	8012b78 <_nx_tcp_socket_retransmit>
 8013094:	e00f      	b.n	80130b6 <_nx_tcp_socket_state_ack_check+0x196>
                        }
                    }
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801309a:	2b03      	cmp	r3, #3
 801309c:	d90b      	bls.n	80130b6 <_nx_tcp_socket_state_ack_check+0x196>
                             (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	d106      	bne.n	80130b6 <_nx_tcp_socket_state_ack_check+0x196>
                    {

                        /* CWND += MSS  */
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b0:	441a      	add	r2, r3
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	665a      	str	r2, [r3, #100]	; 0x64
                    }
                }

                /* Determine if the transmit queue has wrapped.  */
                if (ending_tx_sequence > starting_tx_sequence)
 80130b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d902      	bls.n	80130c4 <_nx_tcp_socket_state_ack_check+0x1a4>
                {

                    /* Clear the wrapped flag.  */
                    wrapped_flag =  NX_FALSE;
 80130be:	2300      	movs	r3, #0
 80130c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80130c2:	e001      	b.n	80130c8 <_nx_tcp_socket_state_ack_check+0x1a8>
                }
                else
                {

                    /* Set the wrapped flag.  */
                    wrapped_flag =  NX_TRUE;
 80130c4:	2301      	movs	r3, #1
 80130c6:	63bb      	str	r3, [r7, #56]	; 0x38
                }
            }

            /* Initialize the packet release count.  */
            packet_release_count =  0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	647b      	str	r3, [r7, #68]	; 0x44

            /* See if we can find the sequence number in the sent queue for this
               socket.  */
            previous_ptr =  NX_NULL;
 80130cc:	2300      	movs	r3, #0
 80130ce:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (search_ptr)
 80130d0:	e063      	b.n	801319a <_nx_tcp_socket_state_ack_check+0x27a>
            {

                /* Determine if the packet has been transmitted.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 80130d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130d4:	69db      	ldr	r3, [r3, #28]
 80130d6:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 80130da:	d007      	beq.n	80130ec <_nx_tcp_socket_state_ack_check+0x1cc>
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 80130dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                                           search_ptr -> nx_packet_ip_header_length);
 80130e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130e2:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 80130e6:	4413      	add	r3, r2
 80130e8:	657b      	str	r3, [r7, #84]	; 0x54
 80130ea:	e002      	b.n	80130f2 <_nx_tcp_socket_state_ack_check+0x1d2>
                else
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 80130ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130ee:	689b      	ldr	r3, [r3, #8]
 80130f0:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Determine the size of the TCP header.  */
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 80130f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	64bb      	str	r3, [r7, #72]	; 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 80130f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130fa:	ba1b      	rev	r3, r3
 80130fc:	64bb      	str	r3, [r7, #72]	; 0x48
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 80130fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013100:	0f1b      	lsrs	r3, r3, #28
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	633b      	str	r3, [r7, #48]	; 0x30

                /* Determine the sequence number in the TCP header.  */
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 8013106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	62fb      	str	r3, [r7, #44]	; 0x2c
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 801310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310e:	ba1b      	rev	r3, r3
 8013110:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the payload length of TCP. */
                tcp_payload_length = (search_ptr -> nx_packet_length -
 8013112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 8013116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 801311c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801311e:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 8013120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013122:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (search_ptr -> nx_packet_length -
 8013124:	4413      	add	r3, r2
 8013126:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Calculate the ending packet sequence.  */
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 8013128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312c:	4413      	add	r3, r2
 801312e:	627b      	str	r3, [r7, #36]	; 0x24

                /* Determine if the transmit window is wrapped.  */
                if (wrapped_flag == NX_FALSE)
 8013130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013132:	2b00      	cmp	r3, #0
 8013134:	d10a      	bne.n	801314c <_nx_tcp_socket_state_ack_check+0x22c>

                    /* No, the transmit window is not wrapped. Perform a simple compare to determine if the ACK
                       covers the current search packet.  */

                    /* Is this ACK before the current search packet or after the transmit sequence?  */
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	689b      	ldr	r3, [r3, #8]
 801313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801313c:	429a      	cmp	r2, r3
 801313e:	d833      	bhi.n	80131a8 <_nx_tcp_socket_state_ack_check+0x288>
                        (tcp_header_ptr -> nx_tcp_acknowledgment_number > ending_tx_sequence))
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	689b      	ldr	r3, [r3, #8]
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 8013144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013146:	429a      	cmp	r2, r3
 8013148:	d32e      	bcc.n	80131a8 <_nx_tcp_socket_state_ack_check+0x288>
 801314a:	e018      	b.n	801317e <_nx_tcp_socket_state_ack_check+0x25e>

                    /* Yes, the transmit window has wrapped.  We need to now check for all the wrap conditions to
                       determine if ACK covers the current search packet.  */

                    /* Is the search packet's ending sequence number in the wrapped part of the window.  */
                    if (ending_packet_sequence < starting_tx_sequence)
 801314c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013150:	429a      	cmp	r2, r3
 8013152:	d20a      	bcs.n	801316a <_nx_tcp_socket_state_ack_check+0x24a>
                    {

                        /* The search packet ends in the wrapped portion of the window.  Determine if the ACK
                           sequence in the wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number < starting_tx_sequence)
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	689b      	ldr	r3, [r3, #8]
 8013158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801315a:	429a      	cmp	r2, r3
 801315c:	d921      	bls.n	80131a2 <_nx_tcp_socket_state_ack_check+0x282>
                        {

                            /* Yes, the ACK sequence is in the wrapped portion as well. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	689b      	ldr	r3, [r3, #8]
 8013162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013164:	429a      	cmp	r2, r3
 8013166:	d90a      	bls.n	801317e <_nx_tcp_socket_state_ack_check+0x25e>
                            {

                                /* ACK does not cover the search packet. Break out of the loop.  */
                                break;
 8013168:	e01e      	b.n	80131a8 <_nx_tcp_socket_state_ack_check+0x288>
                    else
                    {

                        /* The search packet is in the non-wrapped portion of the window.  Determine if the ACK
                           sequence is in the non-wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number >= starting_tx_sequence)
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	689b      	ldr	r3, [r3, #8]
 801316e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013170:	429a      	cmp	r2, r3
 8013172:	d804      	bhi.n	801317e <_nx_tcp_socket_state_ack_check+0x25e>
                        {

                            /* Yes, the ACK sequence is in the non-wrapped portion of the window. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	689b      	ldr	r3, [r3, #8]
 8013178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801317a:	429a      	cmp	r2, r3
 801317c:	d813      	bhi.n	80131a6 <_nx_tcp_socket_state_ack_check+0x286>
                }

                /* At this point we know that the ACK received covers the search packet.  */

                /* Increase the packet release count.  */
                packet_release_count++;
 801317e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013180:	3301      	adds	r3, #1
 8013182:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the search and previous pointers forward.  */
                previous_ptr =  search_ptr;
 8013184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013186:	64fb      	str	r3, [r7, #76]	; 0x4c
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801318a:	6a1b      	ldr	r3, [r3, #32]
 801318c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Determine if we are at the end of the TCP queue.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 801318e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013190:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 8013194:	d101      	bne.n	801319a <_nx_tcp_socket_state_ack_check+0x27a>
                {

                    /* Yes, set the search pointer to NULL.  */
                    search_ptr =  NX_NULL;
 8013196:	2300      	movs	r3, #0
 8013198:	653b      	str	r3, [r7, #80]	; 0x50
            while (search_ptr)
 801319a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801319c:	2b00      	cmp	r3, #0
 801319e:	d198      	bne.n	80130d2 <_nx_tcp_socket_state_ack_check+0x1b2>
 80131a0:	e002      	b.n	80131a8 <_nx_tcp_socket_state_ack_check+0x288>
                            break;
 80131a2:	bf00      	nop
 80131a4:	e000      	b.n	80131a8 <_nx_tcp_socket_state_ack_check+0x288>
                                break;
 80131a6:	bf00      	nop
                }
            }
        }

        /* Determine if anything needs to be released.  */
        if (!packet_release_count)
 80131a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d121      	bne.n	80131f2 <_nx_tcp_socket_state_ack_check+0x2d2>
        {

            /* No, check and see if the ACK is valid.  */
            /* If the ACK acks something not yet sent (SEG.ACK > SND.NXT) then send an ACK, drop the segment */
            /* Page 72, section 3.9, RFC 793.*/
            if (tcp_header_ptr -> nx_tcp_acknowledgment_number != ending_tx_sequence)
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	689b      	ldr	r3, [r3, #8]
 80131b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d00c      	beq.n	80131d2 <_nx_tcp_socket_state_ack_check+0x2b2>
            {

                /* If the ACK is a duplicate, it can be ignored. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) > 0)
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	689a      	ldr	r2, [r3, #8]
 80131bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	f340 8086 	ble.w	80132d2 <_nx_tcp_socket_state_ack_check+0x3b2>
                {

                    /* The ACK sequence is invalid. Respond with an ACK to let the other
                       side of the connection figure out if everything is still okay.  */
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 80131c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f7fe ff9b 	bl	8012104 <_nx_tcp_packet_send_ack>
                    return(NX_FALSE);
 80131ce:	2300      	movs	r3, #0
 80131d0:	e18d      	b.n	80134ee <_nx_tcp_socket_state_ack_check+0x5ce>
                }
            }
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d17a      	bne.n	80132d2 <_nx_tcp_socket_state_ack_check+0x3b2>
                     (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	685a      	ldr	r2, [r3, #4]
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d174      	bne.n	80132d2 <_nx_tcp_socket_state_ack_check+0x3b2>
            {

                /* Response to zero window probe.  */
                _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 80131e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f7fe ff8a 	bl	8012104 <_nx_tcp_packet_send_ack>
 80131f0:	e06f      	b.n	80132d2 <_nx_tcp_socket_state_ack_check+0x3b2>

            /* Congestion window adjustment during slow start and congestion avoidance is executed
               on every incoming ACK that acknowledges new data. RFC5681, Section3.1, Page4-8.  */

            /* Check whether the socket is in fast recovery procedure. */
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d10e      	bne.n	801321a <_nx_tcp_socket_state_ack_check+0x2fa>
            {

                /* Yes. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	689a      	ldr	r2, [r3, #8]
                          socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 8013204:	1ad3      	subs	r3, r2, r3
 8013206:	2b00      	cmp	r3, #0
 8013208:	dd07      	ble.n	801321a <_nx_tcp_socket_state_ack_check+0x2fa>
                {

                    /* All packets sent before entering fast recovery are ACKed. */
                    /* Exit fast recovery procedure. */
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2200      	movs	r2, #0
 801320e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	665a      	str	r2, [r3, #100]	; 0x64
                }
            }

            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                      (tcp_header_ptr -> nx_tcp_acknowledgment_number - 2)) < 0)
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	689b      	ldr	r3, [r3, #8]
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 8013222:	1ad3      	subs	r3, r2, r3
 8013224:	3302      	adds	r3, #2
 8013226:	2b00      	cmp	r3, #0
 8013228:	da04      	bge.n	8013234 <_nx_tcp_socket_state_ack_check+0x314>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	689b      	ldr	r3, [r3, #8]
 801322e:	1e9a      	subs	r2, r3, #2
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            /* Reset the duplicated ACK counter. */
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2200      	movs	r2, #0
 8013238:	679a      	str	r2, [r3, #120]	; 0x78

            /* Set previous cumulative acknowlesgement. */
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801323e:	671a      	str	r2, [r3, #112]	; 0x70

            /* Calculate ACKed length. */
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	689a      	ldr	r2, [r3, #8]
 8013244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013246:	1ad3      	subs	r3, r2, r3
 8013248:	623b      	str	r3, [r7, #32]

            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8013250:	2b01      	cmp	r3, #1
 8013252:	d112      	bne.n	801327a <_nx_tcp_socket_state_ack_check+0x35a>
            {

                /* Process cwnd in fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013258:	6a3b      	ldr	r3, [r7, #32]
 801325a:	1ad2      	subs	r2, r2, r3
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	665a      	str	r2, [r3, #100]	; 0x64
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013264:	6a3a      	ldr	r2, [r7, #32]
 8013266:	429a      	cmp	r2, r3
 8013268:	d933      	bls.n	80132d2 <_nx_tcp_socket_state_ack_check+0x3b2>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013272:	441a      	add	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	665a      	str	r2, [r3, #100]	; 0x64
 8013278:	e02b      	b.n	80132d2 <_nx_tcp_socket_state_ack_check+0x3b2>
            else
            {

                /* Adjust the transmit window.  In slow start phase, the transmit window is incremented for every ACK.
                   In Congestion Avoidance phase, the window is incremented for every RTT. Section 3.1, Page 4-7, RFC5681.  */
                if (socket_ptr -> nx_tcp_socket_tx_window_congestion >= socket_ptr -> nx_tcp_socket_tx_slow_start_threshold)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013282:	429a      	cmp	r2, r3
 8013284:	d312      	bcc.n	80132ac <_nx_tcp_socket_state_ack_check+0x38c>
                {

                    /* In Congestion avoidance phase, for every ACK it receives, increase the window size using the
                       following approximation:
                       cwnd = cwnd + MSS * MSS / cwnd;  */
                    temp = socket_ptr -> nx_tcp_socket_connect_mss2 / socket_ptr -> nx_tcp_socket_tx_window_congestion;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013292:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* If the above formula yields 0, the result SHOULD be rounded up to 1 byte.  */
                    if (temp == 0)
 8013294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013296:	2b00      	cmp	r3, #0
 8013298:	d101      	bne.n	801329e <_nx_tcp_socket_state_ack_check+0x37e>
                    {
                        temp = 1;
 801329a:	2301      	movs	r3, #1
 801329c:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_window_congestion + temp;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80132a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132a4:	441a      	add	r2, r3
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	665a      	str	r2, [r3, #100]	; 0x64
 80132aa:	e012      	b.n	80132d2 <_nx_tcp_socket_state_ack_check+0x3b2>
                {

                    /* In Slow start phase:
                       cwnd += min (N, SMSS),
                       where N is the number of ACKed bytes. */
                    if (acked_bytes < socket_ptr -> nx_tcp_socket_connect_mss)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132b0:	6a3a      	ldr	r2, [r7, #32]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d206      	bcs.n	80132c4 <_nx_tcp_socket_state_ack_check+0x3a4>
                    {

                        /* In Slow start phase. Increase the cwnd by acked bytes.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += acked_bytes;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80132ba:	6a3b      	ldr	r3, [r7, #32]
 80132bc:	441a      	add	r2, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	665a      	str	r2, [r3, #100]	; 0x64
 80132c2:	e006      	b.n	80132d2 <_nx_tcp_socket_state_ack_check+0x3b2>
                    }
                    else
                    {

                        /* In Slow start phase. Increase the cwnd by full MSS for every ack.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132cc:	441a      	add	r2, r3
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	665a      	str	r2, [r3, #100]	; 0x64
        /* Update the window only when
         * 1. SND.UNA < SEG.ACK =< SND.NXT or
         * 2. SND.WL1 < SEG.SEQ or
         * 3. SND.WL1 = SEG.SEQ and SND.WL2 =< SEG.ACK
         * RFC793, Section 3.9, Page72. */
        if ((((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) > 0) &&
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	689a      	ldr	r2, [r3, #8]
 80132d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	2b00      	cmp	r3, #0
 80132dc:	dd05      	ble.n	80132ea <_nx_tcp_socket_state_ack_check+0x3ca>
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) <= 0)) ||
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	689a      	ldr	r2, [r3, #8]
 80132e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132e4:	1ad3      	subs	r3, r2, r3
        if ((((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) > 0) &&
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	dd10      	ble.n	801330c <_nx_tcp_socket_state_ack_check+0x3ec>
            ((INT)(tcp_header_ptr -> nx_tcp_sequence_number - ending_rx_sequence) > 0) ||
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	685a      	ldr	r2, [r3, #4]
 80132ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132f0:	1ad3      	subs	r3, r2, r3
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) <= 0)) ||
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	dc0a      	bgt.n	801330c <_nx_tcp_socket_state_ack_check+0x3ec>
            (((INT)(tcp_header_ptr -> nx_tcp_sequence_number == ending_rx_sequence)) &&
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	685b      	ldr	r3, [r3, #4]
            ((INT)(tcp_header_ptr -> nx_tcp_sequence_number - ending_rx_sequence) > 0) ||
 80132fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d10a      	bne.n	8013316 <_nx_tcp_socket_state_ack_check+0x3f6>
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) >= 0)))
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	689a      	ldr	r2, [r3, #8]
 8013304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013306:	1ad3      	subs	r3, r2, r3
            (((INT)(tcp_header_ptr -> nx_tcp_sequence_number == ending_rx_sequence)) &&
 8013308:	2b00      	cmp	r3, #0
 801330a:	db04      	blt.n	8013316 <_nx_tcp_socket_state_ack_check+0x3f6>
        {

            /* Update this socket's transmit window with the advertised window size in the ACK message.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =  (tcp_header_ptr -> nx_tcp_header_word_3) & NX_LOWER_16_MASK;
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	b29a      	uxth	r2, r3
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	661a      	str	r2, [r3, #96]	; 0x60
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
        }

        /* Check advertised window. */
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801331e:	429a      	cmp	r2, r3
 8013320:	d80a      	bhi.n	8013338 <_nx_tcp_socket_state_ack_check+0x418>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number >= socket_ptr -> nx_tcp_socket_zero_window_probe_sequence))
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	689a      	ldr	r2, [r3, #8]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 801332c:	429a      	cmp	r2, r3
 801332e:	d303      	bcc.n	8013338 <_nx_tcp_socket_state_ack_check+0x418>
        {

            /* It is an ACK to Zero Window Probe. Reset the zero window probe failure. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2200      	movs	r2, #0
 8013334:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        }

        if (!packet_release_count)
 8013338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801333a:	2b00      	cmp	r3, #0
 801333c:	d101      	bne.n	8013342 <_nx_tcp_socket_state_ack_check+0x422>
        {
            /* Done, return to caller. */
            return(NX_TRUE);
 801333e:	2301      	movs	r3, #1
 8013340:	e0d5      	b.n	80134ee <_nx_tcp_socket_state_ack_check+0x5ce>
            }
        }
#endif

        /* Save the front of the of the transmit queue.  */
        search_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8013348:	653b      	str	r3, [r7, #80]	; 0x50

        /* Okay so now the packet after the previous pointer needs to be the front of the
           queue.  */
        if (previous_ptr != socket_ptr -> nx_tcp_socket_transmit_sent_tail)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013350:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013352:	429a      	cmp	r2, r3
 8013354:	d017      	beq.n	8013386 <_nx_tcp_socket_state_ack_check+0x466>
        {

            /* Just update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013358:	6a1a      	ldr	r2, [r3, #32]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

            /* And decrease the transmit queue count accordingly.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8013366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013368:	1ad2      	subs	r2, r2, r3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

            /* Setup a new transmit timeout.  */
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2200      	movs	r2, #0
 8013380:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8013384:	e09e      	b.n	80134c4 <_nx_tcp_socket_state_ack_check+0x5a4>
        else
        {

            /* The transmit list is now cleared, just set the head and tail pointers to
               NULL.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  NX_NULL;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2200      	movs	r2, #0
 801338a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2200      	movs	r2, #0
 8013392:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* Clear the transmit queue count.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

            /* Determine if a disconnect FIN has been sent from this side of the connection.  */
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133a2:	2b07      	cmp	r3, #7
 80133a4:	d007      	beq.n	80133b6 <_nx_tcp_socket_state_ack_check+0x496>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 80133aa:	2b09      	cmp	r3, #9
 80133ac:	d003      	beq.n	80133b6 <_nx_tcp_socket_state_ack_check+0x496>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 80133b2:	2b0b      	cmp	r3, #11
 80133b4:	d10a      	bne.n	80133cc <_nx_tcp_socket_state_ack_check+0x4ac>
            {

                /* Yes, setup timeout such that the FIN can be retried if it is lost.  */
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2200      	movs	r2, #0
 80133c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80133ca:	e007      	b.n	80133dc <_nx_tcp_socket_state_ack_check+0x4bc>
            }
            else if (socket_ptr -> nx_tcp_socket_tx_window_advertised != 0)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d077      	beq.n	80134c4 <_nx_tcp_socket_state_ack_check+0x5a4>
            {

                /* Otherwise, a FIN has not been sent, simply clear the transmit timeout.  */
                socket_ptr -> nx_tcp_socket_timeout =  0;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2200      	movs	r2, #0
 80133d8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            }
        }

        /* Now walk through the packets to release and set them
           free.  */
        while (packet_release_count--)
 80133dc:	e072      	b.n	80134c4 <_nx_tcp_socket_state_ack_check+0x5a4>
        {

            /* Use the previous pointer as the release pointer.  */
            previous_ptr =  search_ptr;
 80133de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133e0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Move to the next packet in the queue before we clip the
               next pointer.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 80133e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133e4:	6a1b      	ldr	r3, [r3, #32]
 80133e6:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133e8:	f3ef 8310 	mrs	r3, PRIMASK
 80133ec:	61bb      	str	r3, [r7, #24]
    return(posture);
 80133ee:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80133f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80133f2:	b672      	cpsid	i
    return(int_posture);
 80133f4:	697b      	ldr	r3, [r7, #20]

            /* Disable interrupts temporarily.  */
            TX_DISABLE
 80133f6:	61fb      	str	r3, [r7, #28]

            /* Set the packet to allocated to indicate it is no longer part of the TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 80133f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133fa:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80133fe:	621a      	str	r2, [r3, #32]
               the packet occurred prior to receiving the ACK. If so, the packet could be
               in an ARP queue or in a driver queue waiting for transmission so we can't
               release it directly at this point.  The driver or the ARP processing will
               release it when finished.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (previous_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8013400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013402:	69db      	ldr	r3, [r3, #28]
 8013404:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 8013408:	d12b      	bne.n	8013462 <_nx_tcp_socket_state_ack_check+0x542>
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	f383 8810 	msr	PRIMASK, r3
}
 8013414:	bf00      	nop

                /* Yes, the driver has already released the packet.  */

                /* Open up the transmit window. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr = (NX_TCP_HEADER *)previous_ptr -> nx_packet_prepend_ptr;
 8013416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013418:	689b      	ldr	r3, [r3, #8]
 801341a:	657b      	str	r3, [r7, #84]	; 0x54

                temp = search_header_ptr -> nx_tcp_header_word_3;
 801341c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	64bb      	str	r3, [r7, #72]	; 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 8013422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013424:	ba1b      	rev	r3, r3
 8013426:	64bb      	str	r3, [r7, #72]	; 0x48
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801342a:	0f1b      	lsrs	r3, r3, #28
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	633b      	str	r3, [r7, #48]	; 0x30
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > (previous_ptr -> nx_packet_length - header_length))
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013436:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801343a:	1acb      	subs	r3, r1, r3
 801343c:	429a      	cmp	r2, r3
 801343e:	d909      	bls.n	8013454 <_nx_tcp_socket_state_ack_check+0x534>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= previous_ptr -> nx_packet_length - header_length;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801344a:	1acb      	subs	r3, r1, r3
 801344c:	441a      	add	r2, r3
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	669a      	str	r2, [r3, #104]	; 0x68
 8013452:	e002      	b.n	801345a <_nx_tcp_socket_state_ack_check+0x53a>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2200      	movs	r2, #0
 8013458:	669a      	str	r2, [r3, #104]	; 0x68
                }
                /* Release the packet.  */
                _nx_packet_release(previous_ptr);
 801345a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801345c:	f7fd faec 	bl	8010a38 <_nx_packet_release>
 8013460:	e030      	b.n	80134c4 <_nx_tcp_socket_state_ack_check+0x5a4>
            else
            {

                /* No, the driver has not released the packet.  */
                /* Open up the transmit window. */
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 8013462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                                       previous_ptr -> nx_packet_ip_header_length);
 8013466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013468:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 801346c:	4413      	add	r3, r2
 801346e:	657b      	str	r3, [r7, #84]	; 0x54

                temp = search_header_ptr -> nx_tcp_header_word_3;
 8013470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013472:	68db      	ldr	r3, [r3, #12]
 8013474:	64bb      	str	r3, [r7, #72]	; 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 8013476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013478:	ba1b      	rev	r3, r3
 801347a:	64bb      	str	r3, [r7, #72]	; 0x48
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 801347c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801347e:	0f1b      	lsrs	r3, r3, #28
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	633b      	str	r3, [r7, #48]	; 0x30
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 8013484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)(previous_ptr -> nx_packet_prepend_ptr))));
 8013488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801348a:	689b      	ldr	r3, [r3, #8]
 801348c:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 801348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013490:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 8013492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013494:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 8013496:	4413      	add	r3, r2
 8013498:	62bb      	str	r3, [r7, #40]	; 0x28
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > tcp_payload_length)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801349e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d206      	bcs.n	80134b2 <_nx_tcp_socket_state_ack_check+0x592>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= tcp_payload_length;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80134a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134aa:	1ad2      	subs	r2, r2, r3
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	669a      	str	r2, [r3, #104]	; 0x68
 80134b0:	e002      	b.n	80134b8 <_nx_tcp_socket_state_ack_check+0x598>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2200      	movs	r2, #0
 80134b6:	669a      	str	r2, [r3, #104]	; 0x68
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f383 8810 	msr	PRIMASK, r3
}
 80134c2:	bf00      	nop
        while (packet_release_count--)
 80134c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134c6:	1e5a      	subs	r2, r3, #1
 80134c8:	647a      	str	r2, [r7, #68]	; 0x44
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d187      	bne.n	80133de <_nx_tcp_socket_state_ack_check+0x4be>
                /* Restore interrupts.  */
                TX_RESTORE
            }
        }

        if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	d107      	bne.n	80134e8 <_nx_tcp_socket_state_ack_check+0x5c8>
        {

            /* Only partial data are ACKed. Retransmit packet immediately. */
            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_FALSE);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80134de:	2200      	movs	r2, #0
 80134e0:	6879      	ldr	r1, [r7, #4]
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7ff fb48 	bl	8012b78 <_nx_tcp_socket_retransmit>
        }

        return(NX_TRUE);
 80134e8:	2301      	movs	r3, #1
 80134ea:	e000      	b.n	80134ee <_nx_tcp_socket_state_ack_check+0x5ce>
    else
    {

        /* The ACK bit is off drop the segment and return.  */
        /* RFC793, Section3.9, Page72.  */
        return(NX_FALSE);
 80134ec:	2300      	movs	r3, #0
    }
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3758      	adds	r7, #88	; 0x58
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
	...

080134f8 <_nx_tcp_socket_state_closing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_closing(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801350a:	2b00      	cmp	r3, #0
 801350c:	d029      	beq.n	8013562 <_nx_tcp_socket_state_closing+0x6a>
    {

        /* If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	689a      	ldr	r2, [r3, #8]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013516:	429a      	cmp	r2, r3
 8013518:	d123      	bne.n	8013562 <_nx_tcp_socket_state_closing+0x6a>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	685a      	ldr	r2, [r3, #4]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8013522:	429a      	cmp	r2, r3
 8013524:	d11d      	bne.n	8013562 <_nx_tcp_socket_state_closing+0x6a>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Set the socket state to TIMED WAIT now.  */
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	220a      	movs	r2, #10
 801352a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 801352c:	4b0f      	ldr	r3, [pc, #60]	; (801356c <_nx_tcp_socket_state_closing+0x74>)
 801352e:	681a      	ldr	r2, [r3, #0]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801353c:	2b00      	cmp	r3, #0
 801353e:	d006      	beq.n	801354e <_nx_tcp_socket_state_closing+0x56>
            {

                /* Resume the thread suspended for the disconnect.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013546:	2100      	movs	r1, #0
 8013548:	4618      	mov	r0, r3
 801354a:	f000 fed3 	bl	80142f4 <_nx_tcp_socket_thread_resume>
            }

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013554:	2b00      	cmp	r3, #0
 8013556:	d004      	beq.n	8013562 <_nx_tcp_socket_state_closing+0x6a>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	4798      	blx	r3
#endif
        }

        /* Ignore the segment.  According to RFC 793, Section 3.9, Page 73.  */
    }
}
 8013562:	bf00      	nop
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	24000838 	.word	0x24000838

08013570 <_nx_tcp_socket_state_data_trim>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim(NX_PACKET *packet_ptr, ULONG amount)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b086      	sub	sp, #24
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
ULONG      bytes_to_keep;
NX_PACKET *work_ptr;

    if (amount >= packet_ptr -> nx_packet_length)
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801357e:	683a      	ldr	r2, [r7, #0]
 8013580:	429a      	cmp	r2, r3
 8013582:	d23c      	bcs.n	80135fe <_nx_tcp_socket_state_data_trim+0x8e>
    {
        /* Invalid input. */
        return;
    }

    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	1ad3      	subs	r3, r2, r3
 801358c:	617b      	str	r3, [r7, #20]

    packet_ptr -> nx_packet_length = bytes_to_keep;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	697a      	ldr	r2, [r7, #20]
 8013592:	625a      	str	r2, [r3, #36]	; 0x24

    work_ptr = packet_ptr;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the "bytes_to_keep" amount. */
    while (work_ptr)
 8013598:	e02d      	b.n	80135f6 <_nx_tcp_socket_state_data_trim+0x86>
    {

    NX_PACKET *tmp_ptr;

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	68da      	ldr	r2, [r3, #12]
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	1ad2      	subs	r2, r2, r3
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	da0c      	bge.n	80135c4 <_nx_tcp_socket_state_data_trim+0x54>
        {

            /*lint -e{923} suppress cast of pointer to ULONG.  */
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	461a      	mov	r2, r3
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	68db      	ldr	r3, [r3, #12]
 80135b4:	1ad3      	subs	r3, r2, r3
 80135b6:	697a      	ldr	r2, [r7, #20]
 80135b8:	4413      	add	r3, r2
 80135ba:	617b      	str	r3, [r7, #20]

            work_ptr = work_ptr -> nx_packet_next;
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	613b      	str	r3, [r7, #16]

            continue;
 80135c2:	e018      	b.n	80135f6 <_nx_tcp_socket_state_data_trim+0x86>
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* This is the last packet. */
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	689a      	ldr	r2, [r3, #8]
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	441a      	add	r2, r3
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Free the rest of the packet chain. */
        tmp_ptr = work_ptr -> nx_packet_next;
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	60fb      	str	r3, [r7, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	2200      	movs	r2, #0
 80135da:	605a      	str	r2, [r3, #4]
        work_ptr = tmp_ptr;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	613b      	str	r3, [r7, #16]

        if (work_ptr)
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d007      	beq.n	80135f6 <_nx_tcp_socket_state_data_trim+0x86>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80135ec:	621a      	str	r2, [r3, #32]

            _nx_packet_release(work_ptr);
 80135ee:	6938      	ldr	r0, [r7, #16]
 80135f0:	f7fd fa22 	bl	8010a38 <_nx_packet_release>

            /* All done. Break out of the while loop and return. */
            break;
 80135f4:	e004      	b.n	8013600 <_nx_tcp_socket_state_data_trim+0x90>
    while (work_ptr)
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d1ce      	bne.n	801359a <_nx_tcp_socket_state_data_trim+0x2a>
 80135fc:	e000      	b.n	8013600 <_nx_tcp_socket_state_data_trim+0x90>
        return;
 80135fe:	bf00      	nop
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */
}
 8013600:	3718      	adds	r7, #24
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}

08013606 <_nx_tcp_socket_state_data_trim_front>:
/*                                            verified memmove use cases, */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim_front(NX_PACKET *packet_ptr, ULONG amount)
{
 8013606:	b580      	push	{r7, lr}
 8013608:	b084      	sub	sp, #16
 801360a:	af00      	add	r7, sp, #0
 801360c:	6078      	str	r0, [r7, #4]
 801360e:	6039      	str	r1, [r7, #0]
NX_PACKET *work_ptr = packet_ptr;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	60fb      	str	r3, [r7, #12]
ULONG      work_length;

    if (amount >= packet_ptr -> nx_packet_length || amount == 0)
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013618:	683a      	ldr	r2, [r7, #0]
 801361a:	429a      	cmp	r2, r3
 801361c:	d263      	bcs.n	80136e6 <_nx_tcp_socket_state_data_trim_front+0xe0>
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d060      	beq.n	80136e6 <_nx_tcp_socket_state_data_trim_front+0xe0>
        /* Invalid input. */
        return;
    }

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= amount;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	1ad2      	subs	r2, r2, r3
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Move prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	f103 0214 	add.w	r2, r3, #20
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	609a      	str	r2, [r3, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the amount. */
    while (amount)
 801363c:	e049      	b.n	80136d2 <_nx_tcp_socket_state_data_trim_front+0xcc>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Compute the size of the data portion work_ptr.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	68db      	ldr	r3, [r3, #12]
 8013642:	461a      	mov	r2, r3
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	689b      	ldr	r3, [r3, #8]
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	60bb      	str	r3, [r7, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
        if (amount > work_length)
 801364c:	683a      	ldr	r2, [r7, #0]
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	429a      	cmp	r2, r3
 8013652:	d91e      	bls.n	8013692 <_nx_tcp_socket_state_data_trim_front+0x8c>
        {

            /* All data in work_ptr need to be trimmed.  */
            if (work_ptr == packet_ptr)
 8013654:	68fa      	ldr	r2, [r7, #12]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	429a      	cmp	r2, r3
 801365a:	d104      	bne.n	8013666 <_nx_tcp_socket_state_data_trim_front+0x60>
            {

                /* This packet is the header of packet chain.  */
                /* Clear TCP data in this packet.  */
                work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	689a      	ldr	r2, [r3, #8]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	60da      	str	r2, [r3, #12]
 8013664:	e00d      	b.n	8013682 <_nx_tcp_socket_state_data_trim_front+0x7c>
            else
            {

                /* This packet is not the first packet.  */
                /* Remove work_ptr from packet chain.  */
                packet_ptr -> nx_packet_next = work_ptr -> nx_packet_next;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	685a      	ldr	r2, [r3, #4]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	605a      	str	r2, [r3, #4]

                /* Disconnect work_ptr from the rest of the packet chain. */
                work_ptr -> nx_packet_next = NX_NULL;
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2200      	movs	r2, #0
 8013672:	605a      	str	r2, [r3, #4]

                /* Mark the packet as ALLOCATED. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 801367a:	621a      	str	r2, [r3, #32]

                _nx_packet_release(work_ptr);
 801367c:	68f8      	ldr	r0, [r7, #12]
 801367e:	f7fd f9db 	bl	8010a38 <_nx_packet_release>
            }
            /* Reduce the amount being trimmed.  */
            amount -= work_length;
 8013682:	683a      	ldr	r2, [r7, #0]
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	1ad3      	subs	r3, r2, r3
 8013688:	603b      	str	r3, [r7, #0]

            /* Move to the next packet. */
            work_ptr = packet_ptr -> nx_packet_next;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	60fb      	str	r3, [r7, #12]
 8013690:	e01f      	b.n	80136d2 <_nx_tcp_socket_state_data_trim_front+0xcc>
        else
        {

            /* This is the last packet to trim.  */

            if (work_ptr == packet_ptr)
 8013692:	68fa      	ldr	r2, [r7, #12]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	429a      	cmp	r2, r3
 8013698:	d113      	bne.n	80136c2 <_nx_tcp_socket_state_data_trim_front+0xbc>
            {
#endif /* NX_DISABLE_PACKET_CHAIN */

                /* For the first packet, move data towards the beginning
                   of the packet, right after TCP header.  */
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6898      	ldr	r0, [r3, #8]
                        packet_ptr -> nx_packet_prepend_ptr + amount,
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	689a      	ldr	r2, [r3, #8]
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	18d1      	adds	r1, r2, r3
                        work_length - amount);
 80136a6:	68ba      	ldr	r2, [r7, #8]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	1ad3      	subs	r3, r2, r3
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 80136ac:	461a      	mov	r2, r3
 80136ae:	f006 fe1f 	bl	801a2f0 <memmove>
                packet_ptr -> nx_packet_append_ptr -= amount;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	68da      	ldr	r2, [r3, #12]
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	425b      	negs	r3, r3
 80136ba:	441a      	add	r2, r3
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	60da      	str	r2, [r3, #12]
 80136c0:	e005      	b.n	80136ce <_nx_tcp_socket_state_data_trim_front+0xc8>
            }
            else
            {

                /* Advance nx_packet_prepend_ptr to where the usable data starts. */
                work_ptr -> nx_packet_prepend_ptr += amount;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	689a      	ldr	r2, [r3, #8]
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	441a      	add	r2, r3
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	609a      	str	r2, [r3, #8]
            }

            /* Cut down amount*/
            amount = 0;
 80136ce:	2300      	movs	r3, #0
 80136d0:	603b      	str	r3, [r7, #0]
    while (amount)
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1b2      	bne.n	801363e <_nx_tcp_socket_state_data_trim_front+0x38>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Restore prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr -= sizeof(NX_TCP_HEADER);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	689b      	ldr	r3, [r3, #8]
 80136dc:	f1a3 0214 	sub.w	r2, r3, #20
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	609a      	str	r2, [r3, #8]
 80136e4:	e000      	b.n	80136e8 <_nx_tcp_socket_state_data_trim_front+0xe2>
        return;
 80136e6:	bf00      	nop
}
 80136e8:	3710      	adds	r7, #16
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
	...

080136f0 <_nx_tcp_socket_state_data_check>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_data_check(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b096      	sub	sp, #88	; 0x58
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
ULONG          search_begin_sequence;
ULONG          search_end_sequence;
ULONG          original_rx_sequence;
ULONG          trim_data_length;
TX_THREAD     *thread_ptr;
ULONG          acked_packets = 0;
 80136fa:	2300      	movs	r3, #0
 80136fc:	63bb      	str	r3, [r7, #56]	; 0x38
UINT           need_ack = NX_FALSE;
 80136fe:	2300      	movs	r3, #0
 8013700:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* NX_ENABLE_LOW_WATERMARK */
#if ((!defined(NX_DISABLE_TCP_INFO)) || defined(TX_ENABLE_EVENT_TRACE))
NX_IP         *ip_ptr;

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013708:	633b      	str	r3, [r7, #48]	; 0x30
                    NX_INTERFACE_CAPABILITY_TCPIP_OFFLOAD;
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	689b      	ldr	r3, [r3, #8]
 801370e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine the size of the TCP header.  */
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013712:	68db      	ldr	r3, [r3, #12]
 8013714:	0f1b      	lsrs	r3, r3, #28
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Record the original rx_sequence. */
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801371e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the begin sequence of this packet. */
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;
 8013720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Calculate the data length in the packet.  */
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372c:	1ad3      	subs	r3, r2, r3
 801372e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the end sequence of this packet. The end sequence is one byte to the last byte in this packet. */
    packet_end_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 8013730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013736:	4413      	add	r3, r2
 8013738:	647b      	str	r3, [r7, #68]	; 0x44

    /* Trim the data that out of the receive window, make sure all data are in receive window.  */
    if (packet_data_length
 801373a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801373c:	2b00      	cmp	r3, #0
 801373e:	d03b      	beq.n	80137b8 <_nx_tcp_socket_state_data_check+0xc8>
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
       )
    {

        /* Step1. trim the data on the left side of the receive window.  */
        if (((INT)(socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence)) > 0)
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	2b00      	cmp	r3, #0
 801374a:	dd16      	ble.n	801377a <_nx_tcp_socket_state_data_check+0x8a>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013752:	1ad3      	subs	r3, r2, r3
 8013754:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim_front(packet_ptr, trim_data_length);
 8013756:	6a39      	ldr	r1, [r7, #32]
 8013758:	6838      	ldr	r0, [r7, #0]
 801375a:	f7ff ff54 	bl	8013606 <_nx_tcp_socket_state_data_trim_front>

            /* Fix the sequence of this packet. */
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 801375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013760:	685a      	ldr	r2, [r3, #4]
 8013762:	6a3b      	ldr	r3, [r7, #32]
 8013764:	441a      	add	r2, r3
 8013766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013768:	605a      	str	r2, [r3, #4]

            /* Update the data length and begin sequence.  */
            packet_data_length -= trim_data_length;
 801376a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801376c:	6a3b      	ldr	r3, [r7, #32]
 801376e:	1ad3      	subs	r3, r2, r3
 8013770:	643b      	str	r3, [r7, #64]	; 0x40
            packet_begin_sequence += trim_data_length;
 8013772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013774:	6a3b      	ldr	r3, [r7, #32]
 8013776:	4413      	add	r3, r2
 8013778:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Step2. trim the data on the right side of the receive window.  */
        if (((INT)((packet_end_sequence - socket_ptr -> nx_tcp_socket_rx_sequence) -
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801377e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013780:	1ad2      	subs	r2, r2, r3
                   socket_ptr -> nx_tcp_socket_rx_window_current)) > 0)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
        if (((INT)((packet_end_sequence - socket_ptr -> nx_tcp_socket_rx_sequence) -
 8013788:	1ad3      	subs	r3, r2, r3
 801378a:	2b00      	cmp	r3, #0
 801378c:	dd14      	ble.n	80137b8 <_nx_tcp_socket_state_data_check+0xc8>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013798:	4413      	add	r3, r2
 801379a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801379c:	1ad3      	subs	r3, r2, r3
 801379e:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim(packet_ptr, trim_data_length);
 80137a0:	6a39      	ldr	r1, [r7, #32]
 80137a2:	6838      	ldr	r0, [r7, #0]
 80137a4:	f7ff fee4 	bl	8013570 <_nx_tcp_socket_state_data_trim>

            /* Update the data length and end sequence.  */
            packet_data_length -= trim_data_length;
 80137a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137aa:	6a3b      	ldr	r3, [r7, #32]
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	643b      	str	r3, [r7, #64]	; 0x40
            packet_end_sequence -= trim_data_length;
 80137b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137b2:	6a3b      	ldr	r3, [r7, #32]
 80137b4:	1ad3      	subs	r3, r2, r3
 80137b6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Determine if the packet has the FIN bit set to signal a disconnect.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 80137b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d009      	beq.n	80137d8 <_nx_tcp_socket_state_data_check+0xe8>
    {

        /* Setup the FIN sequence number that we need to look at.  */
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 80137c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c6:	685a      	ldr	r2, [r3, #4]
 80137c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ca:	441a      	add	r2, r3
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	659a      	str	r2, [r3, #88]	; 0x58

        /* Indicate that the FIN sequence is now valid.  Once the receive chain is complete
           we will process (ACK) the FIN command which is part of a disconnect started by the
           other side of the connection.  */
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2201      	movs	r2, #1
 80137d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_FIN_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
    }

    /* Compute the amount of payload data in this packet. */
    if (packet_data_length == 0)
 80137d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d11d      	bne.n	801381a <_nx_tcp_socket_state_data_check+0x12a>
    {
        /* This packet does not contain TCP data payload.  */

        /* Check for invalid sequence number.  */
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137e2:	2b05      	cmp	r3, #5
 80137e4:	d117      	bne.n	8013816 <_nx_tcp_socket_state_data_check+0x126>
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d112      	bne.n	8013816 <_nx_tcp_socket_state_data_check+0x126>
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80137f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f6:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d00c      	beq.n	8013816 <_nx_tcp_socket_state_data_check+0x126>
            ((socket_ptr -> nx_tcp_socket_rx_sequence - 1) != tcp_header_ptr -> nx_tcp_sequence_number))
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013800:	1e5a      	subs	r2, r3, #1
 8013802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013804:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 8013806:	429a      	cmp	r2, r3
 8013808:	d005      	beq.n	8013816 <_nx_tcp_socket_state_data_check+0x126>
        {

            /* Send an immediate ACK.  */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801380e:	4619      	mov	r1, r3
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7fe fc77 	bl	8012104 <_nx_tcp_packet_send_ack>
        }

        /* This packet does not have data, so return false. */
        return(NX_FALSE);
 8013816:	2300      	movs	r3, #0
 8013818:	e2a7      	b.n	8013d6a <_nx_tcp_socket_state_data_check+0x67a>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Ensure the next pointer in the packet is set to NULL, which will indicate to the
       receive logic that it is not yet part of a contiguous stream.  */
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	2200      	movs	r2, #0
 801381e:	61da      	str	r2, [r3, #28]

    /* Otherwise, the packet is within the receive window so continue processing
       the incoming TCP data.  */

    /* Pickup the tail pointer of the receive queue.  */
    search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013826:	657b      	str	r3, [r7, #84]	; 0x54

    /* Check to see if the tail pointer is part of a contiguous stream.  */
    if (search_ptr)
 8013828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801382a:	2b00      	cmp	r3, #0
 801382c:	d010      	beq.n	8013850 <_nx_tcp_socket_state_data_check+0x160>
    {

        /* Setup a pointer to header of this packet in the sent list.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 801382e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013830:	689b      	ldr	r3, [r3, #8]
 8013832:	61fb      	str	r3, [r7, #28]

        /* Determine the size of the search TCP header.  */
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	0f1b      	lsrs	r3, r3, #28
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	61bb      	str	r3, [r7, #24]

        /* Now see if the current sequence number accounts for the last packet.  */
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	685a      	ldr	r2, [r3, #4]
 8013842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013846:	441a      	add	r2, r3
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	1ad3      	subs	r3, r2, r3
 801384c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801384e:	e002      	b.n	8013856 <_nx_tcp_socket_state_data_check+0x166>
    else
    {

        /* Set the sequence number to the socket's receive sequence if there isn't a receive
           packet on the queue.  */
        search_end_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013854:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_ENABLE_LOW_WATERMARK */

    /* Determine if we have a simple case of TCP data coming in the correct order.  This means
       the socket's sequence number matches the incoming packet sequence number and the last packet's
       data on the socket's receive queue (if any) matches the current sequence number.  */
    if (((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 8013856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013858:	685a      	ldr	r2, [r3, #4]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801385e:	429a      	cmp	r2, r3
 8013860:	d132      	bne.n	80138c8 <_nx_tcp_socket_state_data_check+0x1d8>
         (search_end_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    if (((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 8013866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013868:	429a      	cmp	r2, r3
 801386a:	d12d      	bne.n	80138c8 <_nx_tcp_socket_state_data_check+0x1d8>
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Mark the packet as ready. This is done to simplify the logic in socket receive.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8013872:	61da      	str	r2, [r3, #28]
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* Place the packet on the receive queue.  Search pointer still points to the tail packet on
               the queue.  */
            if (search_ptr)
 8013874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013876:	2b00      	cmp	r3, #0
 8013878:	d007      	beq.n	801388a <_nx_tcp_socket_state_data_check+0x19a>
            {

                /* Nonempty receive queue, add packet to the end of the receive queue.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  packet_ptr;
 801387a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801387c:	683a      	ldr	r2, [r7, #0]
 801387e:	621a      	str	r2, [r3, #32]

                /* Update the tail of the receive queue.  */
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	683a      	ldr	r2, [r7, #0]
 8013884:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8013888:	e00b      	b.n	80138a2 <_nx_tcp_socket_state_data_check+0x1b2>
            }
            else
            {

                /* Empty receive queue.  Set both the head and the tail pointers this packet.  */
                socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	683a      	ldr	r2, [r7, #0]
 801388e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	683a      	ldr	r2, [r7, #0]
 8013896:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                /* Setup a new delayed ACK timeout.  */
#ifdef NX_ENABLE_TCPIP_OFFLOAD
                if (!tcpip_offload)
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
                {
                    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 801389a:	4b8b      	ldr	r3, [pc, #556]	; (8013ac8 <_nx_tcp_socket_state_data_check+0x3d8>)
 801389c:	681a      	ldr	r2, [r3, #0]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	655a      	str	r2, [r3, #84]	; 0x54
                }
            }

            /* Increment the receive TCP packet count.  */
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80138a8:	1c5a      	adds	r2, r3, #1
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 80138b6:	621a      	str	r2, [r3, #32]

            /* Calculate the next sequence number.  */
            socket_ptr -> nx_tcp_socket_rx_sequence =  packet_end_sequence;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80138bc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* All packets can be acked. */
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80138c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80138c6:	e148      	b.n	8013b5a <_nx_tcp_socket_state_data_check+0x46a>
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* End of the simple case: add new packet towards the end of the recv queue.
           All packets in the receive queue are in sequence. */
    }
    else if (socket_ptr -> nx_tcp_socket_receive_queue_head == NX_NULL)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d11a      	bne.n	8013908 <_nx_tcp_socket_state_data_check+0x218>
        if (drop_packet == NX_FALSE)
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138d6:	4619      	mov	r1, r3
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f7fe fc13 	bl	8012104 <_nx_tcp_packet_send_ack>
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* There are no packets chained on the receive queue.  Simply add the
               new packet to the receive queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	683a      	ldr	r2, [r7, #0]
 80138e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	683a      	ldr	r2, [r7, #0]
 80138ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

            /* Increase the receive queue count. */
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2201      	movs	r2, #1
 80138f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

            /* Setup a new delayed ACK timeout.  */
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 80138f6:	4b74      	ldr	r3, [pc, #464]	; (8013ac8 <_nx_tcp_socket_state_data_check+0x3d8>)
 80138f8:	681a      	ldr	r2, [r3, #0]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Mark the packet as being part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 8013904:	621a      	str	r2, [r3, #32]
 8013906:	e128      	b.n	8013b5a <_nx_tcp_socket_state_data_check+0x46a>

        /* Go through the received packet chain, and locate the first packet that the
           packet_begin_sequence is to the right of the end of it. */

        /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
        if (((INT)(packet_begin_sequence - socket_ptr -> nx_tcp_socket_rx_sequence)) > 0)
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801390c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	2b00      	cmp	r3, #0
 8013912:	dd05      	ble.n	8013920 <_nx_tcp_socket_state_data_check+0x230>
        {
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013918:	4619      	mov	r1, r3
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7fe fbf2 	bl	8012104 <_nx_tcp_packet_send_ack>
        }

        /* At this point, it is guaranteed that the receive queue contains packets. */
        search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013926:	657b      	str	r3, [r7, #84]	; 0x54

        previous_ptr = NX_NULL;
 8013928:	2300      	movs	r3, #0
 801392a:	653b      	str	r3, [r7, #80]	; 0x50

        while (search_ptr)
 801392c:	e0ae      	b.n	8013a8c <_nx_tcp_socket_state_data_check+0x39c>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 801392e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013930:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 8013934:	d102      	bne.n	801393c <_nx_tcp_socket_state_data_check+0x24c>
            {
                /* We hit the end of the receive queue. */
                search_ptr = NX_NULL;
 8013936:	2300      	movs	r3, #0
 8013938:	657b      	str	r3, [r7, #84]	; 0x54

                /* Terminate the out-of-order search.  */
                break;
 801393a:	e0ad      	b.n	8013a98 <_nx_tcp_socket_state_data_check+0x3a8>
            }

            /* Setup a pointer to header of this packet in the receive list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 801393c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801393e:	689b      	ldr	r3, [r3, #8]
 8013940:	61fb      	str	r3, [r7, #28]

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	617b      	str	r3, [r7, #20]

            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	0f1b      	lsrs	r3, r3, #28
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	62bb      	str	r3, [r7, #40]	; 0x28

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8013952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	441a      	add	r2, r3
 801395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395c:	1ad3      	subs	r3, r2, r3
 801395e:	63fb      	str	r3, [r7, #60]	; 0x3c
             *        In this configuration, the incoming packet is completely to the right of      *
             *        search_ptr.  Move to the next search packet.                                  *
             *                                                                                      *
             ****************************************************************************************/
            /* packet_ptr is to the right of search_ptr */
            if (((INT)(packet_begin_sequence - search_end_sequence)) >= 0)
 8013960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	2b00      	cmp	r3, #0
 8013968:	db05      	blt.n	8013976 <_nx_tcp_socket_state_data_check+0x286>
            {
                /* Move on to the next packet. */
                previous_ptr = search_ptr;
 801396a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801396c:	653b      	str	r3, [r7, #80]	; 0x50

                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 801396e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013970:	6a1b      	ldr	r3, [r3, #32]
 8013972:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search */
                continue;
 8013974:	e08a      	b.n	8013a8c <_nx_tcp_socket_state_data_check+0x39c>
             *              SSSSSSSSS                                                               *
             *        In this configuration, the incoming packet is completely to the left of       *
             *        search_ptr.  Incoming packet needs to be inserted in front of search ptr.     *
             *                                                                                      *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_end_sequence)) >= 0)
 8013976:	697a      	ldr	r2, [r7, #20]
 8013978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	2b00      	cmp	r3, #0
 801397e:	f280 808a 	bge.w	8013a96 <_nx_tcp_socket_state_data_check+0x3a6>
             *        to search for contigous data, therefore no need to wake up user thread.       *
             *        Howerver may need to send out ACK if new packet is to the right of the seq    *
             *        number.                                                                       *
             *                                                                                      *
             ****************************************************************************************/
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 8013982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	1ad3      	subs	r3, r2, r3
 8013988:	2b00      	cmp	r3, #0
 801398a:	db0c      	blt.n	80139a6 <_nx_tcp_socket_state_data_check+0x2b6>
                (((INT)(search_end_sequence - packet_end_sequence)) >= 0))
 801398c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801398e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013990:	1ad3      	subs	r3, r2, r3
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 8013992:	2b00      	cmp	r3, #0
 8013994:	db07      	blt.n	80139a6 <_nx_tcp_socket_state_data_check+0x2b6>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801399a:	4619      	mov	r1, r3
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7fe fbb1 	bl	8012104 <_nx_tcp_packet_send_ack>

                /* Since packet is not queued, return NX_FALSE so the caller releases the packet. */
                return(NX_FALSE);
 80139a2:	2300      	movs	r3, #0
 80139a4:	e1e1      	b.n	8013d6a <_nx_tcp_socket_state_data_check+0x67a>
             *         Release existing packet, and insert new packet, then check for the next      *
             *         packet on the chain.  The next search may yield case (5).  Need to check     *
             *         for contingous data, may need to send ACK.                                   *
             *                                                                                      *
            ****************************************************************************************/
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 80139a6:	697a      	ldr	r2, [r7, #20]
 80139a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139aa:	1ad3      	subs	r3, r2, r3
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	db3a      	blt.n	8013a26 <_nx_tcp_socket_state_data_check+0x336>
                (((INT)(packet_end_sequence - search_end_sequence) >= 0)))
 80139b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139b4:	1ad3      	subs	r3, r2, r3
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	db35      	blt.n	8013a26 <_nx_tcp_socket_state_data_check+0x336>
            {
            NX_PACKET *tmp_ptr;
                /* Release the search_ptr, and move to the next packet on the chain. */
                tmp_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 80139ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139bc:	6a1b      	ldr	r3, [r3, #32]
 80139be:	613b      	str	r3, [r7, #16]

                /* Mark the packet as no longer being part of the TCP queue. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 80139c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139c2:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80139c6:	621a      	str	r2, [r3, #32]

                /* Decrease the packet queue count */
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80139ce:	1e5a      	subs	r2, r3, #1
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

                /* Adjust the receive window. */

                /* Release the search packet. */
                _nx_packet_release(search_ptr);
 80139d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80139d8:	f7fd f82e 	bl	8010a38 <_nx_packet_release>

#ifndef NX_DISABLE_TCP_INFO
                /* The new packet has been admitted to the receive queue. */

                /* Increment the TCP packet receive count and bytes received count.  */
                ip_ptr -> nx_ip_tcp_packets_received--;
 80139dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139de:	f8d3 35b4 	ldr.w	r3, [r3, #1460]	; 0x5b4
 80139e2:	1e5a      	subs	r2, r3, #1
 80139e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e6:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
                ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - search_begin_sequence);
 80139ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ec:	f8d3 25b8 	ldr.w	r2, [r3, #1464]	; 0x5b8
 80139f0:	6979      	ldr	r1, [r7, #20]
 80139f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139f4:	1acb      	subs	r3, r1, r3
 80139f6:	441a      	add	r2, r3
 80139f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fa:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8

                /* Increment the TCP packet receive count and bytes received count for the socket.  */
                socket_ptr -> nx_tcp_socket_packets_received--;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a04:	1e5a      	subs	r2, r3, #1
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - search_begin_sequence);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8013a12:	6979      	ldr	r1, [r7, #20]
 8013a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a16:	1acb      	subs	r3, r1, r3
 8013a18:	441a      	add	r2, r3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#endif /* NX_DISABLE_TCP_INFO */

                /* Move to the next packet.  (note: no need to update previous_ptr. */
                search_ptr = tmp_ptr;
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search. */
                continue;
 8013a24:	e032      	b.n	8013a8c <_nx_tcp_socket_state_data_check+0x39c>
             *                   SSSSSSSSSSSS                                                       *
             *        In this configuration, remove data from the back of the new packet,  insert   *
             *        packet into the chain, and terminate the search.  Need to search for          *
             *        contigous data, may need to send out ACK.                                     *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_begin_sequence)) >= 0)
 8013a26:	697a      	ldr	r2, [r7, #20]
 8013a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a2a:	1ad3      	subs	r3, r2, r3
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	db0d      	blt.n	8013a4c <_nx_tcp_socket_state_data_check+0x35c>
            {

                _nx_tcp_socket_state_data_trim(packet_ptr, (packet_end_sequence - search_begin_sequence));
 8013a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	1ad3      	subs	r3, r2, r3
 8013a36:	4619      	mov	r1, r3
 8013a38:	6838      	ldr	r0, [r7, #0]
 8013a3a:	f7ff fd99 	bl	8013570 <_nx_tcp_socket_state_data_trim>

                /* Update packet_data_length. */
                packet_data_length -= (packet_end_sequence - search_begin_sequence);
 8013a3e:	697a      	ldr	r2, [r7, #20]
 8013a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a46:	4413      	add	r3, r2
 8013a48:	643b      	str	r3, [r7, #64]	; 0x40

                /* Now the packet should be chained before search_ptr. */

                break;
 8013a4a:	e025      	b.n	8013a98 <_nx_tcp_socket_state_data_check+0x3a8>
             *        insert the packet after the search packet and continue the search.  This may  *
             *        lead to case (2) and (3).                                                     *
             *                                                                                      *
             *                                                                                      *
             ***************************************************************************************/
            _nx_tcp_socket_state_data_trim(search_ptr, (ULONG)(search_end_sequence - packet_begin_sequence));
 8013a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a50:	1ad3      	subs	r3, r2, r3
 8013a52:	4619      	mov	r1, r3
 8013a54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013a56:	f7ff fd8b 	bl	8013570 <_nx_tcp_socket_state_data_trim>

#ifndef NX_DISABLE_TCP_INFO
            /* The new packet has been admitted to the receive queue. */

            /* Reduce the TCP bytes received count.  */
            ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - packet_begin_sequence);
 8013a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a5c:	f8d3 25b8 	ldr.w	r2, [r3, #1464]	; 0x5b8
 8013a60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a64:	1acb      	subs	r3, r1, r3
 8013a66:	441a      	add	r2, r3
 8013a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a6a:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8

            /* Reduce the TCP bytes received count for the socket.  */
            socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - packet_begin_sequence);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8013a74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a78:	1acb      	subs	r3, r1, r3
 8013a7a:	441a      	add	r2, r3
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#endif /* NX_DISABLE_TCP_INFO */

            /* Move to the next packet and continue; */
            previous_ptr = search_ptr;
 8013a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a84:	653b      	str	r3, [r7, #80]	; 0x50
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a88:	6a1b      	ldr	r3, [r3, #32]
 8013a8a:	657b      	str	r3, [r7, #84]	; 0x54
        while (search_ptr)
 8013a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	f47f af4d 	bne.w	801392e <_nx_tcp_socket_state_data_check+0x23e>
 8013a94:	e000      	b.n	8013a98 <_nx_tcp_socket_state_data_check+0x3a8>
                break;
 8013a96:	bf00      	nop
        }   /* End of while (search_ptr) */

        /* At this point, the logic (within the while loop) finds a location where this packet should be inserted. */
        if (previous_ptr == NX_NULL)
 8013a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d104      	bne.n	8013aa8 <_nx_tcp_socket_state_data_check+0x3b8>
        {

            /* The packet needs to be inserted at the beginning of the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	683a      	ldr	r2, [r7, #0]
 8013aa2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8013aa6:	e002      	b.n	8013aae <_nx_tcp_socket_state_data_check+0x3be>
        }
        else
        {

            /* The packet needs to be inserted after previous_ptr. */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = packet_ptr;
 8013aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aaa:	683a      	ldr	r2, [r7, #0]
 8013aac:	621a      	str	r2, [r3, #32]
        }

        if (search_ptr == NX_NULL)
 8013aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d10b      	bne.n	8013acc <_nx_tcp_socket_state_data_check+0x3dc>
        {

            /* This packet is on the last one on the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	683a      	ldr	r2, [r7, #0]
 8013ab8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 8013ac2:	621a      	str	r2, [r3, #32]
 8013ac4:	e005      	b.n	8013ad2 <_nx_tcp_socket_state_data_check+0x3e2>
 8013ac6:	bf00      	nop
 8013ac8:	24000830 	.word	0x24000830
        }
        else
        {

            /* Chain search_ptr onto packet_ptr. */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = search_ptr;
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ad0:	621a      	str	r2, [r3, #32]

        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

        /* Increment the receive TCP packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013ad8:	1c5a      	adds	r2, r3, #1
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

        /* End of the out-of-order search.  At this point, the packet has been inserted. */

        /* Now we need to figure out how much, if any, we can ACK.  */
        search_ptr =    socket_ptr -> nx_tcp_socket_receive_queue_head;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013ae6:	657b      	str	r3, [r7, #84]	; 0x54

        /* Get the sequence number expected by the TCP receive socket. */
        expected_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013aec:	64fb      	str	r3, [r7, #76]	; 0x4c
        do
        {

            /* Setup a pointer to header of this packet in the sent list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 8013aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013af0:	689b      	ldr	r3, [r3, #8]
 8013af2:	61fb      	str	r3, [r7, #28]


            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	0f1b      	lsrs	r3, r3, #28
 8013afa:	009b      	lsls	r3, r3, #2
 8013afc:	62bb      	str	r3, [r7, #40]	; 0x28

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	617b      	str	r3, [r7, #20]

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8013b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	441a      	add	r2, r3
 8013b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b0e:	1ad3      	subs	r3, r2, r3
 8013b10:	63fb      	str	r3, [r7, #60]	; 0x3c

            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 8013b12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	db1d      	blt.n	8013b58 <_nx_tcp_socket_state_data_check+0x468>
            {

                if ((INT)(search_end_sequence - expected_sequence) > 0)
 8013b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	dd0b      	ble.n	8013b3e <_nx_tcp_socket_state_data_check+0x44e>
                {
                    /* Sequence number is within this packet.  Advance sequence number. */
                    expected_sequence = search_end_sequence;
 8013b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b28:	64fb      	str	r3, [r7, #76]	; 0x4c

                    socket_ptr -> nx_tcp_socket_rx_sequence = expected_sequence;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b2e:	64da      	str	r2, [r3, #76]	; 0x4c

                    acked_packets++;
 8013b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b32:	3301      	adds	r3, #1
 8013b34:	63bb      	str	r3, [r7, #56]	; 0x38

                    /* Mark this packet as ready for retrieval.  */
                    /*lint -e{923} suppress cast of ULONG to pointer.  */
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8013b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b38:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8013b3c:	61da      	str	r2, [r3, #28]
                /* Expected number is to the left of search_ptr.   Get out of the do-while loop!  */
                break;
            }

            /* Move the search pointer to the next queued receive packet.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b40:	6a1b      	ldr	r3, [r3, #32]
 8013b42:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if we are at the end of the queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 8013b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b46:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 8013b4a:	d101      	bne.n	8013b50 <_nx_tcp_socket_state_data_check+0x460>
            {

                /* At the end, set the search pointer to NULL.  */
                search_ptr =  NX_NULL;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	657b      	str	r3, [r7, #84]	; 0x54

                /* Get out of the loop!  */
                break;
            }
#endif /* NX_ENABLE_LOW_WATERMARK */
        } while (search_ptr);
 8013b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1cb      	bne.n	8013aee <_nx_tcp_socket_state_data_check+0x3fe>
 8013b56:	e000      	b.n	8013b5a <_nx_tcp_socket_state_data_check+0x46a>
                break;
 8013b58:	bf00      	nop

#ifndef NX_DISABLE_TCP_INFO
    /* The new packet has been admitted to the receive queue. */

    /* Increment the TCP packet receive count and bytes received count.  */
    ip_ptr -> nx_ip_tcp_packets_received++;
 8013b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5c:	f8d3 35b4 	ldr.w	r3, [r3, #1460]	; 0x5b4
 8013b60:	1c5a      	adds	r2, r3, #1
 8013b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b64:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
    ip_ptr -> nx_ip_tcp_bytes_received += packet_data_length;
 8013b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6a:	f8d3 25b8 	ldr.w	r2, [r3, #1464]	; 0x5b8
 8013b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b70:	441a      	add	r2, r3
 8013b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b74:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8

    /* Increment the TCP packet receive count and bytes received count for the socket.  */
    socket_ptr -> nx_tcp_socket_packets_received++;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b7e:	1c5a      	adds	r2, r3, #1
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    socket_ptr -> nx_tcp_socket_bytes_received += packet_data_length;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8013b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b8e:	441a      	add	r2, r3
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif

    /* Check if the rx sequence number has been updated.  */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d015      	beq.n	8013bcc <_nx_tcp_socket_state_data_check+0x4dc>
    {

        /* Decrease the receive window size since rx_sequence is updated.  */
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013bac:	1acb      	subs	r3, r1, r3
 8013bae:	441a      	add	r2, r3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Update the rx_window_last_sent for SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98.  */
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013bc2:	1acb      	subs	r3, r1, r3
 8013bc4:	441a      	add	r2, r3
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

#ifdef NX_TCP_MAX_OUT_OF_ORDER_PACKETS
    /* Does the count of out of order packets exceed the defined value? */
    if ((socket_ptr -> nx_tcp_socket_receive_queue_count - acked_packets) >
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8013bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd4:	1ad3      	subs	r3, r2, r3
 8013bd6:	2b08      	cmp	r3, #8
 8013bd8:	f240 808b 	bls.w	8013cf2 <_nx_tcp_socket_state_data_check+0x602>
        NX_TCP_MAX_OUT_OF_ORDER_PACKETS)
    {

        /* Yes it is. Remove the last packet in queue. */
        socket_ptr -> nx_tcp_socket_receive_queue_tail -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013be2:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8013be6:	621a      	str	r2, [r3, #32]
        if (socket_ptr -> nx_tcp_socket_receive_queue_count > 1)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013bee:	2b01      	cmp	r3, #1
 8013bf0:	d91d      	bls.n	8013c2e <_nx_tcp_socket_state_data_check+0x53e>
        {

            /* Find the previous packet of tail. */
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013bf8:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8013bfa:	e002      	b.n	8013c02 <_nx_tcp_socket_state_data_check+0x512>
            {
                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bfe:	6a1b      	ldr	r3, [r3, #32]
 8013c00:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8013c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c04:	6a1a      	ldr	r2, [r3, #32]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d1f5      	bne.n	8013bfc <_nx_tcp_socket_state_data_check+0x50c>
            }

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fc ff0e 	bl	8010a38 <_nx_packet_release>

            /* Setup the tail packet. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = search_ptr;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c20:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

            search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 8013c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c26:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 8013c2a:	621a      	str	r2, [r3, #32]
 8013c2c:	e00d      	b.n	8013c4a <_nx_tcp_socket_state_data_check+0x55a>
        }
        else
        {

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7fc feff 	bl	8010a38 <_nx_packet_release>

            /* Clear the head and tail packets. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = NX_NULL;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
            socket_ptr -> nx_tcp_socket_receive_queue_tail = NX_NULL;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2200      	movs	r2, #0
 8013c46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        }

        /* Decrease receive queue count. */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013c50:	1e5a      	subs	r2, r3, #1
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

    /* At this point, we can use the packet TCP header pointers since the received
       packet is already queued.  */

    /* Any packets for receiving? */
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list
 8013c58:	e04b      	b.n	8013cf2 <_nx_tcp_socket_state_data_check+0x602>
#endif /* NX_ENABLE_HTTP_PROXY */
          )
    {

        /* Setup a pointer to the first queued packet.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013c60:	603b      	str	r3, [r7, #0]
        /* Remove it from the queue.  */

        /* Simply update the head pointer of the queue.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	6a1a      	ldr	r2, [r3, #32]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

        /* Mark the packet as no longer being part of the TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8013c72:	621a      	str	r2, [r3, #32]

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	2200      	movs	r2, #0
 8013c78:	61da      	str	r2, [r3, #28]

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013c80:	1e5a      	subs	r2, r3, #1
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

        /* Adjust the packet for delivery to the suspended thread.  */

        /* Setup a pointer to the TCP header of this packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	689b      	ldr	r3, [r3, #8]
 8013c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Calculate the header size for this packet.  */
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8013c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	0f1b      	lsrs	r3, r3, #28
 8013c94:	009b      	lsls	r3, r3, #2
 8013c96:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Adjust the packet prepend pointer and length to position past the TCP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	689a      	ldr	r2, [r3, #8]
 8013c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9e:	441a      	add	r2, r3
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013caa:	1ad2      	subs	r2, r2, r3
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup a pointer to the first thread suspended on the receive queue.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8013cb6:	60fb      	str	r3, [r7, #12]

        /* Place the packet pointer in the return pointer.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cbc:	683a      	ldr	r2, [r7, #0]
 8013cbe:	601a      	str	r2, [r3, #0]

        /* Increase the receive window size.  */
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cca:	441a      	add	r2, r3
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Remove the suspended thread from the list.  */

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8013cd8:	1e5a      	subs	r2, r3, #1
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

        /* Decrement the acked_packets count. */
        acked_packets--;
 8013ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ce2:	3b01      	subs	r3, #1
 8013ce4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Resume thread.  */
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	33f8      	adds	r3, #248	; 0xf8
 8013cea:	2100      	movs	r1, #0
 8013cec:	4618      	mov	r0, r3
 8013cee:	f000 fb01 	bl	80142f4 <_nx_tcp_socket_thread_resume>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list
 8013cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d004      	beq.n	8013d02 <_nx_tcp_socket_state_data_check+0x612>
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d1ab      	bne.n	8013c5a <_nx_tcp_socket_state_data_check+0x56a>
    }

    /* Is the queue empty?.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d107      	bne.n	8013d1c <_nx_tcp_socket_state_data_check+0x62c>
    {

        /* Yes. Set both head and tail pointers to NULL.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2200      	movs	r2, #0
 8013d18:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
       RFC1122, Section4.2.3.3, Page97-98. */
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d28:	1ad2      	subs	r2, r2, r3
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d2e:	085b      	lsrs	r3, r3, #1
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d301      	bcc.n	8013d38 <_nx_tcp_socket_state_data_check+0x648>
    {

        /* Need to send ACK for window update.  */
        need_ack = NX_TRUE;
 8013d34:	2301      	movs	r3, #1
 8013d36:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* If the incoming packet caused the sequence number to move forward,
       indicating the new piece of data is in order, in sequence, and valid for receiving. */
    if ((original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d009      	beq.n	8013d56 <_nx_tcp_socket_state_data_check+0x666>
        if (socket_ptr -> nx_tcp_socket_http_proxy_state != NX_HTTP_PROXY_STATE_CONNECTING)
#endif /* NX_ENABLE_HTTP_PROXY */
        {

            /* Determine if there is a socket receive notification function specified.  */
            if (socket_ptr -> nx_tcp_receive_callback)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d004      	beq.n	8013d56 <_nx_tcp_socket_state_data_check+0x666>
            {

                /* Yes, notification is requested.  Call the application's receive notification
                   function for this socket.  */
                (socket_ptr -> nx_tcp_receive_callback)(socket_ptr);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	4798      	blx	r3
            }
        }
#endif
    }

    if (need_ack == NX_TRUE)
 8013d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d105      	bne.n	8013d68 <_nx_tcp_socket_state_data_check+0x678>
    {

        /* Need to send ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d60:	4619      	mov	r1, r3
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f7fe f9ce 	bl	8012104 <_nx_tcp_packet_send_ack>
    }

    /* Return true since the packet was queued.  */
    return(NX_TRUE);
 8013d68:	2301      	movs	r3, #1
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3758      	adds	r7, #88	; 0x58
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop

08013d74 <_nx_tcp_socket_state_established>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_established(NX_TCP_SOCKET *socket_ptr)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b084      	sub	sp, #16
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
#if !defined(NX_DISABLE_TCP_INFO) || defined(TX_ENABLE_EVENT_TRACE)
NX_IP *ip_ptr;


    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013d82:	60fb      	str	r3, [r7, #12]
#endif
    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d031      	beq.n	8013df2 <_nx_tcp_socket_state_established+0x7e>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d12b      	bne.n	8013df2 <_nx_tcp_socket_state_established+0x7e>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP disconnections count.  */
        ip_ptr -> nx_ip_tcp_disconnections++;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f8d3 35d4 	ldr.w	r3, [r3, #1492]	; 0x5d4
 8013da0:	1c5a      	adds	r2, r3, #1
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSE_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* The FIN bit is set, we need to go into the finished state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2206      	movs	r2, #6
 8013dac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Increment the received sequence.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013db2:	1c5a      	adds	r2, r3, #1
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Loop to release all threads suspended while trying to receive on the socket.  */
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8013db8:	e006      	b.n	8013dc8 <_nx_tcp_socket_state_established+0x54>
        {

            /* Release the head of the receive suspension list. */
            _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8013dc0:	2100      	movs	r1, #0
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7fe fc16 	bl	80125f4 <_nx_tcp_receive_cleanup>
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d1f3      	bne.n	8013dba <_nx_tcp_socket_state_established+0x46>
        }

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	6878      	ldr	r0, [r7, #4]
 8013dda:	f7fe f993 	bl	8012104 <_nx_tcp_packet_send_ack>
#endif /* NX_ENABLE_HTTP_PROXY */
        {

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d004      	beq.n	8013df2 <_nx_tcp_socket_state_established+0x7e>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	4798      	blx	r3
            }
        }
    }
}
 8013df2:	bf00      	nop
 8013df4:	3710      	adds	r7, #16
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}
	...

08013dfc <_nx_tcp_socket_state_fin_wait1>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait1(NX_TCP_SOCKET *socket_ptr)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]


    /* Determine if the peer has proper ACK number but FIN is not sent,
       move into the FIN WAIT 2 state and do nothing else.  */
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d00c      	beq.n	8013e28 <_nx_tcp_socket_state_fin_wait1+0x2c>
        (socket_ptr -> nx_tcp_socket_fin_received == NX_FALSE))
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d107      	bne.n	8013e28 <_nx_tcp_socket_state_fin_wait1+0x2c>
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_FIN_WAIT_2, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* We have a legitimate ACK message.  Simply move into the WAIT FIN 2 state
           for the other side to finish its processing and disconnect.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2208      	movs	r2, #8
 8013e1c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Otherwise, simply clear the FIN timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8013e26:	e04e      	b.n	8013ec6 <_nx_tcp_socket_state_fin_wait1+0xca>
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d02f      	beq.n	8013e92 <_nx_tcp_socket_state_fin_wait1+0x96>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d129      	bne.n	8013e92 <_nx_tcp_socket_state_fin_wait1+0x96>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	220a      	movs	r2, #10
 8013e42:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8013e44:	4b22      	ldr	r3, [pc, #136]	; (8013ed0 <_nx_tcp_socket_state_fin_wait1+0xd4>)
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e52:	1c5a      	adds	r2, r3, #1
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7fe f950 	bl	8012104 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d006      	beq.n	8013e7c <_nx_tcp_socket_state_fin_wait1+0x80>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013e74:	2100      	movs	r1, #0
 8013e76:	4618      	mov	r0, r3
 8013e78:	f000 fa3c 	bl	80142f4 <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d01f      	beq.n	8013ec6 <_nx_tcp_socket_state_fin_wait1+0xca>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	4798      	blx	r3
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8013e90:	e019      	b.n	8013ec6 <_nx_tcp_socket_state_fin_wait1+0xca>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d014      	beq.n	8013ec6 <_nx_tcp_socket_state_fin_wait1+0xca>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d10e      	bne.n	8013ec6 <_nx_tcp_socket_state_fin_wait1+0xca>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSING, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the CLOSING state for simultaneous close situation.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2209      	movs	r2, #9
 8013eac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013eb2:	1c5a      	adds	r2, r3, #1
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f7fe f920 	bl	8012104 <_nx_tcp_packet_send_ack>
    }
}
 8013ec4:	e7ff      	b.n	8013ec6 <_nx_tcp_socket_state_fin_wait1+0xca>
 8013ec6:	bf00      	nop
 8013ec8:	3708      	adds	r7, #8
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	24000838 	.word	0x24000838

08013ed4 <_nx_tcp_socket_state_fin_wait2>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait2(NX_TCP_SOCKET *socket_ptr)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]


    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d02e      	beq.n	8013f44 <_nx_tcp_socket_state_fin_wait2+0x70>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d128      	bne.n	8013f44 <_nx_tcp_socket_state_fin_wait2+0x70>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	220a      	movs	r2, #10
 8013ef6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the timeout as 2MSL (Maximum Segment Lifetime).  */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8013ef8:	4b14      	ldr	r3, [pc, #80]	; (8013f4c <_nx_tcp_socket_state_fin_wait2+0x78>)
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f06:	1c5a      	adds	r2, r3, #1
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f10:	4619      	mov	r1, r3
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f7fe f8f6 	bl	8012104 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d006      	beq.n	8013f30 <_nx_tcp_socket_state_fin_wait2+0x5c>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013f28:	2100      	movs	r1, #0
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f000 f9e2 	bl	80142f4 <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d004      	beq.n	8013f44 <_nx_tcp_socket_state_fin_wait2+0x70>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	4798      	blx	r3
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
}
 8013f44:	bf00      	nop
 8013f46:	3708      	adds	r7, #8
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}
 8013f4c:	24000838 	.word	0x24000838

08013f50 <_nx_tcp_socket_state_last_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_last_ack(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]

    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	68db      	ldr	r3, [r3, #12]
 8013f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d01a      	beq.n	8013f9c <_nx_tcp_socket_state_last_ack+0x4c>
    {

        /*   If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	689a      	ldr	r2, [r3, #8]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d114      	bne.n	8013f9c <_nx_tcp_socket_state_last_ack+0x4c>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	685a      	ldr	r2, [r3, #4]
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d10e      	bne.n	8013f9c <_nx_tcp_socket_state_last_ack+0x4c>
        {

            /* Cleanup the transmission control block.  */
            _nx_tcp_socket_block_cleanup(socket_ptr);
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7fe fbe0 	bl	8012744 <_nx_tcp_socket_block_cleanup>

            /* Determine if we need to wake a thread suspended on the disconnection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d006      	beq.n	8013f9c <_nx_tcp_socket_state_last_ack+0x4c>
            {

                /* Resume suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013f94:	2100      	movs	r1, #0
 8013f96:	4618      	mov	r0, r3
 8013f98:	f000 f9ac 	bl	80142f4 <_nx_tcp_socket_thread_resume>
                (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
            }
#endif
        }
    }
}
 8013f9c:	bf00      	nop
 8013f9e:	3708      	adds	r7, #8
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}

08013fa4 <_nx_tcp_socket_state_syn_received>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_received(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  If it is and
       if it is proper, move into the ESTABLISHED state.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	68db      	ldr	r3, [r3, #12]
 8013fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d04e      	beq.n	8014058 <_nx_tcp_socket_state_syn_received+0xb4>
    {

        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence)
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	689a      	ldr	r2, [r3, #8]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d144      	bne.n	8014050 <_nx_tcp_socket_state_syn_received+0xac>
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Save the window size.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
                tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	68db      	ldr	r3, [r3, #12]
 8013fca:	b29a      	uxth	r2, r3
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	661a      	str	r2, [r3, #96]	; 0x60
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;

#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

            /* Set the initial slow start threshold to be the advertised window size. */
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	641a      	str	r2, [r3, #64]	; 0x40

            /* Set the initial congestion control window size. */
            /* Section 3.1, Page 5, RFC5681. */
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d004      	beq.n	8013fec <_nx_tcp_socket_state_syn_received+0x48>
            {

                /* Set the initial congestion control window size to be the mss. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	665a      	str	r2, [r3, #100]	; 0x64
 8013fea:	e01d      	b.n	8014028 <_nx_tcp_socket_state_syn_received+0x84>
            }
            else
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff0:	009a      	lsls	r2, r3, #2
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	665a      	str	r2, [r3, #100]	; 0x64
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffa:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 8013ffe:	d306      	bcc.n	801400e <_nx_tcp_socket_state_syn_received+0x6a>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014008:	1ad2      	subs	r2, r2, r3
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	665a      	str	r2, [r3, #100]	; 0x64
                }
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014012:	f640 028e 	movw	r2, #2190	; 0x88e
 8014016:	4293      	cmp	r3, r2
 8014018:	d906      	bls.n	8014028 <_nx_tcp_socket_state_syn_received+0x84>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014022:	1ad2      	subs	r2, r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	665a      	str	r2, [r3, #100]	; 0x64
                }
            }

            /* Move into the ESTABLISHED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2205      	movs	r2, #5
 801402c:	645a      	str	r2, [r3, #68]	; 0x44
                socket_ptr -> nx_tcp_socket_keepalive_timeout =  NX_TCP_KEEPALIVE_INITIAL;
                socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
            }
#endif
            /* Update the value of nx_tcp_socket_rx_sequence_acked */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	651a      	str	r2, [r3, #80]	; 0x50

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801403c:	2b00      	cmp	r3, #0
 801403e:	d00b      	beq.n	8014058 <_nx_tcp_socket_state_syn_received+0xb4>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014046:	2100      	movs	r1, #0
 8014048:	4618      	mov	r0, r3
 801404a:	f000 f953 	bl	80142f4 <_nx_tcp_socket_thread_resume>

            /* Send the RST packet.  */
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
        }
    }
}
 801404e:	e003      	b.n	8014058 <_nx_tcp_socket_state_syn_received+0xb4>
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 8014050:	6839      	ldr	r1, [r7, #0]
 8014052:	6878      	ldr	r0, [r7, #4]
 8014054:	f7fe f9e0 	bl	8012418 <_nx_tcp_packet_send_rst>
}
 8014058:	bf00      	nop
 801405a:	3708      	adds	r7, #8
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}

08014060 <_nx_tcp_socket_state_syn_sent>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_sent(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr, NX_PACKET *packet_ptr)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b084      	sub	sp, #16
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	607a      	str	r2, [r7, #4]
#ifndef TX_ENABLE_EVENT_TRACE
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Check if a RST is present. */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014074:	2b00      	cmp	r3, #0
 8014076:	d019      	beq.n	80140ac <_nx_tcp_socket_state_syn_sent+0x4c>
    {

        /* Check if the ACK was acceptable. According to RFC 793, Section 3.9, Page 67.  */
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014080:	2b00      	cmp	r3, #0
 8014082:	f000 80d3 	beq.w	801422c <_nx_tcp_socket_state_syn_sent+0x1cc>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	689a      	ldr	r2, [r3, #8]
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 801408e:	429a      	cmp	r2, r3
 8014090:	f040 80cc 	bne.w	801422c <_nx_tcp_socket_state_syn_sent+0x1cc>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801409a:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 801409e:	3201      	adds	r2, #1
 80140a0:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f7fe fb7a 	bl	801279e <_nx_tcp_socket_connection_reset>
        }

        /* Finished processing, simply return!  */
        return;
 80140aa:	e0bf      	b.n	801422c <_nx_tcp_socket_state_syn_sent+0x1cc>
    }
    /* Determine if a valid SYN/ACK is present.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d05e      	beq.n	8014176 <_nx_tcp_socket_state_syn_sent+0x116>
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	68db      	ldr	r3, [r3, #12]
 80140bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d058      	beq.n	8014176 <_nx_tcp_socket_state_syn_sent+0x116>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	689a      	ldr	r2, [r3, #8]
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d152      	bne.n	8014176 <_nx_tcp_socket_state_syn_sent+0x116>
        /* Yes, this is a proper SYN/ACK message.  We need to send an ACK
           back the other direction before we go into the ESTABLISHED
           state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	685b      	ldr	r3, [r3, #4]
 80140d4:	1c5a      	adds	r2, r3, #1
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	68db      	ldr	r3, [r3, #12]
 80140de:	b29a      	uxth	r2, r3
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	661a      	str	r2, [r3, #96]	; 0x60
        }

#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	2200      	movs	r2, #0
 80140f0:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d004      	beq.n	8014106 <_nx_tcp_socket_state_syn_sent+0xa6>
        {

            /* Set the initial congestion control window size to be the mss. */
            socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	665a      	str	r2, [r3, #100]	; 0x64
 8014104:	e01d      	b.n	8014142 <_nx_tcp_socket_state_syn_sent+0xe2>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801410a:	009a      	lsls	r2, r3, #2
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	665a      	str	r2, [r3, #100]	; 0x64
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014114:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 8014118:	d306      	bcc.n	8014128 <_nx_tcp_socket_state_syn_sent+0xc8>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014122:	1ad2      	subs	r2, r2, r3
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	665a      	str	r2, [r3, #100]	; 0x64
            }
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801412c:	f640 028e 	movw	r2, #2190	; 0x88e
 8014130:	4293      	cmp	r3, r2
 8014132:	d906      	bls.n	8014142 <_nx_tcp_socket_state_syn_sent+0xe2>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801413c:	1ad2      	subs	r2, r2, r3
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	665a      	str	r2, [r3, #100]	; 0x64
            }
        }

        /* Send the ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014146:	4619      	mov	r1, r3
 8014148:	68f8      	ldr	r0, [r7, #12]
 801414a:	f7fd ffdb 	bl	8012104 <_nx_tcp_packet_send_ack>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the ESTABLISHED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2205      	movs	r2, #5
 8014152:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear the socket timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2200      	movs	r2, #0
 8014158:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                (socket_ptr -> nx_tcp_establish_notify)(socket_ptr);
            }
#endif

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014162:	2b00      	cmp	r3, #0
 8014164:	d063      	beq.n	801422e <_nx_tcp_socket_state_syn_sent+0x1ce>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801416c:	2100      	movs	r1, #0
 801416e:	4618      	mov	r0, r3
 8014170:	f000 f8c0 	bl	80142f4 <_nx_tcp_socket_thread_resume>
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 8014174:	e05b      	b.n	801422e <_nx_tcp_socket_state_syn_sent+0x1ce>
            }
        }
    }
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	68db      	ldr	r3, [r3, #12]
 801417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801417e:	2b00      	cmp	r3, #0
 8014180:	d043      	beq.n	801420a <_nx_tcp_socket_state_syn_sent+0x1aa>
             (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)))
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	68db      	ldr	r3, [r3, #12]
 8014186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 801418a:	2b00      	cmp	r3, #0
 801418c:	d13d      	bne.n	801420a <_nx_tcp_socket_state_syn_sent+0x1aa>

        /* Simultaneous Connection Synchronization,
           A SYN message was received.  We need to send both a SYN and ACK and move to the SYN RECEIVED state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	1c5a      	adds	r2, r3, #1
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	b29a      	uxth	r2, r3
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	661a      	str	r2, [r3, #96]	; 0x60
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_rcv_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ae:	009a      	lsls	r2, r3, #2
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	665a      	str	r2, [r3, #100]	; 0x64
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b8:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 80141bc:	d306      	bcc.n	80141cc <_nx_tcp_socket_state_syn_sent+0x16c>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141c6:	1ad2      	subs	r2, r2, r3
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141d0:	f640 028e 	movw	r2, #2190	; 0x88e
 80141d4:	4293      	cmp	r3, r2
 80141d6:	d906      	bls.n	80141e6 <_nx_tcp_socket_state_syn_sent+0x186>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e0:	1ad2      	subs	r2, r2, r3
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	2200      	movs	r2, #0
 80141ea:	669a      	str	r2, [r3, #104]	; 0x68

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_SYN_RECEIVED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the SYN RECEIVED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	2204      	movs	r2, #4
 80141f0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2200      	movs	r2, #0
 80141f6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Send the SYN packet.  */
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141fe:	3b01      	subs	r3, #1
 8014200:	4619      	mov	r1, r3
 8014202:	68f8      	ldr	r0, [r7, #12]
 8014204:	f7fe f93c 	bl	8012480 <_nx_tcp_packet_send_syn>
 8014208:	e011      	b.n	801422e <_nx_tcp_socket_state_syn_sent+0x1ce>
    }
    /* Check for an invalid response to an attempted connection.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	68db      	ldr	r3, [r3, #12]
 801420e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014212:	2b00      	cmp	r3, #0
 8014214:	d00b      	beq.n	801422e <_nx_tcp_socket_state_syn_sent+0x1ce>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number != socket_ptr -> nx_tcp_socket_tx_sequence))
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	689a      	ldr	r2, [r3, #8]
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 801421e:	429a      	cmp	r2, r3
 8014220:	d005      	beq.n	801422e <_nx_tcp_socket_state_syn_sent+0x1ce>
        /* Invalid response was received, it is likely that the other side still
           thinks a previous connection is active.  Send a reset (RST) message to
           the other side to clear any previous connection.  */

        /* Send the RST packet.  */
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 8014222:	68b9      	ldr	r1, [r7, #8]
 8014224:	68f8      	ldr	r0, [r7, #12]
 8014226:	f7fe f8f7 	bl	8012418 <_nx_tcp_packet_send_rst>
 801422a:	e000      	b.n	801422e <_nx_tcp_socket_state_syn_sent+0x1ce>
        return;
 801422c:	bf00      	nop
    }
}
 801422e:	3710      	adds	r7, #16
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}

08014234 <_nx_tcp_socket_state_transmit_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_transmit_check(NX_TCP_SOCKET *socket_ptr)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b084      	sub	sp, #16
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]

ULONG tx_window_current;

    /* Now check to see if there is a thread suspended attempting to transmit.  */
    if (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8014242:	2b00      	cmp	r3, #0
 8014244:	d052      	beq.n	80142ec <_nx_tcp_socket_state_transmit_check+0xb8>
        /* Yes, a thread is suspended attempting to transmit when the transmit window
           is lower than its request size.  Determine if the current transmit window
           size can now accommodate the request.  */

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801424e:	429a      	cmp	r2, r3
 8014250:	d919      	bls.n	8014286 <_nx_tcp_socket_state_transmit_check+0x52>
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014256:	60fb      	str	r3, [r7, #12]

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801425c:	2b01      	cmp	r3, #1
 801425e:	d003      	beq.n	8014268 <_nx_tcp_socket_state_transmit_check+0x34>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 8014264:	2b02      	cmp	r3, #2
 8014266:	d105      	bne.n	8014274 <_nx_tcp_socket_state_transmit_check+0x40>
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801426c:	005b      	lsls	r3, r3, #1
 801426e:	68fa      	ldr	r2, [r7, #12]
 8014270:	4413      	add	r3, r2
 8014272:	60fb      	str	r3, [r7, #12]
            }

            /* Make sure the tx_window_current is less or equal to swnd. */
            if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_window_advertised)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014278:	68fa      	ldr	r2, [r7, #12]
 801427a:	429a      	cmp	r2, r3
 801427c:	d906      	bls.n	801428c <_nx_tcp_socket_state_transmit_check+0x58>
            {
                tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014282:	60fb      	str	r3, [r7, #12]
 8014284:	e002      	b.n	801428c <_nx_tcp_socket_state_transmit_check+0x58>
            }
        }
        else
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801428a:	60fb      	str	r3, [r7, #12]
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014290:	68fa      	ldr	r2, [r7, #12]
 8014292:	429a      	cmp	r2, r3
 8014294:	d905      	bls.n	80142a2 <_nx_tcp_socket_state_transmit_check+0x6e>
        {
            tx_window_current -= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801429a:	68fa      	ldr	r2, [r7, #12]
 801429c:	1ad3      	subs	r3, r2, r3
 801429e:	60fb      	str	r3, [r7, #12]
 80142a0:	e001      	b.n	80142a6 <_nx_tcp_socket_state_transmit_check+0x72>
        }
        else    /* Set tx_window_current to zero. */
        {
            tx_window_current = 0;
 80142a2:	2300      	movs	r3, #0
 80142a4:	60fb      	str	r3, [r7, #12]
        }


        /* Determine if the current transmit window (received from the connected socket)
           is large enough to handle the transmit.  */
        if ((tx_window_current) &&
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d01f      	beq.n	80142ec <_nx_tcp_socket_state_transmit_check+0xb8>
            (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
        if ((tx_window_current) &&
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d217      	bcs.n	80142ec <_nx_tcp_socket_state_transmit_check+0xb8>
        {

            /* Is NetX set up with a windows update callback? */
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d004      	beq.n	80142d0 <_nx_tcp_socket_state_transmit_check+0x9c>
            {

                /* Yes; Call this function when there is a change in transmit windows size. */
                (socket_ptr -> nx_tcp_socket_window_update_notify)(socket_ptr);
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	4798      	blx	r3
            }


            /* Decrement the suspension count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80142d6:	1e5a      	subs	r2, r3, #1
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Remove the suspended thread from the list.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80142e4:	2100      	movs	r1, #0
 80142e6:	4618      	mov	r0, r3
 80142e8:	f000 f804 	bl	80142f4 <_nx_tcp_socket_thread_resume>
        }
    }
}
 80142ec:	bf00      	nop
 80142ee:	3710      	adds	r7, #16
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <_nx_tcp_socket_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_resume(TX_THREAD **suspension_list_head, UINT status)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b088      	sub	sp, #32
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142fe:	f3ef 8310 	mrs	r3, PRIMASK
 8014302:	617b      	str	r3, [r7, #20]
    return(posture);
 8014304:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014306:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014308:	b672      	cpsid	i
    return(int_posture);
 801430a:	693b      	ldr	r3, [r7, #16]

TX_THREAD *thread_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 801430c:	61fb      	str	r3, [r7, #28]

    /* Pickup the thread pointer.  */
    thread_ptr =  *suspension_list_head;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	61bb      	str	r3, [r7, #24]

    /* Determine if there still is a thread suspended.  */
    if (thread_ptr)
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d02c      	beq.n	8014374 <_nx_tcp_socket_thread_resume+0x80>
    {

        /* Determine if there are anymore threads on the suspension list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801431e:	69ba      	ldr	r2, [r7, #24]
 8014320:	429a      	cmp	r2, r3
 8014322:	d103      	bne.n	801432c <_nx_tcp_socket_thread_resume+0x38>
        {

            /* Only this thread is on the suspension list.  Simply set the
               list head to NULL to reflect an empty suspension list.  */
            *suspension_list_head =  TX_NULL;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2200      	movs	r2, #0
 8014328:	601a      	str	r2, [r3, #0]
 801432a:	e00d      	b.n	8014348 <_nx_tcp_socket_thread_resume+0x54>
        {

            /* More than one thread is on the suspension list, we need to
               adjust the link pointers and move the next entry to the
               front of the list.  */
            *suspension_list_head =  thread_ptr -> tx_thread_suspended_next;
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	601a      	str	r2, [r3, #0]

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8014338:	69ba      	ldr	r2, [r7, #24]
 801433a:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 801433c:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8014342:	69ba      	ldr	r2, [r7, #24]
 8014344:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8014346:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Prepare for resumption of the thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014348:	69bb      	ldr	r3, [r7, #24]
 801434a:	2200      	movs	r2, #0
 801434c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801434e:	4b0e      	ldr	r3, [pc, #56]	; (8014388 <_nx_tcp_socket_thread_resume+0x94>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	3301      	adds	r3, #1
 8014354:	4a0c      	ldr	r2, [pc, #48]	; (8014388 <_nx_tcp_socket_thread_resume+0x94>)
 8014356:	6013      	str	r3, [r2, #0]
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	f383 8810 	msr	PRIMASK, r3
}
 8014362:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  status;
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	683a      	ldr	r2, [r7, #0]
 8014368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 801436c:	69b8      	ldr	r0, [r7, #24]
 801436e:	f004 fe65 	bl	801903c <_tx_thread_system_resume>
    {

        /* Nothing was suspended.  Simply restore interrupts.  */
        TX_RESTORE
    }
}
 8014372:	e005      	b.n	8014380 <_nx_tcp_socket_thread_resume+0x8c>
 8014374:	69fb      	ldr	r3, [r7, #28]
 8014376:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	f383 8810 	msr	PRIMASK, r3
}
 801437e:	bf00      	nop
 8014380:	bf00      	nop
 8014382:	3720      	adds	r7, #32
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}
 8014388:	2400090c 	.word	0x2400090c

0801438c <_nx_tcp_socket_transmit_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_transmit_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b08a      	sub	sp, #40	; 0x28
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801439a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2200      	movs	r2, #0
 80143a0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    socket_ptr -> nx_tcp_socket_transmit_sent_tail =  NX_NULL;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2200      	movs	r2, #0
 80143a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 80143ac:	e02c      	b.n	8014408 <_nx_tcp_socket_transmit_queue_flush+0x7c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80143ae:	f3ef 8310 	mrs	r3, PRIMASK
 80143b2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80143b4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80143b6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80143b8:	b672      	cpsid	i
    return(int_posture);
 80143ba:	697b      	ldr	r3, [r7, #20]
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80143bc:	623b      	str	r3, [r7, #32]

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 80143be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c0:	6a1b      	ldr	r3, [r3, #32]
 80143c2:	61fb      	str	r3, [r7, #28]

        /* Mark the packet as no longer being in a TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 80143c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c6:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80143ca:	621a      	str	r2, [r3, #32]

        /* Has the packet been transmitted?  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 80143cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ce:	69db      	ldr	r3, [r3, #28]
 80143d0:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 80143d4:	d109      	bne.n	80143ea <_nx_tcp_socket_transmit_queue_flush+0x5e>
 80143d6:	6a3b      	ldr	r3, [r7, #32]
 80143d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	f383 8810 	msr	PRIMASK, r3
}
 80143e0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 80143e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143e4:	f7fc fb28 	bl	8010a38 <_nx_packet_release>
 80143e8:	e005      	b.n	80143f6 <_nx_tcp_socket_transmit_queue_flush+0x6a>
 80143ea:	6a3b      	ldr	r3, [r7, #32]
 80143ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	f383 8810 	msr	PRIMASK, r3
}
 80143f4:	bf00      	nop
            /* Just restore interrupts.  */
            TX_RESTORE
        }

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014400:	1e5a      	subs	r2, r3, #1
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801440e:	2b00      	cmp	r3, #0
 8014410:	d1cd      	bne.n	80143ae <_nx_tcp_socket_transmit_queue_flush+0x22>
    }
}
 8014412:	bf00      	nop
 8014414:	bf00      	nop
 8014416:	3728      	adds	r7, #40	; 0x28
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <_nx_tcp_transmit_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_transmit_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b08e      	sub	sp, #56	; 0x38
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014426:	f3ef 8310 	mrs	r3, PRIMASK
 801442a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801442e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014430:	b672      	cpsid	i
    return(int_posture);
 8014432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_IP         *ip_ptr;

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 8014434:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801443a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 801443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801443e:	2b00      	cmp	r3, #0
 8014440:	d004      	beq.n	801444c <_nx_tcp_transmit_cleanup+0x30>
 8014442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4a49      	ldr	r2, [pc, #292]	; (801456c <_nx_tcp_transmit_cleanup+0x150>)
 8014448:	4293      	cmp	r3, r2
 801444a:	d006      	beq.n	801445a <_nx_tcp_transmit_cleanup+0x3e>
 801444c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801444e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014450:	6a3b      	ldr	r3, [r7, #32]
 8014452:	f383 8810 	msr	PRIMASK, r3
}
 8014456:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8014458:	e085      	b.n	8014566 <_nx_tcp_transmit_cleanup+0x14a>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801445e:	2b00      	cmp	r3, #0
 8014460:	d106      	bne.n	8014470 <_nx_tcp_transmit_cleanup+0x54>
 8014462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014464:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	f383 8810 	msr	PRIMASK, r3
}
 801446c:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 801446e:	e07a      	b.n	8014566 <_nx_tcp_transmit_cleanup+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014470:	f3ef 8305 	mrs	r3, IPSR
 8014474:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014476:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8014478:	4b3d      	ldr	r3, [pc, #244]	; (8014570 <_nx_tcp_transmit_cleanup+0x154>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4313      	orrs	r3, r2
 801447e:	2b00      	cmp	r3, #0
 8014480:	d104      	bne.n	801448c <_nx_tcp_transmit_cleanup+0x70>
 8014482:	4b3c      	ldr	r3, [pc, #240]	; (8014574 <_nx_tcp_transmit_cleanup+0x158>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4a3c      	ldr	r2, [pc, #240]	; (8014578 <_nx_tcp_transmit_cleanup+0x15c>)
 8014488:	4293      	cmp	r3, r2
 801448a:	d116      	bne.n	80144ba <_nx_tcp_transmit_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	4a3b      	ldr	r2, [pc, #236]	; (801457c <_nx_tcp_transmit_cleanup+0x160>)
 8014490:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8014492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014494:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014498:	62fb      	str	r3, [r7, #44]	; 0x2c
 801449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801449c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	f383 8810 	msr	PRIMASK, r3
}
 80144a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 80144a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a8:	f203 734c 	addw	r3, r3, #1868	; 0x74c
 80144ac:	2200      	movs	r2, #0
 80144ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80144b2:	4618      	mov	r0, r3
 80144b4:	f003 fac2 	bl	8017a3c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 80144b8:	e055      	b.n	8014566 <_nx_tcp_transmit_cleanup+0x14a>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2200      	movs	r2, #0
 80144be:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144c4:	687a      	ldr	r2, [r7, #4]
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d104      	bne.n	80144d4 <_nx_tcp_transmit_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  NX_NULL;
 80144ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144cc:	2200      	movs	r2, #0
 80144ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80144d2:	e00e      	b.n	80144f2 <_nx_tcp_transmit_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80144d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80144e6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80144f0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 80144f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80144f8:	1e5a      	subs	r2, r3, #1
 80144fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014504:	2b0c      	cmp	r3, #12
 8014506:	d128      	bne.n	801455a <_nx_tcp_transmit_cleanup+0x13e>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which transmit error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 8014508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801450c:	2b05      	cmp	r3, #5
 801450e:	d004      	beq.n	801451a <_nx_tcp_transmit_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2238      	movs	r2, #56	; 0x38
 8014514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8014518:	e010      	b.n	801453c <_nx_tcp_transmit_cleanup+0x120>
            }
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 801451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014522:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014526:	429a      	cmp	r2, r3
 8014528:	d204      	bcs.n	8014534 <_nx_tcp_transmit_cleanup+0x118>
            {

                /* Not a queue depth problem, return a window overflow error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_WINDOW_OVERFLOW;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2239      	movs	r2, #57	; 0x39
 801452e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8014532:	e003      	b.n	801453c <_nx_tcp_transmit_cleanup+0x120>
            }
            else
            {

                /* Return a transmit queue exceeded error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_TX_QUEUE_DEPTH;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2249      	movs	r2, #73	; 0x49
 8014538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801453c:	4b10      	ldr	r3, [pc, #64]	; (8014580 <_nx_tcp_transmit_cleanup+0x164>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	3301      	adds	r3, #1
 8014542:	4a0f      	ldr	r2, [pc, #60]	; (8014580 <_nx_tcp_transmit_cleanup+0x164>)
 8014544:	6013      	str	r3, [r2, #0]
 8014546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014548:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	f383 8810 	msr	PRIMASK, r3
}
 8014550:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread!  */
            _tx_thread_system_resume(thread_ptr);
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f004 fd72 	bl	801903c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8014558:	e005      	b.n	8014566 <_nx_tcp_transmit_cleanup+0x14a>
 801455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801455c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	f383 8810 	msr	PRIMASK, r3
}
 8014564:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8014566:	3738      	adds	r7, #56	; 0x38
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}
 801456c:	54435020 	.word	0x54435020
 8014570:	2400008c 	.word	0x2400008c
 8014574:	24000874 	.word	0x24000874
 8014578:	240009bc 	.word	0x240009bc
 801457c:	08010de1 	.word	0x08010de1
 8014580:	2400090c 	.word	0x2400090c

08014584 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b08a      	sub	sp, #40	; 0x28
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014592:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014594:	f3ef 8310 	mrs	r3, PRIMASK
 8014598:	61bb      	str	r3, [r7, #24]
    return(posture);
 801459a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801459c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801459e:	b672      	cpsid	i
    return(int_posture);
 80145a0:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 80145a2:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d043      	beq.n	8014634 <_nx_udp_bind_cleanup+0xb0>
 80145ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d040      	beq.n	8014634 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 80145b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b4:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80145b6:	4a24      	ldr	r2, [pc, #144]	; (8014648 <_nx_udp_bind_cleanup+0xc4>)
 80145b8:	4293      	cmp	r3, r2
 80145ba:	d13b      	bne.n	8014634 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 80145bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145be:	2200      	movs	r2, #0
 80145c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2200      	movs	r2, #0
 80145c6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 80145c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145cc:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d103      	bne.n	80145e0 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 80145d8:	69fb      	ldr	r3, [r7, #28]
 80145da:	2200      	movs	r2, #0
 80145dc:	661a      	str	r2, [r3, #96]	; 0x60
 80145de:	e00d      	b.n	80145fc <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80145e4:	69fb      	ldr	r3, [r7, #28]
 80145e6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80145ec:	687a      	ldr	r2, [r7, #4]
 80145ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80145f0:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80145fa:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014600:	1e5a      	subs	r2, r3, #1
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801460a:	2b0c      	cmp	r3, #12
 801460c:	d112      	bne.n	8014634 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2223      	movs	r2, #35	; 0x23
 8014612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014616:	4b0d      	ldr	r3, [pc, #52]	; (801464c <_nx_udp_bind_cleanup+0xc8>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	3301      	adds	r3, #1
 801461c:	4a0b      	ldr	r2, [pc, #44]	; (801464c <_nx_udp_bind_cleanup+0xc8>)
 801461e:	6013      	str	r3, [r2, #0]
 8014620:	6a3b      	ldr	r3, [r7, #32]
 8014622:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	f383 8810 	msr	PRIMASK, r3
}
 801462a:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f004 fd05 	bl	801903c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8014632:	e005      	b.n	8014640 <_nx_udp_bind_cleanup+0xbc>
 8014634:	6a3b      	ldr	r3, [r7, #32]
 8014636:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	f383 8810 	msr	PRIMASK, r3
}
 801463e:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8014640:	3728      	adds	r7, #40	; 0x28
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
 8014646:	bf00      	nop
 8014648:	55445020 	.word	0x55445020
 801464c:	2400090c 	.word	0x2400090c

08014650 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 8014650:	b480      	push	{r7}
 8014652:	b083      	sub	sp, #12
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	4a05      	ldr	r2, [pc, #20]	; (8014670 <_nx_udp_enable+0x20>)
 801465c:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8014660:	2300      	movs	r3, #0
}
 8014662:	4618      	mov	r0, r3
 8014664:	370c      	adds	r7, #12
 8014666:	46bd      	mov	sp, r7
 8014668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466c:	4770      	bx	lr
 801466e:	bf00      	nop
 8014670:	08014721 	.word	0x08014721

08014674 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b08a      	sub	sp, #40	; 0x28
 8014678:	af00      	add	r7, sp, #0
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	60b9      	str	r1, [r7, #8]
 801467e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	0a1a      	lsrs	r2, r3, #8
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	4413      	add	r3, r2
 801468c:	f003 031f 	and.w	r3, r3, #31
 8014690:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014698:	f04f 31ff 	mov.w	r1, #4294967295
 801469c:	4618      	mov	r0, r3
 801469e:	f003 fd65 	bl	801816c <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80146a2:	68fa      	ldr	r2, [r7, #12]
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80146aa:	009b      	lsls	r3, r3, #2
 80146ac:	4413      	add	r3, r2
 80146ae:	685b      	ldr	r3, [r3, #4]
 80146b0:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 80146b2:	2300      	movs	r3, #0
 80146b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 80146b6:	6a3b      	ldr	r3, [r7, #32]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d010      	beq.n	80146de <_nx_udp_free_port_find+0x6a>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 80146bc:	6a3b      	ldr	r3, [r7, #32]
 80146be:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 80146c0:	6a3b      	ldr	r3, [r7, #32]
 80146c2:	689b      	ldr	r3, [r3, #8]
 80146c4:	68ba      	ldr	r2, [r7, #8]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d102      	bne.n	80146d0 <_nx_udp_free_port_find+0x5c>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 80146ca:	2301      	movs	r3, #1
 80146cc:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 80146ce:	e006      	b.n	80146de <_nx_udp_free_port_find+0x6a>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 80146d0:	6a3b      	ldr	r3, [r7, #32]
 80146d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146d4:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 80146d6:	6a3a      	ldr	r2, [r7, #32]
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d1f0      	bne.n	80146c0 <_nx_udp_free_port_find+0x4c>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80146e4:	4618      	mov	r0, r3
 80146e6:	f003 ffb9 	bl	801865c <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 80146ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d104      	bne.n	80146fa <_nx_udp_free_port_find+0x86>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	68ba      	ldr	r2, [r7, #8]
 80146f4:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 80146f6:	2300      	movs	r3, #0
 80146f8:	e00e      	b.n	8014718 <_nx_udp_free_port_find+0xa4>
        }

        /* Move to the next port.  */
        port++;
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	3301      	adds	r3, #1
 80146fe:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014706:	d302      	bcc.n	801470e <_nx_udp_free_port_find+0x9a>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 8014708:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801470c:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 801470e:	69fa      	ldr	r2, [r7, #28]
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	429a      	cmp	r2, r3
 8014714:	d1b6      	bne.n	8014684 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 8014716:	2345      	movs	r3, #69	; 0x45
}
 8014718:	4618      	mov	r0, r3
 801471a:	3728      	adds	r7, #40	; 0x28
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b096      	sub	sp, #88	; 0x58
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8014730:	1c5a      	adds	r2, r3, #1
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801473c:	2b07      	cmp	r3, #7
 801473e:	d80a      	bhi.n	8014756 <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8d3 359c 	ldr.w	r3, [r3, #1436]	; 0x59c
 8014746:	1c5a      	adds	r2, r3, #1
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 801474e:	6838      	ldr	r0, [r7, #0]
 8014750:	f7fc f972 	bl	8010a38 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8014754:	e21b      	b.n	8014b8e <_nx_udp_packet_receive+0x46e>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	689b      	ldr	r3, [r3, #8]
 801475a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 801475c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	ba1a      	rev	r2, r3
 8014762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014764:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8014766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	ba1a      	rev	r2, r3
 801476c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801476e:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014776:	685b      	ldr	r3, [r3, #4]
 8014778:	0c1b      	lsrs	r3, r3, #16
 801477a:	429a      	cmp	r2, r3
 801477c:	d20a      	bcs.n	8014794 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f8d3 359c 	ldr.w	r3, [r3, #1436]	; 0x59c
 8014784:	1c5a      	adds	r2, r3, #1
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 801478c:	6838      	ldr	r0, [r7, #0]
 801478e:	f7fc f953 	bl	8010a38 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8014792:	e1fc      	b.n	8014b8e <_nx_udp_packet_receive+0x46e>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8014794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	b29b      	uxth	r3, r3
 801479a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 801479c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801479e:	0a1a      	lsrs	r2, r3, #8
 80147a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147a2:	4413      	add	r3, r2
 80147a4:	f003 031f 	and.w	r3, r3, #31
 80147a8:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80147aa:	4b9c      	ldr	r3, [pc, #624]	; (8014a1c <_nx_udp_packet_receive+0x2fc>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d010      	beq.n	80147d4 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80147b2:	f3ef 8305 	mrs	r3, IPSR
 80147b6:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 80147b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147ba:	4b99      	ldr	r3, [pc, #612]	; (8014a20 <_nx_udp_packet_receive+0x300>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4313      	orrs	r3, r2
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d107      	bne.n	80147d4 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80147ca:	f04f 31ff 	mov.w	r1, #4294967295
 80147ce:	4618      	mov	r0, r3
 80147d0:	f003 fccc 	bl	801816c <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147d8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80147dc:	009b      	lsls	r3, r3, #2
 80147de:	4413      	add	r3, r2
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 80147e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d15e      	bne.n	80148a8 <_nx_udp_packet_receive+0x188>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80147f0:	2b04      	cmp	r3, #4
 80147f2:	d114      	bne.n	801481e <_nx_udp_packet_receive+0xfe>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d00f      	beq.n	801481e <_nx_udp_packet_receive+0xfe>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80147fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	ba1a      	rev	r2, r3
 8014804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014806:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8014808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	ba1a      	rev	r2, r3
 801480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014810:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8014812:	2300      	movs	r3, #0
 8014814:	4a83      	ldr	r2, [pc, #524]	; (8014a24 <_nx_udp_packet_receive+0x304>)
 8014816:	6839      	ldr	r1, [r7, #0]
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f7f5 fac1 	bl	8009da0 <_nx_icmpv4_send_error_message>
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
#ifndef NX_DISABLE_ICMPV6_ERROR_MESSAGE
        /* If ICMPv6 is enabled, send Destination unreachable. */
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014824:	2b06      	cmp	r3, #6
 8014826:	d11a      	bne.n	801485e <_nx_udp_packet_receive+0x13e>
        {
        NX_IPV6_HEADER *ip_header;

            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801482c:	637b      	str	r3, [r7, #52]	; 0x34

            if ((ip_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) != (ULONG)0xFF000000)
 801482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014830:	699b      	ldr	r3, [r3, #24]
 8014832:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014836:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801483a:	d010      	beq.n	801485e <_nx_udp_packet_receive+0x13e>
            {

                /* Restore UDP header. */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 801483c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	ba1a      	rev	r2, r3
 8014842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014844:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8014846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014848:	685b      	ldr	r3, [r3, #4]
 801484a:	ba1a      	rev	r2, r3
 801484c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801484e:	605a      	str	r2, [r3, #4]

                /* Send out ICMP error message if dest is not multicast. */
                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 8014850:	2300      	movs	r3, #0
 8014852:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
 8014856:	6839      	ldr	r1, [r7, #0]
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f7f6 ff84 	bl	800b766 <_nx_icmpv6_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 8014864:	1c5a      	adds	r2, r3, #1
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8014872:	1c5a      	adds	r2, r3, #1
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 801487a:	4b68      	ldr	r3, [pc, #416]	; (8014a1c <_nx_udp_packet_receive+0x2fc>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d00e      	beq.n	80148a0 <_nx_udp_packet_receive+0x180>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014882:	f3ef 8305 	mrs	r3, IPSR
 8014886:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8014888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801488a:	4b65      	ldr	r3, [pc, #404]	; (8014a20 <_nx_udp_packet_receive+0x300>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	4313      	orrs	r3, r2
 8014890:	2b00      	cmp	r3, #0
 8014892:	d105      	bne.n	80148a0 <_nx_udp_packet_receive+0x180>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801489a:	4618      	mov	r0, r3
 801489c:	f003 fede 	bl	801865c <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 80148a0:	6838      	ldr	r0, [r7, #0]
 80148a2:	f7fc f8c9 	bl	8010a38 <_nx_packet_release>

        /* Just return.  */
        return;
 80148a6:	e172      	b.n	8014b8e <_nx_udp_packet_receive+0x46e>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 80148a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148aa:	689b      	ldr	r3, [r3, #8]
 80148ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148ae:	429a      	cmp	r2, r3
 80148b0:	d119      	bne.n	80148e6 <_nx_udp_packet_receive+0x1c6>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 80148b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148b4:	699b      	ldr	r3, [r3, #24]
 80148b6:	1c5a      	adds	r2, r3, #1
 80148b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148ba:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148c6:	4413      	add	r3, r2
 80148c8:	f1a3 0208 	sub.w	r2, r3, #8
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 80148d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148d4:	69da      	ldr	r2, [r3, #28]
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148da:	4413      	add	r3, r2
 80148dc:	f1a3 0208 	sub.w	r2, r3, #8
 80148e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148e2:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 80148e4:	e00c      	b.n	8014900 <_nx_udp_packet_receive+0x1e0>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 80148e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148ea:	657b      	str	r3, [r7, #84]	; 0x54
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148f0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80148f4:	009b      	lsls	r3, r3, #2
 80148f6:	4413      	add	r3, r2
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d1d3      	bne.n	80148a8 <_nx_udp_packet_receive+0x188>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8014900:	4b46      	ldr	r3, [pc, #280]	; (8014a1c <_nx_udp_packet_receive+0x2fc>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d00e      	beq.n	8014926 <_nx_udp_packet_receive+0x206>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014908:	f3ef 8305 	mrs	r3, IPSR
 801490c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801490e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014910:	4b43      	ldr	r3, [pc, #268]	; (8014a20 <_nx_udp_packet_receive+0x300>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4313      	orrs	r3, r2
 8014916:	2b00      	cmp	r3, #0
 8014918:	d105      	bne.n	8014926 <_nx_udp_packet_receive+0x206>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014920:	4618      	mov	r0, r3
 8014922:	f003 fe9b 	bl	801865c <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 8014926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014928:	689b      	ldr	r3, [r3, #8]
 801492a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801492c:	429a      	cmp	r2, r3
 801492e:	d04b      	beq.n	80149c8 <_nx_udp_packet_receive+0x2a8>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 8014936:	1c5a      	adds	r2, r3, #1
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8014944:	1c5a      	adds	r2, r3, #1
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014952:	2b04      	cmp	r3, #4
 8014954:	d114      	bne.n	8014980 <_nx_udp_packet_receive+0x260>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00f      	beq.n	8014980 <_nx_udp_packet_receive+0x260>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8014960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	ba1a      	rev	r2, r3
 8014966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014968:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 801496a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	ba1a      	rev	r2, r3
 8014970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014972:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8014974:	2300      	movs	r3, #0
 8014976:	4a2b      	ldr	r2, [pc, #172]	; (8014a24 <_nx_udp_packet_receive+0x304>)
 8014978:	6839      	ldr	r1, [r7, #0]
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f7f5 fa10 	bl	8009da0 <_nx_icmpv4_send_error_message>
        }
#endif /* !NX_DISABLE_IPV4 && !NX_DISABLE_ICMPV4_ERROR_MESSAGE  */

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* If ICMPv6 is enabled, send Destination unreachable. */
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6)
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014986:	2b06      	cmp	r3, #6
 8014988:	d11a      	bne.n	80149c0 <_nx_udp_packet_receive+0x2a0>
        {

        NX_IPV6_HEADER *ip_header;

            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header = (NX_IPV6_HEADER *)packet_ptr -> nx_packet_ip_header;
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801498e:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Send out ICMP error message if dest is not multicast. */
            if ((ip_header -> nx_ip_header_destination_ip[0] & (ULONG)0xFF000000) != (ULONG)0xFF000000)
 8014990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014992:	699b      	ldr	r3, [r3, #24]
 8014994:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014998:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801499c:	d010      	beq.n	80149c0 <_nx_udp_packet_receive+0x2a0>
            {

                /* Restore UDP header. */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 801499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	ba1a      	rev	r2, r3
 80149a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149a6:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80149a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	ba1a      	rev	r2, r3
 80149ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149b0:	605a      	str	r2, [r3, #4]

                NX_ICMPV6_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMPV6_DEST_UNREACHABLE_CODE);
 80149b2:	2300      	movs	r3, #0
 80149b4:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
 80149b8:	6839      	ldr	r1, [r7, #0]
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f7f6 fed3 	bl	800b766 <_nx_icmpv6_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80149c0:	6838      	ldr	r0, [r7, #0]
 80149c2:	f7fc f839 	bl	8010a38 <_nx_packet_release>
        return;
 80149c6:	e0e2      	b.n	8014b8e <_nx_udp_packet_receive+0x46e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80149c8:	f3ef 8310 	mrs	r3, PRIMASK
 80149cc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80149ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80149d0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80149d2:	b672      	cpsid	i
    return(int_posture);
 80149d4:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80149d6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 80149d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	4a12      	ldr	r2, [pc, #72]	; (8014a28 <_nx_udp_packet_receive+0x308>)
 80149de:	4293      	cmp	r3, r2
 80149e0:	d024      	beq.n	8014a2c <_nx_udp_packet_receive+0x30c>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 80149e8:	1c5a      	adds	r2, r3, #1
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 80149f6:	1c5a      	adds	r2, r3, #1
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 80149fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a02:	1c5a      	adds	r2, r3, #1
 8014a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a06:	625a      	str	r2, [r3, #36]	; 0x24
 8014a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a0c:	69fb      	ldr	r3, [r7, #28]
 8014a0e:	f383 8810 	msr	PRIMASK, r3
}
 8014a12:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8014a14:	6838      	ldr	r0, [r7, #0]
 8014a16:	f7fc f80f 	bl	8010a38 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8014a1a:	e0b8      	b.n	8014b8e <_nx_udp_packet_receive+0x46e>
 8014a1c:	24000874 	.word	0x24000874
 8014a20:	2400008c 	.word	0x2400008c
 8014a24:	03030000 	.word	0x03030000
 8014a28:	55445020 	.word	0x55445020
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 8014a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a30:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a36:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	4413      	add	r3, r2
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d00c      	beq.n	8014a60 <_nx_udp_packet_receive+0x340>
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f8d3 3648 	ldr.w	r3, [r3, #1608]	; 0x648
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d107      	bne.n	8014a60 <_nx_udp_packet_receive+0x340>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 8014a50:	687a      	ldr	r2, [r7, #4]
 8014a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a54:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8014a58:	009b      	lsls	r3, r3, #2
 8014a5a:	4413      	add	r3, r2
 8014a5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a5e:	605a      	str	r2, [r3, #4]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8014a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (thread_ptr)
 8014a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d035      	beq.n	8014ad8 <_nx_udp_packet_receive+0x3b8>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8014a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d103      	bne.n	8014a7e <_nx_udp_packet_receive+0x35e>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8014a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a78:	2200      	movs	r2, #0
 8014a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8014a7c:	e00d      	b.n	8014a9a <_nx_udp_packet_receive+0x37a>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8014a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a84:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8014a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8014a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8014a8e:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8014a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8014a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a96:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8014a98:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8014a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a9e:	1e5a      	subs	r2, r3, #1
 8014aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014aa2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8014aaa:	4b3a      	ldr	r3, [pc, #232]	; (8014b94 <_nx_udp_packet_receive+0x474>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	4a38      	ldr	r2, [pc, #224]	; (8014b94 <_nx_udp_packet_receive+0x474>)
 8014ab2:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8014ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ab8:	683a      	ldr	r2, [r7, #0]
 8014aba:	601a      	str	r2, [r3, #0]
 8014abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014abe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	f383 8810 	msr	PRIMASK, r3
}
 8014ac6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8014ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aca:	2200      	movs	r2, #0
 8014acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8014ad0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014ad2:	f004 fab3 	bl	801903c <_tx_thread_system_resume>
 8014ad6:	e054      	b.n	8014b82 <_nx_udp_packet_receive+0x462>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8014ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d03c      	beq.n	8014b5a <_nx_udp_packet_receive+0x43a>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8014ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014ae4:	683a      	ldr	r2, [r7, #0]
 8014ae6:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8014ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014aea:	683a      	ldr	r2, [r7, #0]
 8014aec:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	2200      	movs	r2, #0
 8014af2:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8014af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014af8:	1c5a      	adds	r2, r3, #1
 8014afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014afc:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 8014afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 8014b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d921      	bls.n	8014b4e <_nx_udp_packet_receive+0x42e>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8014b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b0e:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	69da      	ldr	r2, [r3, #28]
 8014b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b16:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 8014b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b1c:	1e5a      	subs	r2, r3, #1
 8014b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b20:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8014b28:	1c5a      	adds	r2, r3, #1
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 8014b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b34:	1c5a      	adds	r2, r3, #1
 8014b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b38:	625a      	str	r2, [r3, #36]	; 0x24
 8014b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b3c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	f383 8810 	msr	PRIMASK, r3
}
 8014b44:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8014b46:	6838      	ldr	r0, [r7, #0]
 8014b48:	f7fb ff76 	bl	8010a38 <_nx_packet_release>
 8014b4c:	e019      	b.n	8014b82 <_nx_udp_packet_receive+0x462>
 8014b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b50:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	f383 8810 	msr	PRIMASK, r3
}
 8014b58:	e013      	b.n	8014b82 <_nx_udp_packet_receive+0x462>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 8014b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b5c:	683a      	ldr	r2, [r7, #0]
 8014b5e:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8014b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b62:	683a      	ldr	r2, [r7, #0]
 8014b64:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8014b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b70:	1c5a      	adds	r2, r3, #1
 8014b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b74:	63da      	str	r2, [r3, #60]	; 0x3c
 8014b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b78:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f383 8810 	msr	PRIMASK, r3
}
 8014b80:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 8014b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d002      	beq.n	8014b8e <_nx_udp_packet_receive+0x46e>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 8014b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014b8c:	4798      	blx	r3
    }
}
 8014b8e:	3758      	adds	r7, #88	; 0x58
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	2400090c 	.word	0x2400090c

08014b98 <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b088      	sub	sp, #32
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
 8014ba0:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ba6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8014bac:	617b      	str	r3, [r7, #20]
    return(posture);
 8014bae:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014bb0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014bb2:	b672      	cpsid	i
    return(int_posture);
 8014bb4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 8014bb6:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d03d      	beq.n	8014c3c <_nx_udp_receive_cleanup+0xa4>
 8014bc0:	69fb      	ldr	r3, [r7, #28]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d03a      	beq.n	8014c3c <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8014bca:	4a21      	ldr	r2, [pc, #132]	; (8014c50 <_nx_udp_receive_cleanup+0xb8>)
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d135      	bne.n	8014c3c <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bda:	687a      	ldr	r2, [r7, #4]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d103      	bne.n	8014be8 <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	2200      	movs	r2, #0
 8014be4:	659a      	str	r2, [r3, #88]	; 0x58
 8014be6:	e00d      	b.n	8014c04 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014bec:	69fb      	ldr	r3, [r7, #28]
 8014bee:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8014bf8:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8014c02:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c08:	1e5a      	subs	r2, r3, #1
 8014c0a:	69fb      	ldr	r3, [r7, #28]
 8014c0c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c12:	2b0c      	cmp	r3, #12
 8014c14:	d112      	bne.n	8014c3c <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2201      	movs	r2, #1
 8014c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014c1e:	4b0d      	ldr	r3, [pc, #52]	; (8014c54 <_nx_udp_receive_cleanup+0xbc>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	3301      	adds	r3, #1
 8014c24:	4a0b      	ldr	r2, [pc, #44]	; (8014c54 <_nx_udp_receive_cleanup+0xbc>)
 8014c26:	6013      	str	r3, [r2, #0]
 8014c28:	69bb      	ldr	r3, [r7, #24]
 8014c2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	f383 8810 	msr	PRIMASK, r3
}
 8014c32:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f004 fa01 	bl	801903c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8014c3a:	e005      	b.n	8014c48 <_nx_udp_receive_cleanup+0xb0>
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	f383 8810 	msr	PRIMASK, r3
}
 8014c46:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8014c48:	3720      	adds	r7, #32
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}
 8014c4e:	bf00      	nop
 8014c50:	55445020 	.word	0x55445020
 8014c54:	2400090c 	.word	0x2400090c

08014c58 <_nx_udp_socket_bind>:
/*                                            corrected the random value, */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b092      	sub	sp, #72	; 0x48
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 8014c64:	2300      	movs	r3, #0
 8014c66:	643b      	str	r3, [r7, #64]	; 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	68db      	ldr	r3, [r3, #12]
 8014c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c70:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014c74:	f04f 31ff 	mov.w	r1, #4294967295
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f003 fa77 	bl	801816c <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d103      	bne.n	8014c8e <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d007      	beq.n	8014c9e <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c90:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014c94:	4618      	mov	r0, r3
 8014c96:	f003 fce1 	bl	801865c <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 8014c9a:	2322      	movs	r3, #34	; 0x22
 8014c9c:	e100      	b.n	8014ea0 <_nx_udp_socket_bind+0x248>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d119      	bne.n	8014cd8 <_nx_udp_socket_bind+0x80>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(((ULONG)NX_RAND()) % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8014ca4:	f005 fbea 	bl	801a47c <rand>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014cae:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8014cb2:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	f107 0208 	add.w	r2, r7, #8
 8014cba:	4619      	mov	r1, r3
 8014cbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014cbe:	f7ff fcd9 	bl	8014674 <_nx_udp_free_port_find>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d007      	beq.n	8014cd8 <_nx_udp_socket_bind+0x80>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cca:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f003 fcc4 	bl	801865c <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 8014cd4:	2345      	movs	r3, #69	; 0x45
 8014cd6:	e0e3      	b.n	8014ea0 <_nx_udp_socket_bind+0x248>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 8014cd8:	68ba      	ldr	r2, [r7, #8]
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	0a1a      	lsrs	r2, r3, #8
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	f003 031f 	and.w	r3, r3, #31
 8014cea:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8014cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	4413      	add	r3, r2
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 8014cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d00f      	beq.n	8014d22 <_nx_udp_socket_bind+0xca>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 8014d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d04:	637b      	str	r3, [r7, #52]	; 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 8014d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d08:	689a      	ldr	r2, [r3, #8]
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d007      	beq.n	8014d20 <_nx_udp_socket_bind+0xc8>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8014d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d14:	647b      	str	r3, [r7, #68]	; 0x44
        } while (search_ptr != end_ptr);
 8014d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d1f3      	bne.n	8014d06 <_nx_udp_socket_bind+0xae>
 8014d1e:	e000      	b.n	8014d22 <_nx_udp_socket_bind+0xca>
                break;
 8014d20:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 8014d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d004      	beq.n	8014d32 <_nx_udp_socket_bind+0xda>
 8014d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d2a:	689a      	ldr	r2, [r3, #8]
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d04c      	beq.n	8014dcc <_nx_udp_socket_bind+0x174>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d32:	f3ef 8310 	mrs	r3, PRIMASK
 8014d36:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014d3a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d3c:	b672      	cpsid	i
    return(int_posture);
 8014d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8014d40:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 8014d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d026      	beq.n	8014d96 <_nx_udp_socket_bind+0x13e>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 8014d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d4c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	4413      	add	r3, r2
 8014d54:	685a      	ldr	r2, [r3, #4]
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8014d5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d5e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8014d62:	009b      	lsls	r3, r3, #2
 8014d64:	4413      	add	r3, r2
 8014d66:	685b      	ldr	r3, [r3, #4]
 8014d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 8014d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d72:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8014d76:	009b      	lsls	r3, r3, #2
 8014d78:	4413      	add	r3, r2
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d7e:	68fa      	ldr	r2, [r7, #12]
 8014d80:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 8014d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d86:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	4413      	add	r3, r2
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	68fa      	ldr	r2, [r7, #12]
 8014d92:	651a      	str	r2, [r3, #80]	; 0x50
 8014d94:	e00d      	b.n	8014db2 <_nx_udp_socket_bind+0x15a>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	68fa      	ldr	r2, [r7, #12]
 8014d9a:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	68fa      	ldr	r2, [r7, #12]
 8014da0:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 8014da2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8014daa:	009b      	lsls	r3, r3, #2
 8014dac:	4413      	add	r3, r2
 8014dae:	68fa      	ldr	r2, [r7, #12]
 8014db0:	605a      	str	r2, [r3, #4]
 8014db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014db6:	6a3b      	ldr	r3, [r7, #32]
 8014db8:	f383 8810 	msr	PRIMASK, r3
}
 8014dbc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dc0:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f003 fc49 	bl	801865c <_tx_mutex_put>
 8014dca:	e068      	b.n	8014e9e <_nx_udp_socket_bind+0x246>
    }
    else if (wait_option)
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d05d      	beq.n	8014e8e <_nx_udp_socket_bind+0x236>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8014dd6:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014dd8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014dda:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ddc:	b672      	cpsid	i
    return(int_posture);
 8014dde:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8014de0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 8014de2:	4b31      	ldr	r3, [pc, #196]	; (8014ea8 <_nx_udp_socket_bind+0x250>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 8014de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dea:	4a30      	ldr	r2, [pc, #192]	; (8014eac <_nx_udp_socket_bind+0x254>)
 8014dec:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8014dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df0:	68fa      	ldr	r2, [r7, #12]
 8014df2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014df8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014dfe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 8014e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d012      	beq.n	8014e2e <_nx_udp_socket_bind+0x1d6>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 8014e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e0e:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 8014e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e14:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e18:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 8014e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e22:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8014e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e2a:	675a      	str	r2, [r3, #116]	; 0x74
 8014e2c:	e008      	b.n	8014e40 <_nx_udp_socket_bind+0x1e8>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 8014e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e32:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 8014e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e38:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 8014e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e3e:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 8014e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e44:	1c5a      	adds	r2, r3, #1
 8014e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e48:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8014e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e4c:	220c      	movs	r2, #12
 8014e4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e52:	2201      	movs	r2, #1
 8014e54:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8014e56:	4b16      	ldr	r3, [pc, #88]	; (8014eb0 <_nx_udp_socket_bind+0x258>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	4a14      	ldr	r2, [pc, #80]	; (8014eb0 <_nx_udp_socket_bind+0x258>)
 8014e5e:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	64da      	str	r2, [r3, #76]	; 0x4c
 8014e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e68:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	f383 8810 	msr	PRIMASK, r3
}
 8014e70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e74:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f003 fbef 	bl	801865c <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 8014e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014e80:	f004 f9dc 	bl	801923c <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 8014e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8014e8c:	e007      	b.n	8014e9e <_nx_udp_socket_bind+0x246>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e90:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014e94:	4618      	mov	r0, r3
 8014e96:	f003 fbe1 	bl	801865c <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 8014e9a:	2323      	movs	r3, #35	; 0x23
 8014e9c:	643b      	str	r3, [r7, #64]	; 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 8014e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3748      	adds	r7, #72	; 0x48
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	24000874 	.word	0x24000874
 8014eac:	08014585 	.word	0x08014585
 8014eb0:	2400090c 	.word	0x2400090c

08014eb4 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b08a      	sub	sp, #40	; 0x28
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	60f8      	str	r0, [r7, #12]
 8014ebc:	60b9      	str	r1, [r7, #8]
 8014ebe:	607a      	str	r2, [r7, #4]
 8014ec0:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 8014ec2:	2278      	movs	r2, #120	; 0x78
 8014ec4:	2100      	movs	r1, #0
 8014ec6:	68b8      	ldr	r0, [r7, #8]
 8014ec8:	f005 fa2c 	bl	801a324 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	68fa      	ldr	r2, [r7, #12]
 8014ed0:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	683a      	ldr	r2, [r7, #0]
 8014edc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8014ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014eec:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	2200      	movs	r2, #0
 8014efe:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	2200      	movs	r2, #0
 8014f04:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	2200      	movs	r2, #0
 8014f0a:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	2200      	movs	r2, #0
 8014f16:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f1c:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	2200      	movs	r2, #0
 8014f22:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	2200      	movs	r2, #0
 8014f28:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014f36:	f04f 31ff 	mov.w	r1, #4294967295
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f003 f916 	bl	801816c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f40:	f3ef 8310 	mrs	r3, PRIMASK
 8014f44:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014f46:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014f48:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f4a:	b672      	cpsid	i
    return(int_posture);
 8014f4c:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 8014f4e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	4a1f      	ldr	r2, [pc, #124]	; (8014fd0 <_nx_udp_socket_create+0x11c>)
 8014f54:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d015      	beq.n	8014f8c <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8014f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f68:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8014f70:	68ba      	ldr	r2, [r7, #8]
 8014f72:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 8014f74:	6a3b      	ldr	r3, [r7, #32]
 8014f76:	68ba      	ldr	r2, [r7, #8]
 8014f78:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	6a3a      	ldr	r2, [r7, #32]
 8014f7e:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	f8d3 2914 	ldr.w	r2, [r3, #2324]	; 0x914
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	669a      	str	r2, [r3, #104]	; 0x68
 8014f8a:	e009      	b.n	8014fa0 <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	68ba      	ldr	r2, [r7, #8]
 8014f90:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	68ba      	ldr	r2, [r7, #8]
 8014f98:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	68ba      	ldr	r2, [r7, #8]
 8014f9e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
 8014fa6:	1c5a      	adds	r2, r3, #1
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
 8014fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	f383 8810 	msr	PRIMASK, r3
}
 8014fb8:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f003 fb4b 	bl	801865c <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8014fc6:	2300      	movs	r3, #0
}
 8014fc8:	4618      	mov	r0, r3
 8014fca:	3728      	adds	r7, #40	; 0x28
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}
 8014fd0:	55445020 	.word	0x55445020

08014fd4 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b09a      	sub	sp, #104	; 0x68
 8014fd8:	af02      	add	r7, sp, #8
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8014fea:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8014fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8014fee:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ff0:	b672      	cpsid	i
    return(int_posture);
 8014ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 8014ff4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d107      	bne.n	801500e <_nx_udp_socket_receive+0x3a>
 8014ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015000:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015004:	f383 8810 	msr	PRIMASK, r3
}
 8015008:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 801500a:	2324      	movs	r3, #36	; 0x24
 801500c:	e138      	b.n	8015280 <_nx_udp_socket_receive+0x2ac>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015012:	2b00      	cmp	r3, #0
 8015014:	d01a      	beq.n	801504c <_nx_udp_socket_receive+0x78>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	69da      	ldr	r2, [r3, #28]
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801502c:	2b00      	cmp	r3, #0
 801502e:	d102      	bne.n	8015036 <_nx_udp_socket_receive+0x62>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2200      	movs	r2, #0
 8015034:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801503a:	1e5a      	subs	r2, r3, #1
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	63da      	str	r2, [r3, #60]	; 0x3c
 8015040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015042:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015046:	f383 8810 	msr	PRIMASK, r3
}
 801504a:	e05e      	b.n	801510a <_nx_udp_socket_receive+0x136>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d050      	beq.n	80150f4 <_nx_udp_socket_receive+0x120>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 8015052:	4b8d      	ldr	r3, [pc, #564]	; (8015288 <_nx_udp_socket_receive+0x2b4>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	653b      	str	r3, [r7, #80]	; 0x50

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 8015058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801505a:	4a8c      	ldr	r2, [pc, #560]	; (801528c <_nx_udp_socket_receive+0x2b8>)
 801505c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 801505e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015060:	68fa      	ldr	r2, [r7, #12]
 8015062:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8015064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015066:	68ba      	ldr	r2, [r7, #8]
 8015068:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801506e:	2b00      	cmp	r3, #0
 8015070:	d012      	beq.n	8015098 <_nx_udp_socket_receive+0xc4>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 8015076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015078:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801507e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 8015080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015082:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801508a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801508c:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015092:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015094:	675a      	str	r2, [r3, #116]	; 0x74
 8015096:	e008      	b.n	80150aa <_nx_udp_socket_receive+0xd6>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801509c:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 801509e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150a2:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 80150a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150a8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80150ae:	1c5a      	adds	r2, r3, #1
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80150b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150b6:	220c      	movs	r2, #12
 80150b8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80150ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150bc:	2201      	movs	r2, #1
 80150be:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80150c0:	4b73      	ldr	r3, [pc, #460]	; (8015290 <_nx_udp_socket_receive+0x2bc>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	3301      	adds	r3, #1
 80150c6:	4a72      	ldr	r2, [pc, #456]	; (8015290 <_nx_udp_socket_receive+0x2bc>)
 80150c8:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80150ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150cc:	687a      	ldr	r2, [r7, #4]
 80150ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80150d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150d2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d6:	f383 8810 	msr	PRIMASK, r3
}
 80150da:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80150dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80150de:	f004 f8ad 	bl	801923c <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 80150e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d00e      	beq.n	801510a <_nx_udp_socket_receive+0x136>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 80150ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80150f2:	e0c5      	b.n	8015280 <_nx_udp_socket_receive+0x2ac>
 80150f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150f8:	6a3b      	ldr	r3, [r7, #32]
 80150fa:	f383 8810 	msr	PRIMASK, r3
}
 80150fe:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	2200      	movs	r2, #0
 8015104:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 8015106:	2301      	movs	r3, #1
 8015108:	e0ba      	b.n	8015280 <_nx_udp_socket_receive+0x2ac>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	689b      	ldr	r3, [r3, #8]
 8015110:	64fb      	str	r3, [r7, #76]	; 0x4c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015116:	2b00      	cmp	r3, #0
 8015118:	d105      	bne.n	8015126 <_nx_udp_socket_receive+0x152>
 801511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801511c:	3304      	adds	r3, #4
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	b29b      	uxth	r3, r3
 8015122:	2b00      	cmp	r3, #0
 8015124:	d106      	bne.n	8015134 <_nx_udp_socket_receive+0x160>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 801512e:	2b06      	cmp	r3, #6
 8015130:	f040 8097 	bne.w	8015262 <_nx_udp_socket_receive+0x28e>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 8015134:	2300      	movs	r3, #0
 8015136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015138:	2300      	movs	r3, #0
 801513a:	65bb      	str	r3, [r7, #88]	; 0x58
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	64bb      	str	r3, [r7, #72]	; 0x48
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 8015142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015144:	689b      	ldr	r3, [r3, #8]
 8015146:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8015148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801514a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801514e:	2b04      	cmp	r3, #4
 8015150:	d108      	bne.n	8015164 <_nx_udp_socket_receive+0x190>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 8015152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015156:	643b      	str	r3, [r7, #64]	; 0x40
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 8015158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801515a:	330c      	adds	r3, #12
 801515c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 801515e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015160:	3310      	adds	r3, #16
 8015162:	65bb      	str	r3, [r7, #88]	; 0x58
                }
#endif /* !NX_DISABLE_IPV4  */

#ifdef FEATURE_NX_IPV6
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V6) /*  IPv6 */
 8015164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801516a:	2b06      	cmp	r3, #6
 801516c:	d108      	bne.n	8015180 <_nx_udp_socket_receive+0x1ac>
                {
                NX_IPV6_HEADER *ipv6_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv6_header = (NX_IPV6_HEADER *)(current_ptr -> nx_packet_ip_header);
 801516e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015172:	63fb      	str	r3, [r7, #60]	; 0x3c
                    ip_src_addr = (&ipv6_header -> nx_ip_header_source_ip[0]);
 8015174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015176:	3308      	adds	r3, #8
 8015178:	65fb      	str	r3, [r7, #92]	; 0x5c
                    ip_dest_addr = (&ipv6_header -> nx_ip_header_destination_ip[0]);
 801517a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801517c:	3318      	adds	r3, #24
 801517e:	65bb      	str	r3, [r7, #88]	; 0x58

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8015180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	ba1a      	rev	r2, r3
 8015186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015188:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 801518a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	ba1a      	rev	r2, r3
 8015190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015192:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 8015194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 8015198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801519a:	9300      	str	r3, [sp, #0]
 801519c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801519e:	2111      	movs	r1, #17
 80151a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80151a2:	f7f7 f83c 	bl	800c21e <_nx_ip_checksum_compute>
 80151a6:	4603      	mov	r3, r0
 80151a8:	63bb      	str	r3, [r7, #56]	; 0x38
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80151aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	ba1a      	rev	r2, r3
 80151b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151b2:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80151b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	ba1a      	rev	r2, r3
 80151ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151bc:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 80151be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c0:	43db      	mvns	r3, r3
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Determine if it is valid.  */
                if (checksum == 0)
 80151c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d049      	beq.n	8015260 <_nx_udp_socket_receive+0x28c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80151cc:	f3ef 8310 	mrs	r3, PRIMASK
 80151d0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80151d2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80151d4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80151d6:	b672      	cpsid	i
    return(int_posture);
 80151d8:	697b      	ldr	r3, [r7, #20]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 80151da:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	f8d3 25a8 	ldr.w	r2, [r3, #1448]	; 0x5a8
 80151e4:	3201      	adds	r2, #1
 80151e6:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	f8d3 259c 	ldr.w	r2, [r3, #1436]	; 0x59c
 80151f2:	3201      	adds	r2, #1
 80151f4:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151fc:	1c5a      	adds	r2, r3, #1
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	68db      	ldr	r3, [r3, #12]
 8015206:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 801520a:	3a01      	subs	r2, #1
 801520c:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	68db      	ldr	r3, [r3, #12]
 8015214:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801521e:	1ad2      	subs	r2, r2, r3
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	68db      	ldr	r3, [r3, #12]
 8015224:	3208      	adds	r2, #8
 8015226:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	699b      	ldr	r3, [r3, #24]
 801522e:	1e5a      	subs	r2, r3, #1
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	69da      	ldr	r2, [r3, #28]
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801523e:	1ad3      	subs	r3, r2, r3
 8015240:	f103 0208 	add.w	r2, r3, #8
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	61da      	str	r2, [r3, #28]
 8015248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801524a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801524c:	69fb      	ldr	r3, [r7, #28]
 801524e:	f383 8810 	msr	PRIMASK, r3
}
 8015252:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	4618      	mov	r0, r3
 801525a:	f7fb fbed 	bl	8010a38 <_nx_packet_release>
        TX_DISABLE
 801525e:	e6c2      	b.n	8014fe6 <_nx_udp_socket_receive+0x12>
                    break;
 8015260:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	3a08      	subs	r2, #8
 801526e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	689a      	ldr	r2, [r3, #8]
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	3208      	adds	r2, #8
 801527c:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 801527e:	2300      	movs	r3, #0
}
 8015280:	4618      	mov	r0, r3
 8015282:	3760      	adds	r7, #96	; 0x60
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}
 8015288:	24000874 	.word	0x24000874
 801528c:	08014b99 	.word	0x08014b99
 8015290:	2400090c 	.word	0x2400090c

08015294 <_nxd_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nxd_icmp_enable(NX_IP *ip_ptr)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b082      	sub	sp, #8
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]


    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NXD_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80152a2:	f04f 31ff 	mov.w	r1, #4294967295
 80152a6:	4618      	mov	r0, r3
 80152a8:	f002 ff60 	bl	801816c <_tx_mutex_get>

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    /* ICMPv4 and ICMPv6 share the same packet_receive routine.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	4a1b      	ldr	r2, [pc, #108]	; (801531c <_nxd_icmp_enable+0x88>)
 80152b0:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

#ifndef NX_DISABLE_IPV4
    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	4a1a      	ldr	r2, [pc, #104]	; (8015320 <_nxd_icmp_enable+0x8c>)
 80152b8:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* Start the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	4a19      	ldr	r2, [pc, #100]	; (8015324 <_nxd_icmp_enable+0x90>)
 80152c0:	f8c3 2874 	str.w	r2, [r3, #2164]	; 0x874
#endif

#ifdef FEATURE_NX_IPV6
    /* Setup the ICMPv6 packet process routine */
    ip_ptr -> nx_ip_icmpv6_packet_process = _nx_icmpv6_packet_process;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	4a18      	ldr	r2, [pc, #96]	; (8015328 <_nxd_icmp_enable+0x94>)
 80152c8:	f8c3 2878 	str.w	r2, [r3, #2168]	; 0x878

    /* Setup the ND Cache periodic update routine */
    ip_ptr -> nx_nd_cache_fast_periodic_update = _nx_nd_cache_fast_periodic_update;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	4a17      	ldr	r2, [pc, #92]	; (801532c <_nxd_icmp_enable+0x98>)
 80152d0:	f8c3 287c 	str.w	r2, [r3, #2172]	; 0x87c
    ip_ptr -> nx_nd_cache_slow_periodic_update = _nx_nd_cache_slow_periodic_update;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	4a16      	ldr	r2, [pc, #88]	; (8015330 <_nxd_icmp_enable+0x9c>)
 80152d8:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880

    /* Initialize tables used in ICMPv6 protocols. */
    /* Clear the ND Cache table. */
    memset(&ip_ptr -> nx_ipv6_nd_cache[0], 0, sizeof(ND_CACHE_ENTRY) * NX_IPV6_NEIGHBOR_CACHE_SIZE);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80152e2:	f44f 7250 	mov.w	r2, #832	; 0x340
 80152e6:	2100      	movs	r1, #0
 80152e8:	4618      	mov	r0, r3
 80152ea:	f005 f81b 	bl	801a324 <memset>

    /* Clear the destination table. */
    memset(&ip_ptr -> nx_ipv6_destination_table[0], 0, sizeof(NX_IPV6_DESTINATION_ENTRY) * NX_IPV6_DESTINATION_TABLE_SIZE);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	3390      	adds	r3, #144	; 0x90
 80152f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80152f6:	2100      	movs	r1, #0
 80152f8:	4618      	mov	r0, r3
 80152fa:	f005 f813 	bl	801a324 <memset>

    /* Set the initial size to zero. */
    ip_ptr -> nx_ipv6_destination_table_size = 0;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	2200      	movs	r2, #0
 8015302:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    ip_ptr -> nx_destination_table_periodic_update = _nx_icmpv6_destination_table_periodic_update;
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY  */

#endif /* FEATURE_NX_IPV6 */

    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801530c:	4618      	mov	r0, r3
 801530e:	f003 f9a5 	bl	801865c <_tx_mutex_put>

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8015312:	2300      	movs	r3, #0
}
 8015314:	4618      	mov	r0, r3
 8015316:	3708      	adds	r7, #8
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	080099a1 	.word	0x080099a1
 8015320:	08009a61 	.word	0x08009a61
 8015324:	08009abf 	.word	0x08009abf
 8015328:	0800a2c3 	.word	0x0800a2c3
 801532c:	0800ff31 	.word	0x0800ff31
 8015330:	08010177 	.word	0x08010177

08015334 <_nxd_ipv6_address_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_address_get(NX_IP *ip_ptr, UINT address_index, NXD_ADDRESS *ip_address,
                            ULONG *prefix_length, UINT *interface_index)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b08a      	sub	sp, #40	; 0x28
 8015338:	af00      	add	r7, sp, #0
 801533a:	60f8      	str	r0, [r7, #12]
 801533c:	60b9      	str	r1, [r7, #8]
 801533e:	607a      	str	r2, [r7, #4]
 8015340:	603b      	str	r3, [r7, #0]
#ifdef TX_ENABLE_EVENT_TRACE
ULONG             ip_address_lsw;
#endif /* TX_ENABLE_EVENT_TRACE */


    status = NX_SUCCESS;
 8015342:	2300      	movs	r3, #0
 8015344:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801534c:	f04f 31ff 	mov.w	r1, #4294967295
 8015350:	4618      	mov	r0, r3
 8015352:	f002 ff0b 	bl	801816c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015356:	f3ef 8310 	mrs	r3, PRIMASK
 801535a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801535c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801535e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015360:	b672      	cpsid	i
    return(int_posture);
 8015362:	697b      	ldr	r3, [r7, #20]
    /* Disable interrupts.  */
    TX_DISABLE
 8015364:	623b      	str	r3, [r7, #32]

    /* Get the ip address.  */
    interface_ipv6_address_next = &ip_ptr -> nx_ipv6_address[address_index];
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	015b      	lsls	r3, r3, #5
 801536a:	3310      	adds	r3, #16
 801536c:	68fa      	ldr	r2, [r7, #12]
 801536e:	4413      	add	r3, r2
 8015370:	61fb      	str	r3, [r7, #28]

    /* Check if this is a valid IP address. */
    if (interface_ipv6_address_next -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	789b      	ldrb	r3, [r3, #2]
 8015376:	2b04      	cmp	r3, #4
 8015378:	d00a      	beq.n	8015390 <_nxd_ipv6_address_get+0x5c>
    {

        /* No, the address is not validated yet. */

        /* Zero out the return values. */
        *prefix_length = 0;
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	2200      	movs	r2, #0
 801537e:	601a      	str	r2, [r3, #0]
        SET_UNSPECIFIED_ADDRESS(ip_address -> nxd_ip_address.v6);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	3304      	adds	r3, #4
 8015384:	4618      	mov	r0, r3
 8015386:	f7fa fa3a 	bl	800f7fe <SET_UNSPECIFIED_ADDRESS>

        /* Return the error status. */
        status = NX_NO_INTERFACE_ADDRESS;
 801538a:	2350      	movs	r3, #80	; 0x50
 801538c:	627b      	str	r3, [r7, #36]	; 0x24
 801538e:	e01a      	b.n	80153c6 <_nxd_ipv6_address_get+0x92>
    }
    else
    {

        /* Record the interface index.  */
        *interface_index = (UINT)ip_ptr -> nx_ipv6_address[address_index].nxd_ipv6_address_attached -> nx_interface_index;
 8015390:	68fa      	ldr	r2, [r7, #12]
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	015b      	lsls	r3, r3, #5
 8015396:	4413      	add	r3, r2
 8015398:	3314      	adds	r3, #20
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	79db      	ldrb	r3, [r3, #7]
 801539e:	461a      	mov	r2, r3
 80153a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a2:	601a      	str	r2, [r3, #0]

        /* We have a valid address. Mark with the IPv6 stamp. */
        ip_address -> nxd_ip_version = NX_IP_VERSION_V6;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2206      	movs	r2, #6
 80153a8:	601a      	str	r2, [r3, #0]

        /* Copy interface IP address from the address entry in the IP address table into the return address structure. */
        COPY_IPV6_ADDRESS(interface_ipv6_address_next -> nxd_ipv6_address,
 80153aa:	69fb      	ldr	r3, [r7, #28]
 80153ac:	f103 0208 	add.w	r2, r3, #8
                          ip_address -> nxd_ip_address.v6);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	3304      	adds	r3, #4
        COPY_IPV6_ADDRESS(interface_ipv6_address_next -> nxd_ipv6_address,
 80153b4:	4619      	mov	r1, r3
 80153b6:	4610      	mov	r0, r2
 80153b8:	f7fa fa3a 	bl	800f830 <COPY_IPV6_ADDRESS>

        /* Copy interface IP address prefix length from the address entry in the IP address table into the return prefix length. */
        *prefix_length = interface_ipv6_address_next -> nxd_ipv6_address_prefix_length;
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	78db      	ldrb	r3, [r3, #3]
 80153c0:	461a      	mov	r2, r3
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	601a      	str	r2, [r3, #0]
 80153c6:	6a3b      	ldr	r3, [r7, #32]
 80153c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	f383 8810 	msr	PRIMASK, r3
}
 80153d0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80153d8:	4618      	mov	r0, r3
 80153da:	f003 f93f 	bl	801865c <_tx_mutex_put>
    /* If trace is enabled, insert this info into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NXD_TRACE_IPV6_INTERFACE_ADDRESS_GET, ip_ptr, ip_address_lsw, *prefix_length, address_index, NX_TRACE_IP_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Return completion status.  */
    return(status);
 80153de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3728      	adds	r7, #40	; 0x28
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <_nxd_ipv6_address_set>:
/*                                            change notification,        */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_address_set(NX_IP *ip_ptr, UINT interface_index, NXD_ADDRESS *ip_address, ULONG prefix_length, UINT *address_index)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b092      	sub	sp, #72	; 0x48
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	60f8      	str	r0, [r7, #12]
 80153f0:	60b9      	str	r1, [r7, #8]
 80153f2:	607a      	str	r2, [r7, #4]
 80153f4:	603b      	str	r3, [r7, #0]
VOID                (*address_change_notify)(NX_IP *, UINT, UINT, UINT, ULONG *);
VOID                (*address_change_notify_internal)(NX_IP *, UINT, UINT, UINT, ULONG *);
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */
NXD_IPV6_ADDRESS *ipv6_addr;
NXD_IPV6_ADDRESS *interface_ipv6_address;
UINT              index = (UINT)0xFFFFFFFF;
 80153f6:	f04f 33ff 	mov.w	r3, #4294967295
 80153fa:	643b      	str	r3, [r7, #64]	; 0x40
UINT              i;
ULONG             multicast_address[4];

    /* Place protection while the IPv6 address is modified. */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015402:	f04f 31ff 	mov.w	r1, #4294967295
 8015406:	4618      	mov	r0, r3
 8015408:	f002 feb0 	bl	801816c <_tx_mutex_get>

    if (ip_address)
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d040      	beq.n	8015494 <_nxd_ipv6_address_set+0xac>
    {

        /* Perform duplicate address detection.  */
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 8015412:	2300      	movs	r3, #0
 8015414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015416:	e03a      	b.n	801548e <_nxd_ipv6_address_set+0xa6>
        {
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 8015418:	68fa      	ldr	r2, [r7, #12]
 801541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801541c:	015b      	lsls	r3, r3, #5
 801541e:	4413      	add	r3, r2
 8015420:	3310      	adds	r3, #16
 8015422:	781b      	ldrb	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d02f      	beq.n	8015488 <_nxd_ipv6_address_set+0xa0>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[0] == ip_address -> nxd_ip_address.v6[0]) &&
 8015428:	68fa      	ldr	r2, [r7, #12]
 801542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801542c:	015b      	lsls	r3, r3, #5
 801542e:	4413      	add	r3, r2
 8015430:	3318      	adds	r3, #24
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	685b      	ldr	r3, [r3, #4]
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 8015438:	429a      	cmp	r2, r3
 801543a:	d125      	bne.n	8015488 <_nxd_ipv6_address_set+0xa0>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[1] == ip_address -> nxd_ip_address.v6[1]) &&
 801543c:	68fa      	ldr	r2, [r7, #12]
 801543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015440:	015b      	lsls	r3, r3, #5
 8015442:	4413      	add	r3, r2
 8015444:	331c      	adds	r3, #28
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	689b      	ldr	r3, [r3, #8]
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[0] == ip_address -> nxd_ip_address.v6[0]) &&
 801544c:	429a      	cmp	r2, r3
 801544e:	d11b      	bne.n	8015488 <_nxd_ipv6_address_set+0xa0>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[2] == ip_address -> nxd_ip_address.v6[2]) &&
 8015450:	68fa      	ldr	r2, [r7, #12]
 8015452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015454:	3301      	adds	r3, #1
 8015456:	015b      	lsls	r3, r3, #5
 8015458:	4413      	add	r3, r2
 801545a:	681a      	ldr	r2, [r3, #0]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	68db      	ldr	r3, [r3, #12]
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[1] == ip_address -> nxd_ip_address.v6[1]) &&
 8015460:	429a      	cmp	r2, r3
 8015462:	d111      	bne.n	8015488 <_nxd_ipv6_address_set+0xa0>
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[3] == ip_address -> nxd_ip_address.v6[3]))
 8015464:	68fa      	ldr	r2, [r7, #12]
 8015466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015468:	015b      	lsls	r3, r3, #5
 801546a:	4413      	add	r3, r2
 801546c:	3324      	adds	r3, #36	; 0x24
 801546e:	681a      	ldr	r2, [r3, #0]
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	691b      	ldr	r3, [r3, #16]
                (ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address[2] == ip_address -> nxd_ip_address.v6[2]) &&
 8015474:	429a      	cmp	r2, r3
 8015476:	d107      	bne.n	8015488 <_nxd_ipv6_address_set+0xa0>
            {

                /* The IPv6 address already exists.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801547e:	4618      	mov	r0, r3
 8015480:	f003 f8ec 	bl	801865c <_tx_mutex_put>
                return(NX_DUPLICATED_ENTRY);
 8015484:	2352      	movs	r3, #82	; 0x52
 8015486:	e140      	b.n	801570a <_nxd_ipv6_address_set+0x322>
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 8015488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801548a:	3301      	adds	r3, #1
 801548c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801548e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015490:	2b02      	cmp	r3, #2
 8015492:	d9c1      	bls.n	8015418 <_nxd_ipv6_address_set+0x30>
            }
        }
    }

    /* Find an avaiable IPv6 address structure. */
    for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 8015494:	2300      	movs	r3, #0
 8015496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015498:	e00d      	b.n	80154b6 <_nxd_ipv6_address_set+0xce>
    {
        /* Look for invalid entries. */
        if (!ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid)
 801549a:	68fa      	ldr	r2, [r7, #12]
 801549c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801549e:	015b      	lsls	r3, r3, #5
 80154a0:	4413      	add	r3, r2
 80154a2:	3310      	adds	r3, #16
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d102      	bne.n	80154b0 <_nxd_ipv6_address_set+0xc8>
        {

            /* An available entry is found. */
            index = i;
 80154aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154ac:	643b      	str	r3, [r7, #64]	; 0x40
            break;
 80154ae:	e005      	b.n	80154bc <_nxd_ipv6_address_set+0xd4>
    for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 80154b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154b2:	3301      	adds	r3, #1
 80154b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80154b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154b8:	2b02      	cmp	r3, #2
 80154ba:	d9ee      	bls.n	801549a <_nxd_ipv6_address_set+0xb2>
        }
    }

    if (index == (UINT)0xFFFFFFFF)
 80154bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154c2:	d107      	bne.n	80154d4 <_nxd_ipv6_address_set+0xec>
    {
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80154ca:	4618      	mov	r0, r3
 80154cc:	f003 f8c6 	bl	801865c <_tx_mutex_put>
        return(NX_NO_MORE_ENTRIES);
 80154d0:	2317      	movs	r3, #23
 80154d2:	e11a      	b.n	801570a <_nxd_ipv6_address_set+0x322>
    }

    if (address_index)
 80154d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d002      	beq.n	80154e0 <_nxd_ipv6_address_set+0xf8>
    {
        *address_index = index;
 80154da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80154de:	601a      	str	r2, [r3, #0]
    }

    /* Pointer to the IPv6 address that needs to be modified. */
    ipv6_addr = &(ip_ptr -> nx_ipv6_address[index]);
 80154e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154e2:	015b      	lsls	r3, r3, #5
 80154e4:	3310      	adds	r3, #16
 80154e6:	68fa      	ldr	r2, [r7, #12]
 80154e8:	4413      	add	r3, r2
 80154ea:	63bb      	str	r3, [r7, #56]	; 0x38

    /* The address is null.  */
    if ((!ip_address) && (prefix_length == 10))
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d167      	bne.n	80155c2 <_nxd_ipv6_address_set+0x1da>
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	2b0a      	cmp	r3, #10
 80154f6:	d164      	bne.n	80155c2 <_nxd_ipv6_address_set+0x1da>
        /* Construct Interface Identifier, following RFC2464, page 3 */
        /* Assign link local address.
           LL address is constructed by:
           0xFE80::{64 bit interface ID}.  See RFC 4291 */

        word2 = ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_msw << 16 |
 80154f8:	68fa      	ldr	r2, [r7, #12]
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	214c      	movs	r1, #76	; 0x4c
 80154fe:	fb01 f303 	mul.w	r3, r1, r3
 8015502:	4413      	add	r3, r2
 8015504:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	041a      	lsls	r2, r3, #16
            ((ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_lsw & 0xFF000000) >> 16) | 0xFF;
 801550c:	68f9      	ldr	r1, [r7, #12]
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	204c      	movs	r0, #76	; 0x4c
 8015512:	fb00 f303 	mul.w	r3, r0, r3
 8015516:	440b      	add	r3, r1
 8015518:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	0c1b      	lsrs	r3, r3, #16
 8015520:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        word2 = ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_msw << 16 |
 8015524:	4313      	orrs	r3, r2
 8015526:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 801552a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fix the 2nd lower-order bit of the 1st byte, RFC2464, page 3 */
        word2 = (word2 & 0xFDFFFFFF) | (~(word2 | 0xFDFFFFFF));
 801552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801552e:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
 8015532:	637b      	str	r3, [r7, #52]	; 0x34
        word3 = (ip_ptr -> nx_ip_interface[interface_index].nx_interface_physical_address_lsw & 0x00FFFFFF) | 0xFE000000;
 8015534:	68fa      	ldr	r2, [r7, #12]
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	214c      	movs	r1, #76	; 0x4c
 801553a:	fb01 f303 	mul.w	r3, r1, r3
 801553e:	4413      	add	r3, r2
 8015540:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801554a:	f043 437e 	orr.w	r3, r3, #4261412864	; 0xfe000000
 801554e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Point to interface link list head  */
        interface_ipv6_address = ip_ptr -> nx_ip_interface[interface_index].nxd_interface_ipv6_address_list_head;
 8015550:	68fa      	ldr	r2, [r7, #12]
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	214c      	movs	r1, #76	; 0x4c
 8015556:	fb01 f303 	mul.w	r3, r1, r3
 801555a:	4413      	add	r3, r2
 801555c:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	647b      	str	r3, [r7, #68]	; 0x44

        /* Perform link local duplicate address detection.  */
        while (interface_ipv6_address)
 8015564:	e01d      	b.n	80155a2 <_nxd_ipv6_address_set+0x1ba>
        {
            if ((interface_ipv6_address -> nxd_ipv6_address[0] == 0xFE800000) &&
 8015566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015568:	689b      	ldr	r3, [r3, #8]
 801556a:	f113 7fc0 	cmn.w	r3, #25165824	; 0x1800000
 801556e:	d115      	bne.n	801559c <_nxd_ipv6_address_set+0x1b4>
                (interface_ipv6_address -> nxd_ipv6_address[1] == 0x00000000) &&
 8015570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015572:	68db      	ldr	r3, [r3, #12]
            if ((interface_ipv6_address -> nxd_ipv6_address[0] == 0xFE800000) &&
 8015574:	2b00      	cmp	r3, #0
 8015576:	d111      	bne.n	801559c <_nxd_ipv6_address_set+0x1b4>
                (interface_ipv6_address -> nxd_ipv6_address[2] == word2) &&
 8015578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801557a:	691b      	ldr	r3, [r3, #16]
                (interface_ipv6_address -> nxd_ipv6_address[1] == 0x00000000) &&
 801557c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801557e:	429a      	cmp	r2, r3
 8015580:	d10c      	bne.n	801559c <_nxd_ipv6_address_set+0x1b4>
                (interface_ipv6_address -> nxd_ipv6_address[3] == word3))
 8015582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015584:	695b      	ldr	r3, [r3, #20]
                (interface_ipv6_address -> nxd_ipv6_address[2] == word2) &&
 8015586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015588:	429a      	cmp	r2, r3
 801558a:	d107      	bne.n	801559c <_nxd_ipv6_address_set+0x1b4>
            {

                /* The IPv6 address already exists.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015592:	4618      	mov	r0, r3
 8015594:	f003 f862 	bl	801865c <_tx_mutex_put>
                return(NX_DUPLICATED_ENTRY);
 8015598:	2352      	movs	r3, #82	; 0x52
 801559a:	e0b6      	b.n	801570a <_nxd_ipv6_address_set+0x322>
            }

            /* Walk down the list.  */
            interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 801559c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801559e:	699b      	ldr	r3, [r3, #24]
 80155a0:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface_ipv6_address)
 80155a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d1de      	bne.n	8015566 <_nxd_ipv6_address_set+0x17e>
        }

        /* Set up the link local address. */
        ipv6_addr -> nxd_ipv6_address[0] = 0xFE800000;
 80155a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155aa:	4a5a      	ldr	r2, [pc, #360]	; (8015714 <_nxd_ipv6_address_set+0x32c>)
 80155ac:	609a      	str	r2, [r3, #8]
        ipv6_addr -> nxd_ipv6_address[1] = 0x00000000;
 80155ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b0:	2200      	movs	r2, #0
 80155b2:	60da      	str	r2, [r3, #12]
        ipv6_addr -> nxd_ipv6_address[2] = word2;
 80155b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155b8:	611a      	str	r2, [r3, #16]
        ipv6_addr -> nxd_ipv6_address[3] = word3;
 80155ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155be:	615a      	str	r2, [r3, #20]
    {
 80155c0:	e01b      	b.n	80155fa <_nxd_ipv6_address_set+0x212>
    }
    else if (ip_address != NX_NULL)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d010      	beq.n	80155ea <_nxd_ipv6_address_set+0x202>
    {
        ipv6_addr -> nxd_ipv6_address[0] = ip_address -> nxd_ip_address.v6[0];
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	685a      	ldr	r2, [r3, #4]
 80155cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155ce:	609a      	str	r2, [r3, #8]
        ipv6_addr -> nxd_ipv6_address[1] = ip_address -> nxd_ip_address.v6[1];
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	689a      	ldr	r2, [r3, #8]
 80155d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155d6:	60da      	str	r2, [r3, #12]
        ipv6_addr -> nxd_ipv6_address[2] = ip_address -> nxd_ip_address.v6[2];
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	68da      	ldr	r2, [r3, #12]
 80155dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155de:	611a      	str	r2, [r3, #16]
        ipv6_addr -> nxd_ipv6_address[3] = ip_address -> nxd_ip_address.v6[3];
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	691a      	ldr	r2, [r3, #16]
 80155e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155e6:	615a      	str	r2, [r3, #20]
 80155e8:	e007      	b.n	80155fa <_nxd_ipv6_address_set+0x212>
    }
    else
    {
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80155f0:	4618      	mov	r0, r3
 80155f2:	f003 f833 	bl	801865c <_tx_mutex_put>
        return(NX_IP_ADDRESS_ERROR);
 80155f6:	2321      	movs	r3, #33	; 0x21
 80155f8:	e087      	b.n	801570a <_nxd_ipv6_address_set+0x322>
    }

    ipv6_addr -> nxd_ipv6_address_valid = NX_TRUE;
 80155fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155fc:	2201      	movs	r2, #1
 80155fe:	701a      	strb	r2, [r3, #0]
    ipv6_addr -> nxd_ipv6_address_type = NX_IP_VERSION_V6;
 8015600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015602:	2206      	movs	r2, #6
 8015604:	705a      	strb	r2, [r3, #1]
    ipv6_addr -> nxd_ipv6_address_prefix_length = (UCHAR)(prefix_length & 0xFF);
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	b2da      	uxtb	r2, r3
 801560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801560c:	70da      	strb	r2, [r3, #3]
    ipv6_addr -> nxd_ipv6_address_next = NX_NULL;
 801560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015610:	2200      	movs	r2, #0
 8015612:	619a      	str	r2, [r3, #24]

    /* Attach to the interface.  */
    ipv6_addr -> nxd_ipv6_address_attached = &ip_ptr -> nx_ip_interface[interface_index];
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	224c      	movs	r2, #76	; 0x4c
 8015618:	fb02 f303 	mul.w	r3, r2, r3
 801561c:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8015620:	68fa      	ldr	r2, [r7, #12]
 8015622:	4413      	add	r3, r2
 8015624:	1d1a      	adds	r2, r3, #4
 8015626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015628:	605a      	str	r2, [r3, #4]

    /* Point to interface link list head  */
    interface_ipv6_address = ip_ptr -> nx_ip_interface[interface_index].nxd_interface_ipv6_address_list_head;
 801562a:	68fa      	ldr	r2, [r7, #12]
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	214c      	movs	r1, #76	; 0x4c
 8015630:	fb01 f303 	mul.w	r3, r1, r3
 8015634:	4413      	add	r3, r2
 8015636:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Walk to the end of the list.  */
    while (interface_ipv6_address)
 801563e:	e00b      	b.n	8015658 <_nxd_ipv6_address_set+0x270>
    {

        /* If the next entry does not exist, we already reach the end of the list.
            Add the IPv6 address towards the end. */
        if (interface_ipv6_address -> nxd_ipv6_address_next)
 8015640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015642:	699b      	ldr	r3, [r3, #24]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d003      	beq.n	8015650 <_nxd_ipv6_address_set+0x268>
        {
            interface_ipv6_address = interface_ipv6_address -> nxd_ipv6_address_next;
 8015648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801564a:	699b      	ldr	r3, [r3, #24]
 801564c:	647b      	str	r3, [r7, #68]	; 0x44
 801564e:	e003      	b.n	8015658 <_nxd_ipv6_address_set+0x270>
        }
        else
        {
            interface_ipv6_address -> nxd_ipv6_address_next = ipv6_addr;
 8015650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015654:	619a      	str	r2, [r3, #24]
            break;
 8015656:	e002      	b.n	801565e <_nxd_ipv6_address_set+0x276>
    while (interface_ipv6_address)
 8015658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801565a:	2b00      	cmp	r3, #0
 801565c:	d1f0      	bne.n	8015640 <_nxd_ipv6_address_set+0x258>
        }
    }

    /* Check whether the head is NULL  */
    if (interface_ipv6_address == NX_NULL)
 801565e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015660:	2b00      	cmp	r3, #0
 8015662:	d109      	bne.n	8015678 <_nxd_ipv6_address_set+0x290>
    {
        /* This interface does not have IPv6 addresses yet.  */
        ip_ptr -> nx_ip_interface[interface_index].nxd_interface_ipv6_address_list_head = ipv6_addr;
 8015664:	68fa      	ldr	r2, [r7, #12]
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	214c      	movs	r1, #76	; 0x4c
 801566a:	fb01 f303 	mul.w	r3, r1, r3
 801566e:	4413      	add	r3, r2
 8015670:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8015674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015676:	601a      	str	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NXD_TRACE_IPV6_INTERFACE_ADDRESS_SET, ip_ptr, ipv6_addr -> nxd_ipv6_address[3], prefix_length, index, NX_TRACE_IP_EVENTS, 0, 0);

    /* Set the configuration type to manual. */
    ipv6_addr -> nxd_ipv6_address_ConfigurationMethod = NX_IPV6_ADDRESS_MANUAL_CONFIG;
 8015678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801567a:	2201      	movs	r2, #1
 801567c:	775a      	strb	r2, [r3, #29]

    /* Release the IP protection.  nx_ipv6_multicast_join would need to obtain the mutex. */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015684:	4618      	mov	r0, r3
 8015686:	f002 ffe9 	bl	801865c <_tx_mutex_put>
    /* Join the solicited-node multicast group */
    /* FF02::1:FFXX:XXXX */
    SET_SOLICITED_NODE_MULTICAST_ADDRESS(multicast_address, ipv6_addr -> nxd_ipv6_address);
 801568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801568c:	f103 0208 	add.w	r2, r3, #8
 8015690:	f107 0310 	add.w	r3, r7, #16
 8015694:	4611      	mov	r1, r2
 8015696:	4618      	mov	r0, r3
 8015698:	f7fa f8e8 	bl	800f86c <SET_SOLICITED_NODE_MULTICAST_ADDRESS>
    _nx_ipv6_multicast_join(ip_ptr, &multicast_address[0], ipv6_addr -> nxd_ipv6_address_attached);
 801569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801569e:	685a      	ldr	r2, [r3, #4]
 80156a0:	f107 0310 	add.w	r3, r7, #16
 80156a4:	4619      	mov	r1, r3
 80156a6:	68f8      	ldr	r0, [r7, #12]
 80156a8:	f7f9 f884 	bl	800e7b4 <_nx_ipv6_multicast_join>

    /* Obtain the IP protection again. */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80156b2:	f04f 31ff 	mov.w	r1, #4294967295
 80156b6:	4618      	mov	r0, r3
 80156b8:	f002 fd58 	bl	801816c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80156bc:	f3ef 8310 	mrs	r3, PRIMASK
 80156c0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80156c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80156c4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80156c6:	b672      	cpsid	i
    return(int_posture);
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    TX_DISABLE
 80156ca:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifndef NX_DISABLE_IPV6_DAD

    /* If ICMPv6 is enabled, mark the address as tentative, per RFC2462.
       If DAD is not enabled, start the address in VALID state. */
    if (ip_ptr -> nx_ip_icmpv6_packet_process)
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d006      	beq.n	80156e4 <_nxd_ipv6_address_set+0x2fc>
    {

        /* Start DAD */
        ipv6_addr -> nxd_ipv6_address_state                 = NX_IPV6_ADDR_STATE_TENTATIVE;
 80156d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d8:	2201      	movs	r2, #1
 80156da:	709a      	strb	r2, [r3, #2]
        ipv6_addr -> nxd_ipv6_address_DupAddrDetectTransmit = NX_IPV6_DAD_TRANSMITS;
 80156dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156de:	2203      	movs	r2, #3
 80156e0:	771a      	strb	r2, [r3, #28]
 80156e2:	e005      	b.n	80156f0 <_nxd_ipv6_address_set+0x308>
    else
    {

        /* If ICMPv6 is not enabled on this interface, the DAD process is eliminated,
           so mark the input IP address directly as valid. */
        ipv6_addr -> nxd_ipv6_address_state                 = NX_IPV6_ADDR_STATE_VALID;
 80156e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156e6:	2204      	movs	r2, #4
 80156e8:	709a      	strb	r2, [r3, #2]
        ipv6_addr -> nxd_ipv6_address_DupAddrDetectTransmit = 0;
 80156ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ec:	2200      	movs	r2, #0
 80156ee:	771a      	strb	r2, [r3, #28]
 80156f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156f4:	6a3b      	ldr	r3, [r7, #32]
 80156f6:	f383 8810 	msr	PRIMASK, r3
}
 80156fa:	bf00      	nop
    /* Pickup the current notification callback and additional information pointers.  */
    address_change_notify =  ip_ptr -> nx_ipv6_address_change_notify;
    address_change_notify_internal =  ip_ptr -> nx_ipv6_address_change_notify_internal;
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */
    /* Release the protection while the IPv6 address is modified. */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015702:	4618      	mov	r0, r3
 8015704:	f002 ffaa 	bl	801865c <_tx_mutex_put>
        (address_change_notify_internal)(ip_ptr, NX_IPV6_ADDRESS_MANUAL_CONFIG, interface_index, index, &ipv6_addr -> nxd_ipv6_address[0]);
    }
#endif /* NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY */

    /* Return completion status.  */
    return(NX_SUCCESS);
 8015708:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(address_index);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 801570a:	4618      	mov	r0, r3
 801570c:	3748      	adds	r7, #72	; 0x48
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}
 8015712:	bf00      	nop
 8015714:	fe800000 	.word	0xfe800000

08015718 <_nxd_ipv6_default_router_add_internal>:
                                            ULONG *router_addr,
                                            ULONG router_lifetime,
                                            NX_INTERFACE *if_ptr,
                                            INT router_type,
                                            NX_IPV6_DEFAULT_ROUTER_ENTRY **_ret)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b08a      	sub	sp, #40	; 0x28
 801571c:	af00      	add	r7, sp, #0
 801571e:	60f8      	str	r0, [r7, #12]
 8015720:	60b9      	str	r1, [r7, #8]
 8015722:	607a      	str	r2, [r7, #4]
 8015724:	603b      	str	r3, [r7, #0]

UINT                          i;
UINT                          first_available = (UINT)0xFFFFFFFF;
 8015726:	f04f 33ff 	mov.w	r3, #4294967295
 801572a:	623b      	str	r3, [r7, #32]
ULONG                         address_type;
NX_IPV6_DEFAULT_ROUTER_ENTRY *ret = NX_NULL;
 801572c:	2300      	movs	r3, #0
 801572e:	61bb      	str	r3, [r7, #24]
NXD_IPV6_ADDRESS             *ipv6_address;


    /* If a router pointer is provided, initialize it to NULL. */
    if (_ret)
 8015730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015732:	2b00      	cmp	r3, #0
 8015734:	d002      	beq.n	801573c <_nxd_ipv6_default_router_add_internal+0x24>
    {
        *_ret = NX_NULL;
 8015736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015738:	2200      	movs	r2, #0
 801573a:	601a      	str	r2, [r3, #0]
    }

    /* Verify gateway address is reachable. */
    address_type = IPv6_Address_Type(router_addr);
 801573c:	68b8      	ldr	r0, [r7, #8]
 801573e:	f7fa f917 	bl	800f970 <IPv6_Address_Type>
 8015742:	6178      	str	r0, [r7, #20]
    if (address_type & IPV6_ADDRESS_UNICAST)
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	2b00      	cmp	r3, #0
 8015748:	da23      	bge.n	8015792 <_nxd_ipv6_default_router_add_internal+0x7a>
    {

        /* It is a unicast address. */
        if (address_type & IPV6_ADDRESS_GLOBAL)
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	f003 0304 	and.w	r3, r3, #4
 8015750:	2b00      	cmp	r3, #0
 8015752:	d020      	beq.n	8015796 <_nxd_ipv6_default_router_add_internal+0x7e>
        {

            /* It is a global address. */
            /* Point to the first address unit in the interface. */
            ipv6_address = if_ptr -> nxd_interface_ipv6_address_list_head;
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	6a1b      	ldr	r3, [r3, #32]
 8015758:	61fb      	str	r3, [r7, #28]
            while (ipv6_address)
 801575a:	e010      	b.n	801577e <_nxd_ipv6_default_router_add_internal+0x66>
            {

                /* Check whether destination is on link. */
                if (_nxd_ipv6_find_max_prefix_length(router_addr, ipv6_address -> nxd_ipv6_address,
 801575c:	69fb      	ldr	r3, [r7, #28]
 801575e:	f103 0108 	add.w	r1, r3, #8
                                                     ipv6_address -> nxd_ipv6_address_prefix_length) >= ipv6_address -> nxd_ipv6_address_prefix_length)
 8015762:	69fb      	ldr	r3, [r7, #28]
 8015764:	78db      	ldrb	r3, [r3, #3]
                if (_nxd_ipv6_find_max_prefix_length(router_addr, ipv6_address -> nxd_ipv6_address,
 8015766:	461a      	mov	r2, r3
 8015768:	68b8      	ldr	r0, [r7, #8]
 801576a:	f000 fb18 	bl	8015d9e <_nxd_ipv6_find_max_prefix_length>
 801576e:	4602      	mov	r2, r0
                                                     ipv6_address -> nxd_ipv6_address_prefix_length) >= ipv6_address -> nxd_ipv6_address_prefix_length)
 8015770:	69fb      	ldr	r3, [r7, #28]
 8015772:	78db      	ldrb	r3, [r3, #3]
                if (_nxd_ipv6_find_max_prefix_length(router_addr, ipv6_address -> nxd_ipv6_address,
 8015774:	429a      	cmp	r2, r3
 8015776:	d206      	bcs.n	8015786 <_nxd_ipv6_default_router_add_internal+0x6e>
                    /* Router address is on link. */
                    break;
                }

                /* Point to the next address unit. */
                ipv6_address = ipv6_address -> nxd_ipv6_address_next;
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	699b      	ldr	r3, [r3, #24]
 801577c:	61fb      	str	r3, [r7, #28]
            while (ipv6_address)
 801577e:	69fb      	ldr	r3, [r7, #28]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d1eb      	bne.n	801575c <_nxd_ipv6_default_router_add_internal+0x44>
 8015784:	e000      	b.n	8015788 <_nxd_ipv6_default_router_add_internal+0x70>
                    break;
 8015786:	bf00      	nop
            }

            if (ipv6_address == NX_NULL)
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d103      	bne.n	8015796 <_nxd_ipv6_default_router_add_internal+0x7e>
            {

                /* Gateway address is unreachable. */
                return(NX_IP_ADDRESS_ERROR);
 801578e:	2321      	movs	r3, #33	; 0x21
 8015790:	e08a      	b.n	80158a8 <_nxd_ipv6_default_router_add_internal+0x190>
    }
    else
    {

        /* Gateway address is unreachable. */
        return(NX_IP_ADDRESS_ERROR);
 8015792:	2321      	movs	r3, #33	; 0x21
 8015794:	e088      	b.n	80158a8 <_nxd_ipv6_default_router_add_internal+0x190>
    }

    /* Search through the list for an already existing entry. */
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8015796:	2300      	movs	r3, #0
 8015798:	627b      	str	r3, [r7, #36]	; 0x24
 801579a:	e049      	b.n	8015830 <_nxd_ipv6_default_router_add_internal+0x118>
    {

        /* Does this slot contain a valid router? */
        if (ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag)
 801579c:	68f9      	ldr	r1, [r7, #12]
 801579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157a0:	4613      	mov	r3, r2
 80157a2:	00db      	lsls	r3, r3, #3
 80157a4:	1a9b      	subs	r3, r3, r2
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	440b      	add	r3, r1
 80157aa:	f603 43d4 	addw	r3, r3, #3284	; 0xcd4
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d034      	beq.n	801581e <_nxd_ipv6_default_router_add_internal+0x106>
        {

            /* Check for matching router address. */
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 80157b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157b6:	4613      	mov	r3, r2
 80157b8:	00db      	lsls	r3, r3, #3
 80157ba:	1a9b      	subs	r3, r3, r2
 80157bc:	009b      	lsls	r3, r3, #2
 80157be:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 80157c2:	68fa      	ldr	r2, [r7, #12]
 80157c4:	4413      	add	r3, r2
 80157c6:	3308      	adds	r3, #8
 80157c8:	4619      	mov	r1, r3
 80157ca:	68b8      	ldr	r0, [r7, #8]
 80157cc:	f7f9 ffcb 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 80157d0:	4603      	mov	r3, r0
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d029      	beq.n	801582a <_nxd_ipv6_default_router_add_internal+0x112>
                if_ptr == ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_interface_ptr)
 80157d6:	68f9      	ldr	r1, [r7, #12]
 80157d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157da:	4613      	mov	r3, r2
 80157dc:	00db      	lsls	r3, r3, #3
 80157de:	1a9b      	subs	r3, r3, r2
 80157e0:	009b      	lsls	r3, r3, #2
 80157e2:	440b      	add	r3, r1
 80157e4:	f603 43e8 	addw	r3, r3, #3304	; 0xce8
 80157e8:	681b      	ldr	r3, [r3, #0]
            if (CHECK_IPV6_ADDRESSES_SAME(router_addr, ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address) &&
 80157ea:	683a      	ldr	r2, [r7, #0]
 80157ec:	429a      	cmp	r2, r3
 80157ee:	d11c      	bne.n	801582a <_nxd_ipv6_default_router_add_internal+0x112>
            {

                /* Its a match! */
                ret = &ip_ptr -> nx_ipv6_default_router_table[i];
 80157f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157f2:	4613      	mov	r3, r2
 80157f4:	00db      	lsls	r3, r3, #3
 80157f6:	1a9b      	subs	r3, r3, r2
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 80157fe:	68fa      	ldr	r2, [r7, #12]
 8015800:	4413      	add	r3, r2
 8015802:	3304      	adds	r3, #4
 8015804:	61bb      	str	r3, [r7, #24]

                /* Update the router lifetime with the specified input. */
                ret -> nx_ipv6_default_router_entry_life_time = (USHORT)router_lifetime;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	b29a      	uxth	r2, r3
 801580a:	69bb      	ldr	r3, [r7, #24]
 801580c:	805a      	strh	r2, [r3, #2]

                /* Set a pointer to the router location in the table. */
                if (_ret)
 801580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015810:	2b00      	cmp	r3, #0
 8015812:	d002      	beq.n	801581a <_nxd_ipv6_default_router_add_internal+0x102>
                {
                    *_ret = ret;
 8015814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015816:	69ba      	ldr	r2, [r7, #24]
 8015818:	601a      	str	r2, [r3, #0]
                }

                return(NX_SUCCESS);
 801581a:	2300      	movs	r3, #0
 801581c:	e044      	b.n	80158a8 <_nxd_ipv6_default_router_add_internal+0x190>
        }
        else
        {

            /* Flag this as a slot we can use to add the new router. */
            if (first_available == (UINT)0xFFFFFFFF)
 801581e:	6a3b      	ldr	r3, [r7, #32]
 8015820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015824:	d101      	bne.n	801582a <_nxd_ipv6_default_router_add_internal+0x112>
            {
                first_available = i;
 8015826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015828:	623b      	str	r3, [r7, #32]
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 801582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801582c:	3301      	adds	r3, #1
 801582e:	627b      	str	r3, [r7, #36]	; 0x24
 8015830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015832:	2b07      	cmp	r3, #7
 8015834:	d9b2      	bls.n	801579c <_nxd_ipv6_default_router_add_internal+0x84>
            }
        }
    }

    /* Did we find an empty slot in the table? */
    if (first_available != (UINT)0xFFFFFFFF)
 8015836:	6a3b      	ldr	r3, [r7, #32]
 8015838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801583c:	d02e      	beq.n	801589c <_nxd_ipv6_default_router_add_internal+0x184>
    {

        /* Set up local pointer. */
        ret = &ip_ptr -> nx_ipv6_default_router_table[first_available];
 801583e:	6a3a      	ldr	r2, [r7, #32]
 8015840:	4613      	mov	r3, r2
 8015842:	00db      	lsls	r3, r3, #3
 8015844:	1a9b      	subs	r3, r3, r2
 8015846:	009b      	lsls	r3, r3, #2
 8015848:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 801584c:	68fa      	ldr	r2, [r7, #12]
 801584e:	4413      	add	r3, r2
 8015850:	3304      	adds	r3, #4
 8015852:	61bb      	str	r3, [r7, #24]

        /* Copy the router's address into the router table.  */
        COPY_IPV6_ADDRESS(router_addr, ret -> nx_ipv6_default_router_entry_router_address);
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	3304      	adds	r3, #4
 8015858:	4619      	mov	r1, r3
 801585a:	68b8      	ldr	r0, [r7, #8]
 801585c:	f7f9 ffe8 	bl	800f830 <COPY_IPV6_ADDRESS>

        /* Add the specified input to the router record. */
        ret -> nx_ipv6_default_router_entry_flag = (UCHAR)(router_type | NX_IPV6_ROUTE_TYPE_VALID);
 8015860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015862:	b25b      	sxtb	r3, r3
 8015864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015868:	b25b      	sxtb	r3, r3
 801586a:	b2da      	uxtb	r2, r3
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	701a      	strb	r2, [r3, #0]
        ret -> nx_ipv6_default_router_entry_life_time = (USHORT)router_lifetime;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	b29a      	uxth	r2, r3
 8015874:	69bb      	ldr	r3, [r7, #24]
 8015876:	805a      	strh	r2, [r3, #2]

        /* Set the interface index.  */
        ret -> nx_ipv6_default_router_entry_interface_ptr = if_ptr;
 8015878:	69bb      	ldr	r3, [r7, #24]
 801587a:	683a      	ldr	r2, [r7, #0]
 801587c:	615a      	str	r2, [r3, #20]

        /* Has no entry in the cache table. Neighbor Discovery process handles this
           automaticaly. */
        ret -> nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 801587e:	69bb      	ldr	r3, [r7, #24]
 8015880:	2200      	movs	r2, #0
 8015882:	619a      	str	r2, [r3, #24]

        /* Update the count of routers currently in the table. */
        ip_ptr -> nx_ipv6_default_router_table_size++;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	f8b3 3cd0 	ldrh.w	r3, [r3, #3280]	; 0xcd0
 801588a:	3301      	adds	r3, #1
 801588c:	b29a      	uxth	r2, r3
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	f8a3 2cd0 	strh.w	r2, [r3, #3280]	; 0xcd0
        return(NX_NO_MORE_ENTRIES);
    }

    /* If a router pointer was supplied, set it to the location of the router
       we just added to the table. */
    if (_ret)
 8015894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015896:	2b00      	cmp	r3, #0
 8015898:	d005      	beq.n	80158a6 <_nxd_ipv6_default_router_add_internal+0x18e>
 801589a:	e001      	b.n	80158a0 <_nxd_ipv6_default_router_add_internal+0x188>
        return(NX_NO_MORE_ENTRIES);
 801589c:	2317      	movs	r3, #23
 801589e:	e003      	b.n	80158a8 <_nxd_ipv6_default_router_add_internal+0x190>
    {
        *_ret = ret;
 80158a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158a2:	69ba      	ldr	r2, [r7, #24]
 80158a4:	601a      	str	r2, [r3, #0]
    }

    /* Successful completion, we're done! */
    return(NX_SUCCESS);
 80158a6:	2300      	movs	r3, #0
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3728      	adds	r7, #40	; 0x28
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <_nxd_ipv6_default_router_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_default_router_delete(NX_IP *ip_ptr, NXD_ADDRESS *router_address)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b084      	sub	sp, #16
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	6039      	str	r1, [r7, #0]

    NX_TRACE_IN_LINE_INSERT(NXD_TRACE_IPV6_DEFAULT_ROUTER_DELETE,
                            ip_ptr, router_address -> nxd_ip_address.v6[3], 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain protection on this IP instance for access into the default router table. */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80158c0:	f04f 31ff 	mov.w	r1, #4294967295
 80158c4:	4618      	mov	r0, r3
 80158c6:	f002 fc51 	bl	801816c <_tx_mutex_get>

    /* If our default route table is empty, just return */
    if (ip_ptr -> nx_ipv6_default_router_table_size == 0)
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f8b3 3cd0 	ldrh.w	r3, [r3, #3280]	; 0xcd0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d107      	bne.n	80158e4 <_nxd_ipv6_default_router_delete+0x34>
    {

        /* Release the mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80158da:	4618      	mov	r0, r3
 80158dc:	f002 febe 	bl	801865c <_tx_mutex_put>

        return(NX_SUCCESS);
 80158e0:	2300      	movs	r3, #0
 80158e2:	e04e      	b.n	8015982 <_nxd_ipv6_default_router_delete+0xd2>
    }

    /* Search the entire table for a matching entry. */
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 80158e4:	2300      	movs	r3, #0
 80158e6:	60fb      	str	r3, [r7, #12]
 80158e8:	e041      	b.n	801596e <_nxd_ipv6_default_router_delete+0xbe>
    {

        /*Set local pointer for convenience. */
        rt_entry = &ip_ptr -> nx_ipv6_default_router_table[i];
 80158ea:	68fa      	ldr	r2, [r7, #12]
 80158ec:	4613      	mov	r3, r2
 80158ee:	00db      	lsls	r3, r3, #3
 80158f0:	1a9b      	subs	r3, r3, r2
 80158f2:	009b      	lsls	r3, r3, #2
 80158f4:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 80158f8:	687a      	ldr	r2, [r7, #4]
 80158fa:	4413      	add	r3, r2
 80158fc:	3304      	adds	r3, #4
 80158fe:	60bb      	str	r3, [r7, #8]

        /* Does this slot contain a router? */
        if (rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID)
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	b25b      	sxtb	r3, r3
 8015906:	2b00      	cmp	r3, #0
 8015908:	da2e      	bge.n	8015968 <_nxd_ipv6_default_router_delete+0xb8>
        {

            /* Does it match the router address to search for? */
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	1d1a      	adds	r2, r3, #4
                                          rt_entry -> nx_ipv6_default_router_entry_router_address))
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	3304      	adds	r3, #4
            if (CHECK_IPV6_ADDRESSES_SAME(router_address -> nxd_ip_address.v6,
 8015912:	4619      	mov	r1, r3
 8015914:	4610      	mov	r0, r2
 8015916:	f7f9 ff26 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 801591a:	4603      	mov	r3, r0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d023      	beq.n	8015968 <_nxd_ipv6_default_router_delete+0xb8>
            {

                /* Yes, does it have a pointer into the cache table? */
                if (rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr)
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	699b      	ldr	r3, [r3, #24]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d003      	beq.n	8015930 <_nxd_ipv6_default_router_delete+0x80>
                {

                    /* Clear the router status. This will enable the entry
                       to time out eventually. */
                    rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr -> nx_nd_cache_is_router = NX_NULL;
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	699b      	ldr	r3, [r3, #24]
 801592c:	2200      	movs	r2, #0
 801592e:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Clean any entries in the destination table for this router.  */
                _nx_invalidate_destination_entry(ip_ptr, rt_entry -> nx_ipv6_default_router_entry_router_address);
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	3304      	adds	r3, #4
 8015934:	4619      	mov	r1, r3
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f7f6 fbf0 	bl	800c11c <_nx_invalidate_destination_entry>

                /* Mark the entry as empty. */
                rt_entry -> nx_ipv6_default_router_entry_flag = 0;
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	2200      	movs	r2, #0
 8015940:	701a      	strb	r2, [r3, #0]

                /* Clear the interface pointer .*/
                rt_entry -> nx_ipv6_default_router_entry_interface_ptr = NX_NULL;
 8015942:	68bb      	ldr	r3, [r7, #8]
 8015944:	2200      	movs	r2, #0
 8015946:	615a      	str	r2, [r3, #20]

                /* Decrease the count of available routers. */
                ip_ptr -> nx_ipv6_default_router_table_size--;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f8b3 3cd0 	ldrh.w	r3, [r3, #3280]	; 0xcd0
 801594e:	3b01      	subs	r3, #1
 8015950:	b29a      	uxth	r2, r3
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f8a3 2cd0 	strh.w	r2, [r3, #3280]	; 0xcd0

                /* Release the mutex.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801595e:	4618      	mov	r0, r3
 8015960:	f002 fe7c 	bl	801865c <_tx_mutex_put>

                return(NX_SUCCESS);
 8015964:	2300      	movs	r3, #0
 8015966:	e00c      	b.n	8015982 <_nxd_ipv6_default_router_delete+0xd2>
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	3301      	adds	r3, #1
 801596c:	60fb      	str	r3, [r7, #12]
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2b07      	cmp	r3, #7
 8015972:	ddba      	ble.n	80158ea <_nxd_ipv6_default_router_delete+0x3a>
            }
        }
    }

    /* Release the mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801597a:	4618      	mov	r0, r3
 801597c:	f002 fe6e 	bl	801865c <_tx_mutex_put>

    return(NX_NOT_FOUND);
 8015980:	234e      	movs	r3, #78	; 0x4e
    NX_PARAMETER_NOT_USED(router_address);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 8015982:	4618      	mov	r0, r3
 8015984:	3710      	adds	r7, #16
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}

0801598a <_nxd_ipv6_default_router_table_init>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nxd_ipv6_default_router_table_init(NX_IP *ip_ptr)
{
 801598a:	b480      	push	{r7}
 801598c:	b085      	sub	sp, #20
 801598e:	af00      	add	r7, sp, #0
 8015990:	6078      	str	r0, [r7, #4]

ULONG i;

    /* Initialize each entry in the default router table to null. */
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8015992:	2300      	movs	r3, #0
 8015994:	60fb      	str	r3, [r7, #12]
 8015996:	e023      	b.n	80159e0 <_nxd_ipv6_default_router_table_init+0x56>
    {

        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_flag = 0;
 8015998:	6879      	ldr	r1, [r7, #4]
 801599a:	68fa      	ldr	r2, [r7, #12]
 801599c:	4613      	mov	r3, r2
 801599e:	00db      	lsls	r3, r3, #3
 80159a0:	1a9b      	subs	r3, r3, r2
 80159a2:	009b      	lsls	r3, r3, #2
 80159a4:	440b      	add	r3, r1
 80159a6:	f603 43d4 	addw	r3, r3, #3284	; 0xcd4
 80159aa:	2200      	movs	r2, #0
 80159ac:	701a      	strb	r2, [r3, #0]
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_life_time = 0;
 80159ae:	6879      	ldr	r1, [r7, #4]
 80159b0:	68fa      	ldr	r2, [r7, #12]
 80159b2:	4613      	mov	r3, r2
 80159b4:	00db      	lsls	r3, r3, #3
 80159b6:	1a9b      	subs	r3, r3, r2
 80159b8:	009b      	lsls	r3, r3, #2
 80159ba:	440b      	add	r3, r1
 80159bc:	f603 43d6 	addw	r3, r3, #3286	; 0xcd6
 80159c0:	2200      	movs	r2, #0
 80159c2:	801a      	strh	r2, [r3, #0]
        ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr = NX_NULL;
 80159c4:	6879      	ldr	r1, [r7, #4]
 80159c6:	68fa      	ldr	r2, [r7, #12]
 80159c8:	4613      	mov	r3, r2
 80159ca:	00db      	lsls	r3, r3, #3
 80159cc:	1a9b      	subs	r3, r3, r2
 80159ce:	009b      	lsls	r3, r3, #2
 80159d0:	440b      	add	r3, r1
 80159d2:	f603 43ec 	addw	r3, r3, #3308	; 0xcec
 80159d6:	2200      	movs	r2, #0
 80159d8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	3301      	adds	r3, #1
 80159de:	60fb      	str	r3, [r7, #12]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2b07      	cmp	r3, #7
 80159e4:	d9d8      	bls.n	8015998 <_nxd_ipv6_default_router_table_init+0xe>
    }

    /* Set the initial size to zero. */
    ip_ptr -> nx_ipv6_default_router_table_size = 0;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2200      	movs	r2, #0
 80159ea:	f8a3 2cd0 	strh.w	r2, [r3, #3280]	; 0xcd0

    /* Initialize the index for recruiting less "reachable" routers
       when the current router cannot be reached. */
    ip_ptr -> nx_ipv6_default_router_table_round_robin_index = 0;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2200      	movs	r2, #0
 80159f2:	f8c3 2db4 	str.w	r2, [r3, #3508]	; 0xdb4

    /* Initialize the start of the prefix table (linked list) to NULL. */
    ip_ptr -> nx_ipv6_prefix_list_table[0].nx_ipv6_prefix_entry_prev = NX_NULL;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2200      	movs	r2, #0
 80159fa:	f8c3 2dd0 	str.w	r2, [r3, #3536]	; 0xdd0
    ip_ptr -> nx_ipv6_prefix_list_table[0].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[1];
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f603 52d8 	addw	r2, r3, #3544	; 0xdd8
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8c3 2dd4 	str.w	r2, [r3, #3540]	; 0xdd4

    /* Link up the entries in the prefix table.  */
    for (i = 1; i < NX_IPV6_PREFIX_LIST_TABLE_SIZE - 1; i++)
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	60fb      	str	r3, [r7, #12]
 8015a0e:	e01e      	b.n	8015a4e <_nxd_ipv6_default_router_table_init+0xc4>
    {

        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	3b01      	subs	r3, #1
 8015a14:	015b      	lsls	r3, r3, #5
 8015a16:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	441a      	add	r2, r3
 8015a1e:	6879      	ldr	r1, [r7, #4]
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	015b      	lsls	r3, r3, #5
 8015a24:	440b      	add	r3, r1
 8015a26:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 8015a2a:	601a      	str	r2, [r3, #0]
        ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = &ip_ptr -> nx_ipv6_prefix_list_table[i + 1];
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	3301      	adds	r3, #1
 8015a30:	015b      	lsls	r3, r3, #5
 8015a32:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 8015a36:	687a      	ldr	r2, [r7, #4]
 8015a38:	441a      	add	r2, r3
 8015a3a:	6879      	ldr	r1, [r7, #4]
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	015b      	lsls	r3, r3, #5
 8015a40:	440b      	add	r3, r1
 8015a42:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 8015a46:	601a      	str	r2, [r3, #0]
    for (i = 1; i < NX_IPV6_PREFIX_LIST_TABLE_SIZE - 1; i++)
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	60fb      	str	r3, [r7, #12]
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	2b06      	cmp	r3, #6
 8015a52:	d9dd      	bls.n	8015a10 <_nxd_ipv6_default_router_table_init+0x86>
    }

    /* Null terminate the end of the prefix table (linked list). */
    ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_prev = &ip_ptr -> nx_ipv6_prefix_list_table[i - 1];
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	3b01      	subs	r3, #1
 8015a58:	015b      	lsls	r3, r3, #5
 8015a5a:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 8015a5e:	687a      	ldr	r2, [r7, #4]
 8015a60:	441a      	add	r2, r3
 8015a62:	6879      	ldr	r1, [r7, #4]
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	015b      	lsls	r3, r3, #5
 8015a68:	440b      	add	r3, r1
 8015a6a:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 8015a6e:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ipv6_prefix_list_table[i].nx_ipv6_prefix_entry_next = NX_NULL;
 8015a70:	687a      	ldr	r2, [r7, #4]
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	015b      	lsls	r3, r3, #5
 8015a76:	4413      	add	r3, r2
 8015a78:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	601a      	str	r2, [r3, #0]

    /* Set the free list pointer to the 1st entry. */
    ip_ptr -> nx_ipv6_prefix_entry_free_list = &ip_ptr -> nx_ipv6_prefix_list_table[0];
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f603 52b8 	addw	r2, r3, #3512	; 0xdb8
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8c3 2ebc 	str.w	r2, [r3, #3772]	; 0xebc
    ip_ptr -> nx_ipv6_prefix_list_ptr = NX_NULL;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	f8c3 2eb8 	str.w	r2, [r3, #3768]	; 0xeb8

    /* All done, return. */
}
 8015a94:	bf00      	nop
 8015a96:	3714      	adds	r7, #20
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9e:	4770      	bx	lr

08015aa0 <_nxd_ipv6_destination_table_find_next_hop>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_destination_table_find_next_hop(NX_IP *ip_ptr, ULONG *destination_ip, ULONG *next_hop)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b088      	sub	sp, #32
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	60b9      	str	r1, [r7, #8]
 8015aaa:	607a      	str	r2, [r7, #4]

UINT i, table_size;
UINT status;


    status = NX_NOT_SUCCESSFUL;
 8015aac:	2343      	movs	r3, #67	; 0x43
 8015aae:	617b      	str	r3, [r7, #20]

    /* Next hop storage must not be valid. */
    NX_ASSERT(next_hop != NX_NULL);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d104      	bne.n	8015ac0 <_nxd_ipv6_destination_table_find_next_hop+0x20>
 8015ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8015aba:	f003 fa05 	bl	8018ec8 <_tx_thread_sleep>
 8015abe:	e7fa      	b.n	8015ab6 <_nxd_ipv6_destination_table_find_next_hop+0x16>

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_destination_table_size;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 8015ac6:	61bb      	str	r3, [r7, #24]

    /* Check the num of destination. */
    if (table_size == 0)
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d101      	bne.n	8015ad2 <_nxd_ipv6_destination_table_find_next_hop+0x32>
    {
        return(NX_NOT_SUCCESSFUL);
 8015ace:	2343      	movs	r3, #67	; 0x43
 8015ad0:	e03b      	b.n	8015b4a <_nxd_ipv6_destination_table_find_next_hop+0xaa>
    }

    /* Loop through all entries. */
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	61fb      	str	r3, [r7, #28]
 8015ad6:	e031      	b.n	8015b3c <_nxd_ipv6_destination_table_find_next_hop+0x9c>
    {

        /* Skip invalid entries. */
        if (!ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_valid)
 8015ad8:	68f9      	ldr	r1, [r7, #12]
 8015ada:	69fa      	ldr	r2, [r7, #28]
 8015adc:	4613      	mov	r3, r2
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	4413      	add	r3, r2
 8015ae2:	00db      	lsls	r3, r3, #3
 8015ae4:	440b      	add	r3, r1
 8015ae6:	3390      	adds	r3, #144	; 0x90
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d022      	beq.n	8015b34 <_nxd_ipv6_destination_table_find_next_hop+0x94>
        {
            continue;
        }

        /* Keep track of valid entries we have checked. */
        table_size--;
 8015aee:	69bb      	ldr	r3, [r7, #24]
 8015af0:	3b01      	subs	r3, #1
 8015af2:	61bb      	str	r3, [r7, #24]

        /* Check whether or not the address is the same. */
        if (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_destination_address, destination_ip))
 8015af4:	69fa      	ldr	r2, [r7, #28]
 8015af6:	4613      	mov	r3, r2
 8015af8:	009b      	lsls	r3, r3, #2
 8015afa:	4413      	add	r3, r2
 8015afc:	00db      	lsls	r3, r3, #3
 8015afe:	3390      	adds	r3, #144	; 0x90
 8015b00:	68fa      	ldr	r2, [r7, #12]
 8015b02:	4413      	add	r3, r2
 8015b04:	3304      	adds	r3, #4
 8015b06:	68b9      	ldr	r1, [r7, #8]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7f9 fe2c 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d010      	beq.n	8015b36 <_nxd_ipv6_destination_table_find_next_hop+0x96>
        {

            /* Copy next hop address to user-supplied storage. */
            COPY_IPV6_ADDRESS(ip_ptr -> nx_ipv6_destination_table[i].nx_ipv6_destination_entry_next_hop, next_hop);
 8015b14:	69fa      	ldr	r2, [r7, #28]
 8015b16:	4613      	mov	r3, r2
 8015b18:	009b      	lsls	r3, r3, #2
 8015b1a:	4413      	add	r3, r2
 8015b1c:	00db      	lsls	r3, r3, #3
 8015b1e:	33a0      	adds	r3, #160	; 0xa0
 8015b20:	68fa      	ldr	r2, [r7, #12]
 8015b22:	4413      	add	r3, r2
 8015b24:	3304      	adds	r3, #4
 8015b26:	6879      	ldr	r1, [r7, #4]
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7f9 fe81 	bl	800f830 <COPY_IPV6_ADDRESS>

            status = NX_SUCCESS;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	617b      	str	r3, [r7, #20]

            /* break out of the for loop */
            break;
 8015b32:	e009      	b.n	8015b48 <_nxd_ipv6_destination_table_find_next_hop+0xa8>
            continue;
 8015b34:	bf00      	nop
    for (i = 0; table_size && (i < NX_IPV6_DESTINATION_TABLE_SIZE); i++)
 8015b36:	69fb      	ldr	r3, [r7, #28]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	61fb      	str	r3, [r7, #28]
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d002      	beq.n	8015b48 <_nxd_ipv6_destination_table_find_next_hop+0xa8>
 8015b42:	69fb      	ldr	r3, [r7, #28]
 8015b44:	2b07      	cmp	r3, #7
 8015b46:	d9c7      	bls.n	8015ad8 <_nxd_ipv6_destination_table_find_next_hop+0x38>
        }
    }


    return(status);
 8015b48:	697b      	ldr	r3, [r7, #20]
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	3720      	adds	r7, #32
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bd80      	pop	{r7, pc}
	...

08015b54 <_nxd_ipv6_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_enable(NX_IP *ip_ptr)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b08c      	sub	sp, #48	; 0x30
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
ULONG address[4];
#endif /* NX_DISABLE_ICMPV6_ROUTER_SOLICITATION */


    /* Make sure IPv6 is not already enabled. */
    if (ip_ptr -> nx_ipv6_packet_receive)
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d001      	beq.n	8015b6a <_nxd_ipv6_enable+0x16>
    {
        return(NX_ALREADY_ENABLED);
 8015b66:	2315      	movs	r3, #21
 8015b68:	e0d0      	b.n	8015d0c <_nxd_ipv6_enable+0x1b8>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IPV6_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Obtain the IP mutex so we can manipulate the internal routing table. */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015b70:	f04f 31ff 	mov.w	r1, #4294967295
 8015b74:	4618      	mov	r0, r3
 8015b76:	f002 faf9 	bl	801816c <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8015b7e:	623b      	str	r3, [r7, #32]
    return(posture);
 8015b80:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015b82:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015b84:	b672      	cpsid	i
    return(int_posture);
 8015b86:	69fb      	ldr	r3, [r7, #28]

    /* Disable Interrupt */
    TX_DISABLE
 8015b88:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Install IPv6 packet receive processing function pointer */
    ip_ptr -> nx_ipv6_packet_receive = _nx_ipv6_packet_receive;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	4a61      	ldr	r2, [pc, #388]	; (8015d14 <_nxd_ipv6_enable+0x1c0>)
 8015b8e:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
 8015b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b94:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b98:	f383 8810 	msr	PRIMASK, r3
}
 8015b9c:	bf00      	nop

    /* Enable Interrupt */
    TX_RESTORE

    /* Initialize IPv6 default router table */
    _nxd_ipv6_default_router_table_init(ip_ptr);
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f7ff fef3 	bl	801598a <_nxd_ipv6_default_router_table_init>

    /* Set the default reachable timer. */
    ip_ptr -> nx_ipv6_reachable_timer = NX_REACHABLE_TIME;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	221e      	movs	r2, #30
 8015ba8:	f8c3 2ec8 	str.w	r2, [r3, #3784]	; 0xec8
       the system_ticks_per_second value, or multiply system_ticks_per_second
       before doing division.
       If the retrans_timer is smaller than tick resolution, set it to 1.
     */
#if ((NX_RETRANS_TIMER * NX_IP_FAST_TIMER_RATE) > 1000)
    ip_ptr -> nx_ipv6_retrans_timer_ticks = (NX_RETRANS_TIMER * NX_IP_FAST_TIMER_RATE) / 1000;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	220a      	movs	r2, #10
 8015bb0:	f8c3 2ec4 	str.w	r2, [r3, #3780]	; 0xec4
#else
    ip_ptr -> nx_ipv6_retrans_timer_ticks = 1;
#endif

    /* Set the default hop limit. */
    ip_ptr -> nx_ipv6_hop_limit = 0xFF;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	22ff      	movs	r2, #255	; 0xff
 8015bb8:	f8c3 2ecc 	str.w	r2, [r3, #3788]	; 0xecc

    /* Set index of each address. */
    for (i = 0; i < (NX_MAX_IPV6_ADDRESSES + NX_LOOPBACK_IPV6_ENABLED); i++)
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015bc0:	e00b      	b.n	8015bda <_nxd_ipv6_enable+0x86>
    {
        ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_index = (UCHAR)i;
 8015bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc4:	b2d9      	uxtb	r1, r3
 8015bc6:	687a      	ldr	r2, [r7, #4]
 8015bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bca:	015b      	lsls	r3, r3, #5
 8015bcc:	4413      	add	r3, r2
 8015bce:	332e      	adds	r3, #46	; 0x2e
 8015bd0:	460a      	mov	r2, r1
 8015bd2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (NX_MAX_IPV6_ADDRESSES + NX_LOOPBACK_IPV6_ENABLED); i++)
 8015bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd6:	3301      	adds	r3, #1
 8015bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bdc:	2b03      	cmp	r3, #3
 8015bde:	d9f0      	bls.n	8015bc2 <_nxd_ipv6_enable+0x6e>

    /* Check if router solicitation is not disabled. */
#ifndef NX_DISABLE_ICMPV6_ROUTER_SOLICITATION

    /* Create the all-node multicast group address, */
    address[0] = 0xFF020000;
 8015be0:	4b4d      	ldr	r3, [pc, #308]	; (8015d18 <_nxd_ipv6_enable+0x1c4>)
 8015be2:	60fb      	str	r3, [r7, #12]
    address[1] = 0;
 8015be4:	2300      	movs	r3, #0
 8015be6:	613b      	str	r3, [r7, #16]
    address[2] = 0;
 8015be8:	2300      	movs	r3, #0
 8015bea:	617b      	str	r3, [r7, #20]
    address[3] = 1;
 8015bec:	2301      	movs	r3, #1
 8015bee:	61bb      	str	r3, [r7, #24]

    /* Initializes the router solicitation values . */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015bf4:	e04c      	b.n	8015c90 <_nxd_ipv6_enable+0x13c>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_TRUE)
 8015bf6:	687a      	ldr	r2, [r7, #4]
 8015bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bfa:	214c      	movs	r1, #76	; 0x4c
 8015bfc:	fb01 f303 	mul.w	r3, r1, r3
 8015c00:	4413      	add	r3, r2
 8015c02:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8015c06:	781b      	ldrb	r3, [r3, #0]
 8015c08:	2b01      	cmp	r3, #1
 8015c0a:	d13e      	bne.n	8015c8a <_nxd_ipv6_enable+0x136>
        {
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_max = NX_ICMPV6_MAX_RTR_SOLICITATIONS;
 8015c0c:	687a      	ldr	r2, [r7, #4]
 8015c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c10:	214c      	movs	r1, #76	; 0x4c
 8015c12:	fb01 f303 	mul.w	r3, r1, r3
 8015c16:	4413      	add	r3, r2
 8015c18:	f603 435c 	addw	r3, r3, #3164	; 0xc5c
 8015c1c:	2203      	movs	r2, #3
 8015c1e:	601a      	str	r2, [r3, #0]
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count = ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_max;
 8015c20:	687a      	ldr	r2, [r7, #4]
 8015c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c24:	214c      	movs	r1, #76	; 0x4c
 8015c26:	fb01 f303 	mul.w	r3, r1, r3
 8015c2a:	4413      	add	r3, r2
 8015c2c:	f603 435c 	addw	r3, r3, #3164	; 0xc5c
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	6879      	ldr	r1, [r7, #4]
 8015c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c36:	204c      	movs	r0, #76	; 0x4c
 8015c38:	fb00 f303 	mul.w	r3, r0, r3
 8015c3c:	440b      	add	r3, r1
 8015c3e:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8015c42:	601a      	str	r2, [r3, #0]
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_interval = NX_ICMPV6_RTR_SOLICITATION_INTERVAL;
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c48:	214c      	movs	r1, #76	; 0x4c
 8015c4a:	fb01 f303 	mul.w	r3, r1, r3
 8015c4e:	4413      	add	r3, r2
 8015c50:	f603 4364 	addw	r3, r3, #3172	; 0xc64
 8015c54:	2204      	movs	r2, #4
 8015c56:	601a      	str	r2, [r3, #0]
            ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer = NX_ICMPV6_RTR_SOLICITATION_DELAY;
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c5c:	214c      	movs	r1, #76	; 0x4c
 8015c5e:	fb01 f303 	mul.w	r3, r1, r3
 8015c62:	4413      	add	r3, r2
 8015c64:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8015c68:	2201      	movs	r2, #1
 8015c6a:	601a      	str	r2, [r3, #0]

            /* Join all-node multicast group. */
            _nx_ipv6_multicast_join(ip_ptr, address, &ip_ptr -> nx_ip_interface[i]);
 8015c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c6e:	224c      	movs	r2, #76	; 0x4c
 8015c70:	fb02 f303 	mul.w	r3, r2, r3
 8015c74:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8015c78:	687a      	ldr	r2, [r7, #4]
 8015c7a:	4413      	add	r3, r2
 8015c7c:	1d1a      	adds	r2, r3, #4
 8015c7e:	f107 030c 	add.w	r3, r7, #12
 8015c82:	4619      	mov	r1, r3
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f7f8 fd95 	bl	800e7b4 <_nx_ipv6_multicast_join>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8015c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8c:	3301      	adds	r3, #1
 8015c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d0af      	beq.n	8015bf6 <_nxd_ipv6_enable+0xa2>
        }
    }
#endif /* NX_DISABLE_ICMPV6_ROUTER_SOLICITATION */

    /* Start a faster periodic timer for IPv6 .*/
    _nx_ip_fast_periodic_timer_create(ip_ptr);
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f7f7 f9b8 	bl	800d00c <_nx_ip_fast_periodic_timer_create>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Setup loop back address. */
    /* Page 9, section 2.5.3, RFC 4291. */
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[0] = 0x0;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	679a      	str	r2, [r3, #120]	; 0x78
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[1] = 0x0;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	67da      	str	r2, [r3, #124]	; 0x7c
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[2] = 0x0;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2200      	movs	r2, #0
 8015cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address[3] = 0x1;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Config loop bcak address. */
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_valid = NX_TRUE;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2201      	movs	r2, #1
 8015cbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_type = NX_IP_VERSION_V6;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2206      	movs	r2, #6
 8015cc4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_prefix_length = 128;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2280      	movs	r2, #128	; 0x80
 8015ccc:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_next = NX_NULL;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_attached = &ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE];
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f503 6248 	add.w	r2, r3, #3200	; 0xc80
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	675a      	str	r2, [r3, #116]	; 0x74
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_ConfigurationMethod = NX_IPV6_ADDRESS_MANUAL_CONFIG;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2201      	movs	r2, #1
 8015ce6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX].nxd_ipv6_address_state = NX_IPV6_ADDR_STATE_VALID;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2204      	movs	r2, #4
 8015cee:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nxd_interface_ipv6_address_list_head = &ip_ptr -> nx_ipv6_address[NX_LOOPBACK_IPV6_SOURCE_INDEX];
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0
#endif /* NX_DISABLE_LOOPBACK_INTERFACE */

    /* Release the IP protection. */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015d04:	4618      	mov	r0, r3
 8015d06:	f002 fca9 	bl	801865c <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8015d0a:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	3730      	adds	r7, #48	; 0x30
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd80      	pop	{r7, pc}
 8015d14:	0800eaf5 	.word	0x0800eaf5
 8015d18:	ff020000 	.word	0xff020000

08015d1c <_nxd_ipv6_find_default_router_from_address>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
NX_IPV6_DEFAULT_ROUTER_ENTRY *_nxd_ipv6_find_default_router_from_address(NX_IP *ip_ptr, ULONG *router_address)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b084      	sub	sp, #16
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	6039      	str	r1, [r7, #0]
INT                           i;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;


    /* Get exclusive access to the IP task lock. */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8015d30:	4618      	mov	r0, r3
 8015d32:	f002 fa1b 	bl	801816c <_tx_mutex_get>

    /* Start the search at the top of the list...*/
    i = 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	60fb      	str	r3, [r7, #12]

    /* And go through the entire table or until a match is found. */
    while (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE)
 8015d3a:	e022      	b.n	8015d82 <_nxd_ipv6_find_default_router_from_address+0x66>
    {

        /* Local pointer to table entry. */
        rt_entry = &ip_ptr -> nx_ipv6_default_router_table[i];
 8015d3c:	68fa      	ldr	r2, [r7, #12]
 8015d3e:	4613      	mov	r3, r2
 8015d40:	00db      	lsls	r3, r3, #3
 8015d42:	1a9b      	subs	r3, r3, r2
 8015d44:	009b      	lsls	r3, r3, #2
 8015d46:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8015d4a:	687a      	ldr	r2, [r7, #4]
 8015d4c:	4413      	add	r3, r2
 8015d4e:	3304      	adds	r3, #4
 8015d50:	60bb      	str	r3, [r7, #8]

        /* Does this slot contain a valid router? */
        if (rt_entry -> nx_ipv6_default_router_entry_flag)
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d010      	beq.n	8015d7c <_nxd_ipv6_find_default_router_from_address+0x60>
        {

            /* Yes, check if it matches the specified router address. */
            if (CHECK_IPV6_ADDRESSES_SAME(router_address, rt_entry -> nx_ipv6_default_router_entry_router_address))
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	3304      	adds	r3, #4
 8015d5e:	4619      	mov	r1, r3
 8015d60:	6838      	ldr	r0, [r7, #0]
 8015d62:	f7f9 fd00 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 8015d66:	4603      	mov	r3, r0
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d007      	beq.n	8015d7c <_nxd_ipv6_find_default_router_from_address+0x60>
            {


                /* Yes it does, we can release the IP protection. */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015d72:	4618      	mov	r0, r3
 8015d74:	f002 fc72 	bl	801865c <_tx_mutex_put>

                /* Return the pointer to this router entry. */
                return(rt_entry);
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	e00c      	b.n	8015d96 <_nxd_ipv6_find_default_router_from_address+0x7a>
            }
        }

        i++;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	3301      	adds	r3, #1
 8015d80:	60fb      	str	r3, [r7, #12]
    while (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE)
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	2b07      	cmp	r3, #7
 8015d86:	ddd9      	ble.n	8015d3c <_nxd_ipv6_find_default_router_from_address+0x20>
    }

    /* Release the lock. */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f002 fc64 	bl	801865c <_tx_mutex_put>

    /* Return a null pointer indicating no matching router found. */
    return(NX_NULL);
 8015d94:	2300      	movs	r3, #0
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}

08015d9e <_nxd_ipv6_find_max_prefix_length>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_find_max_prefix_length(ULONG *addr1, ULONG *addr2, UINT max_length)
{
 8015d9e:	b480      	push	{r7}
 8015da0:	b08b      	sub	sp, #44	; 0x2c
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	60f8      	str	r0, [r7, #12]
 8015da6:	60b9      	str	r1, [r7, #8]
 8015da8:	607a      	str	r2, [r7, #4]
UINT length = 0;
 8015daa:	2300      	movs	r3, #0
 8015dac:	627b      	str	r3, [r7, #36]	; 0x24
UINT i, j, bit, time;

    for (i = 0; i < 4; i++)
 8015dae:	2300      	movs	r3, #0
 8015db0:	623b      	str	r3, [r7, #32]
 8015db2:	e054      	b.n	8015e5e <_nxd_ipv6_find_max_prefix_length+0xc0>
    {
        if (addr1[i] == addr2[i])
 8015db4:	6a3b      	ldr	r3, [r7, #32]
 8015db6:	009b      	lsls	r3, r3, #2
 8015db8:	68fa      	ldr	r2, [r7, #12]
 8015dba:	4413      	add	r3, r2
 8015dbc:	681a      	ldr	r2, [r3, #0]
 8015dbe:	6a3b      	ldr	r3, [r7, #32]
 8015dc0:	009b      	lsls	r3, r3, #2
 8015dc2:	68b9      	ldr	r1, [r7, #8]
 8015dc4:	440b      	add	r3, r1
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d103      	bne.n	8015dd4 <_nxd_ipv6_find_max_prefix_length+0x36>
        {
            length += 32;
 8015dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dce:	3320      	adds	r3, #32
 8015dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8015dd2:	e041      	b.n	8015e58 <_nxd_ipv6_find_max_prefix_length+0xba>
        }
        /* Length shall not exceed max_length. Stop compare. */
        else if (length + 31 < max_length)
 8015dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd6:	331f      	adds	r3, #31
 8015dd8:	687a      	ldr	r2, [r7, #4]
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	d843      	bhi.n	8015e66 <_nxd_ipv6_find_max_prefix_length+0xc8>
        {
            break;
        }
        else
        {
            bit = 16;
 8015dde:	2310      	movs	r3, #16
 8015de0:	61bb      	str	r3, [r7, #24]
            time = 16;
 8015de2:	2310      	movs	r3, #16
 8015de4:	617b      	str	r3, [r7, #20]
            for (j = 0; j < 5; j++)
 8015de6:	2300      	movs	r3, #0
 8015de8:	61fb      	str	r3, [r7, #28]
 8015dea:	e031      	b.n	8015e50 <_nxd_ipv6_find_max_prefix_length+0xb2>
            {
                time = time / 2;
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	085b      	lsrs	r3, r3, #1
 8015df0:	617b      	str	r3, [r7, #20]
                if (addr1[i] >> bit == addr2[i] >> bit)
 8015df2:	6a3b      	ldr	r3, [r7, #32]
 8015df4:	009b      	lsls	r3, r3, #2
 8015df6:	68fa      	ldr	r2, [r7, #12]
 8015df8:	4413      	add	r3, r2
 8015dfa:	681a      	ldr	r2, [r3, #0]
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	40da      	lsrs	r2, r3
 8015e00:	6a3b      	ldr	r3, [r7, #32]
 8015e02:	009b      	lsls	r3, r3, #2
 8015e04:	68b9      	ldr	r1, [r7, #8]
 8015e06:	440b      	add	r3, r1
 8015e08:	6819      	ldr	r1, [r3, #0]
 8015e0a:	69bb      	ldr	r3, [r7, #24]
 8015e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d10c      	bne.n	8015e2e <_nxd_ipv6_find_max_prefix_length+0x90>
                {
                    bit -= time;
 8015e14:	69ba      	ldr	r2, [r7, #24]
 8015e16:	697b      	ldr	r3, [r7, #20]
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	61bb      	str	r3, [r7, #24]
                    if (time == 0)
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d113      	bne.n	8015e4a <_nxd_ipv6_find_max_prefix_length+0xac>
                    {
                        length += (32 - bit);
 8015e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e24:	69bb      	ldr	r3, [r7, #24]
 8015e26:	1ad3      	subs	r3, r2, r3
 8015e28:	3320      	adds	r3, #32
 8015e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8015e2c:	e00d      	b.n	8015e4a <_nxd_ipv6_find_max_prefix_length+0xac>
                    }
                }
                else if (j == 4)
 8015e2e:	69fb      	ldr	r3, [r7, #28]
 8015e30:	2b04      	cmp	r3, #4
 8015e32:	d106      	bne.n	8015e42 <_nxd_ipv6_find_max_prefix_length+0xa4>
                {
                    length += (31 - bit);
 8015e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e36:	69bb      	ldr	r3, [r7, #24]
 8015e38:	1ad3      	subs	r3, r2, r3
 8015e3a:	331f      	adds	r3, #31
 8015e3c:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
 8015e3e:	bf00      	nop
                else
                {
                    bit += time;
                }
            }
            break;
 8015e40:	e012      	b.n	8015e68 <_nxd_ipv6_find_max_prefix_length+0xca>
                    bit += time;
 8015e42:	69ba      	ldr	r2, [r7, #24]
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	4413      	add	r3, r2
 8015e48:	61bb      	str	r3, [r7, #24]
            for (j = 0; j < 5; j++)
 8015e4a:	69fb      	ldr	r3, [r7, #28]
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	61fb      	str	r3, [r7, #28]
 8015e50:	69fb      	ldr	r3, [r7, #28]
 8015e52:	2b04      	cmp	r3, #4
 8015e54:	d9ca      	bls.n	8015dec <_nxd_ipv6_find_max_prefix_length+0x4e>
            break;
 8015e56:	e007      	b.n	8015e68 <_nxd_ipv6_find_max_prefix_length+0xca>
    for (i = 0; i < 4; i++)
 8015e58:	6a3b      	ldr	r3, [r7, #32]
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	623b      	str	r3, [r7, #32]
 8015e5e:	6a3b      	ldr	r3, [r7, #32]
 8015e60:	2b03      	cmp	r3, #3
 8015e62:	d9a7      	bls.n	8015db4 <_nxd_ipv6_find_max_prefix_length+0x16>
 8015e64:	e000      	b.n	8015e68 <_nxd_ipv6_find_max_prefix_length+0xca>
            break;
 8015e66:	bf00      	nop
        }
    }


    return(length);
 8015e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	372c      	adds	r7, #44	; 0x2c
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e74:	4770      	bx	lr

08015e76 <_nxd_ipv6_interface_find>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nxd_ipv6_interface_find(NX_IP *ip_ptr, ULONG *dest_address,
                              NXD_IPV6_ADDRESS **ipv6_addr, NX_INTERFACE *if_ptr)
{
 8015e76:	b580      	push	{r7, lr}
 8015e78:	b08a      	sub	sp, #40	; 0x28
 8015e7a:	af00      	add	r7, sp, #0
 8015e7c:	60f8      	str	r0, [r7, #12]
 8015e7e:	60b9      	str	r1, [r7, #8]
 8015e80:	607a      	str	r2, [r7, #4]
 8015e82:	603b      	str	r3, [r7, #0]
UINT                          i;
NXD_IPV6_ADDRESS             *ipv6_address;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;
UINT                          start_index;
UINT                          end_index;
ULONG                         address_type = IPv6_Address_Type(dest_address);
 8015e84:	68b8      	ldr	r0, [r7, #8]
 8015e86:	f7f9 fd73 	bl	800f970 <IPv6_Address_Type>
 8015e8a:	6178      	str	r0, [r7, #20]

    /* ipv6_addr must not be NULL. */
    NX_ASSERT(ipv6_addr != NX_NULL);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d104      	bne.n	8015e9c <_nxd_ipv6_interface_find+0x26>
 8015e92:	f04f 30ff 	mov.w	r0, #4294967295
 8015e96:	f003 f817 	bl	8018ec8 <_tx_thread_sleep>
 8015e9a:	e7fa      	b.n	8015e92 <_nxd_ipv6_interface_find+0x1c>
        }
    }
#endif /* NX_ENABLE_IPV6_MULTICAST  */

    /* Loop through addresses. */
    if (address_type & IPV6_ADDRESS_UNICAST)
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	da25      	bge.n	8015eee <_nxd_ipv6_interface_find+0x78>
    {

        /* Unicast address. Is the destination one of local address? */
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8015ea6:	e01f      	b.n	8015ee8 <_nxd_ipv6_interface_find+0x72>
        {

            /* Compare the address. */
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 8015ea8:	68fa      	ldr	r2, [r7, #12]
 8015eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eac:	015b      	lsls	r3, r3, #5
 8015eae:	4413      	add	r3, r2
 8015eb0:	3310      	adds	r3, #16
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d014      	beq.n	8015ee2 <_nxd_ipv6_interface_find+0x6c>
                (CHECK_IPV6_ADDRESSES_SAME(ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address, dest_address)))
 8015eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eba:	015b      	lsls	r3, r3, #5
 8015ebc:	3318      	adds	r3, #24
 8015ebe:	68fa      	ldr	r2, [r7, #12]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	68b9      	ldr	r1, [r7, #8]
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f7f9 fc4e 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 8015eca:	4603      	mov	r3, r0
            if ((ip_ptr -> nx_ipv6_address[i].nxd_ipv6_address_valid) &&
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d008      	beq.n	8015ee2 <_nxd_ipv6_interface_find+0x6c>
            {

                /* Found a proper address. */
                *ipv6_addr = &(ip_ptr -> nx_ipv6_address[i]);
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed2:	015b      	lsls	r3, r3, #5
 8015ed4:	3310      	adds	r3, #16
 8015ed6:	68fa      	ldr	r2, [r7, #12]
 8015ed8:	441a      	add	r2, r3
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	601a      	str	r2, [r3, #0]
                return(NX_SUCCESS);
 8015ede:	2300      	movs	r3, #0
 8015ee0:	e0f5      	b.n	80160ce <_nxd_ipv6_interface_find+0x258>
        for (i = 0; i < NX_MAX_IPV6_ADDRESSES; i++)
 8015ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	2b02      	cmp	r3, #2
 8015eec:	d9dc      	bls.n	8015ea8 <_nxd_ipv6_interface_find+0x32>
            }
        }
    }

    if (if_ptr)
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d007      	beq.n	8015f04 <_nxd_ipv6_interface_find+0x8e>
    {

        /* Search addresses from specified interface only. */
        start_index = if_ptr -> nx_interface_index;
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	79db      	ldrb	r3, [r3, #7]
 8015ef8:	61fb      	str	r3, [r7, #28]
        end_index = (UINT)(if_ptr -> nx_interface_index + 1);
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	79db      	ldrb	r3, [r3, #7]
 8015efe:	3301      	adds	r3, #1
 8015f00:	61bb      	str	r3, [r7, #24]
 8015f02:	e003      	b.n	8015f0c <_nxd_ipv6_interface_find+0x96>
    }
    else
    {

        /* Search addressed from all interfaces. */
        start_index = 0;
 8015f04:	2300      	movs	r3, #0
 8015f06:	61fb      	str	r3, [r7, #28]
        end_index = NX_MAX_PHYSICAL_INTERFACES;
 8015f08:	2301      	movs	r3, #1
 8015f0a:	61bb      	str	r3, [r7, #24]
    }

    /* Loop through interfaces. */
    for (i = start_index; i < end_index; i++)
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8015f10:	e070      	b.n	8015ff4 <_nxd_ipv6_interface_find+0x17e>
    {

        /* Skip interface which is down. */
        if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up == NX_FALSE)
 8015f12:	68fa      	ldr	r2, [r7, #12]
 8015f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f16:	214c      	movs	r1, #76	; 0x4c
 8015f18:	fb01 f303 	mul.w	r3, r1, r3
 8015f1c:	4413      	add	r3, r2
 8015f1e:	f603 433a 	addw	r3, r3, #3130	; 0xc3a
 8015f22:	781b      	ldrb	r3, [r3, #0]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d061      	beq.n	8015fec <_nxd_ipv6_interface_find+0x176>
        {
            continue;
        }

        /* Point to the first address unit in the interface. */
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8015f28:	68fa      	ldr	r2, [r7, #12]
 8015f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2c:	214c      	movs	r1, #76	; 0x4c
 8015f2e:	fb01 f303 	mul.w	r3, r1, r3
 8015f32:	4413      	add	r3, r2
 8015f34:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	623b      	str	r3, [r7, #32]
 8015f3c:	e047      	b.n	8015fce <_nxd_ipv6_interface_find+0x158>
             ipv6_address;
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
        {

            /* Skip address that is not valid. */
            if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8015f3e:	6a3b      	ldr	r3, [r7, #32]
 8015f40:	789b      	ldrb	r3, [r3, #2]
 8015f42:	2b04      	cmp	r3, #4
 8015f44:	d13f      	bne.n	8015fc6 <_nxd_ipv6_interface_find+0x150>
            {
                continue;
            }

            if (address_type & IPV6_ADDRESS_LINKLOCAL)
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	f003 0301 	and.w	r3, r3, #1
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d00a      	beq.n	8015f66 <_nxd_ipv6_interface_find+0xf0>
            {

                /* Destination address is link local. */
                if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 8015f50:	6a3b      	ldr	r3, [r7, #32]
 8015f52:	3308      	adds	r3, #8
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7f9 fd0b 	bl	800f970 <IPv6_Address_Type>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	f003 0301 	and.w	r3, r3, #1
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d031      	beq.n	8015fc8 <_nxd_ipv6_interface_find+0x152>
                {

                    /* Found link local address as source. */
                    break;
 8015f64:	e03a      	b.n	8015fdc <_nxd_ipv6_interface_find+0x166>
                }
            }
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8015f66:	6a3b      	ldr	r3, [r7, #32]
 8015f68:	f103 0108 	add.w	r1, r3, #8
                                                      ipv6_address -> nxd_ipv6_address_prefix_length) >=
 8015f6c:	6a3b      	ldr	r3, [r7, #32]
 8015f6e:	78db      	ldrb	r3, [r3, #3]
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8015f70:	461a      	mov	r2, r3
 8015f72:	68b8      	ldr	r0, [r7, #8]
 8015f74:	f7ff ff13 	bl	8015d9e <_nxd_ipv6_find_max_prefix_length>
 8015f78:	4602      	mov	r2, r0
                     ipv6_address -> nxd_ipv6_address_prefix_length)
 8015f7a:	6a3b      	ldr	r3, [r7, #32]
 8015f7c:	78db      	ldrb	r3, [r3, #3]
            else if (_nxd_ipv6_find_max_prefix_length(dest_address, ipv6_address -> nxd_ipv6_address,
 8015f7e:	429a      	cmp	r2, r3
 8015f80:	d229      	bcs.n	8015fd6 <_nxd_ipv6_interface_find+0x160>

                /* Found a proper outgoing address. */
                break;
            }
            /* Check for a multicast destination address.*/
            else if (address_type & IPV6_ADDRESS_MULTICAST)
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d01d      	beq.n	8015fc8 <_nxd_ipv6_interface_find+0x152>
                /* This indicates a global IP multicast. */
                /* So we need to make a best guess at the
                   address index of the host global address. */

                /* Determine(LLA vs Global IP address type from the higher order bytes. */
                if ((dest_address[0] & 0x000F0000) == 0x00020000)
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8015f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015f98:	d10a      	bne.n	8015fb0 <_nxd_ipv6_interface_find+0x13a>
                {

                    /* Check for a link local IP address. */
                    if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 8015f9a:	6a3b      	ldr	r3, [r7, #32]
 8015f9c:	3308      	adds	r3, #8
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f7f9 fce6 	bl	800f970 <IPv6_Address_Type>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	f003 0301 	and.w	r3, r3, #1
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d00c      	beq.n	8015fc8 <_nxd_ipv6_interface_find+0x152>
                    {

                        /* This will do! */
                        break;
 8015fae:	e015      	b.n	8015fdc <_nxd_ipv6_interface_find+0x166>
                    }
                }
                /* Check for a global IP address. */
                else if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_GLOBAL)
 8015fb0:	6a3b      	ldr	r3, [r7, #32]
 8015fb2:	3308      	adds	r3, #8
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f7f9 fcdb 	bl	800f970 <IPv6_Address_Type>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	f003 0304 	and.w	r3, r3, #4
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d10a      	bne.n	8015fda <_nxd_ipv6_interface_find+0x164>
 8015fc4:	e000      	b.n	8015fc8 <_nxd_ipv6_interface_find+0x152>
                continue;
 8015fc6:	bf00      	nop
             ipv6_address = ipv6_address -> nxd_ipv6_address_next)
 8015fc8:	6a3b      	ldr	r3, [r7, #32]
 8015fca:	699b      	ldr	r3, [r3, #24]
 8015fcc:	623b      	str	r3, [r7, #32]
        for (ipv6_address = ip_ptr -> nx_ip_interface[i].nxd_interface_ipv6_address_list_head;
 8015fce:	6a3b      	ldr	r3, [r7, #32]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d1b4      	bne.n	8015f3e <_nxd_ipv6_interface_find+0xc8>
 8015fd4:	e002      	b.n	8015fdc <_nxd_ipv6_interface_find+0x166>
                break;
 8015fd6:	bf00      	nop
 8015fd8:	e000      	b.n	8015fdc <_nxd_ipv6_interface_find+0x166>
                {

                    /* This will do! */
                    break;
 8015fda:	bf00      	nop
                }
            }
        }

        if (ipv6_address)
 8015fdc:	6a3b      	ldr	r3, [r7, #32]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d005      	beq.n	8015fee <_nxd_ipv6_interface_find+0x178>
        {

            /* Found a proper address. */
            *ipv6_addr = ipv6_address;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	6a3a      	ldr	r2, [r7, #32]
 8015fe6:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 8015fe8:	2300      	movs	r3, #0
 8015fea:	e070      	b.n	80160ce <_nxd_ipv6_interface_find+0x258>
            continue;
 8015fec:	bf00      	nop
    for (i = start_index; i < end_index; i++)
 8015fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8015ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ff6:	69bb      	ldr	r3, [r7, #24]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d38a      	bcc.n	8015f12 <_nxd_ipv6_interface_find+0x9c>
        }
    }

#ifndef NX_DISABLE_LOOPBACK_INTERFACE
    /* Get ipv6 address in the loop back interface. */
    ipv6_address = ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nxd_interface_ipv6_address_list_head;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	f8d3 3ca0 	ldr.w	r3, [r3, #3232]	; 0xca0
 8016002:	623b      	str	r3, [r7, #32]
    if (ipv6_address)
 8016004:	6a3b      	ldr	r3, [r7, #32]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d00d      	beq.n	8016026 <_nxd_ipv6_interface_find+0x1b0>
    {

        /* Check whether the destination is loop back address. */
        if (CHECK_IPV6_ADDRESSES_SAME(ipv6_address -> nxd_ipv6_address, dest_address))
 801600a:	6a3b      	ldr	r3, [r7, #32]
 801600c:	3308      	adds	r3, #8
 801600e:	68b9      	ldr	r1, [r7, #8]
 8016010:	4618      	mov	r0, r3
 8016012:	f7f9 fba8 	bl	800f766 <CHECK_IPV6_ADDRESSES_SAME>
 8016016:	4603      	mov	r3, r0
 8016018:	2b00      	cmp	r3, #0
 801601a:	d004      	beq.n	8016026 <_nxd_ipv6_interface_find+0x1b0>
        {
            *ipv6_addr = ipv6_address;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6a3a      	ldr	r2, [r7, #32]
 8016020:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 8016022:	2300      	movs	r3, #0
 8016024:	e053      	b.n	80160ce <_nxd_ipv6_interface_find+0x258>
        }
    }
#endif /* NX_DISABLE_LOOPBACK_INTERFACE */

    /* Is the destination address gloabl? */
    if (address_type & IPV6_ADDRESS_GLOBAL)
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	f003 0304 	and.w	r3, r3, #4
 801602c:	2b00      	cmp	r3, #0
 801602e:	d04d      	beq.n	80160cc <_nxd_ipv6_interface_find+0x256>
    {

        /* Yes. Check default router. */
        for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 8016030:	2300      	movs	r3, #0
 8016032:	627b      	str	r3, [r7, #36]	; 0x24
 8016034:	e047      	b.n	80160c6 <_nxd_ipv6_interface_find+0x250>
        {

            rt_entry = &ip_ptr -> nx_ipv6_default_router_table[i];
 8016036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016038:	4613      	mov	r3, r2
 801603a:	00db      	lsls	r3, r3, #3
 801603c:	1a9b      	subs	r3, r3, r2
 801603e:	009b      	lsls	r3, r3, #2
 8016040:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8016044:	68fa      	ldr	r2, [r7, #12]
 8016046:	4413      	add	r3, r2
 8016048:	3304      	adds	r3, #4
 801604a:	613b      	str	r3, [r7, #16]

            /* Skip invalid entries. */
            if (rt_entry -> nx_ipv6_default_router_entry_flag == 0)
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	781b      	ldrb	r3, [r3, #0]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d030      	beq.n	80160b6 <_nxd_ipv6_interface_find+0x240>
            {
                continue;
            }

            /* Skip interface which is down. */
            if (rt_entry -> nx_ipv6_default_router_entry_interface_ptr -> nx_interface_link_up == NX_FALSE)
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	695b      	ldr	r3, [r3, #20]
 8016058:	799b      	ldrb	r3, [r3, #6]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d02d      	beq.n	80160ba <_nxd_ipv6_interface_find+0x244>
            {
                continue;
            }

            /* Skip not matched interface. */
            if (if_ptr && (rt_entry -> nx_ipv6_default_router_entry_interface_ptr != if_ptr))
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d004      	beq.n	801606e <_nxd_ipv6_interface_find+0x1f8>
 8016064:	693b      	ldr	r3, [r7, #16]
 8016066:	695b      	ldr	r3, [r3, #20]
 8016068:	683a      	ldr	r2, [r7, #0]
 801606a:	429a      	cmp	r2, r3
 801606c:	d127      	bne.n	80160be <_nxd_ipv6_interface_find+0x248>
            {
                continue;
            }

            /* Get first address from interface. */
            ipv6_address = rt_entry -> nx_ipv6_default_router_entry_interface_ptr -> nxd_interface_ipv6_address_list_head;
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	695b      	ldr	r3, [r3, #20]
 8016072:	6a1b      	ldr	r3, [r3, #32]
 8016074:	623b      	str	r3, [r7, #32]

            while (ipv6_address)
 8016076:	e01a      	b.n	80160ae <_nxd_ipv6_interface_find+0x238>
            {

                /* Check for a valid address. */
                if (ipv6_address -> nxd_ipv6_address_state != NX_IPV6_ADDR_STATE_VALID)
 8016078:	6a3b      	ldr	r3, [r7, #32]
 801607a:	789b      	ldrb	r3, [r3, #2]
 801607c:	2b04      	cmp	r3, #4
 801607e:	d003      	beq.n	8016088 <_nxd_ipv6_interface_find+0x212>
                {
                    ipv6_address = ipv6_address -> nxd_ipv6_address_next;
 8016080:	6a3b      	ldr	r3, [r7, #32]
 8016082:	699b      	ldr	r3, [r3, #24]
 8016084:	623b      	str	r3, [r7, #32]
 8016086:	e012      	b.n	80160ae <_nxd_ipv6_interface_find+0x238>
                }
                /* Check for link-local address. */
                else if (IPv6_Address_Type(ipv6_address -> nxd_ipv6_address) & IPV6_ADDRESS_LINKLOCAL)
 8016088:	6a3b      	ldr	r3, [r7, #32]
 801608a:	3308      	adds	r3, #8
 801608c:	4618      	mov	r0, r3
 801608e:	f7f9 fc6f 	bl	800f970 <IPv6_Address_Type>
 8016092:	4603      	mov	r3, r0
 8016094:	f003 0301 	and.w	r3, r3, #1
 8016098:	2b00      	cmp	r3, #0
 801609a:	d003      	beq.n	80160a4 <_nxd_ipv6_interface_find+0x22e>
                {
                    ipv6_address = ipv6_address -> nxd_ipv6_address_next;
 801609c:	6a3b      	ldr	r3, [r7, #32]
 801609e:	699b      	ldr	r3, [r3, #24]
 80160a0:	623b      	str	r3, [r7, #32]
 80160a2:	e004      	b.n	80160ae <_nxd_ipv6_interface_find+0x238>
                }
                else
                {
                    *ipv6_addr = ipv6_address;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	6a3a      	ldr	r2, [r7, #32]
 80160a8:	601a      	str	r2, [r3, #0]

                    /* Found global address as link-local address. */
                    return(NX_SUCCESS);
 80160aa:	2300      	movs	r3, #0
 80160ac:	e00f      	b.n	80160ce <_nxd_ipv6_interface_find+0x258>
            while (ipv6_address)
 80160ae:	6a3b      	ldr	r3, [r7, #32]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d1e1      	bne.n	8016078 <_nxd_ipv6_interface_find+0x202>
 80160b4:	e004      	b.n	80160c0 <_nxd_ipv6_interface_find+0x24a>
                continue;
 80160b6:	bf00      	nop
 80160b8:	e002      	b.n	80160c0 <_nxd_ipv6_interface_find+0x24a>
                continue;
 80160ba:	bf00      	nop
 80160bc:	e000      	b.n	80160c0 <_nxd_ipv6_interface_find+0x24a>
                continue;
 80160be:	bf00      	nop
        for (i = 0; i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; i++)
 80160c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c2:	3301      	adds	r3, #1
 80160c4:	627b      	str	r3, [r7, #36]	; 0x24
 80160c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c8:	2b07      	cmp	r3, #7
 80160ca:	d9b4      	bls.n	8016036 <_nxd_ipv6_interface_find+0x1c0>
            }
        }
    }

    /* No available interface. */
    return(NX_NO_INTERFACE_ADDRESS);
 80160cc:	2350      	movs	r3, #80	; 0x50
}
 80160ce:	4618      	mov	r0, r3
 80160d0:	3728      	adds	r7, #40	; 0x28
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}

080160d6 <_nxd_ipv6_prefix_router_timer_tick>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nxd_ipv6_prefix_router_timer_tick(NX_IP *ip_ptr)
{
 80160d6:	b580      	push	{r7, lr}
 80160d8:	b088      	sub	sp, #32
 80160da:	af00      	add	r7, sp, #0
 80160dc:	6078      	str	r0, [r7, #4]
NX_IPV6_PREFIX_ENTRY         *tmp, *prefix_entry;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;


    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_default_router_table_size;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8b3 3cd0 	ldrh.w	r3, [r3, #3280]	; 0xcd0
 80160e4:	61bb      	str	r3, [r7, #24]

    /* Check each entry in the default router table. */
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 80160e6:	2300      	movs	r3, #0
 80160e8:	61fb      	str	r3, [r7, #28]
 80160ea:	e044      	b.n	8016176 <_nxd_ipv6_prefix_router_timer_tick+0xa0>
    {

        /* Set a local variable for convenience. */
        rt_entry = &ip_ptr -> nx_ipv6_default_router_table[i];
 80160ec:	69fa      	ldr	r2, [r7, #28]
 80160ee:	4613      	mov	r3, r2
 80160f0:	00db      	lsls	r3, r3, #3
 80160f2:	1a9b      	subs	r3, r3, r2
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	4413      	add	r3, r2
 80160fe:	3304      	adds	r3, #4
 8016100:	613b      	str	r3, [r7, #16]

        /* Skip invalid or empty slots. */
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) == 0)
 8016102:	693b      	ldr	r3, [r7, #16]
 8016104:	781b      	ldrb	r3, [r3, #0]
 8016106:	b25b      	sxtb	r3, r3
 8016108:	2b00      	cmp	r3, #0
 801610a:	da30      	bge.n	801616e <_nxd_ipv6_prefix_router_timer_tick+0x98>
        {
            continue;
        }

        /* Keep track of valid entries we've checked. */
        table_size--;
 801610c:	69bb      	ldr	r3, [r7, #24]
 801610e:	3b01      	subs	r3, #1
 8016110:	61bb      	str	r3, [r7, #24]

        /* Has the entry on the current table entry expired? */
        if (rt_entry -> nx_ipv6_default_router_entry_life_time == 0)
 8016112:	693b      	ldr	r3, [r7, #16]
 8016114:	885b      	ldrh	r3, [r3, #2]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d11c      	bne.n	8016154 <_nxd_ipv6_prefix_router_timer_tick+0x7e>
        {

            /* Yes, the router has timed out. */
            /* Does this router have an entry in the ND cache table? */
            if (rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr)
 801611a:	693b      	ldr	r3, [r7, #16]
 801611c:	699b      	ldr	r3, [r3, #24]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d003      	beq.n	801612a <_nxd_ipv6_prefix_router_timer_tick+0x54>
            {

                /* Yes, clear out that entry, we are invalidating this entry. */
                rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr -> nx_nd_cache_is_router = NX_NULL;
 8016122:	693b      	ldr	r3, [r7, #16]
 8016124:	699b      	ldr	r3, [r3, #24]
 8016126:	2200      	movs	r2, #0
 8016128:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Clean any entries in the destination table for this router.  */
            _nx_invalidate_destination_entry(ip_ptr, rt_entry -> nx_ipv6_default_router_entry_router_address);
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	3304      	adds	r3, #4
 801612e:	4619      	mov	r1, r3
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f7f5 fff3 	bl	800c11c <_nx_invalidate_destination_entry>

            /* Invalidate the entry in the router table. */
            rt_entry -> nx_ipv6_default_router_entry_flag = 0;
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	2200      	movs	r2, #0
 801613a:	701a      	strb	r2, [r3, #0]

            /* Clear the interface pointer .*/
            rt_entry -> nx_ipv6_default_router_entry_interface_ptr = NX_NULL;
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	2200      	movs	r2, #0
 8016140:	615a      	str	r2, [r3, #20]

            /* Decrease the IP instance default router count. */
            ip_ptr -> nx_ipv6_default_router_table_size--;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f8b3 3cd0 	ldrh.w	r3, [r3, #3280]	; 0xcd0
 8016148:	3b01      	subs	r3, #1
 801614a:	b29a      	uxth	r2, r3
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8a3 2cd0 	strh.w	r2, [r3, #3280]	; 0xcd0
 8016152:	e00d      	b.n	8016170 <_nxd_ipv6_prefix_router_timer_tick+0x9a>
        }
        else
        {
            /* Is this a static router (infinite timeout)? */
            if (rt_entry -> nx_ipv6_default_router_entry_life_time != 0xFFFF)
 8016154:	693b      	ldr	r3, [r7, #16]
 8016156:	885b      	ldrh	r3, [r3, #2]
 8016158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801615c:	4293      	cmp	r3, r2
 801615e:	d007      	beq.n	8016170 <_nxd_ipv6_prefix_router_timer_tick+0x9a>
            {

                /* No, so decrement the lifetime by one tick.*/
                rt_entry -> nx_ipv6_default_router_entry_life_time--;
 8016160:	693b      	ldr	r3, [r7, #16]
 8016162:	885b      	ldrh	r3, [r3, #2]
 8016164:	3b01      	subs	r3, #1
 8016166:	b29a      	uxth	r2, r3
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	805a      	strh	r2, [r3, #2]
 801616c:	e000      	b.n	8016170 <_nxd_ipv6_prefix_router_timer_tick+0x9a>
            continue;
 801616e:	bf00      	nop
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8016170:	69fb      	ldr	r3, [r7, #28]
 8016172:	3301      	adds	r3, #1
 8016174:	61fb      	str	r3, [r7, #28]
 8016176:	69bb      	ldr	r3, [r7, #24]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d002      	beq.n	8016182 <_nxd_ipv6_prefix_router_timer_tick+0xac>
 801617c:	69fb      	ldr	r3, [r7, #28]
 801617e:	2b07      	cmp	r3, #7
 8016180:	d9b4      	bls.n	80160ec <_nxd_ipv6_prefix_router_timer_tick+0x16>
            }
        }
    }

    /* Set a pointer to the first prefix entry in the IP prefix list. */
    prefix_entry = ip_ptr -> nx_ipv6_prefix_list_ptr;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f8d3 3eb8 	ldr.w	r3, [r3, #3768]	; 0xeb8
 8016188:	617b      	str	r3, [r7, #20]

    /* Loop through the entire list. */
    while (prefix_entry)
 801618a:	e017      	b.n	80161bc <_nxd_ipv6_prefix_router_timer_tick+0xe6>
    {

        /* Set a placemarker at the current prefix. */
        tmp = prefix_entry;
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	60fb      	str	r3, [r7, #12]

        /* Get a pointer to the next prefix. */
        prefix_entry = prefix_entry -> nx_ipv6_prefix_entry_next;
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	69db      	ldr	r3, [r3, #28]
 8016194:	617b      	str	r3, [r7, #20]

        /* Skip the static entries. */
        if (tmp -> nx_ipv6_prefix_entry_valid_lifetime != (UINT)0xFFFFFFFF)
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	695b      	ldr	r3, [r3, #20]
 801619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801619e:	d00d      	beq.n	80161bc <_nxd_ipv6_prefix_router_timer_tick+0xe6>
        {

            /* Has the prefix entry timeout expired? */
            if (tmp -> nx_ipv6_prefix_entry_valid_lifetime == 0)
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	695b      	ldr	r3, [r3, #20]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d104      	bne.n	80161b2 <_nxd_ipv6_prefix_router_timer_tick+0xdc>
            {

                /* Yes, so delete it from the list. */
                _nx_ipv6_prefix_list_delete_entry(ip_ptr, tmp);
 80161a8:	68f9      	ldr	r1, [r7, #12]
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f7f9 f899 	bl	800f2e2 <_nx_ipv6_prefix_list_delete_entry>
 80161b0:	e004      	b.n	80161bc <_nxd_ipv6_prefix_router_timer_tick+0xe6>
            }
            else
            {

                /* Just decrement the time remaining. */
                tmp -> nx_ipv6_prefix_entry_valid_lifetime--;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	695b      	ldr	r3, [r3, #20]
 80161b6:	1e5a      	subs	r2, r3, #1
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	615a      	str	r2, [r3, #20]
    while (prefix_entry)
 80161bc:	697b      	ldr	r3, [r7, #20]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d1e4      	bne.n	801618c <_nxd_ipv6_prefix_router_timer_tick+0xb6>
            }
        }
    }

    return;
 80161c2:	bf00      	nop
}
 80161c4:	3720      	adds	r7, #32
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}

080161ca <_nxd_ipv6_router_lookup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_ipv6_router_lookup(NX_IP *ip_ptr, NX_INTERFACE *if_ptr, ULONG *router_address, void **nd_cache_entry)
{
 80161ca:	b580      	push	{r7, lr}
 80161cc:	b08a      	sub	sp, #40	; 0x28
 80161ce:	af00      	add	r7, sp, #0
 80161d0:	60f8      	str	r0, [r7, #12]
 80161d2:	60b9      	str	r1, [r7, #8]
 80161d4:	607a      	str	r2, [r7, #4]
 80161d6:	603b      	str	r3, [r7, #0]
UINT                          table_size;
UINT                          routers_checked;
NX_IPV6_DEFAULT_ROUTER_ENTRY *rt_entry;
ND_CACHE_ENTRY               *NDCacheEntry;

    NX_ASSERT(nd_cache_entry != NX_NULL)
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d104      	bne.n	80161e8 <_nxd_ipv6_router_lookup+0x1e>
 80161de:	f04f 30ff 	mov.w	r0, #4294967295
 80161e2:	f002 fe71 	bl	8018ec8 <_tx_thread_sleep>
 80161e6:	e7fa      	b.n	80161de <_nxd_ipv6_router_lookup+0x14>

    /* Initialize cache pointer to NULL (if no router found). */
    *nd_cache_entry = NULL;
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	2200      	movs	r2, #0
 80161ec:	601a      	str	r2, [r3, #0]

    /* Set a local variable for convenience. */
    table_size = ip_ptr -> nx_ipv6_default_router_table_size;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	f8b3 3cd0 	ldrh.w	r3, [r3, #3280]	; 0xcd0
 80161f4:	623b      	str	r3, [r7, #32]

    /* Check if there have been any routers added to the table. */
    if (table_size == 0)
 80161f6:	6a3b      	ldr	r3, [r7, #32]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d101      	bne.n	8016200 <_nxd_ipv6_router_lookup+0x36>
    {

        /* Return a non zero (e.g. unsuccessful) error status. */
        return(NX_NOT_SUCCESSFUL);
 80161fc:	2343      	movs	r3, #67	; 0x43
 80161fe:	e096      	b.n	801632e <_nxd_ipv6_router_lookup+0x164>
    }

    /* Loop to check the router table.  */
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 8016200:	2300      	movs	r3, #0
 8016202:	627b      	str	r3, [r7, #36]	; 0x24
 8016204:	e045      	b.n	8016292 <_nxd_ipv6_router_lookup+0xc8>
    {

        /* Local pointer for convenience. */
        rt_entry = &(ip_ptr -> nx_ipv6_default_router_table[i]);
 8016206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016208:	4613      	mov	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	1a9b      	subs	r3, r3, r2
 801620e:	009b      	lsls	r3, r3, #2
 8016210:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8016214:	68fa      	ldr	r2, [r7, #12]
 8016216:	4413      	add	r3, r2
 8016218:	3304      	adds	r3, #4
 801621a:	61bb      	str	r3, [r7, #24]

        /* Does this slot contain a valid router? */
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801621c:	69bb      	ldr	r3, [r7, #24]
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	b25b      	sxtb	r3, r3
 8016222:	2b00      	cmp	r3, #0
 8016224:	da32      	bge.n	801628c <_nxd_ipv6_router_lookup+0xc2>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 8016226:	69bb      	ldr	r3, [r7, #24]
 8016228:	695b      	ldr	r3, [r3, #20]
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 801622a:	68ba      	ldr	r2, [r7, #8]
 801622c:	429a      	cmp	r2, r3
 801622e:	d12d      	bne.n	801628c <_nxd_ipv6_router_lookup+0xc2>
        {

            /* Keep track of valid entries we have checked. */
            NDCacheEntry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8016230:	69bb      	ldr	r3, [r7, #24]
 8016232:	699b      	ldr	r3, [r3, #24]
 8016234:	617b      	str	r3, [r7, #20]

            /* Is this router reachable? */
            if (!NDCacheEntry ||
 8016236:	697b      	ldr	r3, [r7, #20]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d007      	beq.n	801624c <_nxd_ipv6_router_lookup+0x82>
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	7e5b      	ldrb	r3, [r3, #25]
            if (!NDCacheEntry ||
 8016240:	2b01      	cmp	r3, #1
 8016242:	d903      	bls.n	801624c <_nxd_ipv6_router_lookup+0x82>
                (NDCacheEntry -> nx_nd_cache_nd_status > ND_CACHE_STATE_PROBE))
 8016244:	697b      	ldr	r3, [r7, #20]
 8016246:	7e5b      	ldrb	r3, [r3, #25]
                (NDCacheEntry -> nx_nd_cache_nd_status < ND_CACHE_STATE_REACHABLE) ||
 8016248:	2b05      	cmp	r3, #5
 801624a:	d903      	bls.n	8016254 <_nxd_ipv6_router_lookup+0x8a>
            {

                /* No, skip over. */
                table_size--;
 801624c:	6a3b      	ldr	r3, [r7, #32]
 801624e:	3b01      	subs	r3, #1
 8016250:	623b      	str	r3, [r7, #32]
                continue;
 8016252:	e01b      	b.n	801628c <_nxd_ipv6_router_lookup+0xc2>
            }

            /* Yes, copy this router address into the return pointer. */
            COPY_IPV6_ADDRESS(ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_router_address, router_address);
 8016254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016256:	4613      	mov	r3, r2
 8016258:	00db      	lsls	r3, r3, #3
 801625a:	1a9b      	subs	r3, r3, r2
 801625c:	009b      	lsls	r3, r3, #2
 801625e:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8016262:	68fa      	ldr	r2, [r7, #12]
 8016264:	4413      	add	r3, r2
 8016266:	3308      	adds	r3, #8
 8016268:	6879      	ldr	r1, [r7, #4]
 801626a:	4618      	mov	r0, r3
 801626c:	f7f9 fae0 	bl	800f830 <COPY_IPV6_ADDRESS>

            /* Copy the router's cache entry pointer to the supplied cache table pointer. */
            *nd_cache_entry = ip_ptr -> nx_ipv6_default_router_table[i].nx_ipv6_default_router_entry_neighbor_cache_ptr;
 8016270:	68f9      	ldr	r1, [r7, #12]
 8016272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016274:	4613      	mov	r3, r2
 8016276:	00db      	lsls	r3, r3, #3
 8016278:	1a9b      	subs	r3, r3, r2
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	440b      	add	r3, r1
 801627e:	f603 43ec 	addw	r3, r3, #3308	; 0xcec
 8016282:	681a      	ldr	r2, [r3, #0]
 8016284:	683b      	ldr	r3, [r7, #0]
 8016286:	601a      	str	r2, [r3, #0]

            /* We're done. Break out of the search. */
            return(NX_SUCCESS);
 8016288:	2300      	movs	r3, #0
 801628a:	e050      	b.n	801632e <_nxd_ipv6_router_lookup+0x164>
    for (i = 0; table_size && (i < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE); i++)
 801628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801628e:	3301      	adds	r3, #1
 8016290:	627b      	str	r3, [r7, #36]	; 0x24
 8016292:	6a3b      	ldr	r3, [r7, #32]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d002      	beq.n	801629e <_nxd_ipv6_router_lookup+0xd4>
 8016298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629a:	2b07      	cmp	r3, #7
 801629c:	d9b3      	bls.n	8016206 <_nxd_ipv6_router_lookup+0x3c>
    /* If we are here, we did not find a suitable default router. Do a search
       of routers previously reachable. */

    /* Start at the round robin index so we don't always choose the first
       less-than-reachable router in the table. */
    i = ip_ptr -> nx_ipv6_default_router_table_round_robin_index;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	f8d3 3db4 	ldr.w	r3, [r3, #3508]	; 0xdb4
 80162a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a router with previously known reachability. */
    for (routers_checked = 0; routers_checked < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; routers_checked++)
 80162a6:	2300      	movs	r3, #0
 80162a8:	61fb      	str	r3, [r7, #28]
 80162aa:	e03c      	b.n	8016326 <_nxd_ipv6_router_lookup+0x15c>
    {

        /* Local pointer for convenience. */
        rt_entry = &(ip_ptr -> nx_ipv6_default_router_table[i]);
 80162ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162ae:	4613      	mov	r3, r2
 80162b0:	00db      	lsls	r3, r3, #3
 80162b2:	1a9b      	subs	r3, r3, r2
 80162b4:	009b      	lsls	r3, r3, #2
 80162b6:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 80162ba:	68fa      	ldr	r2, [r7, #12]
 80162bc:	4413      	add	r3, r2
 80162be:	3304      	adds	r3, #4
 80162c0:	61bb      	str	r3, [r7, #24]

        /* Does this slot contain a valid router? */
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80162c2:	69bb      	ldr	r3, [r7, #24]
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	b25b      	sxtb	r3, r3
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	da20      	bge.n	801630e <_nxd_ipv6_router_lookup+0x144>
            (rt_entry -> nx_ipv6_default_router_entry_interface_ptr == if_ptr))
 80162cc:	69bb      	ldr	r3, [r7, #24]
 80162ce:	695b      	ldr	r3, [r3, #20]
        if ((rt_entry -> nx_ipv6_default_router_entry_flag & NX_IPV6_ROUTE_TYPE_VALID) &&
 80162d0:	68ba      	ldr	r2, [r7, #8]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d11b      	bne.n	801630e <_nxd_ipv6_router_lookup+0x144>
        {

            /* Yes, copy this router to the return pointer. */
            COPY_IPV6_ADDRESS(rt_entry -> nx_ipv6_default_router_entry_router_address, router_address);
 80162d6:	69bb      	ldr	r3, [r7, #24]
 80162d8:	3304      	adds	r3, #4
 80162da:	6879      	ldr	r1, [r7, #4]
 80162dc:	4618      	mov	r0, r3
 80162de:	f7f9 faa7 	bl	800f830 <COPY_IPV6_ADDRESS>

            /* Copy the router's cache entry pointer to the supplied cache table pointer. */
            *nd_cache_entry = rt_entry -> nx_ipv6_default_router_entry_neighbor_cache_ptr;
 80162e2:	69bb      	ldr	r3, [r7, #24]
 80162e4:	699a      	ldr	r2, [r3, #24]
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	601a      	str	r2, [r3, #0]

            /* Update the index so the same router is not chosen again if there
               any other less-than-reachable routers we can choose, RFC 2461 6.3.6. */
            ip_ptr -> nx_ipv6_default_router_table_round_robin_index++;
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	f8d3 3db4 	ldr.w	r3, [r3, #3508]	; 0xdb4
 80162f0:	1c5a      	adds	r2, r3, #1
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	f8c3 2db4 	str.w	r2, [r3, #3508]	; 0xdb4

            /* Do we need wrap the index? */
            if (ip_ptr -> nx_ipv6_default_router_table_round_robin_index == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE)
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	f8d3 3db4 	ldr.w	r3, [r3, #3508]	; 0xdb4
 80162fe:	2b08      	cmp	r3, #8
 8016300:	d103      	bne.n	801630a <_nxd_ipv6_router_lookup+0x140>
            {

                /* Yes, start back at the first slot. */
                ip_ptr -> nx_ipv6_default_router_table_round_robin_index = 0;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	2200      	movs	r2, #0
 8016306:	f8c3 2db4 	str.w	r2, [r3, #3508]	; 0xdb4
            }

            /* We're done. Return successful outcome status. */
            return(NX_SUCCESS);
 801630a:	2300      	movs	r3, #0
 801630c:	e00f      	b.n	801632e <_nxd_ipv6_router_lookup+0x164>
        }

        /* Are we past the end of the table? */
        if (i == NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE - 1)
 801630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016310:	2b07      	cmp	r3, #7
 8016312:	d102      	bne.n	801631a <_nxd_ipv6_router_lookup+0x150>
        {
            /* Yes, wrap to the first slot.*/
            i = 0;
 8016314:	2300      	movs	r3, #0
 8016316:	627b      	str	r3, [r7, #36]	; 0x24
 8016318:	e002      	b.n	8016320 <_nxd_ipv6_router_lookup+0x156>
        }
        else
        {
            i++;
 801631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631c:	3301      	adds	r3, #1
 801631e:	627b      	str	r3, [r7, #36]	; 0x24
    for (routers_checked = 0; routers_checked < NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE; routers_checked++)
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	3301      	adds	r3, #1
 8016324:	61fb      	str	r3, [r7, #28]
 8016326:	69fb      	ldr	r3, [r7, #28]
 8016328:	2b07      	cmp	r3, #7
 801632a:	d9bf      	bls.n	80162ac <_nxd_ipv6_router_lookup+0xe2>
        }
    }

    /* Router not found. */
    return(NX_NOT_SUCCESSFUL);
 801632c:	2343      	movs	r3, #67	; 0x43
}
 801632e:	4618      	mov	r0, r3
 8016330:	3728      	adds	r7, #40	; 0x28
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}

08016336 <_nxd_ipv6_router_solicitation_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
void _nxd_ipv6_router_solicitation_check(NX_IP *ip_ptr)
{
 8016336:	b580      	push	{r7, lr}
 8016338:	b084      	sub	sp, #16
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
UINT i;

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 801633e:	2300      	movs	r3, #0
 8016340:	60fb      	str	r3, [r7, #12]
 8016342:	e081      	b.n	8016448 <_nxd_ipv6_router_solicitation_check+0x112>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_TRUE)
 8016344:	687a      	ldr	r2, [r7, #4]
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	214c      	movs	r1, #76	; 0x4c
 801634a:	fb01 f303 	mul.w	r3, r1, r3
 801634e:	4413      	add	r3, r2
 8016350:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	2b01      	cmp	r3, #1
 8016358:	d173      	bne.n	8016442 <_nxd_ipv6_router_solicitation_check+0x10c>
        {

            /* Check if max number of router solicitation messages have been sent. */
            if (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count != 0)
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	214c      	movs	r1, #76	; 0x4c
 8016360:	fb01 f303 	mul.w	r3, r1, r3
 8016364:	4413      	add	r3, r2
 8016366:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d068      	beq.n	8016442 <_nxd_ipv6_router_solicitation_check+0x10c>
            {

                /* Check on count down timer for sending out next router solicitation message. */
                ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer--;
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	214c      	movs	r1, #76	; 0x4c
 8016376:	fb01 f303 	mul.w	r3, r1, r3
 801637a:	4413      	add	r3, r2
 801637c:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	1e5a      	subs	r2, r3, #1
 8016384:	6879      	ldr	r1, [r7, #4]
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	204c      	movs	r0, #76	; 0x4c
 801638a:	fb00 f303 	mul.w	r3, r0, r3
 801638e:	440b      	add	r3, r1
 8016390:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8016394:	601a      	str	r2, [r3, #0]
                if (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer == 0)
 8016396:	687a      	ldr	r2, [r7, #4]
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	214c      	movs	r1, #76	; 0x4c
 801639c:	fb01 f303 	mul.w	r3, r1, r3
 80163a0:	4413      	add	r3, r2
 80163a2:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d14a      	bne.n	8016442 <_nxd_ipv6_router_solicitation_check+0x10c>
                {
                    if (_nx_icmpv6_send_rs(ip_ptr, i) &&
 80163ac:	68f9      	ldr	r1, [r7, #12]
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f7f5 fcc6 	bl	800bd40 <_nx_icmpv6_send_rs>
 80163b4:	4603      	mov	r3, r0
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d01e      	beq.n	80163f8 <_nxd_ipv6_router_solicitation_check+0xc2>
                        (ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count ==
 80163ba:	687a      	ldr	r2, [r7, #4]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	214c      	movs	r1, #76	; 0x4c
 80163c0:	fb01 f303 	mul.w	r3, r1, r3
 80163c4:	4413      	add	r3, r2
 80163c6:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 80163ca:	681a      	ldr	r2, [r3, #0]
                         ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_max))
 80163cc:	6879      	ldr	r1, [r7, #4]
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	204c      	movs	r0, #76	; 0x4c
 80163d2:	fb00 f303 	mul.w	r3, r0, r3
 80163d6:	440b      	add	r3, r1
 80163d8:	f603 435c 	addw	r3, r3, #3164	; 0xc5c
 80163dc:	681b      	ldr	r3, [r3, #0]
                    if (_nx_icmpv6_send_rs(ip_ptr, i) &&
 80163de:	429a      	cmp	r2, r3
 80163e0:	d10a      	bne.n	80163f8 <_nxd_ipv6_router_solicitation_check+0xc2>
                    {

                        /* Initial RS is not sent successfully. */
                        /* Try it next round. */
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer = 1;
 80163e2:	687a      	ldr	r2, [r7, #4]
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	214c      	movs	r1, #76	; 0x4c
 80163e8:	fb01 f303 	mul.w	r3, r1, r3
 80163ec:	4413      	add	r3, r2
 80163ee:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 80163f2:	2201      	movs	r2, #1
 80163f4:	601a      	str	r2, [r3, #0]
 80163f6:	e024      	b.n	8016442 <_nxd_ipv6_router_solicitation_check+0x10c>
                    }
                    else
                    {
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_count--;
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	214c      	movs	r1, #76	; 0x4c
 80163fe:	fb01 f303 	mul.w	r3, r1, r3
 8016402:	4413      	add	r3, r2
 8016404:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	1e5a      	subs	r2, r3, #1
 801640c:	6879      	ldr	r1, [r7, #4]
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	204c      	movs	r0, #76	; 0x4c
 8016412:	fb00 f303 	mul.w	r3, r0, r3
 8016416:	440b      	add	r3, r1
 8016418:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 801641c:	601a      	str	r2, [r3, #0]
                        ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_timer = ip_ptr -> nx_ip_interface[i].nx_ipv6_rtr_solicitation_interval;
 801641e:	687a      	ldr	r2, [r7, #4]
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	214c      	movs	r1, #76	; 0x4c
 8016424:	fb01 f303 	mul.w	r3, r1, r3
 8016428:	4413      	add	r3, r2
 801642a:	f603 4364 	addw	r3, r3, #3172	; 0xc64
 801642e:	681a      	ldr	r2, [r3, #0]
 8016430:	6879      	ldr	r1, [r7, #4]
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	204c      	movs	r0, #76	; 0x4c
 8016436:	fb00 f303 	mul.w	r3, r0, r3
 801643a:	440b      	add	r3, r1
 801643c:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8016440:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	3301      	adds	r3, #1
 8016446:	60fb      	str	r3, [r7, #12]
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	2b00      	cmp	r3, #0
 801644c:	f43f af7a 	beq.w	8016344 <_nxd_ipv6_router_solicitation_check+0xe>
                    }
                }
            }
        }
    }
}
 8016450:	bf00      	nop
 8016452:	bf00      	nop
 8016454:	3710      	adds	r7, #16
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}

0801645a <_nxd_ipv6_search_onlink>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
INT _nxd_ipv6_search_onlink(NX_IP *ip_ptr, ULONG *dest_addr)
{
 801645a:	b580      	push	{r7, lr}
 801645c:	b086      	sub	sp, #24
 801645e:	af00      	add	r7, sp, #0
 8016460:	6078      	str	r0, [r7, #4]
 8016462:	6039      	str	r1, [r7, #0]
NXD_IPV6_ADDRESS     *ipv6_address;


    /* First special case is the link local address. All these
       addresses are onlink.  */
    if (IPv6_Address_Type(dest_addr) & IPV6_ADDRESS_LINKLOCAL)
 8016464:	6838      	ldr	r0, [r7, #0]
 8016466:	f7f9 fa83 	bl	800f970 <IPv6_Address_Type>
 801646a:	4603      	mov	r3, r0
 801646c:	f003 0301 	and.w	r3, r3, #1
 8016470:	2b00      	cmp	r3, #0
 8016472:	d001      	beq.n	8016478 <_nxd_ipv6_search_onlink+0x1e>
    {
        return(1);
 8016474:	2301      	movs	r3, #1
 8016476:	e03f      	b.n	80164f8 <_nxd_ipv6_search_onlink+0x9e>
    }

    /* Set a local pointer for convenience. */
    prefix_entry = ip_ptr -> nx_ipv6_prefix_list_ptr;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f8d3 3eb8 	ldr.w	r3, [r3, #3768]	; 0xeb8
 801647e:	613b      	str	r3, [r7, #16]

    /* Loop through the prefix table. Prefixes are the IPv6 equivalent of
       network domains in IPv4.  */
    while (prefix_entry)
 8016480:	e00e      	b.n	80164a0 <_nxd_ipv6_search_onlink+0x46>
    {

        /* Check whether or not the destination address is matched. */
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
                                         prefix_entry -> nx_ipv6_prefix_entry_network_address,
 8016482:	6939      	ldr	r1, [r7, #16]
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	691b      	ldr	r3, [r3, #16]
 8016488:	461a      	mov	r2, r3
 801648a:	6838      	ldr	r0, [r7, #0]
 801648c:	f7f9 f92e 	bl	800f6ec <CHECK_IP_ADDRESSES_BY_PREFIX>
 8016490:	4603      	mov	r3, r0
 8016492:	2b00      	cmp	r3, #0
 8016494:	d001      	beq.n	801649a <_nxd_ipv6_search_onlink+0x40>
                                         prefix_entry -> nx_ipv6_prefix_entry_prefix_length))
        {
            return(1);
 8016496:	2301      	movs	r3, #1
 8016498:	e02e      	b.n	80164f8 <_nxd_ipv6_search_onlink+0x9e>
        }

        /* No match. Try the next prefix. */
        prefix_entry = prefix_entry -> nx_ipv6_prefix_entry_next;
 801649a:	693b      	ldr	r3, [r7, #16]
 801649c:	69db      	ldr	r3, [r3, #28]
 801649e:	613b      	str	r3, [r7, #16]
    while (prefix_entry)
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d1ed      	bne.n	8016482 <_nxd_ipv6_search_onlink+0x28>
    }

    /* If no matches found in the prefix list, search the manually configured IPv6 interface addresses. */
    for (addr_index = 0; addr_index < NX_MAX_IPV6_ADDRESSES; addr_index++)
 80164a6:	2300      	movs	r3, #0
 80164a8:	617b      	str	r3, [r7, #20]
 80164aa:	e021      	b.n	80164f0 <_nxd_ipv6_search_onlink+0x96>
    {

        ipv6_address = &ip_ptr -> nx_ipv6_address[addr_index];
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	015b      	lsls	r3, r3, #5
 80164b0:	3310      	adds	r3, #16
 80164b2:	687a      	ldr	r2, [r7, #4]
 80164b4:	4413      	add	r3, r2
 80164b6:	60fb      	str	r3, [r7, #12]
        /* Skip invalid entries. */
        if (!(ipv6_address -> nxd_ipv6_address_valid))
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d011      	beq.n	80164e4 <_nxd_ipv6_search_onlink+0x8a>
        {
            continue;
        }

        /* Skip non-manually configured entires. */
        if (ipv6_address -> nxd_ipv6_address_ConfigurationMethod != NX_IPV6_ADDRESS_MANUAL_CONFIG)
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	7f5b      	ldrb	r3, [r3, #29]
 80164c4:	2b01      	cmp	r3, #1
 80164c6:	d10f      	bne.n	80164e8 <_nxd_ipv6_search_onlink+0x8e>
            continue;
        }

        /* Check whether or not the destination address is matched. */
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
                                         ipv6_address -> nxd_ipv6_address,
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	f103 0108 	add.w	r1, r3, #8
                                         ipv6_address -> nxd_ipv6_address_prefix_length))
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	78db      	ldrb	r3, [r3, #3]
        if (CHECK_IP_ADDRESSES_BY_PREFIX(dest_addr,
 80164d2:	461a      	mov	r2, r3
 80164d4:	6838      	ldr	r0, [r7, #0]
 80164d6:	f7f9 f909 	bl	800f6ec <CHECK_IP_ADDRESSES_BY_PREFIX>
 80164da:	4603      	mov	r3, r0
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d004      	beq.n	80164ea <_nxd_ipv6_search_onlink+0x90>
        {
            return(1);
 80164e0:	2301      	movs	r3, #1
 80164e2:	e009      	b.n	80164f8 <_nxd_ipv6_search_onlink+0x9e>
            continue;
 80164e4:	bf00      	nop
 80164e6:	e000      	b.n	80164ea <_nxd_ipv6_search_onlink+0x90>
            continue;
 80164e8:	bf00      	nop
    for (addr_index = 0; addr_index < NX_MAX_IPV6_ADDRESSES; addr_index++)
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	3301      	adds	r3, #1
 80164ee:	617b      	str	r3, [r7, #20]
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	2b02      	cmp	r3, #2
 80164f4:	d9da      	bls.n	80164ac <_nxd_ipv6_search_onlink+0x52>
        }
    }


    /* No matches found. Not an onlink address. */
    return(0);
 80164f6:	2300      	movs	r3, #0
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	3718      	adds	r7, #24
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}

08016500 <_nxde_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxde_icmp_enable(NX_IP *ip_ptr)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b086      	sub	sp, #24
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d004      	beq.n	8016518 <_nxde_icmp_enable+0x18>
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	4a14      	ldr	r2, [pc, #80]	; (8016564 <_nxde_icmp_enable+0x64>)
 8016514:	4293      	cmp	r3, r2
 8016516:	d001      	beq.n	801651c <_nxde_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8016518:	2307      	movs	r3, #7
 801651a:	e01e      	b.n	801655a <_nxde_icmp_enable+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801651c:	f3ef 8305 	mrs	r3, IPSR
 8016520:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016522:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8016524:	4b10      	ldr	r3, [pc, #64]	; (8016568 <_nxde_icmp_enable+0x68>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	4313      	orrs	r3, r2
 801652a:	2b00      	cmp	r3, #0
 801652c:	d009      	beq.n	8016542 <_nxde_icmp_enable+0x42>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801652e:	f3ef 8305 	mrs	r3, IPSR
 8016532:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016534:	68fa      	ldr	r2, [r7, #12]
 8016536:	4b0c      	ldr	r3, [pc, #48]	; (8016568 <_nxde_icmp_enable+0x68>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	4313      	orrs	r3, r2
 801653c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016540:	d304      	bcc.n	801654c <_nxde_icmp_enable+0x4c>
 8016542:	4b0a      	ldr	r3, [pc, #40]	; (801656c <_nxde_icmp_enable+0x6c>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	4a0a      	ldr	r2, [pc, #40]	; (8016570 <_nxde_icmp_enable+0x70>)
 8016548:	4293      	cmp	r3, r2
 801654a:	d101      	bne.n	8016550 <_nxde_icmp_enable+0x50>
 801654c:	2311      	movs	r3, #17
 801654e:	e004      	b.n	801655a <_nxde_icmp_enable+0x5a>

    /* Call actual ICMP enable function.  */
    status =  _nxd_icmp_enable(ip_ptr);
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f7fe fe9f 	bl	8015294 <_nxd_icmp_enable>
 8016556:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016558:	697b      	ldr	r3, [r7, #20]
}
 801655a:	4618      	mov	r0, r3
 801655c:	3718      	adds	r7, #24
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
 8016562:	bf00      	nop
 8016564:	49502020 	.word	0x49502020
 8016568:	2400008c 	.word	0x2400008c
 801656c:	24000874 	.word	0x24000874
 8016570:	240009bc 	.word	0x240009bc

08016574 <_nxde_ipv6_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxde_ipv6_address_get(NX_IP *ip_ptr, UINT address_index, NXD_ADDRESS *ip_address, ULONG *prefix_length, UINT *interface_index)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b08a      	sub	sp, #40	; 0x28
 8016578:	af02      	add	r7, sp, #8
 801657a:	60f8      	str	r0, [r7, #12]
 801657c:	60b9      	str	r1, [r7, #8]
 801657e:	607a      	str	r2, [r7, #4]
 8016580:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid IP pointer.  */
    if (ip_ptr == NX_NULL)
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d101      	bne.n	801658c <_nxde_ipv6_address_get+0x18>
    {
        return(NX_PTR_ERROR);
 8016588:	2307      	movs	r3, #7
 801658a:	e038      	b.n	80165fe <_nxde_ipv6_address_get+0x8a>
    }

    /* Check for other invalid input.  */
    if ((ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (prefix_length == NX_NULL) || (interface_index == NX_NULL))
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	4a1d      	ldr	r2, [pc, #116]	; (8016608 <_nxde_ipv6_address_get+0x94>)
 8016592:	4293      	cmp	r3, r2
 8016594:	d108      	bne.n	80165a8 <_nxde_ipv6_address_get+0x34>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d005      	beq.n	80165a8 <_nxde_ipv6_address_get+0x34>
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d002      	beq.n	80165a8 <_nxde_ipv6_address_get+0x34>
 80165a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d101      	bne.n	80165ac <_nxde_ipv6_address_get+0x38>
    {
        return(NX_PTR_ERROR);
 80165a8:	2307      	movs	r3, #7
 80165aa:	e028      	b.n	80165fe <_nxde_ipv6_address_get+0x8a>
    }

    /* Check the validity of the address index.  */
    if (address_index >= (NX_MAX_IPV6_ADDRESSES + NX_LOOPBACK_IPV6_ENABLED))
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	2b03      	cmp	r3, #3
 80165b0:	d901      	bls.n	80165b6 <_nxde_ipv6_address_get+0x42>
    {
        return(NX_NO_INTERFACE_ADDRESS);
 80165b2:	2350      	movs	r3, #80	; 0x50
 80165b4:	e023      	b.n	80165fe <_nxde_ipv6_address_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80165b6:	f3ef 8305 	mrs	r3, IPSR
 80165ba:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80165bc:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 80165be:	4b13      	ldr	r3, [pc, #76]	; (801660c <_nxde_ipv6_address_get+0x98>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	4313      	orrs	r3, r2
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d009      	beq.n	80165dc <_nxde_ipv6_address_get+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80165c8:	f3ef 8305 	mrs	r3, IPSR
 80165cc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80165ce:	697a      	ldr	r2, [r7, #20]
 80165d0:	4b0e      	ldr	r3, [pc, #56]	; (801660c <_nxde_ipv6_address_get+0x98>)
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	4313      	orrs	r3, r2
 80165d6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80165da:	d304      	bcc.n	80165e6 <_nxde_ipv6_address_get+0x72>
 80165dc:	4b0c      	ldr	r3, [pc, #48]	; (8016610 <_nxde_ipv6_address_get+0x9c>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	4a0c      	ldr	r2, [pc, #48]	; (8016614 <_nxde_ipv6_address_get+0xa0>)
 80165e2:	4293      	cmp	r3, r2
 80165e4:	d101      	bne.n	80165ea <_nxde_ipv6_address_get+0x76>
 80165e6:	2311      	movs	r3, #17
 80165e8:	e009      	b.n	80165fe <_nxde_ipv6_address_get+0x8a>

    /* Call actual IP address get function.  */
    status =  _nxd_ipv6_address_get(ip_ptr, address_index, ip_address, prefix_length, interface_index);
 80165ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ec:	9300      	str	r3, [sp, #0]
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	687a      	ldr	r2, [r7, #4]
 80165f2:	68b9      	ldr	r1, [r7, #8]
 80165f4:	68f8      	ldr	r0, [r7, #12]
 80165f6:	f7fe fe9d 	bl	8015334 <_nxd_ipv6_address_get>
 80165fa:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 80165fc:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3720      	adds	r7, #32
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	49502020 	.word	0x49502020
 801660c:	2400008c 	.word	0x2400008c
 8016610:	24000874 	.word	0x24000874
 8016614:	240009bc 	.word	0x240009bc

08016618 <_nxde_ipv6_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxde_ipv6_address_set(NX_IP *ip_ptr, UINT if_index, NXD_ADDRESS *ip_address, ULONG prefix_length, UINT *address_index)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b08a      	sub	sp, #40	; 0x28
 801661c:	af02      	add	r7, sp, #8
 801661e:	60f8      	str	r0, [r7, #12]
 8016620:	60b9      	str	r1, [r7, #8]
 8016622:	607a      	str	r2, [r7, #4]
 8016624:	603b      	str	r3, [r7, #0]
UINT  status;
ULONG AddressType;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d004      	beq.n	8016636 <_nxde_ipv6_address_set+0x1e>
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4a2b      	ldr	r2, [pc, #172]	; (80166e0 <_nxde_ipv6_address_set+0xc8>)
 8016632:	4293      	cmp	r3, r2
 8016634:	d001      	beq.n	801663a <_nxde_ipv6_address_set+0x22>
    {
        return(NX_PTR_ERROR);
 8016636:	2307      	movs	r3, #7
 8016638:	e04d      	b.n	80166d6 <_nxde_ipv6_address_set+0xbe>
    }

    /* Check for invalid IP addresses.  */

    /* (Do not apply to autoconfigured linklocal addresses) */
    if ((ip_address != NULL) && (prefix_length != 10))
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d008      	beq.n	8016652 <_nxde_ipv6_address_set+0x3a>
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	2b0a      	cmp	r3, #10
 8016644:	d005      	beq.n	8016652 <_nxde_ipv6_address_set+0x3a>
    {

        /* A non null IP address must have the version set. */
        if (ip_address -> nxd_ip_version != NX_IP_VERSION_V6)
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	2b06      	cmp	r3, #6
 801664c:	d001      	beq.n	8016652 <_nxde_ipv6_address_set+0x3a>
        {
            return(NX_IP_ADDRESS_ERROR);
 801664e:	2321      	movs	r3, #33	; 0x21
 8016650:	e041      	b.n	80166d6 <_nxde_ipv6_address_set+0xbe>
        }
    }

    if ((if_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d10a      	bne.n	801666e <_nxde_ipv6_address_set+0x56>
        (ip_ptr -> nx_ip_interface[if_index].nx_interface_valid != NX_TRUE))
 8016658:	68fa      	ldr	r2, [r7, #12]
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	214c      	movs	r1, #76	; 0x4c
 801665e:	fb01 f303 	mul.w	r3, r1, r3
 8016662:	4413      	add	r3, r2
 8016664:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8016668:	781b      	ldrb	r3, [r3, #0]
    if ((if_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 801666a:	2b01      	cmp	r3, #1
 801666c:	d001      	beq.n	8016672 <_nxde_ipv6_address_set+0x5a>
    {
        return(NX_INVALID_INTERFACE);
 801666e:	234c      	movs	r3, #76	; 0x4c
 8016670:	e031      	b.n	80166d6 <_nxde_ipv6_address_set+0xbe>
    }


    /* Make sure the address is unicast address. */
    /* Find out the type of the incoming IP address. */
    if (ip_address)
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d00a      	beq.n	801668e <_nxde_ipv6_address_set+0x76>
    {
        AddressType = IPv6_Address_Type(ip_address -> nxd_ip_address.v6);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	3304      	adds	r3, #4
 801667c:	4618      	mov	r0, r3
 801667e:	f7f9 f977 	bl	800f970 <IPv6_Address_Type>
 8016682:	61f8      	str	r0, [r7, #28]

        if ((AddressType & IPV6_ADDRESS_UNICAST) == 0)
 8016684:	69fb      	ldr	r3, [r7, #28]
 8016686:	2b00      	cmp	r3, #0
 8016688:	db01      	blt.n	801668e <_nxde_ipv6_address_set+0x76>
        {
            return(NX_IP_ADDRESS_ERROR);
 801668a:	2321      	movs	r3, #33	; 0x21
 801668c:	e023      	b.n	80166d6 <_nxde_ipv6_address_set+0xbe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801668e:	f3ef 8305 	mrs	r3, IPSR
 8016692:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016694:	697a      	ldr	r2, [r7, #20]
        }
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8016696:	4b13      	ldr	r3, [pc, #76]	; (80166e4 <_nxde_ipv6_address_set+0xcc>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	4313      	orrs	r3, r2
 801669c:	2b00      	cmp	r3, #0
 801669e:	d009      	beq.n	80166b4 <_nxde_ipv6_address_set+0x9c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80166a0:	f3ef 8305 	mrs	r3, IPSR
 80166a4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80166a6:	693a      	ldr	r2, [r7, #16]
 80166a8:	4b0e      	ldr	r3, [pc, #56]	; (80166e4 <_nxde_ipv6_address_set+0xcc>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	4313      	orrs	r3, r2
 80166ae:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80166b2:	d304      	bcc.n	80166be <_nxde_ipv6_address_set+0xa6>
 80166b4:	4b0c      	ldr	r3, [pc, #48]	; (80166e8 <_nxde_ipv6_address_set+0xd0>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	4a0c      	ldr	r2, [pc, #48]	; (80166ec <_nxde_ipv6_address_set+0xd4>)
 80166ba:	4293      	cmp	r3, r2
 80166bc:	d101      	bne.n	80166c2 <_nxde_ipv6_address_set+0xaa>
 80166be:	2311      	movs	r3, #17
 80166c0:	e009      	b.n	80166d6 <_nxde_ipv6_address_set+0xbe>

    /* Call actual IP address set function.  */
    status =  _nxd_ipv6_address_set(ip_ptr, if_index, ip_address, prefix_length, address_index);
 80166c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166c4:	9300      	str	r3, [sp, #0]
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	687a      	ldr	r2, [r7, #4]
 80166ca:	68b9      	ldr	r1, [r7, #8]
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f7fe fe8b 	bl	80153e8 <_nxd_ipv6_address_set>
 80166d2:	61b8      	str	r0, [r7, #24]

    /* Return completion status.  */
    return(status);
 80166d4:	69bb      	ldr	r3, [r7, #24]
    NX_PARAMETER_NOT_USED(address_index);

    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3720      	adds	r7, #32
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}
 80166de:	bf00      	nop
 80166e0:	49502020 	.word	0x49502020
 80166e4:	2400008c 	.word	0x2400008c
 80166e8:	24000874 	.word	0x24000874
 80166ec:	240009bc 	.word	0x240009bc

080166f0 <_nxde_ipv6_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxde_ipv6_enable(NX_IP *ip_ptr)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b086      	sub	sp, #24
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
#ifdef FEATURE_NX_IPV6
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d004      	beq.n	8016708 <_nxde_ipv6_enable+0x18>
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	4a14      	ldr	r2, [pc, #80]	; (8016754 <_nxde_ipv6_enable+0x64>)
 8016704:	4293      	cmp	r3, r2
 8016706:	d001      	beq.n	801670c <_nxde_ipv6_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8016708:	2307      	movs	r3, #7
 801670a:	e01e      	b.n	801674a <_nxde_ipv6_enable+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801670c:	f3ef 8305 	mrs	r3, IPSR
 8016710:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016712:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8016714:	4b10      	ldr	r3, [pc, #64]	; (8016758 <_nxde_ipv6_enable+0x68>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	4313      	orrs	r3, r2
 801671a:	2b00      	cmp	r3, #0
 801671c:	d009      	beq.n	8016732 <_nxde_ipv6_enable+0x42>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801671e:	f3ef 8305 	mrs	r3, IPSR
 8016722:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016724:	68fa      	ldr	r2, [r7, #12]
 8016726:	4b0c      	ldr	r3, [pc, #48]	; (8016758 <_nxde_ipv6_enable+0x68>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	4313      	orrs	r3, r2
 801672c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016730:	d304      	bcc.n	801673c <_nxde_ipv6_enable+0x4c>
 8016732:	4b0a      	ldr	r3, [pc, #40]	; (801675c <_nxde_ipv6_enable+0x6c>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	4a0a      	ldr	r2, [pc, #40]	; (8016760 <_nxde_ipv6_enable+0x70>)
 8016738:	4293      	cmp	r3, r2
 801673a:	d101      	bne.n	8016740 <_nxde_ipv6_enable+0x50>
 801673c:	2311      	movs	r3, #17
 801673e:	e004      	b.n	801674a <_nxde_ipv6_enable+0x5a>

    /* Call actual IPv6 enable function.  */
    status =  _nxd_ipv6_enable(ip_ptr);
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f7ff fa07 	bl	8015b54 <_nxd_ipv6_enable>
 8016746:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016748:	697b      	ldr	r3, [r7, #20]
#else /* ! FEATURE_NX_IPV6 */
    NX_PARAMETER_NOT_USED(ip_ptr);
    return(NX_NOT_SUPPORTED);

#endif /* FEATURE_NX_IPV6 */
}
 801674a:	4618      	mov	r0, r3
 801674c:	3718      	adds	r7, #24
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
 8016752:	bf00      	nop
 8016754:	49502020 	.word	0x49502020
 8016758:	2400008c 	.word	0x2400008c
 801675c:	24000874 	.word	0x24000874
 8016760:	240009bc 	.word	0x240009bc

08016764 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b088      	sub	sp, #32
 8016768:	af00      	add	r7, sp, #0
 801676a:	60f8      	str	r0, [r7, #12]
 801676c:	60b9      	str	r1, [r7, #8]
 801676e:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d007      	beq.n	8016786 <_nxe_arp_enable+0x22>
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	4a1c      	ldr	r2, [pc, #112]	; (80167ec <_nxe_arp_enable+0x88>)
 801677c:	4293      	cmp	r3, r2
 801677e:	d102      	bne.n	8016786 <_nxe_arp_enable+0x22>
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d101      	bne.n	801678a <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 8016786:	2307      	movs	r3, #7
 8016788:	e02c      	b.n	80167e4 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	f8d3 3bf8 	ldr.w	r3, [r3, #3064]	; 0xbf8
 8016790:	2b00      	cmp	r3, #0
 8016792:	d001      	beq.n	8016798 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 8016794:	2315      	movs	r3, #21
 8016796:	e025      	b.n	80167e4 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2b33      	cmp	r3, #51	; 0x33
 801679c:	d801      	bhi.n	80167a2 <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 801679e:	2309      	movs	r3, #9
 80167a0:	e020      	b.n	80167e4 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80167a2:	f3ef 8305 	mrs	r3, IPSR
 80167a6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80167a8:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 80167aa:	4b11      	ldr	r3, [pc, #68]	; (80167f0 <_nxe_arp_enable+0x8c>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	4313      	orrs	r3, r2
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d009      	beq.n	80167c8 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80167b4:	f3ef 8305 	mrs	r3, IPSR
 80167b8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80167ba:	697a      	ldr	r2, [r7, #20]
 80167bc:	4b0c      	ldr	r3, [pc, #48]	; (80167f0 <_nxe_arp_enable+0x8c>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4313      	orrs	r3, r2
 80167c2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80167c6:	d304      	bcc.n	80167d2 <_nxe_arp_enable+0x6e>
 80167c8:	4b0a      	ldr	r3, [pc, #40]	; (80167f4 <_nxe_arp_enable+0x90>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4a0a      	ldr	r2, [pc, #40]	; (80167f8 <_nxe_arp_enable+0x94>)
 80167ce:	4293      	cmp	r3, r2
 80167d0:	d101      	bne.n	80167d6 <_nxe_arp_enable+0x72>
 80167d2:	2311      	movs	r3, #17
 80167d4:	e006      	b.n	80167e4 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 80167d6:	687a      	ldr	r2, [r7, #4]
 80167d8:	68b9      	ldr	r1, [r7, #8]
 80167da:	68f8      	ldr	r0, [r7, #12]
 80167dc:	f7f2 fa8c 	bl	8008cf8 <_nx_arp_enable>
 80167e0:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 80167e2:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	3720      	adds	r7, #32
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	49502020 	.word	0x49502020
 80167f0:	2400008c 	.word	0x2400008c
 80167f4:	24000874 	.word	0x24000874
 80167f8:	240009bc 	.word	0x240009bc

080167fc <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b086      	sub	sp, #24
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d004      	beq.n	8016814 <_nxe_icmp_enable+0x18>
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	4a17      	ldr	r2, [pc, #92]	; (801686c <_nxe_icmp_enable+0x70>)
 8016810:	4293      	cmp	r3, r2
 8016812:	d001      	beq.n	8016818 <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8016814:	2307      	movs	r3, #7
 8016816:	e025      	b.n	8016864 <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	f8d3 386c 	ldr.w	r3, [r3, #2156]	; 0x86c
 801681e:	2b00      	cmp	r3, #0
 8016820:	d001      	beq.n	8016826 <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8016822:	2315      	movs	r3, #21
 8016824:	e01e      	b.n	8016864 <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016826:	f3ef 8305 	mrs	r3, IPSR
 801682a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801682c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 801682e:	4b10      	ldr	r3, [pc, #64]	; (8016870 <_nxe_icmp_enable+0x74>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	4313      	orrs	r3, r2
 8016834:	2b00      	cmp	r3, #0
 8016836:	d009      	beq.n	801684c <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016838:	f3ef 8305 	mrs	r3, IPSR
 801683c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801683e:	68fa      	ldr	r2, [r7, #12]
 8016840:	4b0b      	ldr	r3, [pc, #44]	; (8016870 <_nxe_icmp_enable+0x74>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	4313      	orrs	r3, r2
 8016846:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801684a:	d304      	bcc.n	8016856 <_nxe_icmp_enable+0x5a>
 801684c:	4b09      	ldr	r3, [pc, #36]	; (8016874 <_nxe_icmp_enable+0x78>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4a09      	ldr	r2, [pc, #36]	; (8016878 <_nxe_icmp_enable+0x7c>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d101      	bne.n	801685a <_nxe_icmp_enable+0x5e>
 8016856:	2311      	movs	r3, #17
 8016858:	e004      	b.n	8016864 <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 801685a:	6878      	ldr	r0, [r7, #4]
 801685c:	f7f3 f864 	bl	8009928 <_nx_icmp_enable>
 8016860:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016862:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8016864:	4618      	mov	r0, r3
 8016866:	3718      	adds	r7, #24
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}
 801686c:	49502020 	.word	0x49502020
 8016870:	2400008c 	.word	0x2400008c
 8016874:	24000874 	.word	0x24000874
 8016878:	240009bc 	.word	0x240009bc

0801687c <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b088      	sub	sp, #32
 8016880:	af00      	add	r7, sp, #0
 8016882:	60f8      	str	r0, [r7, #12]
 8016884:	60b9      	str	r1, [r7, #8]
 8016886:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d00a      	beq.n	80168a4 <_nxe_ip_address_get+0x28>
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	4a18      	ldr	r2, [pc, #96]	; (80168f4 <_nxe_ip_address_get+0x78>)
 8016894:	4293      	cmp	r3, r2
 8016896:	d105      	bne.n	80168a4 <_nxe_ip_address_get+0x28>
 8016898:	68bb      	ldr	r3, [r7, #8]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d002      	beq.n	80168a4 <_nxe_ip_address_get+0x28>
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d101      	bne.n	80168a8 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 80168a4:	2307      	movs	r3, #7
 80168a6:	e020      	b.n	80168ea <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80168a8:	f3ef 8305 	mrs	r3, IPSR
 80168ac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80168ae:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 80168b0:	4b11      	ldr	r3, [pc, #68]	; (80168f8 <_nxe_ip_address_get+0x7c>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	4313      	orrs	r3, r2
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d009      	beq.n	80168ce <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80168ba:	f3ef 8305 	mrs	r3, IPSR
 80168be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80168c0:	697a      	ldr	r2, [r7, #20]
 80168c2:	4b0d      	ldr	r3, [pc, #52]	; (80168f8 <_nxe_ip_address_get+0x7c>)
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	4313      	orrs	r3, r2
 80168c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80168cc:	d304      	bcc.n	80168d8 <_nxe_ip_address_get+0x5c>
 80168ce:	4b0b      	ldr	r3, [pc, #44]	; (80168fc <_nxe_ip_address_get+0x80>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	4a0b      	ldr	r2, [pc, #44]	; (8016900 <_nxe_ip_address_get+0x84>)
 80168d4:	4293      	cmp	r3, r2
 80168d6:	d101      	bne.n	80168dc <_nxe_ip_address_get+0x60>
 80168d8:	2311      	movs	r3, #17
 80168da:	e006      	b.n	80168ea <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 80168dc:	687a      	ldr	r2, [r7, #4]
 80168de:	68b9      	ldr	r1, [r7, #8]
 80168e0:	68f8      	ldr	r0, [r7, #12]
 80168e2:	f7f5 fc6b 	bl	800c1bc <_nx_ip_address_get>
 80168e6:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 80168e8:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3720      	adds	r7, #32
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	49502020 	.word	0x49502020
 80168f8:	2400008c 	.word	0x2400008c
 80168fc:	24000874 	.word	0x24000874
 8016900:	240009bc 	.word	0x240009bc

08016904 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b092      	sub	sp, #72	; 0x48
 8016908:	af06      	add	r7, sp, #24
 801690a:	60f8      	str	r0, [r7, #12]
 801690c:	60b9      	str	r1, [r7, #8]
 801690e:	607a      	str	r2, [r7, #4]
 8016910:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 8016912:	2300      	movs	r3, #0
 8016914:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d012      	beq.n	8016942 <_nxe_ip_create+0x3e>
 801691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801691e:	2b00      	cmp	r3, #0
 8016920:	d00f      	beq.n	8016942 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 8016922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016924:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8016926:	4a59      	ldr	r2, [pc, #356]	; (8016a8c <_nxe_ip_create+0x188>)
 8016928:	4293      	cmp	r3, r2
 801692a:	d10a      	bne.n	8016942 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 801692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801692e:	2b00      	cmp	r3, #0
 8016930:	d007      	beq.n	8016942 <_nxe_ip_create+0x3e>
 8016932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016934:	2b00      	cmp	r3, #0
 8016936:	d004      	beq.n	8016942 <_nxe_ip_create+0x3e>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 8016938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801693a:	f640 62d4 	movw	r2, #3796	; 0xed4
 801693e:	4293      	cmp	r3, r2
 8016940:	d001      	beq.n	8016946 <_nxe_ip_create+0x42>
    {
        return(NX_PTR_ERROR);
 8016942:	2307      	movs	r3, #7
 8016944:	e09d      	b.n	8016a82 <_nxe_ip_create+0x17e>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 8016946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016948:	2bc7      	cmp	r3, #199	; 0xc7
 801694a:	d801      	bhi.n	8016950 <_nxe_ip_create+0x4c>
    {
        return(NX_SIZE_ERROR);
 801694c:	2309      	movs	r3, #9
 801694e:	e098      	b.n	8016a82 <_nxe_ip_create+0x17e>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 8016950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016952:	2b1f      	cmp	r3, #31
 8016954:	d901      	bls.n	801695a <_nxe_ip_create+0x56>
    {
        return(NX_OPTION_ERROR);
 8016956:	230a      	movs	r3, #10
 8016958:	e093      	b.n	8016a82 <_nxe_ip_create+0x17e>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 801695a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801695c:	3b01      	subs	r3, #1
 801695e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016960:	4413      	add	r3, r2
 8016962:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8016964:	f002 f996 	bl	8018c94 <_tx_thread_identify>
 8016968:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 801696a:	6a3b      	ldr	r3, [r7, #32]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d006      	beq.n	801697e <_nxe_ip_create+0x7a>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8016970:	f107 0310 	add.w	r3, r7, #16
 8016974:	461a      	mov	r2, r3
 8016976:	2100      	movs	r1, #0
 8016978:	6a38      	ldr	r0, [r7, #32]
 801697a:	f002 f9e5 	bl	8018d48 <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 801697e:	4b44      	ldr	r3, [pc, #272]	; (8016a90 <_nxe_ip_create+0x18c>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 8016984:	4b43      	ldr	r3, [pc, #268]	; (8016a94 <_nxe_ip_create+0x190>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 801698a:	e02b      	b.n	80169e4 <_nxe_ip_create+0xe0>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 801698c:	68fa      	ldr	r2, [r7, #12]
 801698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016990:	429a      	cmp	r2, r3
 8016992:	d017      	beq.n	80169c4 <_nxe_ip_create+0xc0>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8016994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016996:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
        if ((ip_ptr == created_ip) ||
 801699a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801699c:	429a      	cmp	r2, r3
 801699e:	d305      	bcc.n	80169ac <_nxe_ip_create+0xa8>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 80169a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a2:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 80169a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d30b      	bcc.n	80169c4 <_nxe_ip_create+0xc0>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 80169ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ae:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 80169b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d311      	bcc.n	80169dc <_nxe_ip_create+0xd8>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 80169b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ba:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 80169be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169c0:	429a      	cmp	r2, r3
 80169c2:	d20b      	bcs.n	80169dc <_nxe_ip_create+0xd8>
        {

            /* Restore preemption.  */
            if (current_thread)
 80169c4:	6a3b      	ldr	r3, [r7, #32]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d006      	beq.n	80169d8 <_nxe_ip_create+0xd4>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80169ca:	693b      	ldr	r3, [r7, #16]
 80169cc:	f107 0210 	add.w	r2, r7, #16
 80169d0:	4619      	mov	r1, r3
 80169d2:	6a38      	ldr	r0, [r7, #32]
 80169d4:	f002 f9b8 	bl	8018d48 <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 80169d8:	2307      	movs	r3, #7
 80169da:	e052      	b.n	8016a82 <_nxe_ip_create+0x17e>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 80169dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169de:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 80169e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 80169e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e6:	1e5a      	subs	r2, r3, #1
 80169e8:	62ba      	str	r2, [r7, #40]	; 0x28
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d1ce      	bne.n	801698c <_nxe_ip_create+0x88>
    }

    /* Restore preemption.  */
    if (current_thread)
 80169ee:	6a3b      	ldr	r3, [r7, #32]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d006      	beq.n	8016a02 <_nxe_ip_create+0xfe>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	f107 0210 	add.w	r2, r7, #16
 80169fa:	4619      	mov	r1, r3
 80169fc:	6a38      	ldr	r0, [r7, #32]
 80169fe:	f002 f9a3 	bl	8018d48 <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d010      	beq.n	8016a2a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8016a08:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	da0d      	bge.n	8016a2a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8016a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016a18:	d007      	beq.n	8016a2a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8016a20:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8016a24:	d001      	beq.n	8016a2a <_nxe_ip_create+0x126>
    {
        return(NX_IP_ADDRESS_ERROR);
 8016a26:	2321      	movs	r3, #33	; 0x21
 8016a28:	e02b      	b.n	8016a82 <_nxe_ip_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016a2a:	f3ef 8305 	mrs	r3, IPSR
 8016a2e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016a30:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8016a32:	4b19      	ldr	r3, [pc, #100]	; (8016a98 <_nxe_ip_create+0x194>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	4313      	orrs	r3, r2
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d009      	beq.n	8016a50 <_nxe_ip_create+0x14c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016a3c:	f3ef 8305 	mrs	r3, IPSR
 8016a40:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016a42:	697a      	ldr	r2, [r7, #20]
 8016a44:	4b14      	ldr	r3, [pc, #80]	; (8016a98 <_nxe_ip_create+0x194>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016a4e:	d304      	bcc.n	8016a5a <_nxe_ip_create+0x156>
 8016a50:	4b12      	ldr	r3, [pc, #72]	; (8016a9c <_nxe_ip_create+0x198>)
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	4a12      	ldr	r2, [pc, #72]	; (8016aa0 <_nxe_ip_create+0x19c>)
 8016a56:	4293      	cmp	r3, r2
 8016a58:	d101      	bne.n	8016a5e <_nxe_ip_create+0x15a>
 8016a5a:	2311      	movs	r3, #17
 8016a5c:	e011      	b.n	8016a82 <_nxe_ip_create+0x17e>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 8016a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a60:	9304      	str	r3, [sp, #16]
 8016a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a64:	9303      	str	r3, [sp, #12]
 8016a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a68:	9302      	str	r3, [sp, #8]
 8016a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a6c:	9301      	str	r3, [sp, #4]
 8016a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a70:	9300      	str	r3, [sp, #0]
 8016a72:	683b      	ldr	r3, [r7, #0]
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	68b9      	ldr	r1, [r7, #8]
 8016a78:	68f8      	ldr	r0, [r7, #12]
 8016a7a:	f7f5 fcdf 	bl	800c43c <_nx_ip_create>
 8016a7e:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 8016a80:	69fb      	ldr	r3, [r7, #28]
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	3730      	adds	r7, #48	; 0x30
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}
 8016a8a:	bf00      	nop
 8016a8c:	5041434b 	.word	0x5041434b
 8016a90:	24000808 	.word	0x24000808
 8016a94:	2400080c 	.word	0x2400080c
 8016a98:	2400008c 	.word	0x2400008c
 8016a9c:	24000874 	.word	0x24000874
 8016aa0:	240009bc 	.word	0x240009bc

08016aa4 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b086      	sub	sp, #24
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	60f8      	str	r0, [r7, #12]
 8016aac:	60b9      	str	r1, [r7, #8]
 8016aae:	607a      	str	r2, [r7, #4]
 8016ab0:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d007      	beq.n	8016ac8 <_nxe_packet_allocate+0x24>
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	4a18      	ldr	r2, [pc, #96]	; (8016b20 <_nxe_packet_allocate+0x7c>)
 8016abe:	4293      	cmp	r3, r2
 8016ac0:	d102      	bne.n	8016ac8 <_nxe_packet_allocate+0x24>
 8016ac2:	68bb      	ldr	r3, [r7, #8]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d101      	bne.n	8016acc <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 8016ac8:	2307      	movs	r3, #7
 8016aca:	e025      	b.n	8016b18 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f003 0303 	and.w	r3, r3, #3
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d001      	beq.n	8016ada <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 8016ad6:	230a      	movs	r3, #10
 8016ad8:	e01e      	b.n	8016b18 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d013      	beq.n	8016b08 <_nxe_packet_allocate+0x64>
 8016ae0:	4b10      	ldr	r3, [pc, #64]	; (8016b24 <_nxe_packet_allocate+0x80>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d00d      	beq.n	8016b04 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016ae8:	f3ef 8305 	mrs	r3, IPSR
 8016aec:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016aee:	693a      	ldr	r2, [r7, #16]
 8016af0:	4b0d      	ldr	r3, [pc, #52]	; (8016b28 <_nxe_packet_allocate+0x84>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	4313      	orrs	r3, r2
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d104      	bne.n	8016b04 <_nxe_packet_allocate+0x60>
 8016afa:	4b0a      	ldr	r3, [pc, #40]	; (8016b24 <_nxe_packet_allocate+0x80>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	4a0b      	ldr	r2, [pc, #44]	; (8016b2c <_nxe_packet_allocate+0x88>)
 8016b00:	4293      	cmp	r3, r2
 8016b02:	d101      	bne.n	8016b08 <_nxe_packet_allocate+0x64>
 8016b04:	2311      	movs	r3, #17
 8016b06:	e007      	b.n	8016b18 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	687a      	ldr	r2, [r7, #4]
 8016b0c:	68b9      	ldr	r1, [r7, #8]
 8016b0e:	68f8      	ldr	r0, [r7, #12]
 8016b10:	f7f9 fbf2 	bl	80102f8 <_nx_packet_allocate>
 8016b14:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016b16:	697b      	ldr	r3, [r7, #20]
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	3718      	adds	r7, #24
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}
 8016b20:	5041434b 	.word	0x5041434b
 8016b24:	24000874 	.word	0x24000874
 8016b28:	2400008c 	.word	0x2400008c
 8016b2c:	240009bc 	.word	0x240009bc

08016b30 <_nxe_packet_data_retrieve>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b086      	sub	sp, #24
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	60f8      	str	r0, [r7, #12]
 8016b38:	60b9      	str	r1, [r7, #8]
 8016b3a:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (buffer_start == NX_NULL) || (bytes_copied == NX_NULL))
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d005      	beq.n	8016b4e <_nxe_packet_data_retrieve+0x1e>
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d002      	beq.n	8016b4e <_nxe_packet_data_retrieve+0x1e>
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d101      	bne.n	8016b52 <_nxe_packet_data_retrieve+0x22>
    {
        return(NX_PTR_ERROR);
 8016b4e:	2307      	movs	r3, #7
 8016b50:	e006      	b.n	8016b60 <_nxe_packet_data_retrieve+0x30>
    }

    /* Call actual packet data retrieve function.  */
    status =  _nx_packet_data_retrieve(packet_ptr, buffer_start, bytes_copied);
 8016b52:	687a      	ldr	r2, [r7, #4]
 8016b54:	68b9      	ldr	r1, [r7, #8]
 8016b56:	68f8      	ldr	r0, [r7, #12]
 8016b58:	f7f9 fded 	bl	8010736 <_nx_packet_data_retrieve>
 8016b5c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016b5e:	697b      	ldr	r3, [r7, #20]
}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3718      	adds	r7, #24
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}

08016b68 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b094      	sub	sp, #80	; 0x50
 8016b6c:	af02      	add	r7, sp, #8
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 8016b76:	2300      	movs	r3, #0
 8016b78:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d005      	beq.n	8016b8c <_nxe_packet_pool_create+0x24>
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d002      	beq.n	8016b8c <_nxe_packet_pool_create+0x24>
 8016b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b88:	2b3c      	cmp	r3, #60	; 0x3c
 8016b8a:	d001      	beq.n	8016b90 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 8016b8c:	2307      	movs	r3, #7
 8016b8e:	e0a7      	b.n	8016ce0 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	3303      	adds	r3, #3
 8016b94:	f023 0303 	bic.w	r3, r3, #3
 8016b98:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8016b9a:	683a      	ldr	r2, [r7, #0]
 8016b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b9e:	1ad2      	subs	r2, r2, r3
 8016ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ba2:	4413      	add	r3, r2
 8016ba4:	f023 0303 	bic.w	r3, r3, #3
 8016ba8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8016baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bac:	333c      	adds	r3, #60	; 0x3c
 8016bae:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8016bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bb2:	3303      	adds	r3, #3
 8016bb4:	f023 0303 	bic.w	r3, r3, #3
 8016bb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8016bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bbe:	1ad3      	subs	r3, r2, r3
 8016bc0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8016bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	3303      	adds	r3, #3
 8016bca:	f023 0203 	bic.w	r2, r3, #3
 8016bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd0:	1ad3      	subs	r3, r2, r3
 8016bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 8016bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bd6:	2b04      	cmp	r3, #4
 8016bd8:	d908      	bls.n	8016bec <_nxe_packet_pool_create+0x84>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d005      	beq.n	8016bec <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 8016be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be4:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 8016be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016be8:	429a      	cmp	r2, r3
 8016bea:	d201      	bcs.n	8016bf0 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 8016bec:	2309      	movs	r3, #9
 8016bee:	e077      	b.n	8016ce0 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 8016bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bf2:	3b01      	subs	r3, #1
 8016bf4:	683a      	ldr	r2, [r7, #0]
 8016bf6:	4413      	add	r3, r2
 8016bf8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8016bfa:	f002 f84b 	bl	8018c94 <_tx_thread_identify>
 8016bfe:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 8016c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d006      	beq.n	8016c14 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8016c06:	f107 0310 	add.w	r3, r7, #16
 8016c0a:	461a      	mov	r2, r3
 8016c0c:	2100      	movs	r1, #0
 8016c0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c10:	f002 f89a 	bl	8018d48 <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 8016c14:	4b34      	ldr	r3, [pc, #208]	; (8016ce8 <_nxe_packet_pool_create+0x180>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 8016c1a:	4b34      	ldr	r3, [pc, #208]	; (8016cec <_nxe_packet_pool_create+0x184>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 8016c20:	e02b      	b.n	8016c7a <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 8016c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c24:	6a1a      	ldr	r2, [r3, #32]
 8016c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c2a:	3b01      	subs	r3, #1
 8016c2c:	4413      	add	r3, r2
 8016c2e:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 8016c30:	68fa      	ldr	r2, [r7, #12]
 8016c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d011      	beq.n	8016c5c <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8016c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c3a:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 8016c3c:	683a      	ldr	r2, [r7, #0]
 8016c3e:	429a      	cmp	r2, r3
 8016c40:	d303      	bcc.n	8016c4a <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8016c42:	683a      	ldr	r2, [r7, #0]
 8016c44:	69fb      	ldr	r3, [r7, #28]
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d308      	bcc.n	8016c5c <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 8016c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c4c:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8016c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c50:	429a      	cmp	r2, r3
 8016c52:	d30f      	bcc.n	8016c74 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 8016c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c56:	69fb      	ldr	r3, [r7, #28]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d20b      	bcs.n	8016c74 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 8016c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d006      	beq.n	8016c70 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	f107 0210 	add.w	r2, r7, #16
 8016c68:	4619      	mov	r1, r3
 8016c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c6c:	f002 f86c 	bl	8018d48 <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 8016c70:	2307      	movs	r3, #7
 8016c72:	e035      	b.n	8016ce0 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 8016c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c78:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 8016c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c7c:	1e5a      	subs	r2, r3, #1
 8016c7e:	643a      	str	r2, [r7, #64]	; 0x40
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d1ce      	bne.n	8016c22 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 8016c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d006      	beq.n	8016c98 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	f107 0210 	add.w	r2, r7, #16
 8016c90:	4619      	mov	r1, r3
 8016c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c94:	f002 f858 	bl	8018d48 <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016c98:	f3ef 8305 	mrs	r3, IPSR
 8016c9c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016c9e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8016ca0:	4b13      	ldr	r3, [pc, #76]	; (8016cf0 <_nxe_packet_pool_create+0x188>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	4313      	orrs	r3, r2
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d009      	beq.n	8016cbe <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016caa:	f3ef 8305 	mrs	r3, IPSR
 8016cae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016cb0:	697a      	ldr	r2, [r7, #20]
 8016cb2:	4b0f      	ldr	r3, [pc, #60]	; (8016cf0 <_nxe_packet_pool_create+0x188>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	4313      	orrs	r3, r2
 8016cb8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016cbc:	d304      	bcc.n	8016cc8 <_nxe_packet_pool_create+0x160>
 8016cbe:	4b0d      	ldr	r3, [pc, #52]	; (8016cf4 <_nxe_packet_pool_create+0x18c>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	4a0d      	ldr	r2, [pc, #52]	; (8016cf8 <_nxe_packet_pool_create+0x190>)
 8016cc4:	4293      	cmp	r3, r2
 8016cc6:	d101      	bne.n	8016ccc <_nxe_packet_pool_create+0x164>
 8016cc8:	2311      	movs	r3, #17
 8016cca:	e009      	b.n	8016ce0 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 8016ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	687a      	ldr	r2, [r7, #4]
 8016cd4:	68b9      	ldr	r1, [r7, #8]
 8016cd6:	68f8      	ldr	r0, [r7, #12]
 8016cd8:	f7f9 fdcc 	bl	8010874 <_nx_packet_pool_create>
 8016cdc:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 8016cde:	6a3b      	ldr	r3, [r7, #32]
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3748      	adds	r7, #72	; 0x48
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	24000810 	.word	0x24000810
 8016cec:	24000814 	.word	0x24000814
 8016cf0:	2400008c 	.word	0x2400008c
 8016cf4:	24000874 	.word	0x24000874
 8016cf8:	240009bc 	.word	0x240009bc

08016cfc <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d009      	beq.n	8016d24 <_nxe_packet_release+0x28>
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d005      	beq.n	8016d24 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 8016d1e:	4a12      	ldr	r2, [pc, #72]	; (8016d68 <_nxe_packet_release+0x6c>)
 8016d20:	4293      	cmp	r3, r2
 8016d22:	d001      	beq.n	8016d28 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 8016d24:	2307      	movs	r3, #7
 8016d26:	e01a      	b.n	8016d5e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	689a      	ldr	r2, [r3, #8]
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	691b      	ldr	r3, [r3, #16]
 8016d30:	429a      	cmp	r2, r3
 8016d32:	d201      	bcs.n	8016d38 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 8016d34:	2302      	movs	r3, #2
 8016d36:	e012      	b.n	8016d5e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	68da      	ldr	r2, [r3, #12]
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	695b      	ldr	r3, [r3, #20]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d901      	bls.n	8016d48 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 8016d44:	2303      	movs	r3, #3
 8016d46:	e00a      	b.n	8016d5e <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 8016d48:	68f8      	ldr	r0, [r7, #12]
 8016d4a:	f7f9 fe75 	bl	8010a38 <_nx_packet_release>
 8016d4e:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d102      	bne.n	8016d5c <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	2200      	movs	r2, #0
 8016d5a:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 8016d5c:	68bb      	ldr	r3, [r7, #8]
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3710      	adds	r7, #16
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}
 8016d66:	bf00      	nop
 8016d68:	5041434b 	.word	0x5041434b

08016d6c <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b084      	sub	sp, #16
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d009      	beq.n	8016d94 <_nxe_packet_transmit_release+0x28>
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d005      	beq.n	8016d94 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 8016d8e:	4a12      	ldr	r2, [pc, #72]	; (8016dd8 <_nxe_packet_transmit_release+0x6c>)
 8016d90:	4293      	cmp	r3, r2
 8016d92:	d001      	beq.n	8016d98 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 8016d94:	2307      	movs	r3, #7
 8016d96:	e01a      	b.n	8016dce <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	689a      	ldr	r2, [r3, #8]
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	691b      	ldr	r3, [r3, #16]
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d201      	bcs.n	8016da8 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 8016da4:	2302      	movs	r3, #2
 8016da6:	e012      	b.n	8016dce <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	68da      	ldr	r2, [r3, #12]
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	695b      	ldr	r3, [r3, #20]
 8016db0:	429a      	cmp	r2, r3
 8016db2:	d901      	bls.n	8016db8 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 8016db4:	2303      	movs	r3, #3
 8016db6:	e00a      	b.n	8016dce <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 8016db8:	68f8      	ldr	r0, [r7, #12]
 8016dba:	f7f9 fef7 	bl	8010bac <_nx_packet_transmit_release>
 8016dbe:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d102      	bne.n	8016dcc <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2200      	movs	r2, #0
 8016dca:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 8016dcc:	68bb      	ldr	r3, [r7, #8]
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3710      	adds	r7, #16
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	5041434b 	.word	0x5041434b

08016ddc <_nxe_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_enable(NX_IP *ip_ptr)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b086      	sub	sp, #24
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d004      	beq.n	8016df4 <_nxe_tcp_enable+0x18>
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	4a15      	ldr	r2, [pc, #84]	; (8016e44 <_nxe_tcp_enable+0x68>)
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d001      	beq.n	8016df8 <_nxe_tcp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8016df4:	2307      	movs	r3, #7
 8016df6:	e020      	b.n	8016e3a <_nxe_tcp_enable+0x5e>
    }

    /* Check to see if TCP is already enabled.  */
    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	f8d3 39a8 	ldr.w	r3, [r3, #2472]	; 0x9a8
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d001      	beq.n	8016e06 <_nxe_tcp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8016e02:	2315      	movs	r3, #21
 8016e04:	e019      	b.n	8016e3a <_nxe_tcp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016e06:	f3ef 8305 	mrs	r3, IPSR
 8016e0a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016e0c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 8016e0e:	4b0e      	ldr	r3, [pc, #56]	; (8016e48 <_nxe_tcp_enable+0x6c>)
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	4313      	orrs	r3, r2
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d00b      	beq.n	8016e30 <_nxe_tcp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016e18:	f3ef 8305 	mrs	r3, IPSR
 8016e1c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016e1e:	68fa      	ldr	r2, [r7, #12]
 8016e20:	4b09      	ldr	r3, [pc, #36]	; (8016e48 <_nxe_tcp_enable+0x6c>)
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	4313      	orrs	r3, r2
 8016e26:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016e2a:	d201      	bcs.n	8016e30 <_nxe_tcp_enable+0x54>
 8016e2c:	2311      	movs	r3, #17
 8016e2e:	e004      	b.n	8016e3a <_nxe_tcp_enable+0x5e>

    /* Call actual TCP enable function.  */
    status =  _nx_tcp_enable(ip_ptr);
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f7fa fa35 	bl	80112a0 <_nx_tcp_enable>
 8016e36:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016e38:	697b      	ldr	r3, [r7, #20]
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3718      	adds	r7, #24
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}
 8016e42:	bf00      	nop
 8016e44:	49502020 	.word	0x49502020
 8016e48:	2400008c 	.word	0x2400008c

08016e4c <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b086      	sub	sp, #24
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d004      	beq.n	8016e64 <_nxe_udp_enable+0x18>
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	4a15      	ldr	r2, [pc, #84]	; (8016eb4 <_nxe_udp_enable+0x68>)
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d001      	beq.n	8016e68 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8016e64:	2307      	movs	r3, #7
 8016e66:	e020      	b.n	8016eaa <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d001      	beq.n	8016e76 <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8016e72:	2315      	movs	r3, #21
 8016e74:	e019      	b.n	8016eaa <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016e76:	f3ef 8305 	mrs	r3, IPSR
 8016e7a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016e7c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 8016e7e:	4b0e      	ldr	r3, [pc, #56]	; (8016eb8 <_nxe_udp_enable+0x6c>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	4313      	orrs	r3, r2
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d00b      	beq.n	8016ea0 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016e88:	f3ef 8305 	mrs	r3, IPSR
 8016e8c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016e8e:	68fa      	ldr	r2, [r7, #12]
 8016e90:	4b09      	ldr	r3, [pc, #36]	; (8016eb8 <_nxe_udp_enable+0x6c>)
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	4313      	orrs	r3, r2
 8016e96:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016e9a:	d201      	bcs.n	8016ea0 <_nxe_udp_enable+0x54>
 8016e9c:	2311      	movs	r3, #17
 8016e9e:	e004      	b.n	8016eaa <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7fd fbd5 	bl	8014650 <_nx_udp_enable>
 8016ea6:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016ea8:	697b      	ldr	r3, [r7, #20]
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	3718      	adds	r7, #24
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}
 8016eb2:	bf00      	nop
 8016eb4:	49502020 	.word	0x49502020
 8016eb8:	2400008c 	.word	0x2400008c

08016ebc <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b086      	sub	sp, #24
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	60b9      	str	r1, [r7, #8]
 8016ec6:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d004      	beq.n	8016ed8 <_nxe_udp_socket_bind+0x1c>
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	4a19      	ldr	r2, [pc, #100]	; (8016f38 <_nxe_udp_socket_bind+0x7c>)
 8016ed4:	4293      	cmp	r3, r2
 8016ed6:	d001      	beq.n	8016edc <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 8016ed8:	2307      	movs	r3, #7
 8016eda:	e028      	b.n	8016f2e <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	68db      	ldr	r3, [r3, #12]
 8016ee0:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d101      	bne.n	8016eec <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 8016ee8:	2314      	movs	r3, #20
 8016eea:	e020      	b.n	8016f2e <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ef2:	d301      	bcc.n	8016ef8 <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 8016ef4:	2346      	movs	r3, #70	; 0x46
 8016ef6:	e01a      	b.n	8016f2e <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016ef8:	f3ef 8305 	mrs	r3, IPSR
 8016efc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016efe:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 8016f00:	4b0e      	ldr	r3, [pc, #56]	; (8016f3c <_nxe_udp_socket_bind+0x80>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	4313      	orrs	r3, r2
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d108      	bne.n	8016f1c <_nxe_udp_socket_bind+0x60>
 8016f0a:	4b0d      	ldr	r3, [pc, #52]	; (8016f40 <_nxe_udp_socket_bind+0x84>)
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d004      	beq.n	8016f1c <_nxe_udp_socket_bind+0x60>
 8016f12:	4b0b      	ldr	r3, [pc, #44]	; (8016f40 <_nxe_udp_socket_bind+0x84>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	4a0b      	ldr	r2, [pc, #44]	; (8016f44 <_nxe_udp_socket_bind+0x88>)
 8016f18:	4293      	cmp	r3, r2
 8016f1a:	d101      	bne.n	8016f20 <_nxe_udp_socket_bind+0x64>
 8016f1c:	2311      	movs	r3, #17
 8016f1e:	e006      	b.n	8016f2e <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 8016f20:	687a      	ldr	r2, [r7, #4]
 8016f22:	68b9      	ldr	r1, [r7, #8]
 8016f24:	68f8      	ldr	r0, [r7, #12]
 8016f26:	f7fd fe97 	bl	8014c58 <_nx_udp_socket_bind>
 8016f2a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8016f2c:	697b      	ldr	r3, [r7, #20]
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3718      	adds	r7, #24
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}
 8016f36:	bf00      	nop
 8016f38:	55445020 	.word	0x55445020
 8016f3c:	2400008c 	.word	0x2400008c
 8016f40:	24000874 	.word	0x24000874
 8016f44:	240009bc 	.word	0x240009bc

08016f48 <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b08e      	sub	sp, #56	; 0x38
 8016f4c:	af04      	add	r7, sp, #16
 8016f4e:	60f8      	str	r0, [r7, #12]
 8016f50:	60b9      	str	r1, [r7, #8]
 8016f52:	607a      	str	r2, [r7, #4]
 8016f54:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d00a      	beq.n	8016f72 <_nxe_udp_socket_create+0x2a>
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	4a3f      	ldr	r2, [pc, #252]	; (8017060 <_nxe_udp_socket_create+0x118>)
 8016f62:	4293      	cmp	r3, r2
 8016f64:	d105      	bne.n	8016f72 <_nxe_udp_socket_create+0x2a>
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d002      	beq.n	8016f72 <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 8016f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f6e:	2b78      	cmp	r3, #120	; 0x78
 8016f70:	d001      	beq.n	8016f76 <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 8016f72:	2307      	movs	r3, #7
 8016f74:	e06f      	b.n	8017056 <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016f76:	f3ef 8305 	mrs	r3, IPSR
 8016f7a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016f7c:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8016f7e:	4b39      	ldr	r3, [pc, #228]	; (8017064 <_nxe_udp_socket_create+0x11c>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	4313      	orrs	r3, r2
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d009      	beq.n	8016f9c <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016f88:	f3ef 8305 	mrs	r3, IPSR
 8016f8c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016f8e:	697a      	ldr	r2, [r7, #20]
 8016f90:	4b34      	ldr	r3, [pc, #208]	; (8017064 <_nxe_udp_socket_create+0x11c>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	4313      	orrs	r3, r2
 8016f96:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016f9a:	d304      	bcc.n	8016fa6 <_nxe_udp_socket_create+0x5e>
 8016f9c:	4b32      	ldr	r3, [pc, #200]	; (8017068 <_nxe_udp_socket_create+0x120>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	4a32      	ldr	r2, [pc, #200]	; (801706c <_nxe_udp_socket_create+0x124>)
 8016fa2:	4293      	cmp	r3, r2
 8016fa4:	d101      	bne.n	8016faa <_nxe_udp_socket_create+0x62>
 8016fa6:	2311      	movs	r3, #17
 8016fa8:	e055      	b.n	8017056 <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8016fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f001 f8d9 	bl	801816c <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
 8016fc0:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8016fc8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 8016fca:	e00e      	b.n	8016fea <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 8016fcc:	68ba      	ldr	r2, [r7, #8]
 8016fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d107      	bne.n	8016fe4 <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f001 fb3e 	bl	801865c <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 8016fe0:	2307      	movs	r3, #7
 8016fe2:	e038      	b.n	8017056 <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 8016fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016fe8:	627b      	str	r3, [r7, #36]	; 0x24
    while (created_count--)
 8016fea:	6a3b      	ldr	r3, [r7, #32]
 8016fec:	1e5a      	subs	r2, r3, #1
 8016fee:	623a      	str	r2, [r7, #32]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d1eb      	bne.n	8016fcc <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f001 fb2e 	bl	801865c <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
 8017006:	2b00      	cmp	r3, #0
 8017008:	d101      	bne.n	801700e <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 801700a:	2314      	movs	r3, #20
 801700c:	e023      	b.n	8017056 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8017014:	2b00      	cmp	r3, #0
 8017016:	d001      	beq.n	801701c <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 8017018:	230a      	movs	r3, #10
 801701a:	e01c      	b.n	8017056 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 801701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801701e:	2b00      	cmp	r3, #0
 8017020:	d005      	beq.n	801702e <_nxe_udp_socket_create+0xe6>
 8017022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017028:	d001      	beq.n	801702e <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 801702a:	230a      	movs	r3, #10
 801702c:	e013      	b.n	8017056 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 801702e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017030:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8017034:	d901      	bls.n	801703a <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 8017036:	230a      	movs	r3, #10
 8017038:	e00d      	b.n	8017056 <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 801703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801703c:	9302      	str	r3, [sp, #8]
 801703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017040:	9301      	str	r3, [sp, #4]
 8017042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017044:	9300      	str	r3, [sp, #0]
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	687a      	ldr	r2, [r7, #4]
 801704a:	68b9      	ldr	r1, [r7, #8]
 801704c:	68f8      	ldr	r0, [r7, #12]
 801704e:	f7fd ff31 	bl	8014eb4 <_nx_udp_socket_create>
 8017052:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 8017054:	69fb      	ldr	r3, [r7, #28]
}
 8017056:	4618      	mov	r0, r3
 8017058:	3728      	adds	r7, #40	; 0x28
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}
 801705e:	bf00      	nop
 8017060:	49502020 	.word	0x49502020
 8017064:	2400008c 	.word	0x2400008c
 8017068:	24000874 	.word	0x24000874
 801706c:	240009bc 	.word	0x240009bc

08017070 <_nxe_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b086      	sub	sp, #24
 8017074:	af00      	add	r7, sp, #0
 8017076:	60f8      	str	r0, [r7, #12]
 8017078:	60b9      	str	r1, [r7, #8]
 801707a:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) || (packet_ptr == NX_NULL))
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d007      	beq.n	8017092 <_nxe_udp_socket_receive+0x22>
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	4a17      	ldr	r2, [pc, #92]	; (80170e4 <_nxe_udp_socket_receive+0x74>)
 8017088:	4293      	cmp	r3, r2
 801708a:	d102      	bne.n	8017092 <_nxe_udp_socket_receive+0x22>
 801708c:	68bb      	ldr	r3, [r7, #8]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d101      	bne.n	8017096 <_nxe_udp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 8017092:	2307      	movs	r3, #7
 8017094:	e022      	b.n	80170dc <_nxe_udp_socket_receive+0x6c>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	68db      	ldr	r3, [r3, #12]
 801709a:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d101      	bne.n	80170a6 <_nxe_udp_socket_receive+0x36>
    {
        return(NX_NOT_ENABLED);
 80170a2:	2314      	movs	r3, #20
 80170a4:	e01a      	b.n	80170dc <_nxe_udp_socket_receive+0x6c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80170a6:	f3ef 8305 	mrs	r3, IPSR
 80170aa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80170ac:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 80170ae:	4b0e      	ldr	r3, [pc, #56]	; (80170e8 <_nxe_udp_socket_receive+0x78>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	4313      	orrs	r3, r2
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d108      	bne.n	80170ca <_nxe_udp_socket_receive+0x5a>
 80170b8:	4b0c      	ldr	r3, [pc, #48]	; (80170ec <_nxe_udp_socket_receive+0x7c>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d004      	beq.n	80170ca <_nxe_udp_socket_receive+0x5a>
 80170c0:	4b0a      	ldr	r3, [pc, #40]	; (80170ec <_nxe_udp_socket_receive+0x7c>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	4a0a      	ldr	r2, [pc, #40]	; (80170f0 <_nxe_udp_socket_receive+0x80>)
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d101      	bne.n	80170ce <_nxe_udp_socket_receive+0x5e>
 80170ca:	2311      	movs	r3, #17
 80170cc:	e006      	b.n	80170dc <_nxe_udp_socket_receive+0x6c>

    /* Call actual UDP socket receive function.  */
    status =  _nx_udp_socket_receive(socket_ptr, packet_ptr, wait_option);
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	68b9      	ldr	r1, [r7, #8]
 80170d2:	68f8      	ldr	r0, [r7, #12]
 80170d4:	f7fd ff7e 	bl	8014fd4 <_nx_udp_socket_receive>
 80170d8:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 80170da:	697b      	ldr	r3, [r7, #20]
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3718      	adds	r7, #24
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}
 80170e4:	55445020 	.word	0x55445020
 80170e8:	2400008c 	.word	0x2400008c
 80170ec:	24000874 	.word	0x24000874
 80170f0:	240009bc 	.word	0x240009bc

080170f4 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b096      	sub	sp, #88	; 0x58
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	60b9      	str	r1, [r7, #8]
 80170fe:	607a      	str	r2, [r7, #4]
 8017100:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	3303      	adds	r3, #3
 8017106:	f023 0303 	bic.w	r3, r3, #3
 801710a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801710c:	f3ef 8310 	mrs	r3, PRIMASK
 8017110:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8017112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8017114:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8017116:	b672      	cpsid	i
    return(int_posture);
 8017118:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 801711a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801711c:	4b55      	ldr	r3, [pc, #340]	; (8017274 <_tx_byte_allocate+0x180>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8017122:	2300      	movs	r3, #0
 8017124:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801712a:	621a      	str	r2, [r3, #32]
 801712c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801712e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017132:	f383 8810 	msr	PRIMASK, r3
}
 8017136:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8017138:	6879      	ldr	r1, [r7, #4]
 801713a:	68f8      	ldr	r0, [r7, #12]
 801713c:	f000 f9b2 	bl	80174a4 <_tx_byte_pool_search>
 8017140:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017142:	f3ef 8310 	mrs	r3, PRIMASK
 8017146:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8017148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801714a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801714c:	b672      	cpsid	i
    return(int_posture);
 801714e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8017150:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8017152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017154:	2b00      	cmp	r3, #0
 8017156:	d002      	beq.n	801715e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8017158:	2301      	movs	r3, #1
 801715a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801715c:	e006      	b.n	801716c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	6a1b      	ldr	r3, [r3, #32]
 8017162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017164:	429a      	cmp	r2, r3
 8017166:	d101      	bne.n	801716c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8017168:	2301      	movs	r3, #1
 801716a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 801716c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801716e:	2b00      	cmp	r3, #0
 8017170:	d0d9      	beq.n	8017126 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8017172:	68bb      	ldr	r3, [r7, #8]
 8017174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017176:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8017178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801717a:	2b00      	cmp	r3, #0
 801717c:	d008      	beq.n	8017190 <_tx_byte_allocate+0x9c>
 801717e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017180:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017182:	6a3b      	ldr	r3, [r7, #32]
 8017184:	f383 8810 	msr	PRIMASK, r3
}
 8017188:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 801718a:	2300      	movs	r3, #0
 801718c:	653b      	str	r3, [r7, #80]	; 0x50
 801718e:	e06c      	b.n	801726a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d061      	beq.n	801725a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8017196:	4b38      	ldr	r3, [pc, #224]	; (8017278 <_tx_byte_allocate+0x184>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d007      	beq.n	80171ae <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 801719e:	2310      	movs	r3, #16
 80171a0:	653b      	str	r3, [r7, #80]	; 0x50
 80171a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80171a6:	69fb      	ldr	r3, [r7, #28]
 80171a8:	f383 8810 	msr	PRIMASK, r3
}
 80171ac:	e05d      	b.n	801726a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80171ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171b0:	4a32      	ldr	r2, [pc, #200]	; (801727c <_tx_byte_allocate+0x188>)
 80171b2:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80171b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171b6:	68fa      	ldr	r2, [r7, #12]
 80171b8:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80171ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171bc:	68ba      	ldr	r2, [r7, #8]
 80171be:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80171c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171c2:	687a      	ldr	r2, [r7, #4]
 80171c4:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80171c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80171cc:	1c5a      	adds	r2, r3, #1
 80171ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171d8:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171de:	1c5a      	adds	r2, r3, #1
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80171e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d109      	bne.n	80171fe <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171ee:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80171f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171f4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80171f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171fa:	675a      	str	r2, [r3, #116]	; 0x74
 80171fc:	e011      	b.n	8017222 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017202:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8017204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017208:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801720a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801720c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801720e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8017210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017214:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8017216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801721a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801721c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801721e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017220:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8017222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017224:	2209      	movs	r2, #9
 8017226:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8017228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801722a:	2201      	movs	r2, #1
 801722c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801722e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017230:	683a      	ldr	r2, [r7, #0]
 8017232:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8017234:	4b10      	ldr	r3, [pc, #64]	; (8017278 <_tx_byte_allocate+0x184>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	3301      	adds	r3, #1
 801723a:	4a0f      	ldr	r2, [pc, #60]	; (8017278 <_tx_byte_allocate+0x184>)
 801723c:	6013      	str	r3, [r2, #0]
 801723e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017240:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017242:	69bb      	ldr	r3, [r7, #24]
 8017244:	f383 8810 	msr	PRIMASK, r3
}
 8017248:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801724a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801724c:	f001 fff6 	bl	801923c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8017250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017256:	653b      	str	r3, [r7, #80]	; 0x50
 8017258:	e007      	b.n	801726a <_tx_byte_allocate+0x176>
 801725a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801725c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801725e:	697b      	ldr	r3, [r7, #20]
 8017260:	f383 8810 	msr	PRIMASK, r3
}
 8017264:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8017266:	2310      	movs	r3, #16
 8017268:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 801726a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801726c:	4618      	mov	r0, r3
 801726e:	3758      	adds	r7, #88	; 0x58
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}
 8017274:	24000874 	.word	0x24000874
 8017278:	2400090c 	.word	0x2400090c
 801727c:	08017281 	.word	0x08017281

08017280 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b08e      	sub	sp, #56	; 0x38
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801728a:	f3ef 8310 	mrs	r3, PRIMASK
 801728e:	623b      	str	r3, [r7, #32]
    return(posture);
 8017290:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8017292:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017294:	b672      	cpsid	i
    return(int_posture);
 8017296:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8017298:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801729e:	4a33      	ldr	r2, [pc, #204]	; (801736c <_tx_byte_pool_cleanup+0xec>)
 80172a0:	4293      	cmp	r3, r2
 80172a2:	d158      	bne.n	8017356 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80172aa:	683a      	ldr	r2, [r7, #0]
 80172ac:	429a      	cmp	r2, r3
 80172ae:	d152      	bne.n	8017356 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172b4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80172b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d04c      	beq.n	8017356 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80172bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	4a2b      	ldr	r2, [pc, #172]	; (8017370 <_tx_byte_pool_cleanup+0xf0>)
 80172c2:	4293      	cmp	r3, r2
 80172c4:	d147      	bne.n	8017356 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80172c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d043      	beq.n	8017356 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2200      	movs	r2, #0
 80172d2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80172d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172d8:	1e5a      	subs	r2, r3, #1
 80172da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172dc:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80172de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80172e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d103      	bne.n	80172f2 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80172ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ec:	2200      	movs	r2, #0
 80172ee:	625a      	str	r2, [r3, #36]	; 0x24
 80172f0:	e013      	b.n	801731a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172f6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172fc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80172fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017302:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8017304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017308:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	429a      	cmp	r2, r3
 8017312:	d102      	bne.n	801731a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8017314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017318:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801731e:	2b09      	cmp	r3, #9
 8017320:	d119      	bne.n	8017356 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2210      	movs	r2, #16
 8017326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801732a:	4b12      	ldr	r3, [pc, #72]	; (8017374 <_tx_byte_pool_cleanup+0xf4>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	3301      	adds	r3, #1
 8017330:	4a10      	ldr	r2, [pc, #64]	; (8017374 <_tx_byte_pool_cleanup+0xf4>)
 8017332:	6013      	str	r3, [r2, #0]
 8017334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017336:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	f383 8810 	msr	PRIMASK, r3
}
 801733e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f001 fe7b 	bl	801903c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017346:	f3ef 8310 	mrs	r3, PRIMASK
 801734a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801734c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801734e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017350:	b672      	cpsid	i
    return(int_posture);
 8017352:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8017354:	637b      	str	r3, [r7, #52]	; 0x34
 8017356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017358:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	f383 8810 	msr	PRIMASK, r3
}
 8017360:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8017362:	bf00      	nop
 8017364:	3738      	adds	r7, #56	; 0x38
 8017366:	46bd      	mov	sp, r7
 8017368:	bd80      	pop	{r7, pc}
 801736a:	bf00      	nop
 801736c:	08017281 	.word	0x08017281
 8017370:	42595445 	.word	0x42595445
 8017374:	2400090c 	.word	0x2400090c

08017378 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b08e      	sub	sp, #56	; 0x38
 801737c:	af00      	add	r7, sp, #0
 801737e:	60f8      	str	r0, [r7, #12]
 8017380:	60b9      	str	r1, [r7, #8]
 8017382:	607a      	str	r2, [r7, #4]
 8017384:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8017386:	2234      	movs	r2, #52	; 0x34
 8017388:	2100      	movs	r1, #0
 801738a:	68f8      	ldr	r0, [r7, #12]
 801738c:	f002 ffca 	bl	801a324 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	f023 0303 	bic.w	r3, r3, #3
 8017396:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	68ba      	ldr	r2, [r7, #8]
 801739c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	687a      	ldr	r2, [r7, #4]
 80173a2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	683a      	ldr	r2, [r7, #0]
 80173a8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	687a      	ldr	r2, [r7, #4]
 80173ae:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	687a      	ldr	r2, [r7, #4]
 80173b4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80173b6:	683b      	ldr	r3, [r7, #0]
 80173b8:	f1a3 0208 	sub.w	r2, r3, #8
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	2202      	movs	r2, #2
 80173c4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80173ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	4413      	add	r3, r2
 80173d0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80173d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173d4:	3b04      	subs	r3, #4
 80173d6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80173dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173de:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80173e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173e4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80173e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173e8:	3b04      	subs	r3, #4
 80173ea:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80173ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80173f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80173fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80173fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017402:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8017408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801740a:	3304      	adds	r3, #4
 801740c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017410:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8017412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017414:	4a1f      	ldr	r2, [pc, #124]	; (8017494 <_tx_byte_pool_create+0x11c>)
 8017416:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	2200      	movs	r2, #0
 801741c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801741e:	f3ef 8310 	mrs	r3, PRIMASK
 8017422:	61bb      	str	r3, [r7, #24]
    return(posture);
 8017424:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8017426:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017428:	b672      	cpsid	i
    return(int_posture);
 801742a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 801742c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	4a19      	ldr	r2, [pc, #100]	; (8017498 <_tx_byte_pool_create+0x120>)
 8017432:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8017434:	4b19      	ldr	r3, [pc, #100]	; (801749c <_tx_byte_pool_create+0x124>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d109      	bne.n	8017450 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 801743c:	4a18      	ldr	r2, [pc, #96]	; (80174a0 <_tx_byte_pool_create+0x128>)
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	68fa      	ldr	r2, [r7, #12]
 8017446:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	68fa      	ldr	r2, [r7, #12]
 801744c:	631a      	str	r2, [r3, #48]	; 0x30
 801744e:	e011      	b.n	8017474 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8017450:	4b13      	ldr	r3, [pc, #76]	; (80174a0 <_tx_byte_pool_create+0x128>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8017456:	6a3b      	ldr	r3, [r7, #32]
 8017458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801745a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 801745c:	6a3b      	ldr	r3, [r7, #32]
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8017462:	69fb      	ldr	r3, [r7, #28]
 8017464:	68fa      	ldr	r2, [r7, #12]
 8017466:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	69fa      	ldr	r2, [r7, #28]
 801746c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	6a3a      	ldr	r2, [r7, #32]
 8017472:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8017474:	4b09      	ldr	r3, [pc, #36]	; (801749c <_tx_byte_pool_create+0x124>)
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	3301      	adds	r3, #1
 801747a:	4a08      	ldr	r2, [pc, #32]	; (801749c <_tx_byte_pool_create+0x124>)
 801747c:	6013      	str	r3, [r2, #0]
 801747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017480:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	f383 8810 	msr	PRIMASK, r3
}
 8017488:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801748a:	2300      	movs	r3, #0
}
 801748c:	4618      	mov	r0, r3
 801748e:	3738      	adds	r7, #56	; 0x38
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}
 8017494:	ffffeeee 	.word	0xffffeeee
 8017498:	42595445 	.word	0x42595445
 801749c:	24000868 	.word	0x24000868
 80174a0:	24000864 	.word	0x24000864

080174a4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80174a4:	b480      	push	{r7}
 80174a6:	b097      	sub	sp, #92	; 0x5c
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
 80174ac:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80174ae:	2300      	movs	r3, #0
 80174b0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80174b2:	f3ef 8310 	mrs	r3, PRIMASK
 80174b6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80174b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80174ba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80174bc:	b672      	cpsid	i
    return(int_posture);
 80174be:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80174c0:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	689a      	ldr	r2, [r3, #8]
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	68db      	ldr	r3, [r3, #12]
 80174ca:	3b02      	subs	r3, #2
 80174cc:	00db      	lsls	r3, r3, #3
 80174ce:	4413      	add	r3, r2
 80174d0:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80174d2:	683a      	ldr	r2, [r7, #0]
 80174d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d308      	bcc.n	80174ec <_tx_byte_pool_search+0x48>
 80174da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80174de:	69fb      	ldr	r3, [r7, #28]
 80174e0:	f383 8810 	msr	PRIMASK, r3
}
 80174e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80174e6:	2300      	movs	r3, #0
 80174e8:	653b      	str	r3, [r7, #80]	; 0x50
 80174ea:	e0dd      	b.n	80176a8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80174ec:	4b72      	ldr	r3, [pc, #456]	; (80176b8 <_tx_byte_pool_search+0x214>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80174f6:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	695b      	ldr	r3, [r3, #20]
 80174fc:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	68db      	ldr	r3, [r3, #12]
 8017502:	3301      	adds	r3, #1
 8017504:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8017506:	2300      	movs	r3, #0
 8017508:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801750a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801750c:	3304      	adds	r3, #4
 801750e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8017510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017512:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8017514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	4a68      	ldr	r2, [pc, #416]	; (80176bc <_tx_byte_pool_search+0x218>)
 801751a:	4293      	cmp	r3, r2
 801751c:	d143      	bne.n	80175a6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801751e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017520:	2b00      	cmp	r3, #0
 8017522:	d104      	bne.n	801752e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017528:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801752a:	2301      	movs	r3, #1
 801752c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801752e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017530:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8017532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8017538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801753a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801753c:	1ad3      	subs	r3, r2, r3
 801753e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8017540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017542:	3b08      	subs	r3, #8
 8017544:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8017546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	429a      	cmp	r2, r3
 801754c:	d257      	bcs.n	80175fe <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801754e:	2300      	movs	r3, #0
 8017550:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8017552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017554:	3304      	adds	r3, #4
 8017556:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8017558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801755a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	4a56      	ldr	r2, [pc, #344]	; (80176bc <_tx_byte_pool_search+0x218>)
 8017562:	4293      	cmp	r3, r2
 8017564:	d113      	bne.n	801758e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8017566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017568:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801756c:	681a      	ldr	r2, [r3, #0]
 801756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017570:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	68db      	ldr	r3, [r3, #12]
 8017576:	1e5a      	subs	r2, r3, #1
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	695b      	ldr	r3, [r3, #20]
 8017580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017582:	429a      	cmp	r2, r3
 8017584:	d114      	bne.n	80175b0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801758a:	615a      	str	r2, [r3, #20]
 801758c:	e010      	b.n	80175b0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017590:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8017592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8017598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801759a:	2b00      	cmp	r3, #0
 801759c:	d008      	beq.n	80175b0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 801759e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175a0:	3b01      	subs	r3, #1
 80175a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80175a4:	e004      	b.n	80175b0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80175a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175a8:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80175aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80175b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d002      	beq.n	80175bc <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80175b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175b8:	3b01      	subs	r3, #1
 80175ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80175bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	f383 8810 	msr	PRIMASK, r3
}
 80175c6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80175c8:	f3ef 8310 	mrs	r3, PRIMASK
 80175cc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80175ce:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80175d0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80175d2:	b672      	cpsid	i
    return(int_posture);
 80175d4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80175d6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6a1b      	ldr	r3, [r3, #32]
 80175dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80175de:	429a      	cmp	r2, r3
 80175e0:	d009      	beq.n	80175f6 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	695b      	ldr	r3, [r3, #20]
 80175e6:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	3301      	adds	r3, #1
 80175ee:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80175f4:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80175f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d186      	bne.n	801750a <_tx_byte_pool_search+0x66>
 80175fc:	e000      	b.n	8017600 <_tx_byte_pool_search+0x15c>
                    break;
 80175fe:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8017600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017602:	2b00      	cmp	r3, #0
 8017604:	d048      	beq.n	8017698 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8017606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	1ad3      	subs	r3, r2, r3
 801760c:	2b13      	cmp	r3, #19
 801760e:	d91e      	bls.n	801764e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	3308      	adds	r3, #8
 8017614:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017616:	4413      	add	r3, r2
 8017618:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801761c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801761e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017620:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8017622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017624:	681a      	ldr	r2, [r3, #0]
 8017626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017628:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762c:	3304      	adds	r3, #4
 801762e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8017630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017632:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8017634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017636:	4a21      	ldr	r2, [pc, #132]	; (80176bc <_tx_byte_pool_search+0x218>)
 8017638:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	68db      	ldr	r3, [r3, #12]
 801763e:	1c5a      	adds	r2, r3, #1
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8017644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017648:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801764e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017650:	3304      	adds	r3, #4
 8017652:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8017654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017656:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8017658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801765a:	687a      	ldr	r2, [r7, #4]
 801765c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	689a      	ldr	r2, [r3, #8]
 8017662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017664:	1ad3      	subs	r3, r2, r3
 8017666:	f1a3 0208 	sub.w	r2, r3, #8
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	695b      	ldr	r3, [r3, #20]
 8017672:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017674:	429a      	cmp	r2, r3
 8017676:	d105      	bne.n	8017684 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8017678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801767a:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 801767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801767e:	681a      	ldr	r2, [r3, #0]
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	615a      	str	r2, [r3, #20]
 8017684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017686:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	f383 8810 	msr	PRIMASK, r3
}
 801768e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8017690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017692:	3308      	adds	r3, #8
 8017694:	653b      	str	r3, [r7, #80]	; 0x50
 8017696:	e007      	b.n	80176a8 <_tx_byte_pool_search+0x204>
 8017698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801769a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	f383 8810 	msr	PRIMASK, r3
}
 80176a2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80176a4:	2300      	movs	r3, #0
 80176a6:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80176a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	375c      	adds	r7, #92	; 0x5c
 80176ae:	46bd      	mov	sp, r7
 80176b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b4:	4770      	bx	lr
 80176b6:	bf00      	nop
 80176b8:	24000874 	.word	0x24000874
 80176bc:	ffffeeee 	.word	0xffffeeee

080176c0 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b08e      	sub	sp, #56	; 0x38
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
 80176c8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80176ca:	f3ef 8310 	mrs	r3, PRIMASK
 80176ce:	61fb      	str	r3, [r7, #28]
    return(posture);
 80176d0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80176d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80176d4:	b672      	cpsid	i
    return(int_posture);
 80176d6:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 80176d8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80176de:	4a38      	ldr	r2, [pc, #224]	; (80177c0 <_tx_event_flags_cleanup+0x100>)
 80176e0:	4293      	cmp	r3, r2
 80176e2:	d162      	bne.n	80177aa <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80176ea:	683a      	ldr	r2, [r7, #0]
 80176ec:	429a      	cmp	r2, r3
 80176ee:	d15c      	bne.n	80177aa <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176f4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 80176f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d056      	beq.n	80177aa <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 80176fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	4a30      	ldr	r2, [pc, #192]	; (80177c4 <_tx_event_flags_cleanup+0x104>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d151      	bne.n	80177aa <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8017706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017708:	695b      	ldr	r3, [r3, #20]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d04d      	beq.n	80177aa <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	2200      	movs	r2, #0
 8017712:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8017714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017716:	695b      	ldr	r3, [r3, #20]
 8017718:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 801771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801771c:	691b      	ldr	r3, [r3, #16]
 801771e:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8017720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017722:	2b00      	cmp	r3, #0
 8017724:	d020      	beq.n	8017768 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8017726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017728:	3b01      	subs	r3, #1
 801772a:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 801772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801772e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017730:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8017732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017734:	2b00      	cmp	r3, #0
 8017736:	d103      	bne.n	8017740 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8017738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773a:	2200      	movs	r2, #0
 801773c:	611a      	str	r2, [r3, #16]
 801773e:	e016      	b.n	801776e <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017744:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801774a:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774e:	6a3a      	ldr	r2, [r7, #32]
 8017750:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8017752:	6a3b      	ldr	r3, [r7, #32]
 8017754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017756:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8017758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	429a      	cmp	r2, r3
 801775e:	d106      	bne.n	801776e <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8017760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017764:	611a      	str	r2, [r3, #16]
 8017766:	e002      	b.n	801776e <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8017768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776a:	2201      	movs	r2, #1
 801776c:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017772:	2b07      	cmp	r3, #7
 8017774:	d119      	bne.n	80177aa <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2207      	movs	r2, #7
 801777a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801777e:	4b12      	ldr	r3, [pc, #72]	; (80177c8 <_tx_event_flags_cleanup+0x108>)
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	3301      	adds	r3, #1
 8017784:	4a10      	ldr	r2, [pc, #64]	; (80177c8 <_tx_event_flags_cleanup+0x108>)
 8017786:	6013      	str	r3, [r2, #0]
 8017788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801778a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	f383 8810 	msr	PRIMASK, r3
}
 8017792:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f001 fc51 	bl	801903c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801779a:	f3ef 8310 	mrs	r3, PRIMASK
 801779e:	617b      	str	r3, [r7, #20]
    return(posture);
 80177a0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80177a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80177a4:	b672      	cpsid	i
    return(int_posture);
 80177a6:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80177a8:	637b      	str	r3, [r7, #52]	; 0x34
 80177aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80177ae:	68bb      	ldr	r3, [r7, #8]
 80177b0:	f383 8810 	msr	PRIMASK, r3
}
 80177b4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80177b6:	bf00      	nop
 80177b8:	3738      	adds	r7, #56	; 0x38
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}
 80177be:	bf00      	nop
 80177c0:	080176c1 	.word	0x080176c1
 80177c4:	4456444e 	.word	0x4456444e
 80177c8:	2400090c 	.word	0x2400090c

080177cc <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b088      	sub	sp, #32
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 80177d6:	2224      	movs	r2, #36	; 0x24
 80177d8:	2100      	movs	r1, #0
 80177da:	6878      	ldr	r0, [r7, #4]
 80177dc:	f002 fda2 	bl	801a324 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	683a      	ldr	r2, [r7, #0]
 80177e4:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80177e6:	f3ef 8310 	mrs	r3, PRIMASK
 80177ea:	613b      	str	r3, [r7, #16]
    return(posture);
 80177ec:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80177ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80177f0:	b672      	cpsid	i
    return(int_posture);
 80177f2:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 80177f4:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	4a18      	ldr	r2, [pc, #96]	; (801785c <_tx_event_flags_create+0x90>)
 80177fa:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80177fc:	4b18      	ldr	r3, [pc, #96]	; (8017860 <_tx_event_flags_create+0x94>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d109      	bne.n	8017818 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8017804:	4a17      	ldr	r2, [pc, #92]	; (8017864 <_tx_event_flags_create+0x98>)
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	687a      	ldr	r2, [r7, #4]
 801780e:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	687a      	ldr	r2, [r7, #4]
 8017814:	61da      	str	r2, [r3, #28]
 8017816:	e011      	b.n	801783c <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8017818:	4b12      	ldr	r3, [pc, #72]	; (8017864 <_tx_event_flags_create+0x98>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 801781e:	69bb      	ldr	r3, [r7, #24]
 8017820:	69db      	ldr	r3, [r3, #28]
 8017822:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8017824:	69bb      	ldr	r3, [r7, #24]
 8017826:	687a      	ldr	r2, [r7, #4]
 8017828:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 801782a:	697b      	ldr	r3, [r7, #20]
 801782c:	687a      	ldr	r2, [r7, #4]
 801782e:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	697a      	ldr	r2, [r7, #20]
 8017834:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	69ba      	ldr	r2, [r7, #24]
 801783a:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 801783c:	4b08      	ldr	r3, [pc, #32]	; (8017860 <_tx_event_flags_create+0x94>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	3301      	adds	r3, #1
 8017842:	4a07      	ldr	r2, [pc, #28]	; (8017860 <_tx_event_flags_create+0x94>)
 8017844:	6013      	str	r3, [r2, #0]
 8017846:	69fb      	ldr	r3, [r7, #28]
 8017848:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	f383 8810 	msr	PRIMASK, r3
}
 8017850:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8017852:	2300      	movs	r3, #0
}
 8017854:	4618      	mov	r0, r3
 8017856:	3720      	adds	r7, #32
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}
 801785c:	4456444e 	.word	0x4456444e
 8017860:	24000850 	.word	0x24000850
 8017864:	2400084c 	.word	0x2400084c

08017868 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b096      	sub	sp, #88	; 0x58
 801786c:	af00      	add	r7, sp, #0
 801786e:	60f8      	str	r0, [r7, #12]
 8017870:	60b9      	str	r1, [r7, #8]
 8017872:	607a      	str	r2, [r7, #4]
 8017874:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017876:	f3ef 8310 	mrs	r3, PRIMASK
 801787a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801787e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017880:	b672      	cpsid	i
    return(int_posture);
 8017882:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8017884:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	689b      	ldr	r3, [r3, #8]
 801788a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	6a1b      	ldr	r3, [r3, #32]
 8017890:	43da      	mvns	r2, r3
 8017892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017894:	401a      	ands	r2, r3
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	f003 0302 	and.w	r3, r3, #2
 80178a0:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	6a1b      	ldr	r3, [r3, #32]
 80178a6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 80178a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d004      	beq.n	80178b8 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 80178ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178b0:	43db      	mvns	r3, r3
 80178b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80178b4:	4013      	ands	r3, r2
 80178b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 80178b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178ba:	2b02      	cmp	r3, #2
 80178bc:	d10a      	bne.n	80178d4 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 80178be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	4013      	ands	r3, r2
 80178c4:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 80178c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d006      	beq.n	80178dc <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 80178ce:	2300      	movs	r3, #0
 80178d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80178d2:	e003      	b.n	80178dc <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 80178d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80178d6:	68bb      	ldr	r3, [r7, #8]
 80178d8:	4013      	ands	r3, r2
 80178da:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 80178dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d026      	beq.n	8017930 <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	f003 0301 	and.w	r3, r3, #1
 80178e8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 80178ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ec:	2b01      	cmp	r3, #1
 80178ee:	d11c      	bne.n	801792a <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 80178f0:	2300      	movs	r3, #0
 80178f2:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	695b      	ldr	r3, [r3, #20]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d005      	beq.n	8017908 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	691b      	ldr	r3, [r3, #16]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d101      	bne.n	8017908 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8017904:	2301      	movs	r3, #1
 8017906:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8017908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801790a:	2b01      	cmp	r3, #1
 801790c:	d106      	bne.n	801791c <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	6a1a      	ldr	r2, [r3, #32]
 8017912:	68bb      	ldr	r3, [r7, #8]
 8017914:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	621a      	str	r2, [r3, #32]
 801791a:	e006      	b.n	801792a <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	689a      	ldr	r2, [r3, #8]
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	43db      	mvns	r3, r3
 8017924:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 801792a:	2300      	movs	r3, #0
 801792c:	653b      	str	r3, [r7, #80]	; 0x50
 801792e:	e073      	b.n	8017a18 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8017930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017932:	2b00      	cmp	r3, #0
 8017934:	d06e      	beq.n	8017a14 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 8017936:	4b3e      	ldr	r3, [pc, #248]	; (8017a30 <_tx_event_flags_get+0x1c8>)
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d102      	bne.n	8017944 <_tx_event_flags_get+0xdc>
 801793e:	68bb      	ldr	r3, [r7, #8]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d102      	bne.n	801794a <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 8017944:	2307      	movs	r3, #7
 8017946:	653b      	str	r3, [r7, #80]	; 0x50
 8017948:	e066      	b.n	8017a18 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 801794a:	4b3a      	ldr	r3, [pc, #232]	; (8017a34 <_tx_event_flags_get+0x1cc>)
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8017950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017952:	4a39      	ldr	r2, [pc, #228]	; (8017a38 <_tx_event_flags_get+0x1d0>)
 8017954:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 8017956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017958:	68ba      	ldr	r2, [r7, #8]
 801795a:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 801795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801795e:	687a      	ldr	r2, [r7, #4]
 8017960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8017964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017966:	683a      	ldr	r2, [r7, #0]
 8017968:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 801796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801796c:	68fa      	ldr	r2, [r7, #12]
 801796e:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8017970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017976:	1c5a      	adds	r2, r3, #1
 8017978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801797a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	695b      	ldr	r3, [r3, #20]
 8017982:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8017984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017986:	2b00      	cmp	r3, #0
 8017988:	d109      	bne.n	801799e <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801798e:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8017990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017994:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8017996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801799a:	675a      	str	r2, [r3, #116]	; 0x74
 801799c:	e011      	b.n	80179c2 <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	691b      	ldr	r3, [r3, #16]
 80179a2:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80179a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179a8:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80179aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80179ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80179b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179b4:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80179b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80179ba:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80179bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80179c0:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	695b      	ldr	r3, [r3, #20]
 80179c6:	1c5a      	adds	r2, r3, #1
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 80179cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ce:	2207      	movs	r2, #7
 80179d0:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80179d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179d4:	2201      	movs	r2, #1
 80179d6:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80179d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80179dc:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80179de:	4b14      	ldr	r3, [pc, #80]	; (8017a30 <_tx_event_flags_get+0x1c8>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	3301      	adds	r3, #1
 80179e4:	4a12      	ldr	r2, [pc, #72]	; (8017a30 <_tx_event_flags_get+0x1c8>)
 80179e6:	6013      	str	r3, [r2, #0]
 80179e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	f383 8810 	msr	PRIMASK, r3
}
 80179f2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80179f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80179f6:	f001 fc21 	bl	801923c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80179fa:	f3ef 8310 	mrs	r3, PRIMASK
 80179fe:	61fb      	str	r3, [r7, #28]
    return(posture);
 8017a00:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8017a02:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017a04:	b672      	cpsid	i
    return(int_posture);
 8017a06:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 8017a08:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8017a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017a10:	653b      	str	r3, [r7, #80]	; 0x50
 8017a12:	e001      	b.n	8017a18 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8017a14:	2307      	movs	r3, #7
 8017a16:	653b      	str	r3, [r7, #80]	; 0x50
 8017a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a1a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017a1c:	693b      	ldr	r3, [r7, #16]
 8017a1e:	f383 8810 	msr	PRIMASK, r3
}
 8017a22:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8017a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	3758      	adds	r7, #88	; 0x58
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}
 8017a2e:	bf00      	nop
 8017a30:	2400090c 	.word	0x2400090c
 8017a34:	24000874 	.word	0x24000874
 8017a38:	080176c1 	.word	0x080176c1

08017a3c <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b0a6      	sub	sp, #152	; 0x98
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	60f8      	str	r0, [r7, #12]
 8017a44:	60b9      	str	r1, [r7, #8]
 8017a46:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017a48:	f3ef 8310 	mrs	r3, PRIMASK
 8017a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8017a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8017a50:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8017a52:	b672      	cpsid	i
    return(int_posture);
 8017a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8017a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	f003 0302 	and.w	r3, r3, #2
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d023      	beq.n	8017aac <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 8017a64:	2300      	movs	r3, #0
 8017a66:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	695b      	ldr	r3, [r3, #20]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d005      	beq.n	8017a7c <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	691b      	ldr	r3, [r3, #16]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d101      	bne.n	8017a7c <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8017a78:	2301      	movs	r3, #1
 8017a7a:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8017a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a7e:	2b01      	cmp	r3, #1
 8017a80:	d107      	bne.n	8017a92 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	6a1a      	ldr	r2, [r3, #32]
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	43db      	mvns	r3, r3
 8017a8a:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	621a      	str	r2, [r3, #32]
 8017a90:	e005      	b.n	8017a9e <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	689a      	ldr	r2, [r3, #8]
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	609a      	str	r2, [r3, #8]
 8017a9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017aa2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017aa6:	f383 8810 	msr	PRIMASK, r3
}
 8017aaa:	e1d2      	b.n	8017e52 <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	689a      	ldr	r2, [r3, #8]
 8017ab0:	68bb      	ldr	r3, [r7, #8]
 8017ab2:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	6a1b      	ldr	r3, [r3, #32]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d006      	beq.n	8017ace <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	6a1a      	ldr	r2, [r3, #32]
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	43db      	mvns	r3, r3
 8017ac8:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	695b      	ldr	r3, [r3, #20]
 8017ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	691b      	ldr	r3, [r3, #16]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	f000 81a4 	beq.w	8017e2c <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 8017ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017ae8:	2b01      	cmp	r3, #1
 8017aea:	d167      	bne.n	8017bbc <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	691b      	ldr	r3, [r3, #16]
 8017af0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	689b      	ldr	r3, [r3, #8]
 8017af8:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8017afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b00:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 8017b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017b0a:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8017b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b0e:	f003 0302 	and.w	r3, r3, #2
 8017b12:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8017b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017b16:	2b02      	cmp	r3, #2
 8017b18:	d10a      	bne.n	8017b30 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8017b1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b1e:	4013      	ands	r3, r2
 8017b20:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 8017b22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b26:	429a      	cmp	r2, r3
 8017b28:	d006      	beq.n	8017b38 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8017b2e:	e003      	b.n	8017b38 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8017b30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b34:	4013      	ands	r3, r2
 8017b36:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8017b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f000 817d 	beq.w	8017e3a <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8017b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017b46:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 8017b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017b4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017b4c:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8017b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b50:	f003 0301 	and.w	r3, r3, #1
 8017b54:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8017b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	d106      	bne.n	8017b6a <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	689a      	ldr	r2, [r3, #8]
 8017b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b62:	43db      	mvns	r3, r3
 8017b64:	401a      	ands	r2, r3
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	2200      	movs	r2, #0
 8017b74:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8017b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8017b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017b82:	2200      	movs	r2, #0
 8017b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8017b88:	4ba7      	ldr	r3, [pc, #668]	; (8017e28 <_tx_event_flags_set+0x3ec>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	3301      	adds	r3, #1
 8017b8e:	4aa6      	ldr	r2, [pc, #664]	; (8017e28 <_tx_event_flags_set+0x3ec>)
 8017b90:	6013      	str	r3, [r2, #0]
 8017b92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017b96:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b9a:	f383 8810 	msr	PRIMASK, r3
}
 8017b9e:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8017ba0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8017ba4:	f001 fa4a 	bl	801903c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8017bac:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8017bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8017bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8017bb2:	b672      	cpsid	i
    return(int_posture);
 8017bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8017bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017bba:	e13e      	b.n	8017e3a <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	691b      	ldr	r3, [r3, #16]
 8017bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 8017bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	2200      	movs	r2, #0
 8017bd0:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	689b      	ldr	r3, [r3, #8]
 8017be2:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8017be4:	4b90      	ldr	r3, [pc, #576]	; (8017e28 <_tx_event_flags_set+0x3ec>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	3301      	adds	r3, #1
 8017bea:	4a8f      	ldr	r2, [pc, #572]	; (8017e28 <_tx_event_flags_set+0x3ec>)
 8017bec:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 8017bee:	2301      	movs	r3, #1
 8017bf0:	677b      	str	r3, [r7, #116]	; 0x74
 8017bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bfa:	f383 8810 	msr	PRIMASK, r3
}
 8017bfe:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017c00:	f3ef 8310 	mrs	r3, PRIMASK
 8017c04:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8017c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8017c08:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8017c0a:	b672      	cpsid	i
    return(int_posture);
 8017c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 8017c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	68db      	ldr	r3, [r3, #12]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d00f      	beq.n	8017c3a <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 8017c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	695b      	ldr	r3, [r3, #20]
 8017c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	689b      	ldr	r3, [r3, #8]
 8017c34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017c36:	4313      	orrs	r3, r2
 8017c38:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8017c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c40:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8017c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017c48:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 8017c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017c52:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8017c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c56:	f003 0302 	and.w	r3, r3, #2
 8017c5a:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 8017c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c5e:	2b02      	cmp	r3, #2
 8017c60:	d10a      	bne.n	8017c78 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8017c62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c66:	4013      	ands	r3, r2
 8017c68:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 8017c6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d006      	beq.n	8017c80 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8017c72:	2300      	movs	r3, #0
 8017c74:	67bb      	str	r3, [r7, #120]	; 0x78
 8017c76:	e003      	b.n	8017c80 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8017c78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c7c:	4013      	ands	r3, r2
 8017c7e:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8017c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c86:	2b07      	cmp	r3, #7
 8017c88:	d001      	beq.n	8017c8e <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8017c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d069      	beq.n	8017d68 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8017c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c9a:	2b07      	cmp	r3, #7
 8017c9c:	d11d      	bne.n	8017cda <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8017c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 8017ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017ca8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017caa:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8017cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017cae:	f003 0301 	and.w	r3, r3, #1
 8017cb2:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8017cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017cb6:	2b01      	cmp	r3, #1
 8017cb8:	d106      	bne.n	8017cc8 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	689a      	ldr	r2, [r3, #8]
 8017cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017cc0:	43db      	mvns	r3, r3
 8017cc2:	401a      	ands	r2, r3
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8017cc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017ccc:	2200      	movs	r2, #0
 8017cce:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8017cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8017cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ce0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d103      	bne.n	8017cf0 <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 8017ce8:	2300      	movs	r3, #0
 8017cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017cee:	e018      	b.n	8017d22 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8017cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cf6:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8017cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017cfe:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8017d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017d04:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8017d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017d0a:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8017d0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017d14:	429a      	cmp	r2, r3
 8017d16:	d104      	bne.n	8017d22 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8017d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	695b      	ldr	r3, [r3, #20]
 8017d26:	1e5a      	subs	r2, r3, #1
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8017d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d10c      	bne.n	8017d4e <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 8017d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017d38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 8017d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8017d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017d48:	2200      	movs	r2, #0
 8017d4a:	671a      	str	r2, [r3, #112]	; 0x70
 8017d4c:	e00c      	b.n	8017d68 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8017d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017d52:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017d56:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8017d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 8017d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8017d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8017d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017d72:	3b01      	subs	r3, #1
 8017d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 8017d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	f47f af38 	bne.w	8017bf2 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017d88:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	6a1b      	ldr	r3, [r3, #32]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d00a      	beq.n	8017da8 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	689a      	ldr	r2, [r3, #8]
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	6a1b      	ldr	r3, [r3, #32]
 8017d9a:	43db      	mvns	r3, r3
 8017d9c:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	2200      	movs	r2, #0
 8017da6:	621a      	str	r2, [r3, #32]
 8017da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017dac:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db0:	f383 8810 	msr	PRIMASK, r3
}
 8017db4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8017db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8017dbe:	e01f      	b.n	8017e00 <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8017dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8017dcc:	623b      	str	r3, [r7, #32]
    return(posture);
 8017dce:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8017dd0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017dd2:	b672      	cpsid	i
    return(int_posture);
 8017dd4:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8017dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8017dda:	4b13      	ldr	r3, [pc, #76]	; (8017e28 <_tx_event_flags_set+0x3ec>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	3301      	adds	r3, #1
 8017de0:	4a11      	ldr	r2, [pc, #68]	; (8017e28 <_tx_event_flags_set+0x3ec>)
 8017de2:	6013      	str	r3, [r2, #0]
 8017de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017de8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dec:	f383 8810 	msr	PRIMASK, r3
}
 8017df0:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8017df2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8017df6:	f001 f921 	bl	801903c <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8017dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017dfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8017e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d1db      	bne.n	8017dc0 <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017e08:	f3ef 8310 	mrs	r3, PRIMASK
 8017e0c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8017e0e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8017e10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017e12:	b672      	cpsid	i
    return(int_posture);
 8017e14:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 8017e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 8017e1a:	4b03      	ldr	r3, [pc, #12]	; (8017e28 <_tx_event_flags_set+0x3ec>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	3b01      	subs	r3, #1
 8017e20:	4a01      	ldr	r2, [pc, #4]	; (8017e28 <_tx_event_flags_set+0x3ec>)
 8017e22:	6013      	str	r3, [r2, #0]
 8017e24:	e009      	b.n	8017e3a <_tx_event_flags_set+0x3fe>
 8017e26:	bf00      	nop
 8017e28:	2400090c 	.word	0x2400090c
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	695b      	ldr	r3, [r3, #20]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d002      	beq.n	8017e3a <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2201      	movs	r2, #1
 8017e38:	60da      	str	r2, [r3, #12]
 8017e3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017e3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017e40:	693b      	ldr	r3, [r7, #16]
 8017e42:	f383 8810 	msr	PRIMASK, r3
}
 8017e46:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 8017e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017e4a:	2b01      	cmp	r3, #1
 8017e4c:	d101      	bne.n	8017e52 <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 8017e4e:	f001 f8bb 	bl	8018fc8 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8017e52:	2300      	movs	r3, #0
}
 8017e54:	4618      	mov	r0, r3
 8017e56:	3798      	adds	r7, #152	; 0x98
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	bd80      	pop	{r7, pc}

08017e5c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8017e60:	f000 ff36 	bl	8018cd0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8017e64:	f001 fc16 	bl	8019694 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8017e68:	4b12      	ldr	r3, [pc, #72]	; (8017eb4 <_tx_initialize_high_level+0x58>)
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	601a      	str	r2, [r3, #0]
 8017e6e:	4b12      	ldr	r3, [pc, #72]	; (8017eb8 <_tx_initialize_high_level+0x5c>)
 8017e70:	2200      	movs	r2, #0
 8017e72:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8017e74:	4b11      	ldr	r3, [pc, #68]	; (8017ebc <_tx_initialize_high_level+0x60>)
 8017e76:	2200      	movs	r2, #0
 8017e78:	601a      	str	r2, [r3, #0]
 8017e7a:	4b11      	ldr	r3, [pc, #68]	; (8017ec0 <_tx_initialize_high_level+0x64>)
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8017e80:	4b10      	ldr	r3, [pc, #64]	; (8017ec4 <_tx_initialize_high_level+0x68>)
 8017e82:	2200      	movs	r2, #0
 8017e84:	601a      	str	r2, [r3, #0]
 8017e86:	4b10      	ldr	r3, [pc, #64]	; (8017ec8 <_tx_initialize_high_level+0x6c>)
 8017e88:	2200      	movs	r2, #0
 8017e8a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8017e8c:	4b0f      	ldr	r3, [pc, #60]	; (8017ecc <_tx_initialize_high_level+0x70>)
 8017e8e:	2200      	movs	r2, #0
 8017e90:	601a      	str	r2, [r3, #0]
 8017e92:	4b0f      	ldr	r3, [pc, #60]	; (8017ed0 <_tx_initialize_high_level+0x74>)
 8017e94:	2200      	movs	r2, #0
 8017e96:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8017e98:	4b0e      	ldr	r3, [pc, #56]	; (8017ed4 <_tx_initialize_high_level+0x78>)
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	601a      	str	r2, [r3, #0]
 8017e9e:	4b0e      	ldr	r3, [pc, #56]	; (8017ed8 <_tx_initialize_high_level+0x7c>)
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8017ea4:	4b0d      	ldr	r3, [pc, #52]	; (8017edc <_tx_initialize_high_level+0x80>)
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	601a      	str	r2, [r3, #0]
 8017eaa:	4b0d      	ldr	r3, [pc, #52]	; (8017ee0 <_tx_initialize_high_level+0x84>)
 8017eac:	2200      	movs	r2, #0
 8017eae:	601a      	str	r2, [r3, #0]
#endif
}
 8017eb0:	bf00      	nop
 8017eb2:	bd80      	pop	{r7, pc}
 8017eb4:	2400083c 	.word	0x2400083c
 8017eb8:	24000840 	.word	0x24000840
 8017ebc:	24000844 	.word	0x24000844
 8017ec0:	24000848 	.word	0x24000848
 8017ec4:	2400084c 	.word	0x2400084c
 8017ec8:	24000850 	.word	0x24000850
 8017ecc:	2400085c 	.word	0x2400085c
 8017ed0:	24000860 	.word	0x24000860
 8017ed4:	24000864 	.word	0x24000864
 8017ed8:	24000868 	.word	0x24000868
 8017edc:	24000854 	.word	0x24000854
 8017ee0:	24000858 	.word	0x24000858

08017ee4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8017ee8:	4b10      	ldr	r3, [pc, #64]	; (8017f2c <_tx_initialize_kernel_enter+0x48>)
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8017ef0:	d00c      	beq.n	8017f0c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8017ef2:	4b0e      	ldr	r3, [pc, #56]	; (8017f2c <_tx_initialize_kernel_enter+0x48>)
 8017ef4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8017ef8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8017efa:	f7e8 f9f1 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8017efe:	f7ff ffad 	bl	8017e5c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8017f02:	4b0b      	ldr	r3, [pc, #44]	; (8017f30 <_tx_initialize_kernel_enter+0x4c>)
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	3301      	adds	r3, #1
 8017f08:	4a09      	ldr	r2, [pc, #36]	; (8017f30 <_tx_initialize_kernel_enter+0x4c>)
 8017f0a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8017f0c:	4b07      	ldr	r3, [pc, #28]	; (8017f2c <_tx_initialize_kernel_enter+0x48>)
 8017f0e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8017f12:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8017f14:	4b07      	ldr	r3, [pc, #28]	; (8017f34 <_tx_initialize_kernel_enter+0x50>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7e8 fcd3 	bl	80008c4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8017f1e:	4b03      	ldr	r3, [pc, #12]	; (8017f2c <_tx_initialize_kernel_enter+0x48>)
 8017f20:	2200      	movs	r2, #0
 8017f22:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8017f24:	f7e8 fa1c 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8017f28:	bf00      	nop
 8017f2a:	bd80      	pop	{r7, pc}
 8017f2c:	2400008c 	.word	0x2400008c
 8017f30:	2400090c 	.word	0x2400090c
 8017f34:	2400086c 	.word	0x2400086c

08017f38 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b08e      	sub	sp, #56	; 0x38
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
 8017f40:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017f42:	f3ef 8310 	mrs	r3, PRIMASK
 8017f46:	623b      	str	r3, [r7, #32]
    return(posture);
 8017f48:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8017f4a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017f4c:	b672      	cpsid	i
    return(int_posture);
 8017f4e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8017f50:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f56:	4a33      	ldr	r2, [pc, #204]	; (8018024 <_tx_mutex_cleanup+0xec>)
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d158      	bne.n	801800e <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017f62:	683a      	ldr	r2, [r7, #0]
 8017f64:	429a      	cmp	r2, r3
 8017f66:	d152      	bne.n	801800e <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f6c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8017f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d04c      	beq.n	801800e <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8017f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	4a2b      	ldr	r2, [pc, #172]	; (8018028 <_tx_mutex_cleanup+0xf0>)
 8017f7a:	4293      	cmp	r3, r2
 8017f7c:	d147      	bne.n	801800e <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8017f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f80:	69db      	ldr	r3, [r3, #28]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d043      	beq.n	801800e <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	2200      	movs	r2, #0
 8017f8a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8017f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8e:	69db      	ldr	r3, [r3, #28]
 8017f90:	1e5a      	subs	r2, r3, #1
 8017f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f94:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8017f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f98:	69db      	ldr	r3, [r3, #28]
 8017f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8017f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d103      	bne.n	8017faa <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8017fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	619a      	str	r2, [r3, #24]
 8017fa8:	e013      	b.n	8017fd2 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fae:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017fb4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8017fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fba:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8017fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fc0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8017fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc4:	699b      	ldr	r3, [r3, #24]
 8017fc6:	687a      	ldr	r2, [r7, #4]
 8017fc8:	429a      	cmp	r2, r3
 8017fca:	d102      	bne.n	8017fd2 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8017fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fd0:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fd6:	2b0d      	cmp	r3, #13
 8017fd8:	d119      	bne.n	801800e <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	221d      	movs	r2, #29
 8017fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8017fe2:	4b12      	ldr	r3, [pc, #72]	; (801802c <_tx_mutex_cleanup+0xf4>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	4a10      	ldr	r2, [pc, #64]	; (801802c <_tx_mutex_cleanup+0xf4>)
 8017fea:	6013      	str	r3, [r2, #0]
 8017fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017ff0:	693b      	ldr	r3, [r7, #16]
 8017ff2:	f383 8810 	msr	PRIMASK, r3
}
 8017ff6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8017ff8:	6878      	ldr	r0, [r7, #4]
 8017ffa:	f001 f81f 	bl	801903c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8018002:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018004:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018006:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018008:	b672      	cpsid	i
    return(int_posture);
 801800a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801800c:	637b      	str	r3, [r7, #52]	; 0x34
 801800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018010:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	f383 8810 	msr	PRIMASK, r3
}
 8018018:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801801a:	bf00      	nop
 801801c:	3738      	adds	r7, #56	; 0x38
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	08017f39 	.word	0x08017f39
 8018028:	4d555445 	.word	0x4d555445
 801802c:	2400090c 	.word	0x2400090c

08018030 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b08a      	sub	sp, #40	; 0x28
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018038:	f3ef 8310 	mrs	r3, PRIMASK
 801803c:	61fb      	str	r3, [r7, #28]
    return(posture);
 801803e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8018040:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018042:	b672      	cpsid	i
    return(int_posture);
 8018044:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8018046:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8018048:	4b1a      	ldr	r3, [pc, #104]	; (80180b4 <_tx_mutex_thread_release+0x84>)
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	3301      	adds	r3, #1
 801804e:	4a19      	ldr	r2, [pc, #100]	; (80180b4 <_tx_mutex_thread_release+0x84>)
 8018050:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018058:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 801805a:	6a3b      	ldr	r3, [r7, #32]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d017      	beq.n	8018090 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8018060:	6a3b      	ldr	r3, [r7, #32]
 8018062:	2201      	movs	r2, #1
 8018064:	609a      	str	r2, [r3, #8]
 8018066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018068:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	f383 8810 	msr	PRIMASK, r3
}
 8018070:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8018072:	6a38      	ldr	r0, [r7, #32]
 8018074:	f000 faf2 	bl	801865c <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018078:	f3ef 8310 	mrs	r3, PRIMASK
 801807c:	617b      	str	r3, [r7, #20]
    return(posture);
 801807e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8018080:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018082:	b672      	cpsid	i
    return(int_posture);
 8018084:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8018086:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801808e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8018090:	6a3b      	ldr	r3, [r7, #32]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d1dd      	bne.n	8018052 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8018096:	4b07      	ldr	r3, [pc, #28]	; (80180b4 <_tx_mutex_thread_release+0x84>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	3b01      	subs	r3, #1
 801809c:	4a05      	ldr	r2, [pc, #20]	; (80180b4 <_tx_mutex_thread_release+0x84>)
 801809e:	6013      	str	r3, [r2, #0]
 80180a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	f383 8810 	msr	PRIMASK, r3
}
 80180aa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 80180ac:	bf00      	nop
 80180ae:	3728      	adds	r7, #40	; 0x28
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	2400090c 	.word	0x2400090c

080180b8 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b08a      	sub	sp, #40	; 0x28
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60f8      	str	r0, [r7, #12]
 80180c0:	60b9      	str	r1, [r7, #8]
 80180c2:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80180c4:	2234      	movs	r2, #52	; 0x34
 80180c6:	2100      	movs	r1, #0
 80180c8:	68f8      	ldr	r0, [r7, #12]
 80180ca:	f002 f92b 	bl	801a324 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	68ba      	ldr	r2, [r7, #8]
 80180d2:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80180da:	f3ef 8310 	mrs	r3, PRIMASK
 80180de:	61bb      	str	r3, [r7, #24]
    return(posture);
 80180e0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80180e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80180e4:	b672      	cpsid	i
    return(int_posture);
 80180e6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80180e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	4a1a      	ldr	r2, [pc, #104]	; (8018158 <_tx_mutex_create+0xa0>)
 80180ee:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80180f0:	4b1a      	ldr	r3, [pc, #104]	; (801815c <_tx_mutex_create+0xa4>)
 80180f2:	4a1b      	ldr	r2, [pc, #108]	; (8018160 <_tx_mutex_create+0xa8>)
 80180f4:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80180f6:	4b1b      	ldr	r3, [pc, #108]	; (8018164 <_tx_mutex_create+0xac>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d109      	bne.n	8018112 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80180fe:	4a1a      	ldr	r2, [pc, #104]	; (8018168 <_tx_mutex_create+0xb0>)
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	68fa      	ldr	r2, [r7, #12]
 8018108:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	68fa      	ldr	r2, [r7, #12]
 801810e:	625a      	str	r2, [r3, #36]	; 0x24
 8018110:	e011      	b.n	8018136 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8018112:	4b15      	ldr	r3, [pc, #84]	; (8018168 <_tx_mutex_create+0xb0>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8018118:	6a3b      	ldr	r3, [r7, #32]
 801811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801811c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 801811e:	6a3b      	ldr	r3, [r7, #32]
 8018120:	68fa      	ldr	r2, [r7, #12]
 8018122:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8018124:	69fb      	ldr	r3, [r7, #28]
 8018126:	68fa      	ldr	r2, [r7, #12]
 8018128:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	69fa      	ldr	r2, [r7, #28]
 801812e:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	6a3a      	ldr	r2, [r7, #32]
 8018134:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8018136:	4b0b      	ldr	r3, [pc, #44]	; (8018164 <_tx_mutex_create+0xac>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	3301      	adds	r3, #1
 801813c:	4a09      	ldr	r2, [pc, #36]	; (8018164 <_tx_mutex_create+0xac>)
 801813e:	6013      	str	r3, [r2, #0]
 8018140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018142:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	f383 8810 	msr	PRIMASK, r3
}
 801814a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801814c:	2300      	movs	r3, #0
}
 801814e:	4618      	mov	r0, r3
 8018150:	3728      	adds	r7, #40	; 0x28
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
 8018156:	bf00      	nop
 8018158:	4d555445 	.word	0x4d555445
 801815c:	24000910 	.word	0x24000910
 8018160:	08018031 	.word	0x08018031
 8018164:	24000858 	.word	0x24000858
 8018168:	24000854 	.word	0x24000854

0801816c <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b092      	sub	sp, #72	; 0x48
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
 8018174:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018176:	f3ef 8310 	mrs	r3, PRIMASK
 801817a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801817e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018180:	b672      	cpsid	i
    return(int_posture);
 8018182:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8018184:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8018186:	4b7a      	ldr	r3, [pc, #488]	; (8018370 <_tx_mutex_get+0x204>)
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	689b      	ldr	r3, [r3, #8]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d144      	bne.n	801821e <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2201      	movs	r2, #1
 8018198:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801819e:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80181a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d032      	beq.n	801820c <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	691b      	ldr	r3, [r3, #16]
 80181aa:	2b01      	cmp	r3, #1
 80181ac:	d106      	bne.n	80181bc <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80181ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	2220      	movs	r2, #32
 80181ba:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80181bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80181c2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 80181c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00f      	beq.n	80181ea <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 80181ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181ce:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80181d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80181d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d8:	687a      	ldr	r2, [r7, #4]
 80181da:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80181e0:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80181e8:	e009      	b.n	80181fe <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80181ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181ec:	687a      	ldr	r2, [r7, #4]
 80181ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	687a      	ldr	r2, [r7, #4]
 80181f6:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	687a      	ldr	r2, [r7, #4]
 80181fc:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80181fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018200:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018204:	1c5a      	adds	r2, r3, #1
 8018206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018208:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 801820c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801820e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018210:	69fb      	ldr	r3, [r7, #28]
 8018212:	f383 8810 	msr	PRIMASK, r3
}
 8018216:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8018218:	2300      	movs	r3, #0
 801821a:	647b      	str	r3, [r7, #68]	; 0x44
 801821c:	e0a2      	b.n	8018364 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	68db      	ldr	r3, [r3, #12]
 8018222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018224:	429a      	cmp	r2, r3
 8018226:	d10d      	bne.n	8018244 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	689b      	ldr	r3, [r3, #8]
 801822c:	1c5a      	adds	r2, r3, #1
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	609a      	str	r2, [r3, #8]
 8018232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018234:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018236:	69bb      	ldr	r3, [r7, #24]
 8018238:	f383 8810 	msr	PRIMASK, r3
}
 801823c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801823e:	2300      	movs	r3, #0
 8018240:	647b      	str	r3, [r7, #68]	; 0x44
 8018242:	e08f      	b.n	8018364 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8018244:	683b      	ldr	r3, [r7, #0]
 8018246:	2b00      	cmp	r3, #0
 8018248:	f000 8084 	beq.w	8018354 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801824c:	4b49      	ldr	r3, [pc, #292]	; (8018374 <_tx_mutex_get+0x208>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d008      	beq.n	8018266 <_tx_mutex_get+0xfa>
 8018254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018256:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018258:	697b      	ldr	r3, [r7, #20]
 801825a:	f383 8810 	msr	PRIMASK, r3
}
 801825e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8018260:	231d      	movs	r3, #29
 8018262:	647b      	str	r3, [r7, #68]	; 0x44
 8018264:	e07e      	b.n	8018364 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	68db      	ldr	r3, [r3, #12]
 801826a:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 801826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801826e:	4a42      	ldr	r2, [pc, #264]	; (8018378 <_tx_mutex_get+0x20c>)
 8018270:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8018272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018274:	687a      	ldr	r2, [r7, #4]
 8018276:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8018278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801827a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801827e:	1c5a      	adds	r2, r3, #1
 8018280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018282:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	69db      	ldr	r3, [r3, #28]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d109      	bne.n	80182a2 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018292:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8018294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018298:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801829a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801829c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801829e:	675a      	str	r2, [r3, #116]	; 0x74
 80182a0:	e011      	b.n	80182c6 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	699b      	ldr	r3, [r3, #24]
 80182a6:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80182a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80182ac:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80182ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80182b2:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80182b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182b8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80182ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80182be:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80182c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80182c4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	69db      	ldr	r3, [r3, #28]
 80182ca:	1c5a      	adds	r2, r3, #1
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80182d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182d2:	220d      	movs	r2, #13
 80182d4:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80182d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182d8:	2201      	movs	r2, #1
 80182da:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80182dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182de:	683a      	ldr	r2, [r7, #0]
 80182e0:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80182e2:	4b24      	ldr	r3, [pc, #144]	; (8018374 <_tx_mutex_get+0x208>)
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	3301      	adds	r3, #1
 80182e8:	4a22      	ldr	r2, [pc, #136]	; (8018374 <_tx_mutex_get+0x208>)
 80182ea:	6013      	str	r3, [r2, #0]
 80182ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80182f0:	693b      	ldr	r3, [r7, #16]
 80182f2:	f383 8810 	msr	PRIMASK, r3
}
 80182f6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	691b      	ldr	r3, [r3, #16]
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	d121      	bne.n	8018344 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018308:	429a      	cmp	r2, r3
 801830a:	d903      	bls.n	8018314 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 801830c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8018314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801831a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801831e:	429a      	cmp	r2, r3
 8018320:	d204      	bcs.n	801832c <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8018322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018328:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 801832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801832e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018334:	429a      	cmp	r2, r3
 8018336:	d905      	bls.n	8018344 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8018338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801833c:	4619      	mov	r1, r3
 801833e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018340:	f000 f8ce 	bl	80184e0 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8018344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018346:	f000 ff79 	bl	801923c <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801834a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801834c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018350:	647b      	str	r3, [r7, #68]	; 0x44
 8018352:	e007      	b.n	8018364 <_tx_mutex_get+0x1f8>
 8018354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018356:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	f383 8810 	msr	PRIMASK, r3
}
 801835e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8018360:	231d      	movs	r3, #29
 8018362:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8018364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8018366:	4618      	mov	r0, r3
 8018368:	3748      	adds	r7, #72	; 0x48
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}
 801836e:	bf00      	nop
 8018370:	24000874 	.word	0x24000874
 8018374:	2400090c 	.word	0x2400090c
 8018378:	08017f39 	.word	0x08017f39

0801837c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b092      	sub	sp, #72	; 0x48
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018384:	f3ef 8310 	mrs	r3, PRIMASK
 8018388:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801838c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801838e:	b672      	cpsid	i
    return(int_posture);
 8018390:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8018392:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	69db      	ldr	r3, [r3, #28]
 8018398:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 801839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801839c:	2b01      	cmp	r3, #1
 801839e:	d805      	bhi.n	80183ac <_tx_mutex_prioritize+0x30>
 80183a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80183a4:	69fb      	ldr	r3, [r7, #28]
 80183a6:	f383 8810 	msr	PRIMASK, r3
}
 80183aa:	e092      	b.n	80184d2 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 80183ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183ae:	2b02      	cmp	r3, #2
 80183b0:	d114      	bne.n	80183dc <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	699b      	ldr	r3, [r3, #24]
 80183b6:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 80183b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183bc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 80183be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183c6:	429a      	cmp	r2, r3
 80183c8:	d202      	bcs.n	80183d0 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183ce:	619a      	str	r2, [r3, #24]
 80183d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80183d4:	69bb      	ldr	r3, [r7, #24]
 80183d6:	f383 8810 	msr	PRIMASK, r3
}
 80183da:	e07a      	b.n	80184d2 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	699b      	ldr	r3, [r3, #24]
 80183e0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80183e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183e4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80183e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80183e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183ea:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80183ec:	4b3b      	ldr	r3, [pc, #236]	; (80184dc <_tx_mutex_prioritize+0x160>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	3301      	adds	r3, #1
 80183f2:	4a3a      	ldr	r2, [pc, #232]	; (80184dc <_tx_mutex_prioritize+0x160>)
 80183f4:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80183f6:	2300      	movs	r3, #0
 80183f8:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80183fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018402:	429a      	cmp	r2, r3
 8018404:	d201      	bcs.n	801840a <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8018406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018408:	63fb      	str	r3, [r7, #60]	; 0x3c
 801840a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801840c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	f383 8810 	msr	PRIMASK, r3
}
 8018414:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018416:	f3ef 8310 	mrs	r3, PRIMASK
 801841a:	617b      	str	r3, [r7, #20]
    return(posture);
 801841c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801841e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018420:	b672      	cpsid	i
    return(int_posture);
 8018422:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8018424:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	699b      	ldr	r3, [r3, #24]
 801842a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801842c:	429a      	cmp	r2, r3
 801842e:	d002      	beq.n	8018436 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8018430:	2301      	movs	r3, #1
 8018432:	633b      	str	r3, [r7, #48]	; 0x30
 8018434:	e006      	b.n	8018444 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	69db      	ldr	r3, [r3, #28]
 801843a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801843c:	429a      	cmp	r2, r3
 801843e:	d001      	beq.n	8018444 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8018440:	2301      	movs	r3, #1
 8018442:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8018444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018446:	2b00      	cmp	r3, #0
 8018448:	d103      	bne.n	8018452 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801844a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801844e:	643b      	str	r3, [r7, #64]	; 0x40
 8018450:	e00c      	b.n	801846c <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	699b      	ldr	r3, [r3, #24]
 8018456:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	69db      	ldr	r3, [r3, #28]
 801845c:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 801845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018460:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8018462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018466:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8018468:	2300      	movs	r3, #0
 801846a:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 801846c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018470:	429a      	cmp	r2, r3
 8018472:	d1c2      	bne.n	80183fa <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8018474:	4b19      	ldr	r3, [pc, #100]	; (80184dc <_tx_mutex_prioritize+0x160>)
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	3b01      	subs	r3, #1
 801847a:	4a18      	ldr	r2, [pc, #96]	; (80184dc <_tx_mutex_prioritize+0x160>)
 801847c:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 801847e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018482:	429a      	cmp	r2, r3
 8018484:	d01d      	beq.n	80184c2 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8018486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801848a:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 801848c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801848e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018490:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8018492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018496:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8018498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801849c:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 801849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184a2:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80184a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80184a8:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 80184aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184ae:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80184b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80184b4:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80184b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80184ba:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80184c0:	619a      	str	r2, [r3, #24]
 80184c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184c4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80184c6:	68bb      	ldr	r3, [r7, #8]
 80184c8:	f383 8810 	msr	PRIMASK, r3
}
 80184cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80184ce:	f000 fd7b 	bl	8018fc8 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80184d2:	2300      	movs	r3, #0
#endif
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	3748      	adds	r7, #72	; 0x48
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}
 80184dc:	2400090c 	.word	0x2400090c

080184e0 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b090      	sub	sp, #64	; 0x40
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
 80184e8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80184ea:	f3ef 8310 	mrs	r3, PRIMASK
 80184ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80184f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80184f2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80184f4:	b672      	cpsid	i
    return(int_posture);
 80184f6:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80184f8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d017      	beq.n	8018532 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	683a      	ldr	r2, [r7, #0]
 8018506:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801850e:	683a      	ldr	r2, [r7, #0]
 8018510:	429a      	cmp	r2, r3
 8018512:	d905      	bls.n	8018520 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	63da      	str	r2, [r3, #60]	; 0x3c
 801851e:	e002      	b.n	8018526 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	683a      	ldr	r2, [r7, #0]
 8018524:	63da      	str	r2, [r3, #60]	; 0x3c
 8018526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018528:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801852c:	f383 8810 	msr	PRIMASK, r3
}
 8018530:	e089      	b.n	8018646 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8018532:	4b47      	ldr	r3, [pc, #284]	; (8018650 <_tx_mutex_priority_change+0x170>)
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801853c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 801853e:	4b45      	ldr	r3, [pc, #276]	; (8018654 <_tx_mutex_priority_change+0x174>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	3302      	adds	r3, #2
 8018544:	4a43      	ldr	r2, [pc, #268]	; (8018654 <_tx_mutex_priority_change+0x174>)
 8018546:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	220e      	movs	r2, #14
 801854c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	2201      	movs	r2, #1
 8018552:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2200      	movs	r2, #0
 8018558:	64da      	str	r2, [r3, #76]	; 0x4c
 801855a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801855c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801855e:	69bb      	ldr	r3, [r7, #24]
 8018560:	f383 8810 	msr	PRIMASK, r3
}
 8018564:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8018566:	6878      	ldr	r0, [r7, #4]
 8018568:	f000 fe68 	bl	801923c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801856c:	f3ef 8310 	mrs	r3, PRIMASK
 8018570:	623b      	str	r3, [r7, #32]
    return(posture);
 8018572:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8018574:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018576:	b672      	cpsid	i
    return(int_posture);
 8018578:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 801857a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	683a      	ldr	r2, [r7, #0]
 8018580:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018588:	683a      	ldr	r2, [r7, #0]
 801858a:	429a      	cmp	r2, r3
 801858c:	d905      	bls.n	801859a <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	63da      	str	r2, [r3, #60]	; 0x3c
 8018598:	e002      	b.n	80185a0 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	683a      	ldr	r2, [r7, #0]
 801859e:	63da      	str	r2, [r3, #60]	; 0x3c
 80185a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	f383 8810 	msr	PRIMASK, r3
}
 80185aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 80185ac:	6878      	ldr	r0, [r7, #4]
 80185ae:	f000 fd45 	bl	801903c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80185b2:	f3ef 8310 	mrs	r3, PRIMASK
 80185b6:	617b      	str	r3, [r7, #20]
    return(posture);
 80185b8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80185ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80185bc:	b672      	cpsid	i
    return(int_posture);
 80185be:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 80185c0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 80185c2:	4b23      	ldr	r3, [pc, #140]	; (8018650 <_tx_mutex_priority_change+0x170>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 80185c8:	687a      	ldr	r2, [r7, #4]
 80185ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185cc:	429a      	cmp	r2, r3
 80185ce:	d034      	beq.n	801863a <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d130      	bne.n	801863a <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d811      	bhi.n	8018608 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 80185e4:	687a      	ldr	r2, [r7, #4]
 80185e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185e8:	429a      	cmp	r2, r3
 80185ea:	d126      	bne.n	801863a <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 80185ec:	4a18      	ldr	r2, [pc, #96]	; (8018650 <_tx_mutex_priority_change+0x170>)
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 80185f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d21f      	bcs.n	801863a <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185fe:	4916      	ldr	r1, [pc, #88]	; (8018658 <_tx_mutex_priority_change+0x178>)
 8018600:	687a      	ldr	r2, [r7, #4]
 8018602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018606:	e018      	b.n	801863a <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018610:	429a      	cmp	r2, r3
 8018612:	d212      	bcs.n	801863a <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801861c:	429a      	cmp	r2, r3
 801861e:	d80c      	bhi.n	801863a <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8018620:	4a0b      	ldr	r2, [pc, #44]	; (8018650 <_tx_mutex_priority_change+0x170>)
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8018626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	429a      	cmp	r2, r3
 801862c:	d205      	bcs.n	801863a <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018632:	4909      	ldr	r1, [pc, #36]	; (8018658 <_tx_mutex_priority_change+0x178>)
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801863a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801863c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801863e:	68bb      	ldr	r3, [r7, #8]
 8018640:	f383 8810 	msr	PRIMASK, r3
}
 8018644:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8018646:	bf00      	nop
 8018648:	3740      	adds	r7, #64	; 0x40
 801864a:	46bd      	mov	sp, r7
 801864c:	bd80      	pop	{r7, pc}
 801864e:	bf00      	nop
 8018650:	24000878 	.word	0x24000878
 8018654:	2400090c 	.word	0x2400090c
 8018658:	2400088c 	.word	0x2400088c

0801865c <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b0a6      	sub	sp, #152	; 0x98
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8018664:	2320      	movs	r3, #32
 8018666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801866a:	f3ef 8310 	mrs	r3, PRIMASK
 801866e:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8018670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8018672:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8018674:	b672      	cpsid	i
    return(int_posture);
 8018676:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8018678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	689b      	ldr	r3, [r3, #8]
 8018680:	2b00      	cmp	r3, #0
 8018682:	f000 81ff 	beq.w	8018a84 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	68db      	ldr	r3, [r3, #12]
 801868a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801868c:	4ba3      	ldr	r3, [pc, #652]	; (801891c <_tx_mutex_put+0x2c0>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	68db      	ldr	r3, [r3, #12]
 8018696:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018698:	429a      	cmp	r2, r3
 801869a:	d00d      	beq.n	80186b8 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 801869c:	4ba0      	ldr	r3, [pc, #640]	; (8018920 <_tx_mutex_put+0x2c4>)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d109      	bne.n	80186b8 <_tx_mutex_put+0x5c>
 80186a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80186a8:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80186aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186ac:	f383 8810 	msr	PRIMASK, r3
}
 80186b0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 80186b2:	231e      	movs	r3, #30
 80186b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 80186b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80186bc:	2b20      	cmp	r3, #32
 80186be:	f040 81eb 	bne.w	8018a98 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	689b      	ldr	r3, [r3, #8]
 80186c6:	1e5a      	subs	r2, r3, #1
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	689b      	ldr	r3, [r3, #8]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d00a      	beq.n	80186ea <_tx_mutex_put+0x8e>
 80186d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80186d8:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80186da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186dc:	f383 8810 	msr	PRIMASK, r3
}
 80186e0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 80186e2:	2300      	movs	r3, #0
 80186e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80186e8:	e1d6      	b.n	8018a98 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80186ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d10a      	bne.n	8018706 <_tx_mutex_put+0xaa>
 80186f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80186f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80186f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186f8:	f383 8810 	msr	PRIMASK, r3
}
 80186fc:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 80186fe:	2300      	movs	r3, #0
 8018700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018704:	e1c8      	b.n	8018a98 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8018706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801870c:	1e5a      	subs	r2, r3, #1
 801870e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018710:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8018714:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018716:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801871a:	2b00      	cmp	r3, #0
 801871c:	d104      	bne.n	8018728 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 801871e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018720:	2200      	movs	r2, #0
 8018722:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8018726:	e019      	b.n	801875c <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801872c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018734:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8018736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801873a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801873c:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 801873e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018740:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018744:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8018746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018748:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801874c:	687a      	ldr	r2, [r7, #4]
 801874e:	429a      	cmp	r2, r3
 8018750:	d104      	bne.n	801875c <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8018752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018754:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018758:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	699b      	ldr	r3, [r3, #24]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d110      	bne.n	8018786 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	691b      	ldr	r3, [r3, #16]
 8018768:	2b00      	cmp	r3, #0
 801876a:	d10c      	bne.n	8018786 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	2200      	movs	r2, #0
 8018770:	60da      	str	r2, [r3, #12]
 8018772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018776:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801877a:	f383 8810 	msr	PRIMASK, r3
}
 801877e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8018780:	2300      	movs	r3, #0
 8018782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8018786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801878a:	2b20      	cmp	r3, #32
 801878c:	f040 8184 	bne.w	8018a98 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8018790:	2300      	movs	r3, #0
 8018792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8018796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801879c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	691b      	ldr	r3, [r3, #16]
 80187a4:	2b01      	cmp	r3, #1
 80187a6:	d155      	bne.n	8018854 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80187a8:	4b5d      	ldr	r3, [pc, #372]	; (8018920 <_tx_mutex_put+0x2c4>)
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	3301      	adds	r3, #1
 80187ae:	4a5c      	ldr	r2, [pc, #368]	; (8018920 <_tx_mutex_put+0x2c4>)
 80187b0:	6013      	str	r3, [r2, #0]
 80187b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80187b6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80187b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187ba:	f383 8810 	msr	PRIMASK, r3
}
 80187be:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 80187c0:	2320      	movs	r3, #32
 80187c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80187c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80187c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80187cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80187d0:	e01f      	b.n	8018812 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 80187d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80187d6:	691b      	ldr	r3, [r3, #16]
 80187d8:	2b01      	cmp	r3, #1
 80187da:	d10b      	bne.n	80187f4 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 80187dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80187e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80187e6:	429a      	cmp	r2, r3
 80187e8:	d904      	bls.n	80187f4 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 80187ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80187ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 80187f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80187f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 80187fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018804:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018808:	429a      	cmp	r2, r3
 801880a:	d102      	bne.n	8018812 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 801880c:	2300      	movs	r3, #0
 801880e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8018812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018816:	2b00      	cmp	r3, #0
 8018818:	d1db      	bne.n	80187d2 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801881a:	f3ef 8310 	mrs	r3, PRIMASK
 801881e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8018820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8018822:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8018824:	b672      	cpsid	i
    return(int_posture);
 8018826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8018828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 801882c:	4b3c      	ldr	r3, [pc, #240]	; (8018920 <_tx_mutex_put+0x2c4>)
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	3b01      	subs	r3, #1
 8018832:	4a3b      	ldr	r2, [pc, #236]	; (8018920 <_tx_mutex_put+0x2c4>)
 8018834:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8018836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018838:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801883c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8018840:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018848:	429a      	cmp	r2, r3
 801884a:	d203      	bcs.n	8018854 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 801884c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	69db      	ldr	r3, [r3, #28]
 8018858:	2b01      	cmp	r3, #1
 801885a:	d920      	bls.n	801889e <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	691b      	ldr	r3, [r3, #16]
 8018860:	2b01      	cmp	r3, #1
 8018862:	d11c      	bne.n	801889e <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8018864:	4b2e      	ldr	r3, [pc, #184]	; (8018920 <_tx_mutex_put+0x2c4>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	3301      	adds	r3, #1
 801886a:	4a2d      	ldr	r2, [pc, #180]	; (8018920 <_tx_mutex_put+0x2c4>)
 801886c:	6013      	str	r3, [r2, #0]
 801886e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018872:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018876:	f383 8810 	msr	PRIMASK, r3
}
 801887a:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	f7ff fd7d 	bl	801837c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018882:	f3ef 8310 	mrs	r3, PRIMASK
 8018886:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8018888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801888a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801888c:	b672      	cpsid	i
    return(int_posture);
 801888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8018890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8018894:	4b22      	ldr	r3, [pc, #136]	; (8018920 <_tx_mutex_put+0x2c4>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	3b01      	subs	r3, #1
 801889a:	4a21      	ldr	r2, [pc, #132]	; (8018920 <_tx_mutex_put+0x2c4>)
 801889c:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	699b      	ldr	r3, [r3, #24]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d13e      	bne.n	8018924 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80188a6:	4b1e      	ldr	r3, [pc, #120]	; (8018920 <_tx_mutex_put+0x2c4>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	3301      	adds	r3, #1
 80188ac:	4a1c      	ldr	r2, [pc, #112]	; (8018920 <_tx_mutex_put+0x2c4>)
 80188ae:	6013      	str	r3, [r2, #0]
 80188b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80188b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80188b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188b8:	f383 8810 	msr	PRIMASK, r3
}
 80188bc:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	2220      	movs	r2, #32
 80188c2:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	68db      	ldr	r3, [r3, #12]
 80188c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80188ce:	429a      	cmp	r2, r3
 80188d0:	d006      	beq.n	80188e0 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	68db      	ldr	r3, [r3, #12]
 80188d6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80188da:	4618      	mov	r0, r3
 80188dc:	f7ff fe00 	bl	80184e0 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80188e0:	f3ef 8310 	mrs	r3, PRIMASK
 80188e4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80188e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80188e8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80188ea:	b672      	cpsid	i
    return(int_posture);
 80188ec:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 80188ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 80188f2:	4b0b      	ldr	r3, [pc, #44]	; (8018920 <_tx_mutex_put+0x2c4>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	3b01      	subs	r3, #1
 80188f8:	4a09      	ldr	r2, [pc, #36]	; (8018920 <_tx_mutex_put+0x2c4>)
 80188fa:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2200      	movs	r2, #0
 8018900:	60da      	str	r2, [r3, #12]
 8018902:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018906:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801890a:	f383 8810 	msr	PRIMASK, r3
}
 801890e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8018910:	f000 fb5a 	bl	8018fc8 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8018914:	2300      	movs	r3, #0
 8018916:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801891a:	e0bd      	b.n	8018a98 <_tx_mutex_put+0x43c>
 801891c:	24000874 	.word	0x24000874
 8018920:	2400090c 	.word	0x2400090c
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	699b      	ldr	r3, [r3, #24]
 8018928:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	691b      	ldr	r3, [r3, #16]
 801892e:	2b01      	cmp	r3, #1
 8018930:	d10a      	bne.n	8018948 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	68db      	ldr	r3, [r3, #12]
 8018936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801893a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	2220      	movs	r2, #32
 8018946:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8018948:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801894a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801894e:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8018950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018952:	2b00      	cmp	r3, #0
 8018954:	d10a      	bne.n	801896c <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8018956:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018958:	687a      	ldr	r2, [r7, #4]
 801895a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	687a      	ldr	r2, [r7, #4]
 8018962:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	687a      	ldr	r2, [r7, #4]
 8018968:	631a      	str	r2, [r3, #48]	; 0x30
 801896a:	e016      	b.n	801899a <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 801896c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801896e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8018976:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801897c:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801897e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018982:	687a      	ldr	r2, [r7, #4]
 8018984:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8018986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018988:	687a      	ldr	r2, [r7, #4]
 801898a:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018990:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018998:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 801899a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801899c:	1c5a      	adds	r2, r3, #1
 801899e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80189a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	2201      	movs	r2, #1
 80189a8:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80189ae:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	69db      	ldr	r3, [r3, #28]
 80189b4:	1e5a      	subs	r2, r3, #1
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	69db      	ldr	r3, [r3, #28]
 80189be:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80189c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d103      	bne.n	80189ce <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	2200      	movs	r2, #0
 80189ca:	619a      	str	r2, [r3, #24]
 80189cc:	e00e      	b.n	80189ec <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80189ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80189d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189d2:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80189d8:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80189da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80189dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189de:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80189e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80189e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80189e4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80189e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80189e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80189ea:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80189ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80189ee:	2200      	movs	r2, #0
 80189f0:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80189f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80189f4:	2200      	movs	r2, #0
 80189f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80189fa:	4b2a      	ldr	r3, [pc, #168]	; (8018aa4 <_tx_mutex_put+0x448>)
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	3301      	adds	r3, #1
 8018a00:	4a28      	ldr	r2, [pc, #160]	; (8018aa4 <_tx_mutex_put+0x448>)
 8018a02:	6013      	str	r3, [r2, #0]
 8018a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018a08:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018a0a:	69fb      	ldr	r3, [r7, #28]
 8018a0c:	f383 8810 	msr	PRIMASK, r3
}
 8018a10:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	691b      	ldr	r3, [r3, #16]
 8018a16:	2b01      	cmp	r3, #1
 8018a18:	d12d      	bne.n	8018a76 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	69db      	ldr	r3, [r3, #28]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d01c      	beq.n	8018a5c <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8018a22:	6878      	ldr	r0, [r7, #4]
 8018a24:	f7ff fcaa 	bl	801837c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018a28:	f3ef 8310 	mrs	r3, PRIMASK
 8018a2c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018a2e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018a30:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018a32:	b672      	cpsid	i
    return(int_posture);
 8018a34:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8018a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	699b      	ldr	r3, [r3, #24]
 8018a3e:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8018a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d003      	beq.n	8018a4e <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8018a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	629a      	str	r2, [r3, #40]	; 0x28
 8018a4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018a52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018a54:	693b      	ldr	r3, [r7, #16]
 8018a56:	f383 8810 	msr	PRIMASK, r3
}
 8018a5a:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8018a5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018a66:	429a      	cmp	r2, r3
 8018a68:	d005      	beq.n	8018a76 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8018a6a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8018a6e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8018a72:	f7ff fd35 	bl	80184e0 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8018a76:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8018a78:	f000 fae0 	bl	801903c <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018a82:	e009      	b.n	8018a98 <_tx_mutex_put+0x43c>
 8018a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018a88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	f383 8810 	msr	PRIMASK, r3
}
 8018a90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8018a92:	231e      	movs	r3, #30
 8018a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8018a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	3798      	adds	r7, #152	; 0x98
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}
 8018aa4:	2400090c 	.word	0x2400090c

08018aa8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b092      	sub	sp, #72	; 0x48
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	60f8      	str	r0, [r7, #12]
 8018ab0:	60b9      	str	r1, [r7, #8]
 8018ab2:	607a      	str	r2, [r7, #4]
 8018ab4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8018aba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018abc:	21ef      	movs	r1, #239	; 0xef
 8018abe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8018ac0:	f001 fc30 	bl	801a324 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8018ac4:	22b0      	movs	r2, #176	; 0xb0
 8018ac6:	2100      	movs	r1, #0
 8018ac8:	68f8      	ldr	r0, [r7, #12]
 8018aca:	f001 fc2b 	bl	801a324 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	68ba      	ldr	r2, [r7, #8]
 8018ad2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	687a      	ldr	r2, [r7, #4]
 8018ad8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	683a      	ldr	r2, [r7, #0]
 8018ade:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018ae4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018aea:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018af0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018af6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018afe:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018b04:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	2220      	movs	r2, #32
 8018b0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8018b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b10:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8018b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018b14:	3b01      	subs	r3, #1
 8018b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018b18:	4413      	add	r3, r2
 8018b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018b20:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8018b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d007      	beq.n	8018b3a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	2200      	movs	r2, #0
 8018b2e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	2200      	movs	r2, #0
 8018b34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8018b38:	e006      	b.n	8018b48 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018b3e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018b44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	2203      	movs	r2, #3
 8018b4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	4a48      	ldr	r2, [pc, #288]	; (8018c74 <_tx_thread_create+0x1cc>)
 8018b52:	655a      	str	r2, [r3, #84]	; 0x54
 8018b54:	68fa      	ldr	r2, [r7, #12]
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8018b5a:	4947      	ldr	r1, [pc, #284]	; (8018c78 <_tx_thread_create+0x1d0>)
 8018b5c:	68f8      	ldr	r0, [r7, #12]
 8018b5e:	f7e7 fc5f 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018b62:	f3ef 8310 	mrs	r3, PRIMASK
 8018b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8018b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8018b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8018b6c:	b672      	cpsid	i
    return(int_posture);
 8018b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8018b70:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	4a41      	ldr	r2, [pc, #260]	; (8018c7c <_tx_thread_create+0x1d4>)
 8018b76:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8018b78:	4b41      	ldr	r3, [pc, #260]	; (8018c80 <_tx_thread_create+0x1d8>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d10b      	bne.n	8018b98 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8018b80:	4a40      	ldr	r2, [pc, #256]	; (8018c84 <_tx_thread_create+0x1dc>)
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	68fa      	ldr	r2, [r7, #12]
 8018b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	68fa      	ldr	r2, [r7, #12]
 8018b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8018b96:	e016      	b.n	8018bc6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8018b98:	4b3a      	ldr	r3, [pc, #232]	; (8018c84 <_tx_thread_create+0x1dc>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8018b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018ba4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8018ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ba8:	68fa      	ldr	r2, [r7, #12]
 8018baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8018bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bb0:	68fa      	ldr	r2, [r7, #12]
 8018bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8018bc6:	4b2e      	ldr	r3, [pc, #184]	; (8018c80 <_tx_thread_create+0x1d8>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	3301      	adds	r3, #1
 8018bcc:	4a2c      	ldr	r2, [pc, #176]	; (8018c80 <_tx_thread_create+0x1d8>)
 8018bce:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8018bd0:	4b2d      	ldr	r3, [pc, #180]	; (8018c88 <_tx_thread_create+0x1e0>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	3301      	adds	r3, #1
 8018bd6:	4a2c      	ldr	r2, [pc, #176]	; (8018c88 <_tx_thread_create+0x1e0>)
 8018bd8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8018bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018bdc:	2b01      	cmp	r3, #1
 8018bde:	d129      	bne.n	8018c34 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018be0:	f3ef 8305 	mrs	r3, IPSR
 8018be4:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8018be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8018be8:	4b28      	ldr	r3, [pc, #160]	; (8018c8c <_tx_thread_create+0x1e4>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	4313      	orrs	r3, r2
 8018bee:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8018bf2:	d30d      	bcc.n	8018c10 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8018bf4:	4b26      	ldr	r3, [pc, #152]	; (8018c90 <_tx_thread_create+0x1e8>)
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8018bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d009      	beq.n	8018c14 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8018c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c04:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8018c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8018c0e:	e001      	b.n	8018c14 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8018c10:	2300      	movs	r3, #0
 8018c12:	647b      	str	r3, [r7, #68]	; 0x44
 8018c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c16:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018c18:	6a3b      	ldr	r3, [r7, #32]
 8018c1a:	f383 8810 	msr	PRIMASK, r3
}
 8018c1e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8018c20:	68f8      	ldr	r0, [r7, #12]
 8018c22:	f000 fa0b 	bl	801903c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8018c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d01e      	beq.n	8018c6a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8018c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018c30:	63da      	str	r2, [r3, #60]	; 0x3c
 8018c32:	e01a      	b.n	8018c6a <_tx_thread_create+0x1c2>
 8018c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c36:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018c38:	693b      	ldr	r3, [r7, #16]
 8018c3a:	f383 8810 	msr	PRIMASK, r3
}
 8018c3e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018c40:	f3ef 8310 	mrs	r3, PRIMASK
 8018c44:	61bb      	str	r3, [r7, #24]
    return(posture);
 8018c46:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8018c48:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018c4a:	b672      	cpsid	i
    return(int_posture);
 8018c4c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8018c4e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8018c50:	4b0d      	ldr	r3, [pc, #52]	; (8018c88 <_tx_thread_create+0x1e0>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	3b01      	subs	r3, #1
 8018c56:	4a0c      	ldr	r2, [pc, #48]	; (8018c88 <_tx_thread_create+0x1e0>)
 8018c58:	6013      	str	r3, [r2, #0]
 8018c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c5c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018c5e:	69fb      	ldr	r3, [r7, #28]
 8018c60:	f383 8810 	msr	PRIMASK, r3
}
 8018c64:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8018c66:	f000 f9af 	bl	8018fc8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8018c6a:	2300      	movs	r3, #0
}
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	3748      	adds	r7, #72	; 0x48
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}
 8018c74:	08019511 	.word	0x08019511
 8018c78:	08018e31 	.word	0x08018e31
 8018c7c:	54485244 	.word	0x54485244
 8018c80:	24000880 	.word	0x24000880
 8018c84:	2400087c 	.word	0x2400087c
 8018c88:	2400090c 	.word	0x2400090c
 8018c8c:	2400008c 	.word	0x2400008c
 8018c90:	24000878 	.word	0x24000878

08018c94 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8018c94:	b480      	push	{r7}
 8018c96:	b087      	sub	sp, #28
 8018c98:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8018c9e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8018ca0:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8018ca2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018ca4:	b672      	cpsid	i
    return(int_posture);
 8018ca6:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8018ca8:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8018caa:	4b08      	ldr	r3, [pc, #32]	; (8018ccc <_tx_thread_identify+0x38>)
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	613b      	str	r3, [r7, #16]
 8018cb0:	697b      	ldr	r3, [r7, #20]
 8018cb2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	f383 8810 	msr	PRIMASK, r3
}
 8018cba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8018cbc:	693b      	ldr	r3, [r7, #16]
}
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	371c      	adds	r7, #28
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc8:	4770      	bx	lr
 8018cca:	bf00      	nop
 8018ccc:	24000874 	.word	0x24000874

08018cd0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8018cd4:	4b12      	ldr	r3, [pc, #72]	; (8018d20 <_tx_thread_initialize+0x50>)
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8018cda:	4b12      	ldr	r3, [pc, #72]	; (8018d24 <_tx_thread_initialize+0x54>)
 8018cdc:	2200      	movs	r2, #0
 8018cde:	601a      	str	r2, [r3, #0]
 8018ce0:	4b11      	ldr	r3, [pc, #68]	; (8018d28 <_tx_thread_initialize+0x58>)
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8018ce6:	4b11      	ldr	r3, [pc, #68]	; (8018d2c <_tx_thread_initialize+0x5c>)
 8018ce8:	2220      	movs	r2, #32
 8018cea:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8018cec:	2280      	movs	r2, #128	; 0x80
 8018cee:	2100      	movs	r1, #0
 8018cf0:	480f      	ldr	r0, [pc, #60]	; (8018d30 <_tx_thread_initialize+0x60>)
 8018cf2:	f001 fb17 	bl	801a324 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8018cf6:	4b0f      	ldr	r3, [pc, #60]	; (8018d34 <_tx_thread_initialize+0x64>)
 8018cf8:	2200      	movs	r2, #0
 8018cfa:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8018cfc:	4b0e      	ldr	r3, [pc, #56]	; (8018d38 <_tx_thread_initialize+0x68>)
 8018cfe:	2200      	movs	r2, #0
 8018d00:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8018d02:	4b0e      	ldr	r3, [pc, #56]	; (8018d3c <_tx_thread_initialize+0x6c>)
 8018d04:	2200      	movs	r2, #0
 8018d06:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8018d08:	4b0d      	ldr	r3, [pc, #52]	; (8018d40 <_tx_thread_initialize+0x70>)
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8018d0e:	4b0d      	ldr	r3, [pc, #52]	; (8018d44 <_tx_thread_initialize+0x74>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8018d16:	4a0b      	ldr	r2, [pc, #44]	; (8018d44 <_tx_thread_initialize+0x74>)
 8018d18:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8018d1a:	bf00      	nop
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	24000874 	.word	0x24000874
 8018d24:	24000878 	.word	0x24000878
 8018d28:	24000884 	.word	0x24000884
 8018d2c:	24000888 	.word	0x24000888
 8018d30:	2400088c 	.word	0x2400088c
 8018d34:	2400087c 	.word	0x2400087c
 8018d38:	24000880 	.word	0x24000880
 8018d3c:	2400090c 	.word	0x2400090c
 8018d40:	24000910 	.word	0x24000910
 8018d44:	24000914 	.word	0x24000914

08018d48 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b08c      	sub	sp, #48	; 0x30
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	60f8      	str	r0, [r7, #12]
 8018d50:	60b9      	str	r1, [r7, #8]
 8018d52:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8018d54:	2300      	movs	r3, #0
 8018d56:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018d5e:	68ba      	ldr	r2, [r7, #8]
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d004      	beq.n	8018d6e <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d001      	beq.n	8018d6e <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8018d72:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8018d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8018d76:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018d78:	b672      	cpsid	i
    return(int_posture);
 8018d7a:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8018d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018d84:	68ba      	ldr	r2, [r7, #8]
 8018d86:	429a      	cmp	r2, r3
 8018d88:	d902      	bls.n	8018d90 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8018d8a:	2318      	movs	r3, #24
 8018d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d8e:	e03e      	b.n	8018e0e <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	68ba      	ldr	r2, [r7, #8]
 8018d9e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018da8:	68ba      	ldr	r2, [r7, #8]
 8018daa:	429a      	cmp	r2, r3
 8018dac:	d203      	bcs.n	8018db6 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	68ba      	ldr	r2, [r7, #8]
 8018db2:	63da      	str	r2, [r3, #60]	; 0x3c
 8018db4:	e004      	b.n	8018dc0 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018dc4:	4b17      	ldr	r3, [pc, #92]	; (8018e24 <_tx_thread_preemption_change+0xdc>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	429a      	cmp	r2, r3
 8018dca:	d920      	bls.n	8018e0e <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8018dcc:	4b15      	ldr	r3, [pc, #84]	; (8018e24 <_tx_thread_preemption_change+0xdc>)
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	68ba      	ldr	r2, [r7, #8]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	d91b      	bls.n	8018e0e <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8018dd6:	4b14      	ldr	r3, [pc, #80]	; (8018e28 <_tx_thread_preemption_change+0xe0>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	68fa      	ldr	r2, [r7, #12]
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d116      	bne.n	8018e0e <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8018de0:	4b10      	ldr	r3, [pc, #64]	; (8018e24 <_tx_thread_preemption_change+0xdc>)
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	4a11      	ldr	r2, [pc, #68]	; (8018e2c <_tx_thread_preemption_change+0xe4>)
 8018de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018dea:	4a0f      	ldr	r2, [pc, #60]	; (8018e28 <_tx_thread_preemption_change+0xe0>)
 8018dec:	6013      	str	r3, [r2, #0]
 8018dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018df0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018df2:	697b      	ldr	r3, [r7, #20]
 8018df4:	f383 8810 	msr	PRIMASK, r3
}
 8018df8:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8018dfa:	f000 f8e5 	bl	8018fc8 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8018e02:	61fb      	str	r3, [r7, #28]
    return(posture);
 8018e04:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8018e06:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018e08:	b672      	cpsid	i
    return(int_posture);
 8018e0a:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8018e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018e12:	693b      	ldr	r3, [r7, #16]
 8018e14:	f383 8810 	msr	PRIMASK, r3
}
 8018e18:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8018e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	3730      	adds	r7, #48	; 0x30
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bd80      	pop	{r7, pc}
 8018e24:	24000888 	.word	0x24000888
 8018e28:	24000878 	.word	0x24000878
 8018e2c:	2400088c 	.word	0x2400088c

08018e30 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b088      	sub	sp, #32
 8018e34:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8018e36:	4b21      	ldr	r3, [pc, #132]	; (8018ebc <_tx_thread_shell_entry+0x8c>)
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8018e3c:	69fb      	ldr	r3, [r7, #28]
 8018e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e40:	69fa      	ldr	r2, [r7, #28]
 8018e42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8018e44:	4610      	mov	r0, r2
 8018e46:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8018e48:	4b1d      	ldr	r3, [pc, #116]	; (8018ec0 <_tx_thread_shell_entry+0x90>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d003      	beq.n	8018e58 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8018e50:	4b1b      	ldr	r3, [pc, #108]	; (8018ec0 <_tx_thread_shell_entry+0x90>)
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	69f8      	ldr	r0, [r7, #28]
 8018e56:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018e58:	f3ef 8310 	mrs	r3, PRIMASK
 8018e5c:	607b      	str	r3, [r7, #4]
    return(posture);
 8018e5e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8018e60:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018e62:	b672      	cpsid	i
    return(int_posture);
 8018e64:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8018e66:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8018e68:	69fb      	ldr	r3, [r7, #28]
 8018e6a:	2201      	movs	r2, #1
 8018e6c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8018e6e:	69fb      	ldr	r3, [r7, #28]
 8018e70:	2201      	movs	r2, #1
 8018e72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8018e74:	69fb      	ldr	r3, [r7, #28]
 8018e76:	2200      	movs	r2, #0
 8018e78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8018e7a:	4b12      	ldr	r3, [pc, #72]	; (8018ec4 <_tx_thread_shell_entry+0x94>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	3301      	adds	r3, #1
 8018e80:	4a10      	ldr	r2, [pc, #64]	; (8018ec4 <_tx_thread_shell_entry+0x94>)
 8018e82:	6013      	str	r3, [r2, #0]
 8018e84:	69bb      	ldr	r3, [r7, #24]
 8018e86:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018e88:	68bb      	ldr	r3, [r7, #8]
 8018e8a:	f383 8810 	msr	PRIMASK, r3
}
 8018e8e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8018e90:	f3ef 8314 	mrs	r3, CONTROL
 8018e94:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8018e96:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8018e98:	617b      	str	r3, [r7, #20]
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	f023 0304 	bic.w	r3, r3, #4
 8018ea0:	617b      	str	r3, [r7, #20]
 8018ea2:	697b      	ldr	r3, [r7, #20]
 8018ea4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8018ea6:	693b      	ldr	r3, [r7, #16]
 8018ea8:	f383 8814 	msr	CONTROL, r3
}
 8018eac:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8018eae:	69f8      	ldr	r0, [r7, #28]
 8018eb0:	f000 f9c4 	bl	801923c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8018eb4:	bf00      	nop
 8018eb6:	3720      	adds	r7, #32
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	bd80      	pop	{r7, pc}
 8018ebc:	24000874 	.word	0x24000874
 8018ec0:	24000910 	.word	0x24000910
 8018ec4:	2400090c 	.word	0x2400090c

08018ec8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b08e      	sub	sp, #56	; 0x38
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8018ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8018ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8018ed8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8018eda:	b672      	cpsid	i
    return(int_posture);
 8018edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8018ede:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8018ee0:	4b35      	ldr	r3, [pc, #212]	; (8018fb8 <_tx_thread_sleep+0xf0>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8018ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d108      	bne.n	8018efe <_tx_thread_sleep+0x36>
 8018eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018ef0:	6a3b      	ldr	r3, [r7, #32]
 8018ef2:	f383 8810 	msr	PRIMASK, r3
}
 8018ef6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8018ef8:	2313      	movs	r3, #19
 8018efa:	637b      	str	r3, [r7, #52]	; 0x34
 8018efc:	e056      	b.n	8018fac <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018efe:	f3ef 8305 	mrs	r3, IPSR
 8018f02:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8018f04:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8018f06:	4b2d      	ldr	r3, [pc, #180]	; (8018fbc <_tx_thread_sleep+0xf4>)
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	4313      	orrs	r3, r2
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d008      	beq.n	8018f22 <_tx_thread_sleep+0x5a>
 8018f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f12:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018f14:	69bb      	ldr	r3, [r7, #24]
 8018f16:	f383 8810 	msr	PRIMASK, r3
}
 8018f1a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8018f1c:	2313      	movs	r3, #19
 8018f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8018f20:	e044      	b.n	8018fac <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8018f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f24:	4a26      	ldr	r2, [pc, #152]	; (8018fc0 <_tx_thread_sleep+0xf8>)
 8018f26:	4293      	cmp	r3, r2
 8018f28:	d108      	bne.n	8018f3c <_tx_thread_sleep+0x74>
 8018f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f2c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018f2e:	697b      	ldr	r3, [r7, #20]
 8018f30:	f383 8810 	msr	PRIMASK, r3
}
 8018f34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8018f36:	2313      	movs	r3, #19
 8018f38:	637b      	str	r3, [r7, #52]	; 0x34
 8018f3a:	e037      	b.n	8018fac <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d108      	bne.n	8018f54 <_tx_thread_sleep+0x8c>
 8018f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f44:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018f46:	693b      	ldr	r3, [r7, #16]
 8018f48:	f383 8810 	msr	PRIMASK, r3
}
 8018f4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8018f4e:	2300      	movs	r3, #0
 8018f50:	637b      	str	r3, [r7, #52]	; 0x34
 8018f52:	e02b      	b.n	8018fac <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8018f54:	4b1b      	ldr	r3, [pc, #108]	; (8018fc4 <_tx_thread_sleep+0xfc>)
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d008      	beq.n	8018f6e <_tx_thread_sleep+0xa6>
 8018f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f5e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	f383 8810 	msr	PRIMASK, r3
}
 8018f66:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8018f68:	2313      	movs	r3, #19
 8018f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8018f6c:	e01e      	b.n	8018fac <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8018f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f70:	2204      	movs	r2, #4
 8018f72:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8018f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f76:	2201      	movs	r2, #1
 8018f78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8018f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8018f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f84:	687a      	ldr	r2, [r7, #4]
 8018f86:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8018f88:	4b0e      	ldr	r3, [pc, #56]	; (8018fc4 <_tx_thread_sleep+0xfc>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	3301      	adds	r3, #1
 8018f8e:	4a0d      	ldr	r2, [pc, #52]	; (8018fc4 <_tx_thread_sleep+0xfc>)
 8018f90:	6013      	str	r3, [r2, #0]
 8018f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f94:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	f383 8810 	msr	PRIMASK, r3
}
 8018f9c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8018f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018fa0:	f000 f94c 	bl	801923c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8018fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018faa:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8018fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	3738      	adds	r7, #56	; 0x38
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}
 8018fb6:	bf00      	nop
 8018fb8:	24000874 	.word	0x24000874
 8018fbc:	2400008c 	.word	0x2400008c
 8018fc0:	240009bc 	.word	0x240009bc
 8018fc4:	2400090c 	.word	0x2400090c

08018fc8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8018fc8:	b480      	push	{r7}
 8018fca:	b089      	sub	sp, #36	; 0x24
 8018fcc:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8018fce:	4b17      	ldr	r3, [pc, #92]	; (801902c <_tx_thread_system_preempt_check+0x64>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8018fd4:	69fb      	ldr	r3, [r7, #28]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d121      	bne.n	801901e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8018fda:	4b15      	ldr	r3, [pc, #84]	; (8019030 <_tx_thread_system_preempt_check+0x68>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8018fe0:	4b14      	ldr	r3, [pc, #80]	; (8019034 <_tx_thread_system_preempt_check+0x6c>)
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8018fe6:	69ba      	ldr	r2, [r7, #24]
 8018fe8:	697b      	ldr	r3, [r7, #20]
 8018fea:	429a      	cmp	r2, r3
 8018fec:	d017      	beq.n	801901e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8018fee:	4b12      	ldr	r3, [pc, #72]	; (8019038 <_tx_thread_system_preempt_check+0x70>)
 8018ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ff4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8018ff6:	f3ef 8305 	mrs	r3, IPSR
 8018ffa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8018ffc:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d10c      	bne.n	801901c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019002:	f3ef 8310 	mrs	r3, PRIMASK
 8019006:	60fb      	str	r3, [r7, #12]
    return(posture);
 8019008:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 801900a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801900c:	b662      	cpsie	i
}
 801900e:	bf00      	nop
 8019010:	68bb      	ldr	r3, [r7, #8]
 8019012:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	f383 8810 	msr	PRIMASK, r3
}
 801901a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 801901c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801901e:	bf00      	nop
 8019020:	3724      	adds	r7, #36	; 0x24
 8019022:	46bd      	mov	sp, r7
 8019024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019028:	4770      	bx	lr
 801902a:	bf00      	nop
 801902c:	2400090c 	.word	0x2400090c
 8019030:	24000874 	.word	0x24000874
 8019034:	24000878 	.word	0x24000878
 8019038:	e000ed04 	.word	0xe000ed04

0801903c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b096      	sub	sp, #88	; 0x58
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019044:	f3ef 8310 	mrs	r3, PRIMASK
 8019048:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801904c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801904e:	b672      	cpsid	i
    return(int_posture);
 8019050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8019052:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019058:	2b00      	cmp	r3, #0
 801905a:	d005      	beq.n	8019068 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	334c      	adds	r3, #76	; 0x4c
 8019060:	4618      	mov	r0, r3
 8019062:	f000 fbf5 	bl	8019850 <_tx_timer_system_deactivate>
 8019066:	e002      	b.n	801906e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	2200      	movs	r2, #0
 801906c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801906e:	4b6c      	ldr	r3, [pc, #432]	; (8019220 <_tx_thread_system_resume+0x1e4>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	3b01      	subs	r3, #1
 8019074:	4a6a      	ldr	r2, [pc, #424]	; (8019220 <_tx_thread_system_resume+0x1e4>)
 8019076:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801907c:	2b00      	cmp	r3, #0
 801907e:	f040 8083 	bne.w	8019188 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019086:	2b00      	cmp	r3, #0
 8019088:	f000 8097 	beq.w	80191ba <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019090:	2b00      	cmp	r3, #0
 8019092:	d172      	bne.n	801917a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	2200      	movs	r2, #0
 8019098:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801909e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80190a0:	4a60      	ldr	r2, [pc, #384]	; (8019224 <_tx_thread_system_resume+0x1e8>)
 80190a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80190a8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80190aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d154      	bne.n	801915a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80190b0:	495c      	ldr	r1, [pc, #368]	; (8019224 <_tx_thread_system_resume+0x1e8>)
 80190b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190b4:	687a      	ldr	r2, [r7, #4]
 80190b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	687a      	ldr	r2, [r7, #4]
 80190be:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	687a      	ldr	r2, [r7, #4]
 80190c4:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80190c6:	2201      	movs	r2, #1
 80190c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190ca:	fa02 f303 	lsl.w	r3, r2, r3
 80190ce:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80190d0:	4b55      	ldr	r3, [pc, #340]	; (8019228 <_tx_thread_system_resume+0x1ec>)
 80190d2:	681a      	ldr	r2, [r3, #0]
 80190d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190d6:	4313      	orrs	r3, r2
 80190d8:	4a53      	ldr	r2, [pc, #332]	; (8019228 <_tx_thread_system_resume+0x1ec>)
 80190da:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80190dc:	4b53      	ldr	r3, [pc, #332]	; (801922c <_tx_thread_system_resume+0x1f0>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80190e2:	429a      	cmp	r2, r3
 80190e4:	d269      	bcs.n	80191ba <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80190e6:	4a51      	ldr	r2, [pc, #324]	; (801922c <_tx_thread_system_resume+0x1f0>)
 80190e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190ea:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80190ec:	4b50      	ldr	r3, [pc, #320]	; (8019230 <_tx_thread_system_resume+0x1f4>)
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80190f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d103      	bne.n	8019100 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80190f8:	4a4d      	ldr	r2, [pc, #308]	; (8019230 <_tx_thread_system_resume+0x1f4>)
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	6013      	str	r3, [r2, #0]
 80190fe:	e05c      	b.n	80191ba <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8019100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019104:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019106:	429a      	cmp	r2, r3
 8019108:	d257      	bcs.n	80191ba <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 801910a:	4a49      	ldr	r2, [pc, #292]	; (8019230 <_tx_thread_system_resume+0x1f4>)
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	6013      	str	r3, [r2, #0]
 8019110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019112:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019116:	f383 8810 	msr	PRIMASK, r3
}
 801911a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801911c:	4b40      	ldr	r3, [pc, #256]	; (8019220 <_tx_thread_system_resume+0x1e4>)
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8019122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019124:	2b00      	cmp	r3, #0
 8019126:	d174      	bne.n	8019212 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8019128:	4b42      	ldr	r3, [pc, #264]	; (8019234 <_tx_thread_system_resume+0x1f8>)
 801912a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801912e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019130:	f3ef 8305 	mrs	r3, IPSR
 8019134:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8019136:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8019138:	2b00      	cmp	r3, #0
 801913a:	d10c      	bne.n	8019156 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801913c:	f3ef 8310 	mrs	r3, PRIMASK
 8019140:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8019142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8019144:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8019146:	b662      	cpsie	i
}
 8019148:	bf00      	nop
 801914a:	6a3b      	ldr	r3, [r7, #32]
 801914c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801914e:	69fb      	ldr	r3, [r7, #28]
 8019150:	f383 8810 	msr	PRIMASK, r3
}
 8019154:	bf00      	nop
}
 8019156:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8019158:	e05b      	b.n	8019212 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801915a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801915e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8019160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019162:	687a      	ldr	r2, [r7, #4]
 8019164:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8019166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019170:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019176:	621a      	str	r2, [r3, #32]
 8019178:	e01f      	b.n	80191ba <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	2200      	movs	r2, #0
 801917e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	2203      	movs	r2, #3
 8019184:	631a      	str	r2, [r3, #48]	; 0x30
 8019186:	e018      	b.n	80191ba <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801918c:	2b01      	cmp	r3, #1
 801918e:	d014      	beq.n	80191ba <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019194:	2b02      	cmp	r3, #2
 8019196:	d010      	beq.n	80191ba <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801919c:	2b00      	cmp	r3, #0
 801919e:	d106      	bne.n	80191ae <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	2200      	movs	r2, #0
 80191a4:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	2200      	movs	r2, #0
 80191aa:	631a      	str	r2, [r3, #48]	; 0x30
 80191ac:	e005      	b.n	80191ba <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	2200      	movs	r2, #0
 80191b2:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	2203      	movs	r2, #3
 80191b8:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80191ba:	4b1f      	ldr	r3, [pc, #124]	; (8019238 <_tx_thread_system_resume+0x1fc>)
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	63bb      	str	r3, [r7, #56]	; 0x38
 80191c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80191c4:	69bb      	ldr	r3, [r7, #24]
 80191c6:	f383 8810 	msr	PRIMASK, r3
}
 80191ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80191cc:	4b18      	ldr	r3, [pc, #96]	; (8019230 <_tx_thread_system_resume+0x1f4>)
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80191d2:	429a      	cmp	r2, r3
 80191d4:	d020      	beq.n	8019218 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80191d6:	4b12      	ldr	r3, [pc, #72]	; (8019220 <_tx_thread_system_resume+0x1e4>)
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80191dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d11a      	bne.n	8019218 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80191e2:	4b14      	ldr	r3, [pc, #80]	; (8019234 <_tx_thread_system_resume+0x1f8>)
 80191e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191e8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80191ea:	f3ef 8305 	mrs	r3, IPSR
 80191ee:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80191f0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d10f      	bne.n	8019216 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80191f6:	f3ef 8310 	mrs	r3, PRIMASK
 80191fa:	613b      	str	r3, [r7, #16]
    return(posture);
 80191fc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80191fe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8019200:	b662      	cpsie	i
}
 8019202:	bf00      	nop
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019208:	68bb      	ldr	r3, [r7, #8]
 801920a:	f383 8810 	msr	PRIMASK, r3
}
 801920e:	bf00      	nop
}
 8019210:	e001      	b.n	8019216 <_tx_thread_system_resume+0x1da>
                                return;
 8019212:	bf00      	nop
 8019214:	e000      	b.n	8019218 <_tx_thread_system_resume+0x1dc>
 8019216:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8019218:	3758      	adds	r7, #88	; 0x58
 801921a:	46bd      	mov	sp, r7
 801921c:	bd80      	pop	{r7, pc}
 801921e:	bf00      	nop
 8019220:	2400090c 	.word	0x2400090c
 8019224:	2400088c 	.word	0x2400088c
 8019228:	24000884 	.word	0x24000884
 801922c:	24000888 	.word	0x24000888
 8019230:	24000878 	.word	0x24000878
 8019234:	e000ed04 	.word	0xe000ed04
 8019238:	24000874 	.word	0x24000874

0801923c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b09e      	sub	sp, #120	; 0x78
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8019244:	4b81      	ldr	r3, [pc, #516]	; (801944c <_tx_thread_system_suspend+0x210>)
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801924a:	f3ef 8310 	mrs	r3, PRIMASK
 801924e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8019250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8019252:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8019254:	b672      	cpsid	i
    return(int_posture);
 8019256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8019258:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801925a:	687a      	ldr	r2, [r7, #4]
 801925c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801925e:	429a      	cmp	r2, r3
 8019260:	d112      	bne.n	8019288 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019266:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8019268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801926a:	2b00      	cmp	r3, #0
 801926c:	d008      	beq.n	8019280 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801926e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019274:	d004      	beq.n	8019280 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	334c      	adds	r3, #76	; 0x4c
 801927a:	4618      	mov	r0, r3
 801927c:	f000 fa86 	bl	801978c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	69db      	ldr	r3, [r3, #28]
 8019284:	4a72      	ldr	r2, [pc, #456]	; (8019450 <_tx_thread_system_suspend+0x214>)
 8019286:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8019288:	4b72      	ldr	r3, [pc, #456]	; (8019454 <_tx_thread_system_suspend+0x218>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	3b01      	subs	r3, #1
 801928e:	4a71      	ldr	r2, [pc, #452]	; (8019454 <_tx_thread_system_suspend+0x218>)
 8019290:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019296:	2b01      	cmp	r3, #1
 8019298:	f040 80a6 	bne.w	80193e8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	2200      	movs	r2, #0
 80192a0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192a6:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	6a1b      	ldr	r3, [r3, #32]
 80192ac:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80192ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d015      	beq.n	80192e2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ba:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80192bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80192c0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80192c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80192c6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80192c8:	4a63      	ldr	r2, [pc, #396]	; (8019458 <_tx_thread_system_suspend+0x21c>)
 80192ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80192cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80192d0:	687a      	ldr	r2, [r7, #4]
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d157      	bne.n	8019386 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80192d6:	4960      	ldr	r1, [pc, #384]	; (8019458 <_tx_thread_system_suspend+0x21c>)
 80192d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80192da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80192dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80192e0:	e051      	b.n	8019386 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80192e2:	4a5d      	ldr	r2, [pc, #372]	; (8019458 <_tx_thread_system_suspend+0x21c>)
 80192e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80192e6:	2100      	movs	r1, #0
 80192e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80192ec:	2201      	movs	r2, #1
 80192ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80192f0:	fa02 f303 	lsl.w	r3, r2, r3
 80192f4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80192f6:	4b59      	ldr	r3, [pc, #356]	; (801945c <_tx_thread_system_suspend+0x220>)
 80192f8:	681a      	ldr	r2, [r3, #0]
 80192fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80192fc:	43db      	mvns	r3, r3
 80192fe:	4013      	ands	r3, r2
 8019300:	4a56      	ldr	r2, [pc, #344]	; (801945c <_tx_thread_system_suspend+0x220>)
 8019302:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8019304:	2300      	movs	r3, #0
 8019306:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8019308:	4b54      	ldr	r3, [pc, #336]	; (801945c <_tx_thread_system_suspend+0x220>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801930e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019310:	2b00      	cmp	r3, #0
 8019312:	d12b      	bne.n	801936c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8019314:	4b52      	ldr	r3, [pc, #328]	; (8019460 <_tx_thread_system_suspend+0x224>)
 8019316:	2220      	movs	r2, #32
 8019318:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801931a:	4b52      	ldr	r3, [pc, #328]	; (8019464 <_tx_thread_system_suspend+0x228>)
 801931c:	2200      	movs	r2, #0
 801931e:	601a      	str	r2, [r3, #0]
 8019320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019322:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019326:	f383 8810 	msr	PRIMASK, r3
}
 801932a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801932c:	4b49      	ldr	r3, [pc, #292]	; (8019454 <_tx_thread_system_suspend+0x218>)
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8019332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019334:	2b00      	cmp	r3, #0
 8019336:	f040 8081 	bne.w	801943c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801933a:	4b4b      	ldr	r3, [pc, #300]	; (8019468 <_tx_thread_system_suspend+0x22c>)
 801933c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019340:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019342:	f3ef 8305 	mrs	r3, IPSR
 8019346:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8019348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 801934a:	2b00      	cmp	r3, #0
 801934c:	d10c      	bne.n	8019368 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801934e:	f3ef 8310 	mrs	r3, PRIMASK
 8019352:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8019354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8019356:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8019358:	b662      	cpsie	i
}
 801935a:	bf00      	nop
 801935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801935e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019362:	f383 8810 	msr	PRIMASK, r3
}
 8019366:	bf00      	nop
}
 8019368:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801936a:	e067      	b.n	801943c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801936c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801936e:	fa93 f3a3 	rbit	r3, r3
 8019372:	65bb      	str	r3, [r7, #88]	; 0x58
 8019374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019376:	fab3 f383 	clz	r3, r3
 801937a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 801937c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801937e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019380:	4413      	add	r3, r2
 8019382:	4a37      	ldr	r2, [pc, #220]	; (8019460 <_tx_thread_system_suspend+0x224>)
 8019384:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8019386:	4b37      	ldr	r3, [pc, #220]	; (8019464 <_tx_thread_system_suspend+0x228>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	687a      	ldr	r2, [r7, #4]
 801938c:	429a      	cmp	r2, r3
 801938e:	d12b      	bne.n	80193e8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8019390:	4b33      	ldr	r3, [pc, #204]	; (8019460 <_tx_thread_system_suspend+0x224>)
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	4a30      	ldr	r2, [pc, #192]	; (8019458 <_tx_thread_system_suspend+0x21c>)
 8019396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801939a:	4a32      	ldr	r2, [pc, #200]	; (8019464 <_tx_thread_system_suspend+0x228>)
 801939c:	6013      	str	r3, [r2, #0]
 801939e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193a0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80193a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193a4:	f383 8810 	msr	PRIMASK, r3
}
 80193a8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80193aa:	4b2a      	ldr	r3, [pc, #168]	; (8019454 <_tx_thread_system_suspend+0x218>)
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80193b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d144      	bne.n	8019440 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80193b6:	4b2c      	ldr	r3, [pc, #176]	; (8019468 <_tx_thread_system_suspend+0x22c>)
 80193b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193bc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80193be:	f3ef 8305 	mrs	r3, IPSR
 80193c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80193c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d10c      	bne.n	80193e4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80193ca:	f3ef 8310 	mrs	r3, PRIMASK
 80193ce:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80193d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80193d2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80193d4:	b662      	cpsie	i
}
 80193d6:	bf00      	nop
 80193d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80193dc:	6a3b      	ldr	r3, [r7, #32]
 80193de:	f383 8810 	msr	PRIMASK, r3
}
 80193e2:	bf00      	nop
}
 80193e4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80193e6:	e02b      	b.n	8019440 <_tx_thread_system_suspend+0x204>
 80193e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80193ec:	69fb      	ldr	r3, [r7, #28]
 80193ee:	f383 8810 	msr	PRIMASK, r3
}
 80193f2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80193f4:	4b1b      	ldr	r3, [pc, #108]	; (8019464 <_tx_thread_system_suspend+0x228>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80193fa:	429a      	cmp	r2, r3
 80193fc:	d022      	beq.n	8019444 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80193fe:	4b15      	ldr	r3, [pc, #84]	; (8019454 <_tx_thread_system_suspend+0x218>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8019404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019406:	2b00      	cmp	r3, #0
 8019408:	d11c      	bne.n	8019444 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801940a:	4b17      	ldr	r3, [pc, #92]	; (8019468 <_tx_thread_system_suspend+0x22c>)
 801940c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019410:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019412:	f3ef 8305 	mrs	r3, IPSR
 8019416:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8019418:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801941a:	2b00      	cmp	r3, #0
 801941c:	d10c      	bne.n	8019438 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801941e:	f3ef 8310 	mrs	r3, PRIMASK
 8019422:	617b      	str	r3, [r7, #20]
    return(posture);
 8019424:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8019426:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8019428:	b662      	cpsie	i
}
 801942a:	bf00      	nop
 801942c:	693b      	ldr	r3, [r7, #16]
 801942e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	f383 8810 	msr	PRIMASK, r3
}
 8019436:	bf00      	nop
}
 8019438:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801943a:	e003      	b.n	8019444 <_tx_thread_system_suspend+0x208>
                return;
 801943c:	bf00      	nop
 801943e:	e002      	b.n	8019446 <_tx_thread_system_suspend+0x20a>
            return;
 8019440:	bf00      	nop
 8019442:	e000      	b.n	8019446 <_tx_thread_system_suspend+0x20a>
    return;
 8019444:	bf00      	nop
}
 8019446:	3778      	adds	r7, #120	; 0x78
 8019448:	46bd      	mov	sp, r7
 801944a:	bd80      	pop	{r7, pc}
 801944c:	24000874 	.word	0x24000874
 8019450:	24000e78 	.word	0x24000e78
 8019454:	2400090c 	.word	0x2400090c
 8019458:	2400088c 	.word	0x2400088c
 801945c:	24000884 	.word	0x24000884
 8019460:	24000888 	.word	0x24000888
 8019464:	24000878 	.word	0x24000878
 8019468:	e000ed04 	.word	0xe000ed04

0801946c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 801946c:	b480      	push	{r7}
 801946e:	b087      	sub	sp, #28
 8019470:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8019472:	4b21      	ldr	r3, [pc, #132]	; (80194f8 <_tx_thread_time_slice+0x8c>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019478:	f3ef 8310 	mrs	r3, PRIMASK
 801947c:	60fb      	str	r3, [r7, #12]
    return(posture);
 801947e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8019480:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019482:	b672      	cpsid	i
    return(int_posture);
 8019484:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8019486:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8019488:	4b1c      	ldr	r3, [pc, #112]	; (80194fc <_tx_thread_time_slice+0x90>)
 801948a:	2200      	movs	r2, #0
 801948c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801948e:	697b      	ldr	r3, [r7, #20]
 8019490:	2b00      	cmp	r3, #0
 8019492:	d024      	beq.n	80194de <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8019494:	697b      	ldr	r3, [r7, #20]
 8019496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019498:	2b00      	cmp	r3, #0
 801949a:	d120      	bne.n	80194de <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801949c:	697b      	ldr	r3, [r7, #20]
 801949e:	69da      	ldr	r2, [r3, #28]
 80194a0:	697b      	ldr	r3, [r7, #20]
 80194a2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	699b      	ldr	r3, [r3, #24]
 80194a8:	4a15      	ldr	r2, [pc, #84]	; (8019500 <_tx_thread_time_slice+0x94>)
 80194aa:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80194ac:	697b      	ldr	r3, [r7, #20]
 80194ae:	6a1b      	ldr	r3, [r3, #32]
 80194b0:	697a      	ldr	r2, [r7, #20]
 80194b2:	429a      	cmp	r2, r3
 80194b4:	d013      	beq.n	80194de <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80194b6:	697b      	ldr	r3, [r7, #20]
 80194b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194ba:	697b      	ldr	r3, [r7, #20]
 80194bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194be:	429a      	cmp	r2, r3
 80194c0:	d10d      	bne.n	80194de <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80194c2:	697b      	ldr	r3, [r7, #20]
 80194c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194c6:	697a      	ldr	r2, [r7, #20]
 80194c8:	6a12      	ldr	r2, [r2, #32]
 80194ca:	490e      	ldr	r1, [pc, #56]	; (8019504 <_tx_thread_time_slice+0x98>)
 80194cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80194d0:	4b0d      	ldr	r3, [pc, #52]	; (8019508 <_tx_thread_time_slice+0x9c>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	4a0b      	ldr	r2, [pc, #44]	; (8019504 <_tx_thread_time_slice+0x98>)
 80194d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80194da:	4a0c      	ldr	r2, [pc, #48]	; (801950c <_tx_thread_time_slice+0xa0>)
 80194dc:	6013      	str	r3, [r2, #0]
 80194de:	693b      	ldr	r3, [r7, #16]
 80194e0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f383 8810 	msr	PRIMASK, r3
}
 80194e8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80194ea:	bf00      	nop
 80194ec:	371c      	adds	r7, #28
 80194ee:	46bd      	mov	sp, r7
 80194f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f4:	4770      	bx	lr
 80194f6:	bf00      	nop
 80194f8:	24000874 	.word	0x24000874
 80194fc:	2400091c 	.word	0x2400091c
 8019500:	24000e78 	.word	0x24000e78
 8019504:	2400088c 	.word	0x2400088c
 8019508:	24000888 	.word	0x24000888
 801950c:	24000878 	.word	0x24000878

08019510 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	b08a      	sub	sp, #40	; 0x28
 8019514:	af00      	add	r7, sp, #0
 8019516:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801951c:	f3ef 8310 	mrs	r3, PRIMASK
 8019520:	617b      	str	r3, [r7, #20]
    return(posture);
 8019522:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8019524:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019526:	b672      	cpsid	i
    return(int_posture);
 8019528:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801952a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 801952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801952e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019530:	2b04      	cmp	r3, #4
 8019532:	d10e      	bne.n	8019552 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8019534:	4b13      	ldr	r3, [pc, #76]	; (8019584 <_tx_thread_timeout+0x74>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	3301      	adds	r3, #1
 801953a:	4a12      	ldr	r2, [pc, #72]	; (8019584 <_tx_thread_timeout+0x74>)
 801953c:	6013      	str	r3, [r2, #0]
 801953e:	6a3b      	ldr	r3, [r7, #32]
 8019540:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	f383 8810 	msr	PRIMASK, r3
}
 8019548:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801954a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801954c:	f7ff fd76 	bl	801903c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8019550:	e013      	b.n	801957a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8019552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019556:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8019558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801955a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801955e:	61bb      	str	r3, [r7, #24]
 8019560:	6a3b      	ldr	r3, [r7, #32]
 8019562:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	f383 8810 	msr	PRIMASK, r3
}
 801956a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 801956c:	69fb      	ldr	r3, [r7, #28]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d003      	beq.n	801957a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8019572:	69fb      	ldr	r3, [r7, #28]
 8019574:	69b9      	ldr	r1, [r7, #24]
 8019576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019578:	4798      	blx	r3
}
 801957a:	bf00      	nop
 801957c:	3728      	adds	r7, #40	; 0x28
 801957e:	46bd      	mov	sp, r7
 8019580:	bd80      	pop	{r7, pc}
 8019582:	bf00      	nop
 8019584:	2400090c 	.word	0x2400090c

08019588 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8019588:	b580      	push	{r7, lr}
 801958a:	b08a      	sub	sp, #40	; 0x28
 801958c:	af00      	add	r7, sp, #0
 801958e:	60f8      	str	r0, [r7, #12]
 8019590:	60b9      	str	r1, [r7, #8]
 8019592:	607a      	str	r2, [r7, #4]
 8019594:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8019596:	222c      	movs	r2, #44	; 0x2c
 8019598:	2100      	movs	r1, #0
 801959a:	68f8      	ldr	r0, [r7, #12]
 801959c:	f000 fec2 	bl	801a324 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	68ba      	ldr	r2, [r7, #8]
 80195a4:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195aa:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80195b0:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	687a      	ldr	r2, [r7, #4]
 80195b6:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	683a      	ldr	r2, [r7, #0]
 80195bc:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80195be:	f3ef 8310 	mrs	r3, PRIMASK
 80195c2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80195c4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80195c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80195c8:	b672      	cpsid	i
    return(int_posture);
 80195ca:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80195cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	4a1c      	ldr	r2, [pc, #112]	; (8019644 <_tx_timer_create+0xbc>)
 80195d2:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 80195d4:	4b1c      	ldr	r3, [pc, #112]	; (8019648 <_tx_timer_create+0xc0>)
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d109      	bne.n	80195f0 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 80195dc:	4a1b      	ldr	r2, [pc, #108]	; (801964c <_tx_timer_create+0xc4>)
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	68fa      	ldr	r2, [r7, #12]
 80195e6:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	68fa      	ldr	r2, [r7, #12]
 80195ec:	629a      	str	r2, [r3, #40]	; 0x28
 80195ee:	e011      	b.n	8019614 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 80195f0:	4b16      	ldr	r3, [pc, #88]	; (801964c <_tx_timer_create+0xc4>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 80195f6:	6a3b      	ldr	r3, [r7, #32]
 80195f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195fa:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 80195fc:	6a3b      	ldr	r3, [r7, #32]
 80195fe:	68fa      	ldr	r2, [r7, #12]
 8019600:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8019602:	69fb      	ldr	r3, [r7, #28]
 8019604:	68fa      	ldr	r2, [r7, #12]
 8019606:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	69fa      	ldr	r2, [r7, #28]
 801960c:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	6a3a      	ldr	r2, [r7, #32]
 8019612:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8019614:	4b0c      	ldr	r3, [pc, #48]	; (8019648 <_tx_timer_create+0xc0>)
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	3301      	adds	r3, #1
 801961a:	4a0b      	ldr	r2, [pc, #44]	; (8019648 <_tx_timer_create+0xc0>)
 801961c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 801961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019620:	2b01      	cmp	r3, #1
 8019622:	d104      	bne.n	801962e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	3308      	adds	r3, #8
 8019628:	4618      	mov	r0, r3
 801962a:	f000 f8af 	bl	801978c <_tx_timer_system_activate>
 801962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019630:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019632:	693b      	ldr	r3, [r7, #16]
 8019634:	f383 8810 	msr	PRIMASK, r3
}
 8019638:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801963a:	2300      	movs	r3, #0
}
 801963c:	4618      	mov	r0, r3
 801963e:	3728      	adds	r7, #40	; 0x28
 8019640:	46bd      	mov	sp, r7
 8019642:	bd80      	pop	{r7, pc}
 8019644:	4154494d 	.word	0x4154494d
 8019648:	240009b4 	.word	0x240009b4
 801964c:	240009b0 	.word	0x240009b0

08019650 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b084      	sub	sp, #16
 8019654:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019656:	f3ef 8310 	mrs	r3, PRIMASK
 801965a:	607b      	str	r3, [r7, #4]
    return(posture);
 801965c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801965e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019660:	b672      	cpsid	i
    return(int_posture);
 8019662:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8019664:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8019666:	4b09      	ldr	r3, [pc, #36]	; (801968c <_tx_timer_expiration_process+0x3c>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	3301      	adds	r3, #1
 801966c:	4a07      	ldr	r2, [pc, #28]	; (801968c <_tx_timer_expiration_process+0x3c>)
 801966e:	6013      	str	r3, [r2, #0]
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019674:	68bb      	ldr	r3, [r7, #8]
 8019676:	f383 8810 	msr	PRIMASK, r3
}
 801967a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801967c:	4804      	ldr	r0, [pc, #16]	; (8019690 <_tx_timer_expiration_process+0x40>)
 801967e:	f7ff fcdd 	bl	801903c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8019682:	bf00      	nop
 8019684:	3710      	adds	r7, #16
 8019686:	46bd      	mov	sp, r7
 8019688:	bd80      	pop	{r7, pc}
 801968a:	bf00      	nop
 801968c:	2400090c 	.word	0x2400090c
 8019690:	240009bc 	.word	0x240009bc

08019694 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8019694:	b590      	push	{r4, r7, lr}
 8019696:	b089      	sub	sp, #36	; 0x24
 8019698:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801969a:	4b28      	ldr	r3, [pc, #160]	; (801973c <_tx_timer_initialize+0xa8>)
 801969c:	2200      	movs	r2, #0
 801969e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80196a0:	4b27      	ldr	r3, [pc, #156]	; (8019740 <_tx_timer_initialize+0xac>)
 80196a2:	2200      	movs	r2, #0
 80196a4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80196a6:	4b27      	ldr	r3, [pc, #156]	; (8019744 <_tx_timer_initialize+0xb0>)
 80196a8:	2200      	movs	r2, #0
 80196aa:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80196ac:	4b26      	ldr	r3, [pc, #152]	; (8019748 <_tx_timer_initialize+0xb4>)
 80196ae:	2200      	movs	r2, #0
 80196b0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80196b2:	4b26      	ldr	r3, [pc, #152]	; (801974c <_tx_timer_initialize+0xb8>)
 80196b4:	2200      	movs	r2, #0
 80196b6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80196b8:	2280      	movs	r2, #128	; 0x80
 80196ba:	2100      	movs	r1, #0
 80196bc:	4824      	ldr	r0, [pc, #144]	; (8019750 <_tx_timer_initialize+0xbc>)
 80196be:	f000 fe31 	bl	801a324 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80196c2:	4b24      	ldr	r3, [pc, #144]	; (8019754 <_tx_timer_initialize+0xc0>)
 80196c4:	4a22      	ldr	r2, [pc, #136]	; (8019750 <_tx_timer_initialize+0xbc>)
 80196c6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80196c8:	4b23      	ldr	r3, [pc, #140]	; (8019758 <_tx_timer_initialize+0xc4>)
 80196ca:	4a21      	ldr	r2, [pc, #132]	; (8019750 <_tx_timer_initialize+0xbc>)
 80196cc:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80196ce:	4b23      	ldr	r3, [pc, #140]	; (801975c <_tx_timer_initialize+0xc8>)
 80196d0:	4a23      	ldr	r2, [pc, #140]	; (8019760 <_tx_timer_initialize+0xcc>)
 80196d2:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80196d4:	4b21      	ldr	r3, [pc, #132]	; (801975c <_tx_timer_initialize+0xc8>)
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	3304      	adds	r3, #4
 80196da:	4a20      	ldr	r2, [pc, #128]	; (801975c <_tx_timer_initialize+0xc8>)
 80196dc:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80196de:	4b21      	ldr	r3, [pc, #132]	; (8019764 <_tx_timer_initialize+0xd0>)
 80196e0:	4a21      	ldr	r2, [pc, #132]	; (8019768 <_tx_timer_initialize+0xd4>)
 80196e2:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80196e4:	4b21      	ldr	r3, [pc, #132]	; (801976c <_tx_timer_initialize+0xd8>)
 80196e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80196ea:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80196ec:	4b20      	ldr	r3, [pc, #128]	; (8019770 <_tx_timer_initialize+0xdc>)
 80196ee:	2200      	movs	r2, #0
 80196f0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80196f2:	4b1c      	ldr	r3, [pc, #112]	; (8019764 <_tx_timer_initialize+0xd0>)
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	4a1d      	ldr	r2, [pc, #116]	; (801976c <_tx_timer_initialize+0xd8>)
 80196f8:	6812      	ldr	r2, [r2, #0]
 80196fa:	491d      	ldr	r1, [pc, #116]	; (8019770 <_tx_timer_initialize+0xdc>)
 80196fc:	6809      	ldr	r1, [r1, #0]
 80196fe:	481c      	ldr	r0, [pc, #112]	; (8019770 <_tx_timer_initialize+0xdc>)
 8019700:	6800      	ldr	r0, [r0, #0]
 8019702:	2400      	movs	r4, #0
 8019704:	9405      	str	r4, [sp, #20]
 8019706:	2400      	movs	r4, #0
 8019708:	9404      	str	r4, [sp, #16]
 801970a:	9003      	str	r0, [sp, #12]
 801970c:	9102      	str	r1, [sp, #8]
 801970e:	9201      	str	r2, [sp, #4]
 8019710:	9300      	str	r3, [sp, #0]
 8019712:	4b18      	ldr	r3, [pc, #96]	; (8019774 <_tx_timer_initialize+0xe0>)
 8019714:	4a18      	ldr	r2, [pc, #96]	; (8019778 <_tx_timer_initialize+0xe4>)
 8019716:	4919      	ldr	r1, [pc, #100]	; (801977c <_tx_timer_initialize+0xe8>)
 8019718:	4819      	ldr	r0, [pc, #100]	; (8019780 <_tx_timer_initialize+0xec>)
 801971a:	f7ff f9c5 	bl	8018aa8 <_tx_thread_create>
 801971e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d1e5      	bne.n	80196f2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8019726:	4b17      	ldr	r3, [pc, #92]	; (8019784 <_tx_timer_initialize+0xf0>)
 8019728:	2200      	movs	r2, #0
 801972a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801972c:	4b16      	ldr	r3, [pc, #88]	; (8019788 <_tx_timer_initialize+0xf4>)
 801972e:	2200      	movs	r2, #0
 8019730:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8019732:	bf00      	nop
 8019734:	370c      	adds	r7, #12
 8019736:	46bd      	mov	sp, r7
 8019738:	bd90      	pop	{r4, r7, pc}
 801973a:	bf00      	nop
 801973c:	24000918 	.word	0x24000918
 8019740:	24000e78 	.word	0x24000e78
 8019744:	2400091c 	.word	0x2400091c
 8019748:	240009ac 	.word	0x240009ac
 801974c:	240009b8 	.word	0x240009b8
 8019750:	24000920 	.word	0x24000920
 8019754:	240009a0 	.word	0x240009a0
 8019758:	240009a8 	.word	0x240009a8
 801975c:	240009a4 	.word	0x240009a4
 8019760:	2400099c 	.word	0x2400099c
 8019764:	24000a6c 	.word	0x24000a6c
 8019768:	24000a78 	.word	0x24000a78
 801976c:	24000a70 	.word	0x24000a70
 8019770:	24000a74 	.word	0x24000a74
 8019774:	4154494d 	.word	0x4154494d
 8019778:	080198c1 	.word	0x080198c1
 801977c:	0801b5d8 	.word	0x0801b5d8
 8019780:	240009bc 	.word	0x240009bc
 8019784:	240009b0 	.word	0x240009b0
 8019788:	240009b4 	.word	0x240009b4

0801978c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 801978c:	b480      	push	{r7}
 801978e:	b089      	sub	sp, #36	; 0x24
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801979a:	697b      	ldr	r3, [r7, #20]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d04a      	beq.n	8019836 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80197a0:	697b      	ldr	r3, [r7, #20]
 80197a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197a6:	d046      	beq.n	8019836 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	699b      	ldr	r3, [r3, #24]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d142      	bne.n	8019836 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80197b0:	697b      	ldr	r3, [r7, #20]
 80197b2:	2b20      	cmp	r3, #32
 80197b4:	d902      	bls.n	80197bc <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80197b6:	231f      	movs	r3, #31
 80197b8:	61bb      	str	r3, [r7, #24]
 80197ba:	e002      	b.n	80197c2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	3b01      	subs	r3, #1
 80197c0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80197c2:	4b20      	ldr	r3, [pc, #128]	; (8019844 <_tx_timer_system_activate+0xb8>)
 80197c4:	681a      	ldr	r2, [r3, #0]
 80197c6:	69bb      	ldr	r3, [r7, #24]
 80197c8:	009b      	lsls	r3, r3, #2
 80197ca:	4413      	add	r3, r2
 80197cc:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80197ce:	4b1e      	ldr	r3, [pc, #120]	; (8019848 <_tx_timer_system_activate+0xbc>)
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	69fa      	ldr	r2, [r7, #28]
 80197d4:	429a      	cmp	r2, r3
 80197d6:	d30b      	bcc.n	80197f0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80197d8:	4b1b      	ldr	r3, [pc, #108]	; (8019848 <_tx_timer_system_activate+0xbc>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	69fa      	ldr	r2, [r7, #28]
 80197de:	1ad3      	subs	r3, r2, r3
 80197e0:	109b      	asrs	r3, r3, #2
 80197e2:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80197e4:	4b19      	ldr	r3, [pc, #100]	; (801984c <_tx_timer_system_activate+0xc0>)
 80197e6:	681a      	ldr	r2, [r3, #0]
 80197e8:	693b      	ldr	r3, [r7, #16]
 80197ea:	009b      	lsls	r3, r3, #2
 80197ec:	4413      	add	r3, r2
 80197ee:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80197f0:	69fb      	ldr	r3, [r7, #28]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d109      	bne.n	801980c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	687a      	ldr	r2, [r7, #4]
 80197fc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	687a      	ldr	r2, [r7, #4]
 8019802:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8019804:	69fb      	ldr	r3, [r7, #28]
 8019806:	687a      	ldr	r2, [r7, #4]
 8019808:	601a      	str	r2, [r3, #0]
 801980a:	e011      	b.n	8019830 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 801980c:	69fb      	ldr	r3, [r7, #28]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	695b      	ldr	r3, [r3, #20]
 8019816:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8019818:	68bb      	ldr	r3, [r7, #8]
 801981a:	687a      	ldr	r2, [r7, #4]
 801981c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	687a      	ldr	r2, [r7, #4]
 8019822:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	68fa      	ldr	r2, [r7, #12]
 8019828:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	68ba      	ldr	r2, [r7, #8]
 801982e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	69fa      	ldr	r2, [r7, #28]
 8019834:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8019836:	bf00      	nop
 8019838:	3724      	adds	r7, #36	; 0x24
 801983a:	46bd      	mov	sp, r7
 801983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019840:	4770      	bx	lr
 8019842:	bf00      	nop
 8019844:	240009a8 	.word	0x240009a8
 8019848:	240009a4 	.word	0x240009a4
 801984c:	240009a0 	.word	0x240009a0

08019850 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8019850:	b480      	push	{r7}
 8019852:	b087      	sub	sp, #28
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	699b      	ldr	r3, [r3, #24]
 801985c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801985e:	697b      	ldr	r3, [r7, #20]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d026      	beq.n	80198b2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	691b      	ldr	r3, [r3, #16]
 8019868:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801986a:	687a      	ldr	r2, [r7, #4]
 801986c:	693b      	ldr	r3, [r7, #16]
 801986e:	429a      	cmp	r2, r3
 8019870:	d108      	bne.n	8019884 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8019872:	697b      	ldr	r3, [r7, #20]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	687a      	ldr	r2, [r7, #4]
 8019878:	429a      	cmp	r2, r3
 801987a:	d117      	bne.n	80198ac <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	2200      	movs	r2, #0
 8019880:	601a      	str	r2, [r3, #0]
 8019882:	e013      	b.n	80198ac <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	695b      	ldr	r3, [r3, #20]
 8019888:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801988a:	693b      	ldr	r3, [r7, #16]
 801988c:	68fa      	ldr	r2, [r7, #12]
 801988e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	693a      	ldr	r2, [r7, #16]
 8019894:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8019896:	697b      	ldr	r3, [r7, #20]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	687a      	ldr	r2, [r7, #4]
 801989c:	429a      	cmp	r2, r3
 801989e:	d105      	bne.n	80198ac <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80198a0:	693b      	ldr	r3, [r7, #16]
 80198a2:	697a      	ldr	r2, [r7, #20]
 80198a4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80198a6:	697b      	ldr	r3, [r7, #20]
 80198a8:	693a      	ldr	r2, [r7, #16]
 80198aa:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	2200      	movs	r2, #0
 80198b0:	619a      	str	r2, [r3, #24]
    }
}
 80198b2:	bf00      	nop
 80198b4:	371c      	adds	r7, #28
 80198b6:	46bd      	mov	sp, r7
 80198b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198bc:	4770      	bx	lr
	...

080198c0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b098      	sub	sp, #96	; 0x60
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80198c8:	2300      	movs	r3, #0
 80198ca:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	4a73      	ldr	r2, [pc, #460]	; (8019a9c <_tx_timer_thread_entry+0x1dc>)
 80198d0:	4293      	cmp	r3, r2
 80198d2:	f040 80de 	bne.w	8019a92 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80198d6:	f3ef 8310 	mrs	r3, PRIMASK
 80198da:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80198dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80198de:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80198e0:	b672      	cpsid	i
    return(int_posture);
 80198e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80198e4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80198e6:	4b6e      	ldr	r3, [pc, #440]	; (8019aa0 <_tx_timer_thread_entry+0x1e0>)
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d003      	beq.n	80198fc <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	f107 020c 	add.w	r2, r7, #12
 80198fa:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80198fc:	4b68      	ldr	r3, [pc, #416]	; (8019aa0 <_tx_timer_thread_entry+0x1e0>)
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	2200      	movs	r2, #0
 8019902:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8019904:	4b66      	ldr	r3, [pc, #408]	; (8019aa0 <_tx_timer_thread_entry+0x1e0>)
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	3304      	adds	r3, #4
 801990a:	4a65      	ldr	r2, [pc, #404]	; (8019aa0 <_tx_timer_thread_entry+0x1e0>)
 801990c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801990e:	4b64      	ldr	r3, [pc, #400]	; (8019aa0 <_tx_timer_thread_entry+0x1e0>)
 8019910:	681a      	ldr	r2, [r3, #0]
 8019912:	4b64      	ldr	r3, [pc, #400]	; (8019aa4 <_tx_timer_thread_entry+0x1e4>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	429a      	cmp	r2, r3
 8019918:	d103      	bne.n	8019922 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 801991a:	4b63      	ldr	r3, [pc, #396]	; (8019aa8 <_tx_timer_thread_entry+0x1e8>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	4a60      	ldr	r2, [pc, #384]	; (8019aa0 <_tx_timer_thread_entry+0x1e0>)
 8019920:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8019922:	4b62      	ldr	r3, [pc, #392]	; (8019aac <_tx_timer_thread_entry+0x1ec>)
 8019924:	2200      	movs	r2, #0
 8019926:	601a      	str	r2, [r3, #0]
 8019928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801992a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801992e:	f383 8810 	msr	PRIMASK, r3
}
 8019932:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019934:	f3ef 8310 	mrs	r3, PRIMASK
 8019938:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801993c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801993e:	b672      	cpsid	i
    return(int_posture);
 8019940:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8019942:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8019944:	e07f      	b.n	8019a46 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	691b      	ldr	r3, [r3, #16]
 801994e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8019950:	2300      	movs	r3, #0
 8019952:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8019954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019958:	429a      	cmp	r2, r3
 801995a:	d102      	bne.n	8019962 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801995c:	2300      	movs	r3, #0
 801995e:	60fb      	str	r3, [r7, #12]
 8019960:	e00e      	b.n	8019980 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8019962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019964:	695b      	ldr	r3, [r3, #20]
 8019966:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8019968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801996a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801996c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801996e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019972:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8019974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019976:	f107 020c 	add.w	r2, r7, #12
 801997a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801997c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801997e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8019980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	2b20      	cmp	r3, #32
 8019986:	d911      	bls.n	80199ac <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8019988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8019990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019992:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8019994:	2300      	movs	r3, #0
 8019996:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8019998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801999a:	f107 0208 	add.w	r2, r7, #8
 801999e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80199a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80199a4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80199a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199a8:	60bb      	str	r3, [r7, #8]
 80199aa:	e01a      	b.n	80199e2 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80199ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199ae:	689b      	ldr	r3, [r3, #8]
 80199b0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80199b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199b4:	68db      	ldr	r3, [r3, #12]
 80199b6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80199b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199ba:	685a      	ldr	r2, [r3, #4]
 80199bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199be:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80199c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d009      	beq.n	80199dc <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80199c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199ca:	f107 0208 	add.w	r2, r7, #8
 80199ce:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80199d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80199d4:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80199d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199d8:	60bb      	str	r3, [r7, #8]
 80199da:	e002      	b.n	80199e2 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80199dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199de:	2200      	movs	r2, #0
 80199e0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80199e2:	4a33      	ldr	r2, [pc, #204]	; (8019ab0 <_tx_timer_thread_entry+0x1f0>)
 80199e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199e6:	6013      	str	r3, [r2, #0]
 80199e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80199ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ee:	f383 8810 	msr	PRIMASK, r3
}
 80199f2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80199f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d002      	beq.n	8019a00 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80199fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80199fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80199fe:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019a00:	f3ef 8310 	mrs	r3, PRIMASK
 8019a04:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8019a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8019a08:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8019a0a:	b672      	cpsid	i
    return(int_posture);
 8019a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8019a0e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8019a10:	4b27      	ldr	r3, [pc, #156]	; (8019ab0 <_tx_timer_thread_entry+0x1f0>)
 8019a12:	2200      	movs	r2, #0
 8019a14:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8019a16:	68bb      	ldr	r3, [r7, #8]
 8019a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019a1a:	429a      	cmp	r2, r3
 8019a1c:	d105      	bne.n	8019a2a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8019a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a20:	2200      	movs	r2, #0
 8019a22:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8019a24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019a26:	f7ff feb1 	bl	801978c <_tx_timer_system_activate>
 8019a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a2c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019a2e:	69bb      	ldr	r3, [r7, #24]
 8019a30:	f383 8810 	msr	PRIMASK, r3
}
 8019a34:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019a36:	f3ef 8310 	mrs	r3, PRIMASK
 8019a3a:	623b      	str	r3, [r7, #32]
    return(posture);
 8019a3c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8019a3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019a40:	b672      	cpsid	i
    return(int_posture);
 8019a42:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8019a44:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	f47f af7c 	bne.w	8019946 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8019a4e:	4b17      	ldr	r3, [pc, #92]	; (8019aac <_tx_timer_thread_entry+0x1ec>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d116      	bne.n	8019a84 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8019a56:	4b17      	ldr	r3, [pc, #92]	; (8019ab4 <_tx_timer_thread_entry+0x1f4>)
 8019a58:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8019a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a5c:	2203      	movs	r2, #3
 8019a5e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8019a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a62:	2201      	movs	r2, #1
 8019a64:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8019a66:	4b14      	ldr	r3, [pc, #80]	; (8019ab8 <_tx_timer_thread_entry+0x1f8>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	3301      	adds	r3, #1
 8019a6c:	4a12      	ldr	r2, [pc, #72]	; (8019ab8 <_tx_timer_thread_entry+0x1f8>)
 8019a6e:	6013      	str	r3, [r2, #0]
 8019a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a72:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	f383 8810 	msr	PRIMASK, r3
}
 8019a7a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8019a7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8019a7e:	f7ff fbdd 	bl	801923c <_tx_thread_system_suspend>
 8019a82:	e728      	b.n	80198d6 <_tx_timer_thread_entry+0x16>
 8019a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019a88:	693b      	ldr	r3, [r7, #16]
 8019a8a:	f383 8810 	msr	PRIMASK, r3
}
 8019a8e:	bf00      	nop
            TX_DISABLE
 8019a90:	e721      	b.n	80198d6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8019a92:	bf00      	nop
 8019a94:	3760      	adds	r7, #96	; 0x60
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bd80      	pop	{r7, pc}
 8019a9a:	bf00      	nop
 8019a9c:	4154494d 	.word	0x4154494d
 8019aa0:	240009a8 	.word	0x240009a8
 8019aa4:	240009a4 	.word	0x240009a4
 8019aa8:	240009a0 	.word	0x240009a0
 8019aac:	240009ac 	.word	0x240009ac
 8019ab0:	240009b8 	.word	0x240009b8
 8019ab4:	240009bc 	.word	0x240009bc
 8019ab8:	2400090c 	.word	0x2400090c

08019abc <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b08a      	sub	sp, #40	; 0x28
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	60f8      	str	r0, [r7, #12]
 8019ac4:	60b9      	str	r1, [r7, #8]
 8019ac6:	607a      	str	r2, [r7, #4]
 8019ac8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8019aca:	2300      	movs	r3, #0
 8019acc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d102      	bne.n	8019ada <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8019ad4:	2302      	movs	r3, #2
 8019ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8019ad8:	e029      	b.n	8019b2e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	4a2d      	ldr	r2, [pc, #180]	; (8019b94 <_txe_byte_allocate+0xd8>)
 8019ae0:	4293      	cmp	r3, r2
 8019ae2:	d002      	beq.n	8019aea <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8019ae4:	2302      	movs	r3, #2
 8019ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8019ae8:	e021      	b.n	8019b2e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8019aea:	68bb      	ldr	r3, [r7, #8]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d102      	bne.n	8019af6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8019af0:	2303      	movs	r3, #3
 8019af2:	627b      	str	r3, [r7, #36]	; 0x24
 8019af4:	e01b      	b.n	8019b2e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d102      	bne.n	8019b02 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8019afc:	2305      	movs	r3, #5
 8019afe:	627b      	str	r3, [r7, #36]	; 0x24
 8019b00:	e015      	b.n	8019b2e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	69db      	ldr	r3, [r3, #28]
 8019b06:	687a      	ldr	r2, [r7, #4]
 8019b08:	429a      	cmp	r2, r3
 8019b0a:	d902      	bls.n	8019b12 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8019b0c:	2305      	movs	r3, #5
 8019b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8019b10:	e00d      	b.n	8019b2e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8019b12:	683b      	ldr	r3, [r7, #0]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d00a      	beq.n	8019b2e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019b18:	f3ef 8305 	mrs	r3, IPSR
 8019b1c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8019b1e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8019b20:	4b1d      	ldr	r3, [pc, #116]	; (8019b98 <_txe_byte_allocate+0xdc>)
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	4313      	orrs	r3, r2
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d001      	beq.n	8019b2e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8019b2a:	2304      	movs	r3, #4
 8019b2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8019b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d108      	bne.n	8019b46 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8019b34:	4b19      	ldr	r3, [pc, #100]	; (8019b9c <_txe_byte_allocate+0xe0>)
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8019b3a:	6a3b      	ldr	r3, [r7, #32]
 8019b3c:	4a18      	ldr	r2, [pc, #96]	; (8019ba0 <_txe_byte_allocate+0xe4>)
 8019b3e:	4293      	cmp	r3, r2
 8019b40:	d101      	bne.n	8019b46 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8019b42:	2313      	movs	r3, #19
 8019b44:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8019b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d114      	bne.n	8019b76 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019b4c:	f3ef 8305 	mrs	r3, IPSR
 8019b50:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8019b52:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8019b54:	4b10      	ldr	r3, [pc, #64]	; (8019b98 <_txe_byte_allocate+0xdc>)
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	4313      	orrs	r3, r2
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d00b      	beq.n	8019b76 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019b5e:	f3ef 8305 	mrs	r3, IPSR
 8019b62:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8019b64:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8019b66:	4b0c      	ldr	r3, [pc, #48]	; (8019b98 <_txe_byte_allocate+0xdc>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	4313      	orrs	r3, r2
 8019b6c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8019b70:	d201      	bcs.n	8019b76 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8019b72:	2313      	movs	r3, #19
 8019b74:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8019b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d106      	bne.n	8019b8a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	687a      	ldr	r2, [r7, #4]
 8019b80:	68b9      	ldr	r1, [r7, #8]
 8019b82:	68f8      	ldr	r0, [r7, #12]
 8019b84:	f7fd fab6 	bl	80170f4 <_tx_byte_allocate>
 8019b88:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8019b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	3728      	adds	r7, #40	; 0x28
 8019b90:	46bd      	mov	sp, r7
 8019b92:	bd80      	pop	{r7, pc}
 8019b94:	42595445 	.word	0x42595445
 8019b98:	2400008c 	.word	0x2400008c
 8019b9c:	24000874 	.word	0x24000874
 8019ba0:	240009bc 	.word	0x240009bc

08019ba4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b092      	sub	sp, #72	; 0x48
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	60f8      	str	r0, [r7, #12]
 8019bac:	60b9      	str	r1, [r7, #8]
 8019bae:	607a      	str	r2, [r7, #4]
 8019bb0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d102      	bne.n	8019bc2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8019bbc:	2302      	movs	r3, #2
 8019bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8019bc0:	e075      	b.n	8019cae <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8019bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019bc4:	2b34      	cmp	r3, #52	; 0x34
 8019bc6:	d002      	beq.n	8019bce <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8019bc8:	2302      	movs	r3, #2
 8019bca:	647b      	str	r3, [r7, #68]	; 0x44
 8019bcc:	e06f      	b.n	8019cae <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019bce:	f3ef 8310 	mrs	r3, PRIMASK
 8019bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8019bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8019bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8019bd8:	b672      	cpsid	i
    return(int_posture);
 8019bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8019bdc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8019bde:	4b3b      	ldr	r3, [pc, #236]	; (8019ccc <_txe_byte_pool_create+0x128>)
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	3301      	adds	r3, #1
 8019be4:	4a39      	ldr	r2, [pc, #228]	; (8019ccc <_txe_byte_pool_create+0x128>)
 8019be6:	6013      	str	r3, [r2, #0]
 8019be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bea:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bee:	f383 8810 	msr	PRIMASK, r3
}
 8019bf2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8019bf4:	4b36      	ldr	r3, [pc, #216]	; (8019cd0 <_txe_byte_pool_create+0x12c>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8019bfe:	e009      	b.n	8019c14 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8019c00:	68fa      	ldr	r2, [r7, #12]
 8019c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c04:	429a      	cmp	r2, r3
 8019c06:	d00b      	beq.n	8019c20 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8019c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8019c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c10:	3301      	adds	r3, #1
 8019c12:	643b      	str	r3, [r7, #64]	; 0x40
 8019c14:	4b2f      	ldr	r3, [pc, #188]	; (8019cd4 <_txe_byte_pool_create+0x130>)
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019c1a:	429a      	cmp	r2, r3
 8019c1c:	d3f0      	bcc.n	8019c00 <_txe_byte_pool_create+0x5c>
 8019c1e:	e000      	b.n	8019c22 <_txe_byte_pool_create+0x7e>
                break;
 8019c20:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019c22:	f3ef 8310 	mrs	r3, PRIMASK
 8019c26:	623b      	str	r3, [r7, #32]
    return(posture);
 8019c28:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8019c2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019c2c:	b672      	cpsid	i
    return(int_posture);
 8019c2e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8019c30:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8019c32:	4b26      	ldr	r3, [pc, #152]	; (8019ccc <_txe_byte_pool_create+0x128>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	3b01      	subs	r3, #1
 8019c38:	4a24      	ldr	r2, [pc, #144]	; (8019ccc <_txe_byte_pool_create+0x128>)
 8019c3a:	6013      	str	r3, [r2, #0]
 8019c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c3e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	f383 8810 	msr	PRIMASK, r3
}
 8019c46:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8019c48:	f7ff f9be 	bl	8018fc8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8019c4c:	68fa      	ldr	r2, [r7, #12]
 8019c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c50:	429a      	cmp	r2, r3
 8019c52:	d102      	bne.n	8019c5a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8019c54:	2302      	movs	r3, #2
 8019c56:	647b      	str	r3, [r7, #68]	; 0x44
 8019c58:	e029      	b.n	8019cae <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d102      	bne.n	8019c66 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8019c60:	2303      	movs	r3, #3
 8019c62:	647b      	str	r3, [r7, #68]	; 0x44
 8019c64:	e023      	b.n	8019cae <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8019c66:	683b      	ldr	r3, [r7, #0]
 8019c68:	2b63      	cmp	r3, #99	; 0x63
 8019c6a:	d802      	bhi.n	8019c72 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8019c6c:	2305      	movs	r3, #5
 8019c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8019c70:	e01d      	b.n	8019cae <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8019c72:	4b19      	ldr	r3, [pc, #100]	; (8019cd8 <_txe_byte_pool_create+0x134>)
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8019c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c7a:	4a18      	ldr	r2, [pc, #96]	; (8019cdc <_txe_byte_pool_create+0x138>)
 8019c7c:	4293      	cmp	r3, r2
 8019c7e:	d101      	bne.n	8019c84 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8019c80:	2313      	movs	r3, #19
 8019c82:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019c84:	f3ef 8305 	mrs	r3, IPSR
 8019c88:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8019c8a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8019c8c:	4b14      	ldr	r3, [pc, #80]	; (8019ce0 <_txe_byte_pool_create+0x13c>)
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	4313      	orrs	r3, r2
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d00b      	beq.n	8019cae <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019c96:	f3ef 8305 	mrs	r3, IPSR
 8019c9a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8019c9c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8019c9e:	4b10      	ldr	r3, [pc, #64]	; (8019ce0 <_txe_byte_pool_create+0x13c>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	4313      	orrs	r3, r2
 8019ca4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8019ca8:	d201      	bcs.n	8019cae <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8019caa:	2313      	movs	r3, #19
 8019cac:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8019cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d106      	bne.n	8019cc2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	687a      	ldr	r2, [r7, #4]
 8019cb8:	68b9      	ldr	r1, [r7, #8]
 8019cba:	68f8      	ldr	r0, [r7, #12]
 8019cbc:	f7fd fb5c 	bl	8017378 <_tx_byte_pool_create>
 8019cc0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8019cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	3748      	adds	r7, #72	; 0x48
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	bd80      	pop	{r7, pc}
 8019ccc:	2400090c 	.word	0x2400090c
 8019cd0:	24000864 	.word	0x24000864
 8019cd4:	24000868 	.word	0x24000868
 8019cd8:	24000874 	.word	0x24000874
 8019cdc:	240009bc 	.word	0x240009bc
 8019ce0:	2400008c 	.word	0x2400008c

08019ce4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b09a      	sub	sp, #104	; 0x68
 8019ce8:	af06      	add	r7, sp, #24
 8019cea:	60f8      	str	r0, [r7, #12]
 8019cec:	60b9      	str	r1, [r7, #8]
 8019cee:	607a      	str	r2, [r7, #4]
 8019cf0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d102      	bne.n	8019d02 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8019cfc:	230e      	movs	r3, #14
 8019cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019d00:	e0bb      	b.n	8019e7a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8019d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019d04:	2bb0      	cmp	r3, #176	; 0xb0
 8019d06:	d002      	beq.n	8019d0e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8019d08:	230e      	movs	r3, #14
 8019d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019d0c:	e0b5      	b.n	8019e7a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8019d12:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8019d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8019d16:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8019d18:	b672      	cpsid	i
    return(int_posture);
 8019d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8019d1c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8019d1e:	4b64      	ldr	r3, [pc, #400]	; (8019eb0 <_txe_thread_create+0x1cc>)
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	3301      	adds	r3, #1
 8019d24:	4a62      	ldr	r2, [pc, #392]	; (8019eb0 <_txe_thread_create+0x1cc>)
 8019d26:	6013      	str	r3, [r2, #0]
 8019d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d2e:	f383 8810 	msr	PRIMASK, r3
}
 8019d32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8019d34:	2300      	movs	r3, #0
 8019d36:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8019d38:	4b5e      	ldr	r3, [pc, #376]	; (8019eb4 <_txe_thread_create+0x1d0>)
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8019d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d40:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8019d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d44:	3b01      	subs	r3, #1
 8019d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019d48:	4413      	add	r3, r2
 8019d4a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8019d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d4e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8019d50:	2300      	movs	r3, #0
 8019d52:	647b      	str	r3, [r7, #68]	; 0x44
 8019d54:	e02b      	b.n	8019dae <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8019d56:	68fa      	ldr	r2, [r7, #12]
 8019d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d5a:	429a      	cmp	r2, r3
 8019d5c:	d101      	bne.n	8019d62 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8019d5e:	2301      	movs	r3, #1
 8019d60:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8019d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d64:	2b01      	cmp	r3, #1
 8019d66:	d028      	beq.n	8019dba <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8019d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d6a:	68db      	ldr	r3, [r3, #12]
 8019d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019d6e:	429a      	cmp	r2, r3
 8019d70:	d308      	bcc.n	8019d84 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8019d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d74:	691b      	ldr	r3, [r3, #16]
 8019d76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019d78:	429a      	cmp	r2, r3
 8019d7a:	d203      	bcs.n	8019d84 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8019d80:	2301      	movs	r3, #1
 8019d82:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8019d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d86:	68db      	ldr	r3, [r3, #12]
 8019d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d308      	bcc.n	8019da0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8019d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d90:	691b      	ldr	r3, [r3, #16]
 8019d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d203      	bcs.n	8019da0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8019d98:	2300      	movs	r3, #0
 8019d9a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8019d9c:	2301      	movs	r3, #1
 8019d9e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8019da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019da6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8019da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019daa:	3301      	adds	r3, #1
 8019dac:	647b      	str	r3, [r7, #68]	; 0x44
 8019dae:	4b42      	ldr	r3, [pc, #264]	; (8019eb8 <_txe_thread_create+0x1d4>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019db4:	429a      	cmp	r2, r3
 8019db6:	d3ce      	bcc.n	8019d56 <_txe_thread_create+0x72>
 8019db8:	e000      	b.n	8019dbc <_txe_thread_create+0xd8>
                break;
 8019dba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8019dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8019dc0:	61fb      	str	r3, [r7, #28]
    return(posture);
 8019dc2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8019dc4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8019dc6:	b672      	cpsid	i
    return(int_posture);
 8019dc8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8019dca:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8019dcc:	4b38      	ldr	r3, [pc, #224]	; (8019eb0 <_txe_thread_create+0x1cc>)
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	3b01      	subs	r3, #1
 8019dd2:	4a37      	ldr	r2, [pc, #220]	; (8019eb0 <_txe_thread_create+0x1cc>)
 8019dd4:	6013      	str	r3, [r2, #0]
 8019dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019dd8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019dda:	6a3b      	ldr	r3, [r7, #32]
 8019ddc:	f383 8810 	msr	PRIMASK, r3
}
 8019de0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8019de2:	f7ff f8f1 	bl	8018fc8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8019de6:	68fa      	ldr	r2, [r7, #12]
 8019de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019dea:	429a      	cmp	r2, r3
 8019dec:	d102      	bne.n	8019df4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8019dee:	230e      	movs	r3, #14
 8019df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019df2:	e042      	b.n	8019e7a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8019df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d102      	bne.n	8019e00 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8019dfa:	2303      	movs	r3, #3
 8019dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019dfe:	e03c      	b.n	8019e7a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d102      	bne.n	8019e0c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8019e06:	2303      	movs	r3, #3
 8019e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019e0a:	e036      	b.n	8019e7a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8019e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019e0e:	2bc7      	cmp	r3, #199	; 0xc7
 8019e10:	d802      	bhi.n	8019e18 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8019e12:	2305      	movs	r3, #5
 8019e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019e16:	e030      	b.n	8019e7a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8019e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019e1a:	2b1f      	cmp	r3, #31
 8019e1c:	d902      	bls.n	8019e24 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8019e1e:	230f      	movs	r3, #15
 8019e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019e22:	e02a      	b.n	8019e7a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8019e24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019e28:	429a      	cmp	r2, r3
 8019e2a:	d902      	bls.n	8019e32 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8019e2c:	2318      	movs	r3, #24
 8019e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019e30:	e023      	b.n	8019e7a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8019e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e34:	2b01      	cmp	r3, #1
 8019e36:	d902      	bls.n	8019e3e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8019e38:	2310      	movs	r3, #16
 8019e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019e3c:	e01d      	b.n	8019e7a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8019e3e:	4b1f      	ldr	r3, [pc, #124]	; (8019ebc <_txe_thread_create+0x1d8>)
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8019e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e46:	4a1e      	ldr	r2, [pc, #120]	; (8019ec0 <_txe_thread_create+0x1dc>)
 8019e48:	4293      	cmp	r3, r2
 8019e4a:	d101      	bne.n	8019e50 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8019e4c:	2313      	movs	r3, #19
 8019e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019e50:	f3ef 8305 	mrs	r3, IPSR
 8019e54:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8019e56:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8019e58:	4b1a      	ldr	r3, [pc, #104]	; (8019ec4 <_txe_thread_create+0x1e0>)
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	4313      	orrs	r3, r2
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d00b      	beq.n	8019e7a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8019e62:	f3ef 8305 	mrs	r3, IPSR
 8019e66:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8019e68:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8019e6a:	4b16      	ldr	r3, [pc, #88]	; (8019ec4 <_txe_thread_create+0x1e0>)
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	4313      	orrs	r3, r2
 8019e70:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8019e74:	d201      	bcs.n	8019e7a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8019e76:	2313      	movs	r3, #19
 8019e78:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8019e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d112      	bne.n	8019ea6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8019e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e82:	9305      	str	r3, [sp, #20]
 8019e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019e86:	9304      	str	r3, [sp, #16]
 8019e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019e8a:	9303      	str	r3, [sp, #12]
 8019e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019e8e:	9302      	str	r3, [sp, #8]
 8019e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019e92:	9301      	str	r3, [sp, #4]
 8019e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e96:	9300      	str	r3, [sp, #0]
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	687a      	ldr	r2, [r7, #4]
 8019e9c:	68b9      	ldr	r1, [r7, #8]
 8019e9e:	68f8      	ldr	r0, [r7, #12]
 8019ea0:	f7fe fe02 	bl	8018aa8 <_tx_thread_create>
 8019ea4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8019ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3750      	adds	r7, #80	; 0x50
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}
 8019eb0:	2400090c 	.word	0x2400090c
 8019eb4:	2400087c 	.word	0x2400087c
 8019eb8:	24000880 	.word	0x24000880
 8019ebc:	24000874 	.word	0x24000874
 8019ec0:	240009bc 	.word	0x240009bc
 8019ec4:	2400008c 	.word	0x2400008c

08019ec8 <printIPv6>:

/* Private function prototypes -----------------------------------------------*/
static VOID nx_app_thread_entry (ULONG thread_input);
/* USER CODE BEGIN PFP */
void printIPv6(NXD_ADDRESS ipv6)
{
 8019ec8:	b084      	sub	sp, #16
 8019eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ecc:	b087      	sub	sp, #28
 8019ece:	af06      	add	r7, sp, #24
 8019ed0:	f107 0418 	add.w	r4, r7, #24
 8019ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
			(unsigned int)ipv6.nxd_ip_address.v6[0] >> 16,
 8019ed8:	69fb      	ldr	r3, [r7, #28]
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
 8019eda:	0c1d      	lsrs	r5, r3, #16
			(unsigned int)ipv6.nxd_ip_address.v6[0] & 0xFFFF,
 8019edc:	69fb      	ldr	r3, [r7, #28]
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
 8019ede:	b29e      	uxth	r6, r3
			(unsigned int)ipv6.nxd_ip_address.v6[1] >> 16,
 8019ee0:	6a3b      	ldr	r3, [r7, #32]
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
 8019ee2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
			(unsigned int)ipv6.nxd_ip_address.v6[1] & 0xFFFF,
 8019ee6:	6a3b      	ldr	r3, [r7, #32]
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
 8019ee8:	b29b      	uxth	r3, r3
			(unsigned int)ipv6.nxd_ip_address.v6[2] >> 16,
 8019eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
 8019eec:	0c12      	lsrs	r2, r2, #16
			(unsigned int)ipv6.nxd_ip_address.v6[2] & 0xFFFF,
 8019eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
 8019ef0:	b289      	uxth	r1, r1
			(unsigned int)ipv6.nxd_ip_address.v6[3] >> 16,
 8019ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
 8019ef4:	0c00      	lsrs	r0, r0, #16
			(unsigned int)ipv6.nxd_ip_address.v6[3] & 0xFFFF
 8019ef6:	6abc      	ldr	r4, [r7, #40]	; 0x28
	printf("Device IPv6 Address: %x:%x:%x:%x:%x:%x:%x:%x\n",
 8019ef8:	b2a4      	uxth	r4, r4
 8019efa:	9404      	str	r4, [sp, #16]
 8019efc:	9003      	str	r0, [sp, #12]
 8019efe:	9102      	str	r1, [sp, #8]
 8019f00:	9201      	str	r2, [sp, #4]
 8019f02:	9300      	str	r3, [sp, #0]
 8019f04:	4663      	mov	r3, ip
 8019f06:	4632      	mov	r2, r6
 8019f08:	4629      	mov	r1, r5
 8019f0a:	4805      	ldr	r0, [pc, #20]	; (8019f20 <printIPv6+0x58>)
 8019f0c:	f000 fa12 	bl	801a334 <iprintf>
	);
}
 8019f10:	bf00      	nop
 8019f12:	3704      	adds	r7, #4
 8019f14:	46bd      	mov	sp, r7
 8019f16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019f1a:	b004      	add	sp, #16
 8019f1c:	4770      	bx	lr
 8019f1e:	bf00      	nop
 8019f20:	0801b5ec 	.word	0x0801b5ec

08019f24 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b08e      	sub	sp, #56	; 0x38
 8019f28:	af08      	add	r7, sp, #32
 8019f2a:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0 */

  /* Initialize the NetXDuo system. */
  nx_system_initialize();
 8019f34:	f7f6 fed6 	bl	8010ce4 <_nx_system_initialize>

    /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8019f38:	f107 010c 	add.w	r1, r7, #12
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	f643 6258 	movw	r2, #15960	; 0x3e58
 8019f42:	6938      	ldr	r0, [r7, #16]
 8019f44:	f7ff fdba 	bl	8019abc <_txe_byte_allocate>
 8019f48:	4603      	mov	r3, r0
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d001      	beq.n	8019f52 <MX_NetXDuo_Init+0x2e>
  {
    return TX_POOL_ERROR;
 8019f4e:	2302      	movs	r3, #2
 8019f50:	e0c2      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>
  }

  /* Create the Packet pool to be used for packet allocation,
   * If extra NX_PACKET are to be used the NX_APP_PACKET_POOL_SIZE should be increased
   */
  ret = nx_packet_pool_create(&NxAppPool, "NetXDuo App Pool", DEFAULT_PAYLOAD_SIZE, pointer, NX_APP_PACKET_POOL_SIZE);
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	223c      	movs	r2, #60	; 0x3c
 8019f56:	9201      	str	r2, [sp, #4]
 8019f58:	f643 6258 	movw	r2, #15960	; 0x3e58
 8019f5c:	9200      	str	r2, [sp, #0]
 8019f5e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8019f62:	495f      	ldr	r1, [pc, #380]	; (801a0e0 <MX_NetXDuo_Init+0x1bc>)
 8019f64:	485f      	ldr	r0, [pc, #380]	; (801a0e4 <MX_NetXDuo_Init+0x1c0>)
 8019f66:	f7fc fdff 	bl	8016b68 <_nxe_packet_pool_create>
 8019f6a:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 8019f6c:	697b      	ldr	r3, [r7, #20]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d001      	beq.n	8019f76 <MX_NetXDuo_Init+0x52>
  {
    return NX_POOL_ERROR;
 8019f72:	2306      	movs	r3, #6
 8019f74:	e0b0      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>
  }

    /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, Nx_IP_INSTANCE_THREAD_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8019f76:	f107 010c 	add.w	r1, r7, #12
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019f80:	6938      	ldr	r0, [r7, #16]
 8019f82:	f7ff fd9b 	bl	8019abc <_txe_byte_allocate>
 8019f86:	4603      	mov	r3, r0
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d001      	beq.n	8019f90 <MX_NetXDuo_Init+0x6c>
  {
    return TX_POOL_ERROR;
 8019f8c:	2302      	movs	r3, #2
 8019f8e:	e0a3      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>
  }

   /* Create the main NX_IP instance */
  ret = nx_ip_create(&NetXDuoEthIpInstance, "NetX Ip instance", NX_APP_DEFAULT_IP_ADDRESS, NX_APP_DEFAULT_NET_MASK, &NxAppPool, nx_stm32_eth_driver,
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	f640 62d4 	movw	r2, #3796	; 0xed4
 8019f96:	9205      	str	r2, [sp, #20]
 8019f98:	220a      	movs	r2, #10
 8019f9a:	9204      	str	r2, [sp, #16]
 8019f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019fa0:	9203      	str	r2, [sp, #12]
 8019fa2:	9302      	str	r3, [sp, #8]
 8019fa4:	4b50      	ldr	r3, [pc, #320]	; (801a0e8 <MX_NetXDuo_Init+0x1c4>)
 8019fa6:	9301      	str	r3, [sp, #4]
 8019fa8:	4b4e      	ldr	r3, [pc, #312]	; (801a0e4 <MX_NetXDuo_Init+0x1c0>)
 8019faa:	9300      	str	r3, [sp, #0]
 8019fac:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8019fb0:	4a4e      	ldr	r2, [pc, #312]	; (801a0ec <MX_NetXDuo_Init+0x1c8>)
 8019fb2:	494f      	ldr	r1, [pc, #316]	; (801a0f0 <MX_NetXDuo_Init+0x1cc>)
 8019fb4:	484f      	ldr	r0, [pc, #316]	; (801a0f4 <MX_NetXDuo_Init+0x1d0>)
 8019fb6:	f7fc fca5 	bl	8016904 <_nxe_ip_create>
 8019fba:	6178      	str	r0, [r7, #20]
                     pointer, Nx_IP_INSTANCE_THREAD_SIZE, NX_APP_INSTANCE_PRIORITY);

  if (ret != NX_SUCCESS)
 8019fbc:	697b      	ldr	r3, [r7, #20]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d001      	beq.n	8019fc6 <MX_NetXDuo_Init+0xa2>
  {
    return NX_NOT_SUCCESSFUL;
 8019fc2:	2343      	movs	r3, #67	; 0x43
 8019fc4:	e088      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>
  }

    /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_ARP_CACHE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8019fc6:	f107 010c 	add.w	r1, r7, #12
 8019fca:	2300      	movs	r3, #0
 8019fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019fd0:	6938      	ldr	r0, [r7, #16]
 8019fd2:	f7ff fd73 	bl	8019abc <_txe_byte_allocate>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d001      	beq.n	8019fe0 <MX_NetXDuo_Init+0xbc>
  {
    return TX_POOL_ERROR;
 8019fdc:	2302      	movs	r3, #2
 8019fde:	e07b      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>

  /* USER CODE BEGIN ARP_Protocol_Initialization */

  /* USER CODE END ARP_Protocol_Initialization */

  ret = nx_arp_enable(&NetXDuoEthIpInstance, (VOID *)pointer, DEFAULT_ARP_CACHE_SIZE);
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019fe6:	4619      	mov	r1, r3
 8019fe8:	4842      	ldr	r0, [pc, #264]	; (801a0f4 <MX_NetXDuo_Init+0x1d0>)
 8019fea:	f7fc fbbb 	bl	8016764 <_nxe_arp_enable>
 8019fee:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 8019ff0:	697b      	ldr	r3, [r7, #20]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d001      	beq.n	8019ffa <MX_NetXDuo_Init+0xd6>
  {
    return NX_NOT_SUCCESSFUL;
 8019ff6:	2343      	movs	r3, #67	; 0x43
 8019ff8:	e06e      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>

  /* USER CODE BEGIN ICMP_Protocol_Initialization */

  /* USER CODE END ICMP_Protocol_Initialization */

  ret = nx_icmp_enable(&NetXDuoEthIpInstance);
 8019ffa:	483e      	ldr	r0, [pc, #248]	; (801a0f4 <MX_NetXDuo_Init+0x1d0>)
 8019ffc:	f7fc fbfe 	bl	80167fc <_nxe_icmp_enable>
 801a000:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 801a002:	697b      	ldr	r3, [r7, #20]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d001      	beq.n	801a00c <MX_NetXDuo_Init+0xe8>
  {
    return NX_NOT_SUCCESSFUL;
 801a008:	2343      	movs	r3, #67	; 0x43
 801a00a:	e065      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>

  /* USER CODE BEGIN TCP_Protocol_Initialization */

  /* USER CODE END TCP_Protocol_Initialization */

  ret = nx_tcp_enable(&NetXDuoEthIpInstance);
 801a00c:	4839      	ldr	r0, [pc, #228]	; (801a0f4 <MX_NetXDuo_Init+0x1d0>)
 801a00e:	f7fc fee5 	bl	8016ddc <_nxe_tcp_enable>
 801a012:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 801a014:	697b      	ldr	r3, [r7, #20]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d001      	beq.n	801a01e <MX_NetXDuo_Init+0xfa>
  {
    return NX_NOT_SUCCESSFUL;
 801a01a:	2343      	movs	r3, #67	; 0x43
 801a01c:	e05c      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>

  /* USER CODE BEGIN UDP_Protocol_Initialization */

  /* USER CODE END UDP_Protocol_Initialization */

  ret = nx_udp_enable(&NetXDuoEthIpInstance);
 801a01e:	4835      	ldr	r0, [pc, #212]	; (801a0f4 <MX_NetXDuo_Init+0x1d0>)
 801a020:	f7fc ff14 	bl	8016e4c <_nxe_udp_enable>
 801a024:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d001      	beq.n	801a030 <MX_NetXDuo_Init+0x10c>
  {
    return NX_NOT_SUCCESSFUL;
 801a02c:	2343      	movs	r3, #67	; 0x43
 801a02e:	e053      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>
  }

   /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 801a030:	f107 010c 	add.w	r1, r7, #12
 801a034:	2300      	movs	r3, #0
 801a036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a03a:	6938      	ldr	r0, [r7, #16]
 801a03c:	f7ff fd3e 	bl	8019abc <_txe_byte_allocate>
 801a040:	4603      	mov	r3, r0
 801a042:	2b00      	cmp	r3, #0
 801a044:	d001      	beq.n	801a04a <MX_NetXDuo_Init+0x126>
  {
    return TX_POOL_ERROR;
 801a046:	2302      	movs	r3, #2
 801a048:	e046      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>
  }

  /* Create the main thread */
  ret = tx_thread_create(&NxAppThread, "NetXDuo App thread", nx_app_thread_entry , 0, pointer, NX_APP_THREAD_STACK_SIZE,
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	22b0      	movs	r2, #176	; 0xb0
 801a04e:	9206      	str	r2, [sp, #24]
 801a050:	2201      	movs	r2, #1
 801a052:	9205      	str	r2, [sp, #20]
 801a054:	2200      	movs	r2, #0
 801a056:	9204      	str	r2, [sp, #16]
 801a058:	220a      	movs	r2, #10
 801a05a:	9203      	str	r2, [sp, #12]
 801a05c:	220a      	movs	r2, #10
 801a05e:	9202      	str	r2, [sp, #8]
 801a060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a064:	9201      	str	r2, [sp, #4]
 801a066:	9300      	str	r3, [sp, #0]
 801a068:	2300      	movs	r3, #0
 801a06a:	4a23      	ldr	r2, [pc, #140]	; (801a0f8 <MX_NetXDuo_Init+0x1d4>)
 801a06c:	4923      	ldr	r1, [pc, #140]	; (801a0fc <MX_NetXDuo_Init+0x1d8>)
 801a06e:	4824      	ldr	r0, [pc, #144]	; (801a100 <MX_NetXDuo_Init+0x1dc>)
 801a070:	f7ff fe38 	bl	8019ce4 <_txe_thread_create>
 801a074:	6178      	str	r0, [r7, #20]
                         NX_APP_THREAD_PRIORITY, NX_APP_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 801a076:	697b      	ldr	r3, [r7, #20]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d001      	beq.n	801a080 <MX_NetXDuo_Init+0x15c>
  {
    return TX_THREAD_ERROR;
 801a07c:	230e      	movs	r3, #14
 801a07e:	e02b      	b.n	801a0d8 <MX_NetXDuo_Init+0x1b4>

  /* Assume ip has been created and IPv4 services (such as ARP,
       ICMP, have been enabled before doing IPv6 init */

    /* Enable IPv6 */
    ret = nxd_ipv6_enable(&NetXDuoEthIpInstance);
 801a080:	481c      	ldr	r0, [pc, #112]	; (801a0f4 <MX_NetXDuo_Init+0x1d0>)
 801a082:	f7fc fb35 	bl	80166f0 <_nxde_ipv6_enable>
 801a086:	6178      	str	r0, [r7, #20]

    if(ret != NX_SUCCESS)
 801a088:	697b      	ldr	r3, [r7, #20]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d001      	beq.n	801a092 <MX_NetXDuo_Init+0x16e>
    {
        /* nxd_ipv6_enable failed. */
    	Error_Handler();
 801a08e:	f7e6 fec3 	bl	8000e18 <Error_Handler>
    /* Configure the IPv6 address */

    /*
     * This IPv6 address is specific to my routers available IPv6 subnet addresses
     */
    ipv6_address.nxd_ip_version = NX_IP_VERSION_V6;
 801a092:	4b1c      	ldr	r3, [pc, #112]	; (801a104 <MX_NetXDuo_Init+0x1e0>)
 801a094:	2206      	movs	r2, #6
 801a096:	601a      	str	r2, [r3, #0]
    ipv6_address.nxd_ip_address.v6[0] = 0x26001702;
 801a098:	4b1a      	ldr	r3, [pc, #104]	; (801a104 <MX_NetXDuo_Init+0x1e0>)
 801a09a:	4a1b      	ldr	r2, [pc, #108]	; (801a108 <MX_NetXDuo_Init+0x1e4>)
 801a09c:	605a      	str	r2, [r3, #4]
    ipv6_address.nxd_ip_address.v6[1] = 0x4eb29780;
 801a09e:	4b19      	ldr	r3, [pc, #100]	; (801a104 <MX_NetXDuo_Init+0x1e0>)
 801a0a0:	4a1a      	ldr	r2, [pc, #104]	; (801a10c <MX_NetXDuo_Init+0x1e8>)
 801a0a2:	609a      	str	r2, [r3, #8]
    ipv6_address.nxd_ip_address.v6[2] = 0x00000000;
 801a0a4:	4b17      	ldr	r3, [pc, #92]	; (801a104 <MX_NetXDuo_Init+0x1e0>)
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	60da      	str	r2, [r3, #12]
    ipv6_address.nxd_ip_address.v6[3] = 0x0000ABCD;
 801a0aa:	4b16      	ldr	r3, [pc, #88]	; (801a104 <MX_NetXDuo_Init+0x1e0>)
 801a0ac:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 801a0b0:	611a      	str	r2, [r3, #16]
    /* Configure global address of the primary interface. */
    ret = nxd_ipv6_address_set(&NetXDuoEthIpInstance, 0,
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	9300      	str	r3, [sp, #0]
 801a0b6:	2340      	movs	r3, #64	; 0x40
 801a0b8:	4a12      	ldr	r2, [pc, #72]	; (801a104 <MX_NetXDuo_Init+0x1e0>)
 801a0ba:	2100      	movs	r1, #0
 801a0bc:	480d      	ldr	r0, [pc, #52]	; (801a0f4 <MX_NetXDuo_Init+0x1d0>)
 801a0be:	f7fc faab 	bl	8016618 <_nxde_ipv6_address_set>
 801a0c2:	6178      	str	r0, [r7, #20]
                                  &ipv6_address, 64, NX_NULL);

    /* Enable ICMPv6 */
    ret = nxd_icmp_enable(&NetXDuoEthIpInstance);
 801a0c4:	480b      	ldr	r0, [pc, #44]	; (801a0f4 <MX_NetXDuo_Init+0x1d0>)
 801a0c6:	f7fc fa1b 	bl	8016500 <_nxde_icmp_enable>
 801a0ca:	6178      	str	r0, [r7, #20]
    if(ret != NX_SUCCESS)
 801a0cc:	697b      	ldr	r3, [r7, #20]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d001      	beq.n	801a0d6 <MX_NetXDuo_Init+0x1b2>
    {
        /* nxd_icmp_enable failed. */
    	Error_Handler();
 801a0d2:	f7e6 fea1 	bl	8000e18 <Error_Handler>
    }

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 801a0d6:	697b      	ldr	r3, [r7, #20]
}
 801a0d8:	4618      	mov	r0, r3
 801a0da:	3718      	adds	r7, #24
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd80      	pop	{r7, pc}
 801a0e0:	0801b61c 	.word	0x0801b61c
 801a0e4:	24000f2c 	.word	0x24000f2c
 801a0e8:	08008085 	.word	0x08008085
 801a0ec:	c0a8016f 	.word	0xc0a8016f
 801a0f0:	0801b630 	.word	0x0801b630
 801a0f4:	24000f68 	.word	0x24000f68
 801a0f8:	0801a111 	.word	0x0801a111
 801a0fc:	0801b644 	.word	0x0801b644
 801a100:	24000e7c 	.word	0x24000e7c
 801a104:	24001ebc 	.word	0x24001ebc
 801a108:	26001702 	.word	0x26001702
 801a10c:	4eb29780 	.word	0x4eb29780

0801a110 <nx_app_thread_entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID nx_app_thread_entry (ULONG thread_input)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 801a116:	af04      	add	r7, sp, #16
 801a118:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801a11c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801a120:	6018      	str	r0, [r3, #0]
	NXD_ADDRESS device_address;

	/*
	 * Print IPv4
	 */
	ret = nx_ip_address_get(&NetXDuoEthIpInstance, &IpAddress, &NetMask);
 801a122:	4a47      	ldr	r2, [pc, #284]	; (801a240 <nx_app_thread_entry+0x130>)
 801a124:	4947      	ldr	r1, [pc, #284]	; (801a244 <nx_app_thread_entry+0x134>)
 801a126:	4848      	ldr	r0, [pc, #288]	; (801a248 <nx_app_thread_entry+0x138>)
 801a128:	f7fc fba8 	bl	801687c <_nxe_ip_address_get>
 801a12c:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	if (ret != TX_SUCCESS)
 801a130:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a134:	2b00      	cmp	r3, #0
 801a136:	d002      	beq.n	801a13e <nx_app_thread_entry+0x2e>
	{
	Error_Handler();
 801a138:	f7e6 fe6e 	bl	8000e18 <Error_Handler>
 801a13c:	e012      	b.n	801a164 <nx_app_thread_entry+0x54>
	}
	else
	{
		PRINT_IP_ADDRESS(IpAddress);
 801a13e:	4b41      	ldr	r3, [pc, #260]	; (801a244 <nx_app_thread_entry+0x134>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	0e19      	lsrs	r1, r3, #24
 801a144:	4b3f      	ldr	r3, [pc, #252]	; (801a244 <nx_app_thread_entry+0x134>)
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	0c1b      	lsrs	r3, r3, #16
 801a14a:	b2da      	uxtb	r2, r3
 801a14c:	4b3d      	ldr	r3, [pc, #244]	; (801a244 <nx_app_thread_entry+0x134>)
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	0a1b      	lsrs	r3, r3, #8
 801a152:	b2d8      	uxtb	r0, r3
 801a154:	4b3b      	ldr	r3, [pc, #236]	; (801a244 <nx_app_thread_entry+0x134>)
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	b2db      	uxtb	r3, r3
 801a15a:	9300      	str	r3, [sp, #0]
 801a15c:	4603      	mov	r3, r0
 801a15e:	483b      	ldr	r0, [pc, #236]	; (801a24c <nx_app_thread_entry+0x13c>)
 801a160:	f000 f8e8 	bl	801a334 <iprintf>


	/*
	 * Print IPv6
	 */
	nxd_ipv6_address_get( &NetXDuoEthIpInstance, 0, &device_address, &ipv6_prefix, &ipv6_interface_index );
 801a164:	f507 7109 	add.w	r1, r7, #548	; 0x224
 801a168:	f107 0208 	add.w	r2, r7, #8
 801a16c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801a170:	9300      	str	r3, [sp, #0]
 801a172:	460b      	mov	r3, r1
 801a174:	2100      	movs	r1, #0
 801a176:	4834      	ldr	r0, [pc, #208]	; (801a248 <nx_app_thread_entry+0x138>)
 801a178:	f7fc f9fc 	bl	8016574 <_nxde_ipv6_address_get>
	printIPv6(device_address);
 801a17c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801a180:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801a184:	691a      	ldr	r2, [r3, #16]
 801a186:	9200      	str	r2, [sp, #0]
 801a188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a18a:	f7ff fe9d 	bl	8019ec8 <printIPv6>

	/*
	 * Create a UDP Socket and bind to it
	 */

	ret = nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, 512);
 801a18e:	2378      	movs	r3, #120	; 0x78
 801a190:	9303      	str	r3, [sp, #12]
 801a192:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a196:	9302      	str	r3, [sp, #8]
 801a198:	2380      	movs	r3, #128	; 0x80
 801a19a:	9301      	str	r3, [sp, #4]
 801a19c:	2300      	movs	r3, #0
 801a19e:	9300      	str	r3, [sp, #0]
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	4a2b      	ldr	r2, [pc, #172]	; (801a250 <nx_app_thread_entry+0x140>)
 801a1a4:	492b      	ldr	r1, [pc, #172]	; (801a254 <nx_app_thread_entry+0x144>)
 801a1a6:	4828      	ldr	r0, [pc, #160]	; (801a248 <nx_app_thread_entry+0x138>)
 801a1a8:	f7fc fece 	bl	8016f48 <_nxe_udp_socket_create>
 801a1ac:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	if (ret != NX_SUCCESS)
 801a1b0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d001      	beq.n	801a1bc <nx_app_thread_entry+0xac>
	{
		Error_Handler();
 801a1b8:	f7e6 fe2e 	bl	8000e18 <Error_Handler>
	}

  /* Bind to port 6000 */
	ret = nx_udp_socket_bind(&UDPSocket, 6000, TX_WAIT_FOREVER);
 801a1bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a1c0:	f241 7170 	movw	r1, #6000	; 0x1770
 801a1c4:	4823      	ldr	r0, [pc, #140]	; (801a254 <nx_app_thread_entry+0x144>)
 801a1c6:	f7fc fe79 	bl	8016ebc <_nxe_udp_socket_bind>
 801a1ca:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	if (ret != NX_SUCCESS)
 801a1ce:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d002      	beq.n	801a1dc <nx_app_thread_entry+0xcc>
	{
		Error_Handler();
 801a1d6:	f7e6 fe1f 	bl	8000e18 <Error_Handler>
 801a1da:	e002      	b.n	801a1e2 <nx_app_thread_entry+0xd2>
	}
	else
	{
		printf("UDP Server listening on PORT 6000.. \n");
 801a1dc:	481e      	ldr	r0, [pc, #120]	; (801a258 <nx_app_thread_entry+0x148>)
 801a1de:	f000 f945 	bl	801a46c <puts>
	 * Main Task Loop
	 * Waits 1 second (100 centiseconds) for each UDP packet. If received, print out message
	 */
	while (1)
	{
	    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 801a1e2:	f107 0320 	add.w	r3, r7, #32
 801a1e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a1ea:	2100      	movs	r1, #0
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	f000 f899 	bl	801a324 <memset>

	    /* wait for data for 1 sec */
	    ret = nx_udp_socket_receive(&UDPSocket, &data_packet, 100);
 801a1f2:	f107 031c 	add.w	r3, r7, #28
 801a1f6:	2264      	movs	r2, #100	; 0x64
 801a1f8:	4619      	mov	r1, r3
 801a1fa:	4816      	ldr	r0, [pc, #88]	; (801a254 <nx_app_thread_entry+0x144>)
 801a1fc:	f7fc ff38 	bl	8017070 <_nxe_udp_socket_receive>
 801a200:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c

	    if (ret == NX_SUCCESS)
 801a204:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d1ea      	bne.n	801a1e2 <nx_app_thread_entry+0xd2>
	    {
	    	nx_packet_data_retrieve(data_packet, data_buffer, &bytes_read);
 801a20c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801a210:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801a21a:	f107 0120 	add.w	r1, r7, #32
 801a21e:	4618      	mov	r0, r3
 801a220:	f7fc fc86 	bl	8016b30 <_nxe_packet_data_retrieve>

        /* Print our received data on UART com port*/
			  HAL_UART_Transmit(&huart3, (uint8_t *)data_buffer, bytes_read, 0xFFFF);
 801a224:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a228:	b29a      	uxth	r2, r3
 801a22a:	f107 0120 	add.w	r1, r7, #32
 801a22e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a232:	480a      	ldr	r0, [pc, #40]	; (801a25c <nx_app_thread_entry+0x14c>)
 801a234:	f7ec fd9a 	bl	8006d6c <HAL_UART_Transmit>
			  printf("\n");	// new line to make print out more readable
 801a238:	200a      	movs	r0, #10
 801a23a:	f000 f893 	bl	801a364 <putchar>
	    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 801a23e:	e7d0      	b.n	801a1e2 <nx_app_thread_entry+0xd2>
 801a240:	24001eb8 	.word	0x24001eb8
 801a244:	24001eb4 	.word	0x24001eb4
 801a248:	24000f68 	.word	0x24000f68
 801a24c:	0801b658 	.word	0x0801b658
 801a250:	0801b680 	.word	0x0801b680
 801a254:	24001e3c 	.word	0x24001e3c
 801a258:	0801b694 	.word	0x0801b694
 801a25c:	24000660 	.word	0x24000660

0801a260 <__errno>:
 801a260:	4b01      	ldr	r3, [pc, #4]	; (801a268 <__errno+0x8>)
 801a262:	6818      	ldr	r0, [r3, #0]
 801a264:	4770      	bx	lr
 801a266:	bf00      	nop
 801a268:	24000090 	.word	0x24000090

0801a26c <__libc_init_array>:
 801a26c:	b570      	push	{r4, r5, r6, lr}
 801a26e:	4d0d      	ldr	r5, [pc, #52]	; (801a2a4 <__libc_init_array+0x38>)
 801a270:	4c0d      	ldr	r4, [pc, #52]	; (801a2a8 <__libc_init_array+0x3c>)
 801a272:	1b64      	subs	r4, r4, r5
 801a274:	10a4      	asrs	r4, r4, #2
 801a276:	2600      	movs	r6, #0
 801a278:	42a6      	cmp	r6, r4
 801a27a:	d109      	bne.n	801a290 <__libc_init_array+0x24>
 801a27c:	4d0b      	ldr	r5, [pc, #44]	; (801a2ac <__libc_init_array+0x40>)
 801a27e:	4c0c      	ldr	r4, [pc, #48]	; (801a2b0 <__libc_init_array+0x44>)
 801a280:	f001 f97c 	bl	801b57c <_init>
 801a284:	1b64      	subs	r4, r4, r5
 801a286:	10a4      	asrs	r4, r4, #2
 801a288:	2600      	movs	r6, #0
 801a28a:	42a6      	cmp	r6, r4
 801a28c:	d105      	bne.n	801a29a <__libc_init_array+0x2e>
 801a28e:	bd70      	pop	{r4, r5, r6, pc}
 801a290:	f855 3b04 	ldr.w	r3, [r5], #4
 801a294:	4798      	blx	r3
 801a296:	3601      	adds	r6, #1
 801a298:	e7ee      	b.n	801a278 <__libc_init_array+0xc>
 801a29a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a29e:	4798      	blx	r3
 801a2a0:	3601      	adds	r6, #1
 801a2a2:	e7f2      	b.n	801a28a <__libc_init_array+0x1e>
 801a2a4:	0801b864 	.word	0x0801b864
 801a2a8:	0801b864 	.word	0x0801b864
 801a2ac:	0801b864 	.word	0x0801b864
 801a2b0:	0801b868 	.word	0x0801b868

0801a2b4 <memcmp>:
 801a2b4:	b510      	push	{r4, lr}
 801a2b6:	3901      	subs	r1, #1
 801a2b8:	4402      	add	r2, r0
 801a2ba:	4290      	cmp	r0, r2
 801a2bc:	d101      	bne.n	801a2c2 <memcmp+0xe>
 801a2be:	2000      	movs	r0, #0
 801a2c0:	e005      	b.n	801a2ce <memcmp+0x1a>
 801a2c2:	7803      	ldrb	r3, [r0, #0]
 801a2c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a2c8:	42a3      	cmp	r3, r4
 801a2ca:	d001      	beq.n	801a2d0 <memcmp+0x1c>
 801a2cc:	1b18      	subs	r0, r3, r4
 801a2ce:	bd10      	pop	{r4, pc}
 801a2d0:	3001      	adds	r0, #1
 801a2d2:	e7f2      	b.n	801a2ba <memcmp+0x6>

0801a2d4 <memcpy>:
 801a2d4:	440a      	add	r2, r1
 801a2d6:	4291      	cmp	r1, r2
 801a2d8:	f100 33ff 	add.w	r3, r0, #4294967295
 801a2dc:	d100      	bne.n	801a2e0 <memcpy+0xc>
 801a2de:	4770      	bx	lr
 801a2e0:	b510      	push	{r4, lr}
 801a2e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a2e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a2ea:	4291      	cmp	r1, r2
 801a2ec:	d1f9      	bne.n	801a2e2 <memcpy+0xe>
 801a2ee:	bd10      	pop	{r4, pc}

0801a2f0 <memmove>:
 801a2f0:	4288      	cmp	r0, r1
 801a2f2:	b510      	push	{r4, lr}
 801a2f4:	eb01 0402 	add.w	r4, r1, r2
 801a2f8:	d902      	bls.n	801a300 <memmove+0x10>
 801a2fa:	4284      	cmp	r4, r0
 801a2fc:	4623      	mov	r3, r4
 801a2fe:	d807      	bhi.n	801a310 <memmove+0x20>
 801a300:	1e43      	subs	r3, r0, #1
 801a302:	42a1      	cmp	r1, r4
 801a304:	d008      	beq.n	801a318 <memmove+0x28>
 801a306:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a30a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a30e:	e7f8      	b.n	801a302 <memmove+0x12>
 801a310:	4402      	add	r2, r0
 801a312:	4601      	mov	r1, r0
 801a314:	428a      	cmp	r2, r1
 801a316:	d100      	bne.n	801a31a <memmove+0x2a>
 801a318:	bd10      	pop	{r4, pc}
 801a31a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a31e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a322:	e7f7      	b.n	801a314 <memmove+0x24>

0801a324 <memset>:
 801a324:	4402      	add	r2, r0
 801a326:	4603      	mov	r3, r0
 801a328:	4293      	cmp	r3, r2
 801a32a:	d100      	bne.n	801a32e <memset+0xa>
 801a32c:	4770      	bx	lr
 801a32e:	f803 1b01 	strb.w	r1, [r3], #1
 801a332:	e7f9      	b.n	801a328 <memset+0x4>

0801a334 <iprintf>:
 801a334:	b40f      	push	{r0, r1, r2, r3}
 801a336:	4b0a      	ldr	r3, [pc, #40]	; (801a360 <iprintf+0x2c>)
 801a338:	b513      	push	{r0, r1, r4, lr}
 801a33a:	681c      	ldr	r4, [r3, #0]
 801a33c:	b124      	cbz	r4, 801a348 <iprintf+0x14>
 801a33e:	69a3      	ldr	r3, [r4, #24]
 801a340:	b913      	cbnz	r3, 801a348 <iprintf+0x14>
 801a342:	4620      	mov	r0, r4
 801a344:	f000 fad0 	bl	801a8e8 <__sinit>
 801a348:	ab05      	add	r3, sp, #20
 801a34a:	9a04      	ldr	r2, [sp, #16]
 801a34c:	68a1      	ldr	r1, [r4, #8]
 801a34e:	9301      	str	r3, [sp, #4]
 801a350:	4620      	mov	r0, r4
 801a352:	f000 fcf3 	bl	801ad3c <_vfiprintf_r>
 801a356:	b002      	add	sp, #8
 801a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a35c:	b004      	add	sp, #16
 801a35e:	4770      	bx	lr
 801a360:	24000090 	.word	0x24000090

0801a364 <putchar>:
 801a364:	4b09      	ldr	r3, [pc, #36]	; (801a38c <putchar+0x28>)
 801a366:	b513      	push	{r0, r1, r4, lr}
 801a368:	681c      	ldr	r4, [r3, #0]
 801a36a:	4601      	mov	r1, r0
 801a36c:	b134      	cbz	r4, 801a37c <putchar+0x18>
 801a36e:	69a3      	ldr	r3, [r4, #24]
 801a370:	b923      	cbnz	r3, 801a37c <putchar+0x18>
 801a372:	9001      	str	r0, [sp, #4]
 801a374:	4620      	mov	r0, r4
 801a376:	f000 fab7 	bl	801a8e8 <__sinit>
 801a37a:	9901      	ldr	r1, [sp, #4]
 801a37c:	68a2      	ldr	r2, [r4, #8]
 801a37e:	4620      	mov	r0, r4
 801a380:	b002      	add	sp, #8
 801a382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a386:	f000 bf9d 	b.w	801b2c4 <_putc_r>
 801a38a:	bf00      	nop
 801a38c:	24000090 	.word	0x24000090

0801a390 <_puts_r>:
 801a390:	b570      	push	{r4, r5, r6, lr}
 801a392:	460e      	mov	r6, r1
 801a394:	4605      	mov	r5, r0
 801a396:	b118      	cbz	r0, 801a3a0 <_puts_r+0x10>
 801a398:	6983      	ldr	r3, [r0, #24]
 801a39a:	b90b      	cbnz	r3, 801a3a0 <_puts_r+0x10>
 801a39c:	f000 faa4 	bl	801a8e8 <__sinit>
 801a3a0:	69ab      	ldr	r3, [r5, #24]
 801a3a2:	68ac      	ldr	r4, [r5, #8]
 801a3a4:	b913      	cbnz	r3, 801a3ac <_puts_r+0x1c>
 801a3a6:	4628      	mov	r0, r5
 801a3a8:	f000 fa9e 	bl	801a8e8 <__sinit>
 801a3ac:	4b2c      	ldr	r3, [pc, #176]	; (801a460 <_puts_r+0xd0>)
 801a3ae:	429c      	cmp	r4, r3
 801a3b0:	d120      	bne.n	801a3f4 <_puts_r+0x64>
 801a3b2:	686c      	ldr	r4, [r5, #4]
 801a3b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3b6:	07db      	lsls	r3, r3, #31
 801a3b8:	d405      	bmi.n	801a3c6 <_puts_r+0x36>
 801a3ba:	89a3      	ldrh	r3, [r4, #12]
 801a3bc:	0598      	lsls	r0, r3, #22
 801a3be:	d402      	bmi.n	801a3c6 <_puts_r+0x36>
 801a3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3c2:	f000 fb41 	bl	801aa48 <__retarget_lock_acquire_recursive>
 801a3c6:	89a3      	ldrh	r3, [r4, #12]
 801a3c8:	0719      	lsls	r1, r3, #28
 801a3ca:	d51d      	bpl.n	801a408 <_puts_r+0x78>
 801a3cc:	6923      	ldr	r3, [r4, #16]
 801a3ce:	b1db      	cbz	r3, 801a408 <_puts_r+0x78>
 801a3d0:	3e01      	subs	r6, #1
 801a3d2:	68a3      	ldr	r3, [r4, #8]
 801a3d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a3d8:	3b01      	subs	r3, #1
 801a3da:	60a3      	str	r3, [r4, #8]
 801a3dc:	bb39      	cbnz	r1, 801a42e <_puts_r+0x9e>
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	da38      	bge.n	801a454 <_puts_r+0xc4>
 801a3e2:	4622      	mov	r2, r4
 801a3e4:	210a      	movs	r1, #10
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	f000 f886 	bl	801a4f8 <__swbuf_r>
 801a3ec:	3001      	adds	r0, #1
 801a3ee:	d011      	beq.n	801a414 <_puts_r+0x84>
 801a3f0:	250a      	movs	r5, #10
 801a3f2:	e011      	b.n	801a418 <_puts_r+0x88>
 801a3f4:	4b1b      	ldr	r3, [pc, #108]	; (801a464 <_puts_r+0xd4>)
 801a3f6:	429c      	cmp	r4, r3
 801a3f8:	d101      	bne.n	801a3fe <_puts_r+0x6e>
 801a3fa:	68ac      	ldr	r4, [r5, #8]
 801a3fc:	e7da      	b.n	801a3b4 <_puts_r+0x24>
 801a3fe:	4b1a      	ldr	r3, [pc, #104]	; (801a468 <_puts_r+0xd8>)
 801a400:	429c      	cmp	r4, r3
 801a402:	bf08      	it	eq
 801a404:	68ec      	ldreq	r4, [r5, #12]
 801a406:	e7d5      	b.n	801a3b4 <_puts_r+0x24>
 801a408:	4621      	mov	r1, r4
 801a40a:	4628      	mov	r0, r5
 801a40c:	f000 f8c6 	bl	801a59c <__swsetup_r>
 801a410:	2800      	cmp	r0, #0
 801a412:	d0dd      	beq.n	801a3d0 <_puts_r+0x40>
 801a414:	f04f 35ff 	mov.w	r5, #4294967295
 801a418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a41a:	07da      	lsls	r2, r3, #31
 801a41c:	d405      	bmi.n	801a42a <_puts_r+0x9a>
 801a41e:	89a3      	ldrh	r3, [r4, #12]
 801a420:	059b      	lsls	r3, r3, #22
 801a422:	d402      	bmi.n	801a42a <_puts_r+0x9a>
 801a424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a426:	f000 fb10 	bl	801aa4a <__retarget_lock_release_recursive>
 801a42a:	4628      	mov	r0, r5
 801a42c:	bd70      	pop	{r4, r5, r6, pc}
 801a42e:	2b00      	cmp	r3, #0
 801a430:	da04      	bge.n	801a43c <_puts_r+0xac>
 801a432:	69a2      	ldr	r2, [r4, #24]
 801a434:	429a      	cmp	r2, r3
 801a436:	dc06      	bgt.n	801a446 <_puts_r+0xb6>
 801a438:	290a      	cmp	r1, #10
 801a43a:	d004      	beq.n	801a446 <_puts_r+0xb6>
 801a43c:	6823      	ldr	r3, [r4, #0]
 801a43e:	1c5a      	adds	r2, r3, #1
 801a440:	6022      	str	r2, [r4, #0]
 801a442:	7019      	strb	r1, [r3, #0]
 801a444:	e7c5      	b.n	801a3d2 <_puts_r+0x42>
 801a446:	4622      	mov	r2, r4
 801a448:	4628      	mov	r0, r5
 801a44a:	f000 f855 	bl	801a4f8 <__swbuf_r>
 801a44e:	3001      	adds	r0, #1
 801a450:	d1bf      	bne.n	801a3d2 <_puts_r+0x42>
 801a452:	e7df      	b.n	801a414 <_puts_r+0x84>
 801a454:	6823      	ldr	r3, [r4, #0]
 801a456:	250a      	movs	r5, #10
 801a458:	1c5a      	adds	r2, r3, #1
 801a45a:	6022      	str	r2, [r4, #0]
 801a45c:	701d      	strb	r5, [r3, #0]
 801a45e:	e7db      	b.n	801a418 <_puts_r+0x88>
 801a460:	0801b7e8 	.word	0x0801b7e8
 801a464:	0801b808 	.word	0x0801b808
 801a468:	0801b7c8 	.word	0x0801b7c8

0801a46c <puts>:
 801a46c:	4b02      	ldr	r3, [pc, #8]	; (801a478 <puts+0xc>)
 801a46e:	4601      	mov	r1, r0
 801a470:	6818      	ldr	r0, [r3, #0]
 801a472:	f7ff bf8d 	b.w	801a390 <_puts_r>
 801a476:	bf00      	nop
 801a478:	24000090 	.word	0x24000090

0801a47c <rand>:
 801a47c:	4b16      	ldr	r3, [pc, #88]	; (801a4d8 <rand+0x5c>)
 801a47e:	b510      	push	{r4, lr}
 801a480:	681c      	ldr	r4, [r3, #0]
 801a482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a484:	b9b3      	cbnz	r3, 801a4b4 <rand+0x38>
 801a486:	2018      	movs	r0, #24
 801a488:	f000 fb46 	bl	801ab18 <malloc>
 801a48c:	63a0      	str	r0, [r4, #56]	; 0x38
 801a48e:	b928      	cbnz	r0, 801a49c <rand+0x20>
 801a490:	4602      	mov	r2, r0
 801a492:	4b12      	ldr	r3, [pc, #72]	; (801a4dc <rand+0x60>)
 801a494:	4812      	ldr	r0, [pc, #72]	; (801a4e0 <rand+0x64>)
 801a496:	214e      	movs	r1, #78	; 0x4e
 801a498:	f000 f8ee 	bl	801a678 <__assert_func>
 801a49c:	4a11      	ldr	r2, [pc, #68]	; (801a4e4 <rand+0x68>)
 801a49e:	4b12      	ldr	r3, [pc, #72]	; (801a4e8 <rand+0x6c>)
 801a4a0:	e9c0 2300 	strd	r2, r3, [r0]
 801a4a4:	4b11      	ldr	r3, [pc, #68]	; (801a4ec <rand+0x70>)
 801a4a6:	6083      	str	r3, [r0, #8]
 801a4a8:	230b      	movs	r3, #11
 801a4aa:	8183      	strh	r3, [r0, #12]
 801a4ac:	2201      	movs	r2, #1
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a4b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801a4b6:	4a0e      	ldr	r2, [pc, #56]	; (801a4f0 <rand+0x74>)
 801a4b8:	6920      	ldr	r0, [r4, #16]
 801a4ba:	6963      	ldr	r3, [r4, #20]
 801a4bc:	490d      	ldr	r1, [pc, #52]	; (801a4f4 <rand+0x78>)
 801a4be:	4342      	muls	r2, r0
 801a4c0:	fb01 2203 	mla	r2, r1, r3, r2
 801a4c4:	fba0 0101 	umull	r0, r1, r0, r1
 801a4c8:	1c43      	adds	r3, r0, #1
 801a4ca:	eb42 0001 	adc.w	r0, r2, r1
 801a4ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801a4d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a4d6:	bd10      	pop	{r4, pc}
 801a4d8:	24000090 	.word	0x24000090
 801a4dc:	0801b718 	.word	0x0801b718
 801a4e0:	0801b72f 	.word	0x0801b72f
 801a4e4:	abcd330e 	.word	0xabcd330e
 801a4e8:	e66d1234 	.word	0xe66d1234
 801a4ec:	0005deec 	.word	0x0005deec
 801a4f0:	5851f42d 	.word	0x5851f42d
 801a4f4:	4c957f2d 	.word	0x4c957f2d

0801a4f8 <__swbuf_r>:
 801a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4fa:	460e      	mov	r6, r1
 801a4fc:	4614      	mov	r4, r2
 801a4fe:	4605      	mov	r5, r0
 801a500:	b118      	cbz	r0, 801a50a <__swbuf_r+0x12>
 801a502:	6983      	ldr	r3, [r0, #24]
 801a504:	b90b      	cbnz	r3, 801a50a <__swbuf_r+0x12>
 801a506:	f000 f9ef 	bl	801a8e8 <__sinit>
 801a50a:	4b21      	ldr	r3, [pc, #132]	; (801a590 <__swbuf_r+0x98>)
 801a50c:	429c      	cmp	r4, r3
 801a50e:	d12b      	bne.n	801a568 <__swbuf_r+0x70>
 801a510:	686c      	ldr	r4, [r5, #4]
 801a512:	69a3      	ldr	r3, [r4, #24]
 801a514:	60a3      	str	r3, [r4, #8]
 801a516:	89a3      	ldrh	r3, [r4, #12]
 801a518:	071a      	lsls	r2, r3, #28
 801a51a:	d52f      	bpl.n	801a57c <__swbuf_r+0x84>
 801a51c:	6923      	ldr	r3, [r4, #16]
 801a51e:	b36b      	cbz	r3, 801a57c <__swbuf_r+0x84>
 801a520:	6923      	ldr	r3, [r4, #16]
 801a522:	6820      	ldr	r0, [r4, #0]
 801a524:	1ac0      	subs	r0, r0, r3
 801a526:	6963      	ldr	r3, [r4, #20]
 801a528:	b2f6      	uxtb	r6, r6
 801a52a:	4283      	cmp	r3, r0
 801a52c:	4637      	mov	r7, r6
 801a52e:	dc04      	bgt.n	801a53a <__swbuf_r+0x42>
 801a530:	4621      	mov	r1, r4
 801a532:	4628      	mov	r0, r5
 801a534:	f000 f944 	bl	801a7c0 <_fflush_r>
 801a538:	bb30      	cbnz	r0, 801a588 <__swbuf_r+0x90>
 801a53a:	68a3      	ldr	r3, [r4, #8]
 801a53c:	3b01      	subs	r3, #1
 801a53e:	60a3      	str	r3, [r4, #8]
 801a540:	6823      	ldr	r3, [r4, #0]
 801a542:	1c5a      	adds	r2, r3, #1
 801a544:	6022      	str	r2, [r4, #0]
 801a546:	701e      	strb	r6, [r3, #0]
 801a548:	6963      	ldr	r3, [r4, #20]
 801a54a:	3001      	adds	r0, #1
 801a54c:	4283      	cmp	r3, r0
 801a54e:	d004      	beq.n	801a55a <__swbuf_r+0x62>
 801a550:	89a3      	ldrh	r3, [r4, #12]
 801a552:	07db      	lsls	r3, r3, #31
 801a554:	d506      	bpl.n	801a564 <__swbuf_r+0x6c>
 801a556:	2e0a      	cmp	r6, #10
 801a558:	d104      	bne.n	801a564 <__swbuf_r+0x6c>
 801a55a:	4621      	mov	r1, r4
 801a55c:	4628      	mov	r0, r5
 801a55e:	f000 f92f 	bl	801a7c0 <_fflush_r>
 801a562:	b988      	cbnz	r0, 801a588 <__swbuf_r+0x90>
 801a564:	4638      	mov	r0, r7
 801a566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a568:	4b0a      	ldr	r3, [pc, #40]	; (801a594 <__swbuf_r+0x9c>)
 801a56a:	429c      	cmp	r4, r3
 801a56c:	d101      	bne.n	801a572 <__swbuf_r+0x7a>
 801a56e:	68ac      	ldr	r4, [r5, #8]
 801a570:	e7cf      	b.n	801a512 <__swbuf_r+0x1a>
 801a572:	4b09      	ldr	r3, [pc, #36]	; (801a598 <__swbuf_r+0xa0>)
 801a574:	429c      	cmp	r4, r3
 801a576:	bf08      	it	eq
 801a578:	68ec      	ldreq	r4, [r5, #12]
 801a57a:	e7ca      	b.n	801a512 <__swbuf_r+0x1a>
 801a57c:	4621      	mov	r1, r4
 801a57e:	4628      	mov	r0, r5
 801a580:	f000 f80c 	bl	801a59c <__swsetup_r>
 801a584:	2800      	cmp	r0, #0
 801a586:	d0cb      	beq.n	801a520 <__swbuf_r+0x28>
 801a588:	f04f 37ff 	mov.w	r7, #4294967295
 801a58c:	e7ea      	b.n	801a564 <__swbuf_r+0x6c>
 801a58e:	bf00      	nop
 801a590:	0801b7e8 	.word	0x0801b7e8
 801a594:	0801b808 	.word	0x0801b808
 801a598:	0801b7c8 	.word	0x0801b7c8

0801a59c <__swsetup_r>:
 801a59c:	4b32      	ldr	r3, [pc, #200]	; (801a668 <__swsetup_r+0xcc>)
 801a59e:	b570      	push	{r4, r5, r6, lr}
 801a5a0:	681d      	ldr	r5, [r3, #0]
 801a5a2:	4606      	mov	r6, r0
 801a5a4:	460c      	mov	r4, r1
 801a5a6:	b125      	cbz	r5, 801a5b2 <__swsetup_r+0x16>
 801a5a8:	69ab      	ldr	r3, [r5, #24]
 801a5aa:	b913      	cbnz	r3, 801a5b2 <__swsetup_r+0x16>
 801a5ac:	4628      	mov	r0, r5
 801a5ae:	f000 f99b 	bl	801a8e8 <__sinit>
 801a5b2:	4b2e      	ldr	r3, [pc, #184]	; (801a66c <__swsetup_r+0xd0>)
 801a5b4:	429c      	cmp	r4, r3
 801a5b6:	d10f      	bne.n	801a5d8 <__swsetup_r+0x3c>
 801a5b8:	686c      	ldr	r4, [r5, #4]
 801a5ba:	89a3      	ldrh	r3, [r4, #12]
 801a5bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a5c0:	0719      	lsls	r1, r3, #28
 801a5c2:	d42c      	bmi.n	801a61e <__swsetup_r+0x82>
 801a5c4:	06dd      	lsls	r5, r3, #27
 801a5c6:	d411      	bmi.n	801a5ec <__swsetup_r+0x50>
 801a5c8:	2309      	movs	r3, #9
 801a5ca:	6033      	str	r3, [r6, #0]
 801a5cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a5d0:	81a3      	strh	r3, [r4, #12]
 801a5d2:	f04f 30ff 	mov.w	r0, #4294967295
 801a5d6:	e03e      	b.n	801a656 <__swsetup_r+0xba>
 801a5d8:	4b25      	ldr	r3, [pc, #148]	; (801a670 <__swsetup_r+0xd4>)
 801a5da:	429c      	cmp	r4, r3
 801a5dc:	d101      	bne.n	801a5e2 <__swsetup_r+0x46>
 801a5de:	68ac      	ldr	r4, [r5, #8]
 801a5e0:	e7eb      	b.n	801a5ba <__swsetup_r+0x1e>
 801a5e2:	4b24      	ldr	r3, [pc, #144]	; (801a674 <__swsetup_r+0xd8>)
 801a5e4:	429c      	cmp	r4, r3
 801a5e6:	bf08      	it	eq
 801a5e8:	68ec      	ldreq	r4, [r5, #12]
 801a5ea:	e7e6      	b.n	801a5ba <__swsetup_r+0x1e>
 801a5ec:	0758      	lsls	r0, r3, #29
 801a5ee:	d512      	bpl.n	801a616 <__swsetup_r+0x7a>
 801a5f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a5f2:	b141      	cbz	r1, 801a606 <__swsetup_r+0x6a>
 801a5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a5f8:	4299      	cmp	r1, r3
 801a5fa:	d002      	beq.n	801a602 <__swsetup_r+0x66>
 801a5fc:	4630      	mov	r0, r6
 801a5fe:	f000 fa93 	bl	801ab28 <_free_r>
 801a602:	2300      	movs	r3, #0
 801a604:	6363      	str	r3, [r4, #52]	; 0x34
 801a606:	89a3      	ldrh	r3, [r4, #12]
 801a608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a60c:	81a3      	strh	r3, [r4, #12]
 801a60e:	2300      	movs	r3, #0
 801a610:	6063      	str	r3, [r4, #4]
 801a612:	6923      	ldr	r3, [r4, #16]
 801a614:	6023      	str	r3, [r4, #0]
 801a616:	89a3      	ldrh	r3, [r4, #12]
 801a618:	f043 0308 	orr.w	r3, r3, #8
 801a61c:	81a3      	strh	r3, [r4, #12]
 801a61e:	6923      	ldr	r3, [r4, #16]
 801a620:	b94b      	cbnz	r3, 801a636 <__swsetup_r+0x9a>
 801a622:	89a3      	ldrh	r3, [r4, #12]
 801a624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a62c:	d003      	beq.n	801a636 <__swsetup_r+0x9a>
 801a62e:	4621      	mov	r1, r4
 801a630:	4630      	mov	r0, r6
 801a632:	f000 fa31 	bl	801aa98 <__smakebuf_r>
 801a636:	89a0      	ldrh	r0, [r4, #12]
 801a638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a63c:	f010 0301 	ands.w	r3, r0, #1
 801a640:	d00a      	beq.n	801a658 <__swsetup_r+0xbc>
 801a642:	2300      	movs	r3, #0
 801a644:	60a3      	str	r3, [r4, #8]
 801a646:	6963      	ldr	r3, [r4, #20]
 801a648:	425b      	negs	r3, r3
 801a64a:	61a3      	str	r3, [r4, #24]
 801a64c:	6923      	ldr	r3, [r4, #16]
 801a64e:	b943      	cbnz	r3, 801a662 <__swsetup_r+0xc6>
 801a650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a654:	d1ba      	bne.n	801a5cc <__swsetup_r+0x30>
 801a656:	bd70      	pop	{r4, r5, r6, pc}
 801a658:	0781      	lsls	r1, r0, #30
 801a65a:	bf58      	it	pl
 801a65c:	6963      	ldrpl	r3, [r4, #20]
 801a65e:	60a3      	str	r3, [r4, #8]
 801a660:	e7f4      	b.n	801a64c <__swsetup_r+0xb0>
 801a662:	2000      	movs	r0, #0
 801a664:	e7f7      	b.n	801a656 <__swsetup_r+0xba>
 801a666:	bf00      	nop
 801a668:	24000090 	.word	0x24000090
 801a66c:	0801b7e8 	.word	0x0801b7e8
 801a670:	0801b808 	.word	0x0801b808
 801a674:	0801b7c8 	.word	0x0801b7c8

0801a678 <__assert_func>:
 801a678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a67a:	4614      	mov	r4, r2
 801a67c:	461a      	mov	r2, r3
 801a67e:	4b09      	ldr	r3, [pc, #36]	; (801a6a4 <__assert_func+0x2c>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	4605      	mov	r5, r0
 801a684:	68d8      	ldr	r0, [r3, #12]
 801a686:	b14c      	cbz	r4, 801a69c <__assert_func+0x24>
 801a688:	4b07      	ldr	r3, [pc, #28]	; (801a6a8 <__assert_func+0x30>)
 801a68a:	9100      	str	r1, [sp, #0]
 801a68c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a690:	4906      	ldr	r1, [pc, #24]	; (801a6ac <__assert_func+0x34>)
 801a692:	462b      	mov	r3, r5
 801a694:	f000 f9a6 	bl	801a9e4 <fiprintf>
 801a698:	f000 fec2 	bl	801b420 <abort>
 801a69c:	4b04      	ldr	r3, [pc, #16]	; (801a6b0 <__assert_func+0x38>)
 801a69e:	461c      	mov	r4, r3
 801a6a0:	e7f3      	b.n	801a68a <__assert_func+0x12>
 801a6a2:	bf00      	nop
 801a6a4:	24000090 	.word	0x24000090
 801a6a8:	0801b78a 	.word	0x0801b78a
 801a6ac:	0801b797 	.word	0x0801b797
 801a6b0:	0801b7c5 	.word	0x0801b7c5

0801a6b4 <__sflush_r>:
 801a6b4:	898a      	ldrh	r2, [r1, #12]
 801a6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ba:	4605      	mov	r5, r0
 801a6bc:	0710      	lsls	r0, r2, #28
 801a6be:	460c      	mov	r4, r1
 801a6c0:	d458      	bmi.n	801a774 <__sflush_r+0xc0>
 801a6c2:	684b      	ldr	r3, [r1, #4]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	dc05      	bgt.n	801a6d4 <__sflush_r+0x20>
 801a6c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	dc02      	bgt.n	801a6d4 <__sflush_r+0x20>
 801a6ce:	2000      	movs	r0, #0
 801a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a6d6:	2e00      	cmp	r6, #0
 801a6d8:	d0f9      	beq.n	801a6ce <__sflush_r+0x1a>
 801a6da:	2300      	movs	r3, #0
 801a6dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a6e0:	682f      	ldr	r7, [r5, #0]
 801a6e2:	602b      	str	r3, [r5, #0]
 801a6e4:	d032      	beq.n	801a74c <__sflush_r+0x98>
 801a6e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a6e8:	89a3      	ldrh	r3, [r4, #12]
 801a6ea:	075a      	lsls	r2, r3, #29
 801a6ec:	d505      	bpl.n	801a6fa <__sflush_r+0x46>
 801a6ee:	6863      	ldr	r3, [r4, #4]
 801a6f0:	1ac0      	subs	r0, r0, r3
 801a6f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a6f4:	b10b      	cbz	r3, 801a6fa <__sflush_r+0x46>
 801a6f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a6f8:	1ac0      	subs	r0, r0, r3
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	4602      	mov	r2, r0
 801a6fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a700:	6a21      	ldr	r1, [r4, #32]
 801a702:	4628      	mov	r0, r5
 801a704:	47b0      	blx	r6
 801a706:	1c43      	adds	r3, r0, #1
 801a708:	89a3      	ldrh	r3, [r4, #12]
 801a70a:	d106      	bne.n	801a71a <__sflush_r+0x66>
 801a70c:	6829      	ldr	r1, [r5, #0]
 801a70e:	291d      	cmp	r1, #29
 801a710:	d82c      	bhi.n	801a76c <__sflush_r+0xb8>
 801a712:	4a2a      	ldr	r2, [pc, #168]	; (801a7bc <__sflush_r+0x108>)
 801a714:	40ca      	lsrs	r2, r1
 801a716:	07d6      	lsls	r6, r2, #31
 801a718:	d528      	bpl.n	801a76c <__sflush_r+0xb8>
 801a71a:	2200      	movs	r2, #0
 801a71c:	6062      	str	r2, [r4, #4]
 801a71e:	04d9      	lsls	r1, r3, #19
 801a720:	6922      	ldr	r2, [r4, #16]
 801a722:	6022      	str	r2, [r4, #0]
 801a724:	d504      	bpl.n	801a730 <__sflush_r+0x7c>
 801a726:	1c42      	adds	r2, r0, #1
 801a728:	d101      	bne.n	801a72e <__sflush_r+0x7a>
 801a72a:	682b      	ldr	r3, [r5, #0]
 801a72c:	b903      	cbnz	r3, 801a730 <__sflush_r+0x7c>
 801a72e:	6560      	str	r0, [r4, #84]	; 0x54
 801a730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a732:	602f      	str	r7, [r5, #0]
 801a734:	2900      	cmp	r1, #0
 801a736:	d0ca      	beq.n	801a6ce <__sflush_r+0x1a>
 801a738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a73c:	4299      	cmp	r1, r3
 801a73e:	d002      	beq.n	801a746 <__sflush_r+0x92>
 801a740:	4628      	mov	r0, r5
 801a742:	f000 f9f1 	bl	801ab28 <_free_r>
 801a746:	2000      	movs	r0, #0
 801a748:	6360      	str	r0, [r4, #52]	; 0x34
 801a74a:	e7c1      	b.n	801a6d0 <__sflush_r+0x1c>
 801a74c:	6a21      	ldr	r1, [r4, #32]
 801a74e:	2301      	movs	r3, #1
 801a750:	4628      	mov	r0, r5
 801a752:	47b0      	blx	r6
 801a754:	1c41      	adds	r1, r0, #1
 801a756:	d1c7      	bne.n	801a6e8 <__sflush_r+0x34>
 801a758:	682b      	ldr	r3, [r5, #0]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d0c4      	beq.n	801a6e8 <__sflush_r+0x34>
 801a75e:	2b1d      	cmp	r3, #29
 801a760:	d001      	beq.n	801a766 <__sflush_r+0xb2>
 801a762:	2b16      	cmp	r3, #22
 801a764:	d101      	bne.n	801a76a <__sflush_r+0xb6>
 801a766:	602f      	str	r7, [r5, #0]
 801a768:	e7b1      	b.n	801a6ce <__sflush_r+0x1a>
 801a76a:	89a3      	ldrh	r3, [r4, #12]
 801a76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a770:	81a3      	strh	r3, [r4, #12]
 801a772:	e7ad      	b.n	801a6d0 <__sflush_r+0x1c>
 801a774:	690f      	ldr	r7, [r1, #16]
 801a776:	2f00      	cmp	r7, #0
 801a778:	d0a9      	beq.n	801a6ce <__sflush_r+0x1a>
 801a77a:	0793      	lsls	r3, r2, #30
 801a77c:	680e      	ldr	r6, [r1, #0]
 801a77e:	bf08      	it	eq
 801a780:	694b      	ldreq	r3, [r1, #20]
 801a782:	600f      	str	r7, [r1, #0]
 801a784:	bf18      	it	ne
 801a786:	2300      	movne	r3, #0
 801a788:	eba6 0807 	sub.w	r8, r6, r7
 801a78c:	608b      	str	r3, [r1, #8]
 801a78e:	f1b8 0f00 	cmp.w	r8, #0
 801a792:	dd9c      	ble.n	801a6ce <__sflush_r+0x1a>
 801a794:	6a21      	ldr	r1, [r4, #32]
 801a796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a798:	4643      	mov	r3, r8
 801a79a:	463a      	mov	r2, r7
 801a79c:	4628      	mov	r0, r5
 801a79e:	47b0      	blx	r6
 801a7a0:	2800      	cmp	r0, #0
 801a7a2:	dc06      	bgt.n	801a7b2 <__sflush_r+0xfe>
 801a7a4:	89a3      	ldrh	r3, [r4, #12]
 801a7a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7aa:	81a3      	strh	r3, [r4, #12]
 801a7ac:	f04f 30ff 	mov.w	r0, #4294967295
 801a7b0:	e78e      	b.n	801a6d0 <__sflush_r+0x1c>
 801a7b2:	4407      	add	r7, r0
 801a7b4:	eba8 0800 	sub.w	r8, r8, r0
 801a7b8:	e7e9      	b.n	801a78e <__sflush_r+0xda>
 801a7ba:	bf00      	nop
 801a7bc:	20400001 	.word	0x20400001

0801a7c0 <_fflush_r>:
 801a7c0:	b538      	push	{r3, r4, r5, lr}
 801a7c2:	690b      	ldr	r3, [r1, #16]
 801a7c4:	4605      	mov	r5, r0
 801a7c6:	460c      	mov	r4, r1
 801a7c8:	b913      	cbnz	r3, 801a7d0 <_fflush_r+0x10>
 801a7ca:	2500      	movs	r5, #0
 801a7cc:	4628      	mov	r0, r5
 801a7ce:	bd38      	pop	{r3, r4, r5, pc}
 801a7d0:	b118      	cbz	r0, 801a7da <_fflush_r+0x1a>
 801a7d2:	6983      	ldr	r3, [r0, #24]
 801a7d4:	b90b      	cbnz	r3, 801a7da <_fflush_r+0x1a>
 801a7d6:	f000 f887 	bl	801a8e8 <__sinit>
 801a7da:	4b14      	ldr	r3, [pc, #80]	; (801a82c <_fflush_r+0x6c>)
 801a7dc:	429c      	cmp	r4, r3
 801a7de:	d11b      	bne.n	801a818 <_fflush_r+0x58>
 801a7e0:	686c      	ldr	r4, [r5, #4]
 801a7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d0ef      	beq.n	801a7ca <_fflush_r+0xa>
 801a7ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a7ec:	07d0      	lsls	r0, r2, #31
 801a7ee:	d404      	bmi.n	801a7fa <_fflush_r+0x3a>
 801a7f0:	0599      	lsls	r1, r3, #22
 801a7f2:	d402      	bmi.n	801a7fa <_fflush_r+0x3a>
 801a7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7f6:	f000 f927 	bl	801aa48 <__retarget_lock_acquire_recursive>
 801a7fa:	4628      	mov	r0, r5
 801a7fc:	4621      	mov	r1, r4
 801a7fe:	f7ff ff59 	bl	801a6b4 <__sflush_r>
 801a802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a804:	07da      	lsls	r2, r3, #31
 801a806:	4605      	mov	r5, r0
 801a808:	d4e0      	bmi.n	801a7cc <_fflush_r+0xc>
 801a80a:	89a3      	ldrh	r3, [r4, #12]
 801a80c:	059b      	lsls	r3, r3, #22
 801a80e:	d4dd      	bmi.n	801a7cc <_fflush_r+0xc>
 801a810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a812:	f000 f91a 	bl	801aa4a <__retarget_lock_release_recursive>
 801a816:	e7d9      	b.n	801a7cc <_fflush_r+0xc>
 801a818:	4b05      	ldr	r3, [pc, #20]	; (801a830 <_fflush_r+0x70>)
 801a81a:	429c      	cmp	r4, r3
 801a81c:	d101      	bne.n	801a822 <_fflush_r+0x62>
 801a81e:	68ac      	ldr	r4, [r5, #8]
 801a820:	e7df      	b.n	801a7e2 <_fflush_r+0x22>
 801a822:	4b04      	ldr	r3, [pc, #16]	; (801a834 <_fflush_r+0x74>)
 801a824:	429c      	cmp	r4, r3
 801a826:	bf08      	it	eq
 801a828:	68ec      	ldreq	r4, [r5, #12]
 801a82a:	e7da      	b.n	801a7e2 <_fflush_r+0x22>
 801a82c:	0801b7e8 	.word	0x0801b7e8
 801a830:	0801b808 	.word	0x0801b808
 801a834:	0801b7c8 	.word	0x0801b7c8

0801a838 <std>:
 801a838:	2300      	movs	r3, #0
 801a83a:	b510      	push	{r4, lr}
 801a83c:	4604      	mov	r4, r0
 801a83e:	e9c0 3300 	strd	r3, r3, [r0]
 801a842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a846:	6083      	str	r3, [r0, #8]
 801a848:	8181      	strh	r1, [r0, #12]
 801a84a:	6643      	str	r3, [r0, #100]	; 0x64
 801a84c:	81c2      	strh	r2, [r0, #14]
 801a84e:	6183      	str	r3, [r0, #24]
 801a850:	4619      	mov	r1, r3
 801a852:	2208      	movs	r2, #8
 801a854:	305c      	adds	r0, #92	; 0x5c
 801a856:	f7ff fd65 	bl	801a324 <memset>
 801a85a:	4b05      	ldr	r3, [pc, #20]	; (801a870 <std+0x38>)
 801a85c:	6263      	str	r3, [r4, #36]	; 0x24
 801a85e:	4b05      	ldr	r3, [pc, #20]	; (801a874 <std+0x3c>)
 801a860:	62a3      	str	r3, [r4, #40]	; 0x28
 801a862:	4b05      	ldr	r3, [pc, #20]	; (801a878 <std+0x40>)
 801a864:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a866:	4b05      	ldr	r3, [pc, #20]	; (801a87c <std+0x44>)
 801a868:	6224      	str	r4, [r4, #32]
 801a86a:	6323      	str	r3, [r4, #48]	; 0x30
 801a86c:	bd10      	pop	{r4, pc}
 801a86e:	bf00      	nop
 801a870:	0801b375 	.word	0x0801b375
 801a874:	0801b397 	.word	0x0801b397
 801a878:	0801b3cf 	.word	0x0801b3cf
 801a87c:	0801b3f3 	.word	0x0801b3f3

0801a880 <_cleanup_r>:
 801a880:	4901      	ldr	r1, [pc, #4]	; (801a888 <_cleanup_r+0x8>)
 801a882:	f000 b8c1 	b.w	801aa08 <_fwalk_reent>
 801a886:	bf00      	nop
 801a888:	0801a7c1 	.word	0x0801a7c1

0801a88c <__sfmoreglue>:
 801a88c:	b570      	push	{r4, r5, r6, lr}
 801a88e:	2268      	movs	r2, #104	; 0x68
 801a890:	1e4d      	subs	r5, r1, #1
 801a892:	4355      	muls	r5, r2
 801a894:	460e      	mov	r6, r1
 801a896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a89a:	f000 f9b1 	bl	801ac00 <_malloc_r>
 801a89e:	4604      	mov	r4, r0
 801a8a0:	b140      	cbz	r0, 801a8b4 <__sfmoreglue+0x28>
 801a8a2:	2100      	movs	r1, #0
 801a8a4:	e9c0 1600 	strd	r1, r6, [r0]
 801a8a8:	300c      	adds	r0, #12
 801a8aa:	60a0      	str	r0, [r4, #8]
 801a8ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a8b0:	f7ff fd38 	bl	801a324 <memset>
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	bd70      	pop	{r4, r5, r6, pc}

0801a8b8 <__sfp_lock_acquire>:
 801a8b8:	4801      	ldr	r0, [pc, #4]	; (801a8c0 <__sfp_lock_acquire+0x8>)
 801a8ba:	f000 b8c5 	b.w	801aa48 <__retarget_lock_acquire_recursive>
 801a8be:	bf00      	nop
 801a8c0:	24001ed1 	.word	0x24001ed1

0801a8c4 <__sfp_lock_release>:
 801a8c4:	4801      	ldr	r0, [pc, #4]	; (801a8cc <__sfp_lock_release+0x8>)
 801a8c6:	f000 b8c0 	b.w	801aa4a <__retarget_lock_release_recursive>
 801a8ca:	bf00      	nop
 801a8cc:	24001ed1 	.word	0x24001ed1

0801a8d0 <__sinit_lock_acquire>:
 801a8d0:	4801      	ldr	r0, [pc, #4]	; (801a8d8 <__sinit_lock_acquire+0x8>)
 801a8d2:	f000 b8b9 	b.w	801aa48 <__retarget_lock_acquire_recursive>
 801a8d6:	bf00      	nop
 801a8d8:	24001ed2 	.word	0x24001ed2

0801a8dc <__sinit_lock_release>:
 801a8dc:	4801      	ldr	r0, [pc, #4]	; (801a8e4 <__sinit_lock_release+0x8>)
 801a8de:	f000 b8b4 	b.w	801aa4a <__retarget_lock_release_recursive>
 801a8e2:	bf00      	nop
 801a8e4:	24001ed2 	.word	0x24001ed2

0801a8e8 <__sinit>:
 801a8e8:	b510      	push	{r4, lr}
 801a8ea:	4604      	mov	r4, r0
 801a8ec:	f7ff fff0 	bl	801a8d0 <__sinit_lock_acquire>
 801a8f0:	69a3      	ldr	r3, [r4, #24]
 801a8f2:	b11b      	cbz	r3, 801a8fc <__sinit+0x14>
 801a8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8f8:	f7ff bff0 	b.w	801a8dc <__sinit_lock_release>
 801a8fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a900:	6523      	str	r3, [r4, #80]	; 0x50
 801a902:	4b13      	ldr	r3, [pc, #76]	; (801a950 <__sinit+0x68>)
 801a904:	4a13      	ldr	r2, [pc, #76]	; (801a954 <__sinit+0x6c>)
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	62a2      	str	r2, [r4, #40]	; 0x28
 801a90a:	42a3      	cmp	r3, r4
 801a90c:	bf04      	itt	eq
 801a90e:	2301      	moveq	r3, #1
 801a910:	61a3      	streq	r3, [r4, #24]
 801a912:	4620      	mov	r0, r4
 801a914:	f000 f820 	bl	801a958 <__sfp>
 801a918:	6060      	str	r0, [r4, #4]
 801a91a:	4620      	mov	r0, r4
 801a91c:	f000 f81c 	bl	801a958 <__sfp>
 801a920:	60a0      	str	r0, [r4, #8]
 801a922:	4620      	mov	r0, r4
 801a924:	f000 f818 	bl	801a958 <__sfp>
 801a928:	2200      	movs	r2, #0
 801a92a:	60e0      	str	r0, [r4, #12]
 801a92c:	2104      	movs	r1, #4
 801a92e:	6860      	ldr	r0, [r4, #4]
 801a930:	f7ff ff82 	bl	801a838 <std>
 801a934:	68a0      	ldr	r0, [r4, #8]
 801a936:	2201      	movs	r2, #1
 801a938:	2109      	movs	r1, #9
 801a93a:	f7ff ff7d 	bl	801a838 <std>
 801a93e:	68e0      	ldr	r0, [r4, #12]
 801a940:	2202      	movs	r2, #2
 801a942:	2112      	movs	r1, #18
 801a944:	f7ff ff78 	bl	801a838 <std>
 801a948:	2301      	movs	r3, #1
 801a94a:	61a3      	str	r3, [r4, #24]
 801a94c:	e7d2      	b.n	801a8f4 <__sinit+0xc>
 801a94e:	bf00      	nop
 801a950:	0801b714 	.word	0x0801b714
 801a954:	0801a881 	.word	0x0801a881

0801a958 <__sfp>:
 801a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a95a:	4607      	mov	r7, r0
 801a95c:	f7ff ffac 	bl	801a8b8 <__sfp_lock_acquire>
 801a960:	4b1e      	ldr	r3, [pc, #120]	; (801a9dc <__sfp+0x84>)
 801a962:	681e      	ldr	r6, [r3, #0]
 801a964:	69b3      	ldr	r3, [r6, #24]
 801a966:	b913      	cbnz	r3, 801a96e <__sfp+0x16>
 801a968:	4630      	mov	r0, r6
 801a96a:	f7ff ffbd 	bl	801a8e8 <__sinit>
 801a96e:	3648      	adds	r6, #72	; 0x48
 801a970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a974:	3b01      	subs	r3, #1
 801a976:	d503      	bpl.n	801a980 <__sfp+0x28>
 801a978:	6833      	ldr	r3, [r6, #0]
 801a97a:	b30b      	cbz	r3, 801a9c0 <__sfp+0x68>
 801a97c:	6836      	ldr	r6, [r6, #0]
 801a97e:	e7f7      	b.n	801a970 <__sfp+0x18>
 801a980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a984:	b9d5      	cbnz	r5, 801a9bc <__sfp+0x64>
 801a986:	4b16      	ldr	r3, [pc, #88]	; (801a9e0 <__sfp+0x88>)
 801a988:	60e3      	str	r3, [r4, #12]
 801a98a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a98e:	6665      	str	r5, [r4, #100]	; 0x64
 801a990:	f000 f859 	bl	801aa46 <__retarget_lock_init_recursive>
 801a994:	f7ff ff96 	bl	801a8c4 <__sfp_lock_release>
 801a998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a99c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a9a0:	6025      	str	r5, [r4, #0]
 801a9a2:	61a5      	str	r5, [r4, #24]
 801a9a4:	2208      	movs	r2, #8
 801a9a6:	4629      	mov	r1, r5
 801a9a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a9ac:	f7ff fcba 	bl	801a324 <memset>
 801a9b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a9b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9bc:	3468      	adds	r4, #104	; 0x68
 801a9be:	e7d9      	b.n	801a974 <__sfp+0x1c>
 801a9c0:	2104      	movs	r1, #4
 801a9c2:	4638      	mov	r0, r7
 801a9c4:	f7ff ff62 	bl	801a88c <__sfmoreglue>
 801a9c8:	4604      	mov	r4, r0
 801a9ca:	6030      	str	r0, [r6, #0]
 801a9cc:	2800      	cmp	r0, #0
 801a9ce:	d1d5      	bne.n	801a97c <__sfp+0x24>
 801a9d0:	f7ff ff78 	bl	801a8c4 <__sfp_lock_release>
 801a9d4:	230c      	movs	r3, #12
 801a9d6:	603b      	str	r3, [r7, #0]
 801a9d8:	e7ee      	b.n	801a9b8 <__sfp+0x60>
 801a9da:	bf00      	nop
 801a9dc:	0801b714 	.word	0x0801b714
 801a9e0:	ffff0001 	.word	0xffff0001

0801a9e4 <fiprintf>:
 801a9e4:	b40e      	push	{r1, r2, r3}
 801a9e6:	b503      	push	{r0, r1, lr}
 801a9e8:	4601      	mov	r1, r0
 801a9ea:	ab03      	add	r3, sp, #12
 801a9ec:	4805      	ldr	r0, [pc, #20]	; (801aa04 <fiprintf+0x20>)
 801a9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9f2:	6800      	ldr	r0, [r0, #0]
 801a9f4:	9301      	str	r3, [sp, #4]
 801a9f6:	f000 f9a1 	bl	801ad3c <_vfiprintf_r>
 801a9fa:	b002      	add	sp, #8
 801a9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801aa00:	b003      	add	sp, #12
 801aa02:	4770      	bx	lr
 801aa04:	24000090 	.word	0x24000090

0801aa08 <_fwalk_reent>:
 801aa08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa0c:	4606      	mov	r6, r0
 801aa0e:	4688      	mov	r8, r1
 801aa10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aa14:	2700      	movs	r7, #0
 801aa16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aa1a:	f1b9 0901 	subs.w	r9, r9, #1
 801aa1e:	d505      	bpl.n	801aa2c <_fwalk_reent+0x24>
 801aa20:	6824      	ldr	r4, [r4, #0]
 801aa22:	2c00      	cmp	r4, #0
 801aa24:	d1f7      	bne.n	801aa16 <_fwalk_reent+0xe>
 801aa26:	4638      	mov	r0, r7
 801aa28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa2c:	89ab      	ldrh	r3, [r5, #12]
 801aa2e:	2b01      	cmp	r3, #1
 801aa30:	d907      	bls.n	801aa42 <_fwalk_reent+0x3a>
 801aa32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aa36:	3301      	adds	r3, #1
 801aa38:	d003      	beq.n	801aa42 <_fwalk_reent+0x3a>
 801aa3a:	4629      	mov	r1, r5
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	47c0      	blx	r8
 801aa40:	4307      	orrs	r7, r0
 801aa42:	3568      	adds	r5, #104	; 0x68
 801aa44:	e7e9      	b.n	801aa1a <_fwalk_reent+0x12>

0801aa46 <__retarget_lock_init_recursive>:
 801aa46:	4770      	bx	lr

0801aa48 <__retarget_lock_acquire_recursive>:
 801aa48:	4770      	bx	lr

0801aa4a <__retarget_lock_release_recursive>:
 801aa4a:	4770      	bx	lr

0801aa4c <__swhatbuf_r>:
 801aa4c:	b570      	push	{r4, r5, r6, lr}
 801aa4e:	460e      	mov	r6, r1
 801aa50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa54:	2900      	cmp	r1, #0
 801aa56:	b096      	sub	sp, #88	; 0x58
 801aa58:	4614      	mov	r4, r2
 801aa5a:	461d      	mov	r5, r3
 801aa5c:	da08      	bge.n	801aa70 <__swhatbuf_r+0x24>
 801aa5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801aa62:	2200      	movs	r2, #0
 801aa64:	602a      	str	r2, [r5, #0]
 801aa66:	061a      	lsls	r2, r3, #24
 801aa68:	d410      	bmi.n	801aa8c <__swhatbuf_r+0x40>
 801aa6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aa6e:	e00e      	b.n	801aa8e <__swhatbuf_r+0x42>
 801aa70:	466a      	mov	r2, sp
 801aa72:	f000 fced 	bl	801b450 <_fstat_r>
 801aa76:	2800      	cmp	r0, #0
 801aa78:	dbf1      	blt.n	801aa5e <__swhatbuf_r+0x12>
 801aa7a:	9a01      	ldr	r2, [sp, #4]
 801aa7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aa80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aa84:	425a      	negs	r2, r3
 801aa86:	415a      	adcs	r2, r3
 801aa88:	602a      	str	r2, [r5, #0]
 801aa8a:	e7ee      	b.n	801aa6a <__swhatbuf_r+0x1e>
 801aa8c:	2340      	movs	r3, #64	; 0x40
 801aa8e:	2000      	movs	r0, #0
 801aa90:	6023      	str	r3, [r4, #0]
 801aa92:	b016      	add	sp, #88	; 0x58
 801aa94:	bd70      	pop	{r4, r5, r6, pc}
	...

0801aa98 <__smakebuf_r>:
 801aa98:	898b      	ldrh	r3, [r1, #12]
 801aa9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aa9c:	079d      	lsls	r5, r3, #30
 801aa9e:	4606      	mov	r6, r0
 801aaa0:	460c      	mov	r4, r1
 801aaa2:	d507      	bpl.n	801aab4 <__smakebuf_r+0x1c>
 801aaa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aaa8:	6023      	str	r3, [r4, #0]
 801aaaa:	6123      	str	r3, [r4, #16]
 801aaac:	2301      	movs	r3, #1
 801aaae:	6163      	str	r3, [r4, #20]
 801aab0:	b002      	add	sp, #8
 801aab2:	bd70      	pop	{r4, r5, r6, pc}
 801aab4:	ab01      	add	r3, sp, #4
 801aab6:	466a      	mov	r2, sp
 801aab8:	f7ff ffc8 	bl	801aa4c <__swhatbuf_r>
 801aabc:	9900      	ldr	r1, [sp, #0]
 801aabe:	4605      	mov	r5, r0
 801aac0:	4630      	mov	r0, r6
 801aac2:	f000 f89d 	bl	801ac00 <_malloc_r>
 801aac6:	b948      	cbnz	r0, 801aadc <__smakebuf_r+0x44>
 801aac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aacc:	059a      	lsls	r2, r3, #22
 801aace:	d4ef      	bmi.n	801aab0 <__smakebuf_r+0x18>
 801aad0:	f023 0303 	bic.w	r3, r3, #3
 801aad4:	f043 0302 	orr.w	r3, r3, #2
 801aad8:	81a3      	strh	r3, [r4, #12]
 801aada:	e7e3      	b.n	801aaa4 <__smakebuf_r+0xc>
 801aadc:	4b0d      	ldr	r3, [pc, #52]	; (801ab14 <__smakebuf_r+0x7c>)
 801aade:	62b3      	str	r3, [r6, #40]	; 0x28
 801aae0:	89a3      	ldrh	r3, [r4, #12]
 801aae2:	6020      	str	r0, [r4, #0]
 801aae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aae8:	81a3      	strh	r3, [r4, #12]
 801aaea:	9b00      	ldr	r3, [sp, #0]
 801aaec:	6163      	str	r3, [r4, #20]
 801aaee:	9b01      	ldr	r3, [sp, #4]
 801aaf0:	6120      	str	r0, [r4, #16]
 801aaf2:	b15b      	cbz	r3, 801ab0c <__smakebuf_r+0x74>
 801aaf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aaf8:	4630      	mov	r0, r6
 801aafa:	f000 fcbb 	bl	801b474 <_isatty_r>
 801aafe:	b128      	cbz	r0, 801ab0c <__smakebuf_r+0x74>
 801ab00:	89a3      	ldrh	r3, [r4, #12]
 801ab02:	f023 0303 	bic.w	r3, r3, #3
 801ab06:	f043 0301 	orr.w	r3, r3, #1
 801ab0a:	81a3      	strh	r3, [r4, #12]
 801ab0c:	89a0      	ldrh	r0, [r4, #12]
 801ab0e:	4305      	orrs	r5, r0
 801ab10:	81a5      	strh	r5, [r4, #12]
 801ab12:	e7cd      	b.n	801aab0 <__smakebuf_r+0x18>
 801ab14:	0801a881 	.word	0x0801a881

0801ab18 <malloc>:
 801ab18:	4b02      	ldr	r3, [pc, #8]	; (801ab24 <malloc+0xc>)
 801ab1a:	4601      	mov	r1, r0
 801ab1c:	6818      	ldr	r0, [r3, #0]
 801ab1e:	f000 b86f 	b.w	801ac00 <_malloc_r>
 801ab22:	bf00      	nop
 801ab24:	24000090 	.word	0x24000090

0801ab28 <_free_r>:
 801ab28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab2a:	2900      	cmp	r1, #0
 801ab2c:	d044      	beq.n	801abb8 <_free_r+0x90>
 801ab2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab32:	9001      	str	r0, [sp, #4]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	f1a1 0404 	sub.w	r4, r1, #4
 801ab3a:	bfb8      	it	lt
 801ab3c:	18e4      	addlt	r4, r4, r3
 801ab3e:	f000 fcbb 	bl	801b4b8 <__malloc_lock>
 801ab42:	4a1e      	ldr	r2, [pc, #120]	; (801abbc <_free_r+0x94>)
 801ab44:	9801      	ldr	r0, [sp, #4]
 801ab46:	6813      	ldr	r3, [r2, #0]
 801ab48:	b933      	cbnz	r3, 801ab58 <_free_r+0x30>
 801ab4a:	6063      	str	r3, [r4, #4]
 801ab4c:	6014      	str	r4, [r2, #0]
 801ab4e:	b003      	add	sp, #12
 801ab50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab54:	f000 bcb6 	b.w	801b4c4 <__malloc_unlock>
 801ab58:	42a3      	cmp	r3, r4
 801ab5a:	d908      	bls.n	801ab6e <_free_r+0x46>
 801ab5c:	6825      	ldr	r5, [r4, #0]
 801ab5e:	1961      	adds	r1, r4, r5
 801ab60:	428b      	cmp	r3, r1
 801ab62:	bf01      	itttt	eq
 801ab64:	6819      	ldreq	r1, [r3, #0]
 801ab66:	685b      	ldreq	r3, [r3, #4]
 801ab68:	1949      	addeq	r1, r1, r5
 801ab6a:	6021      	streq	r1, [r4, #0]
 801ab6c:	e7ed      	b.n	801ab4a <_free_r+0x22>
 801ab6e:	461a      	mov	r2, r3
 801ab70:	685b      	ldr	r3, [r3, #4]
 801ab72:	b10b      	cbz	r3, 801ab78 <_free_r+0x50>
 801ab74:	42a3      	cmp	r3, r4
 801ab76:	d9fa      	bls.n	801ab6e <_free_r+0x46>
 801ab78:	6811      	ldr	r1, [r2, #0]
 801ab7a:	1855      	adds	r5, r2, r1
 801ab7c:	42a5      	cmp	r5, r4
 801ab7e:	d10b      	bne.n	801ab98 <_free_r+0x70>
 801ab80:	6824      	ldr	r4, [r4, #0]
 801ab82:	4421      	add	r1, r4
 801ab84:	1854      	adds	r4, r2, r1
 801ab86:	42a3      	cmp	r3, r4
 801ab88:	6011      	str	r1, [r2, #0]
 801ab8a:	d1e0      	bne.n	801ab4e <_free_r+0x26>
 801ab8c:	681c      	ldr	r4, [r3, #0]
 801ab8e:	685b      	ldr	r3, [r3, #4]
 801ab90:	6053      	str	r3, [r2, #4]
 801ab92:	4421      	add	r1, r4
 801ab94:	6011      	str	r1, [r2, #0]
 801ab96:	e7da      	b.n	801ab4e <_free_r+0x26>
 801ab98:	d902      	bls.n	801aba0 <_free_r+0x78>
 801ab9a:	230c      	movs	r3, #12
 801ab9c:	6003      	str	r3, [r0, #0]
 801ab9e:	e7d6      	b.n	801ab4e <_free_r+0x26>
 801aba0:	6825      	ldr	r5, [r4, #0]
 801aba2:	1961      	adds	r1, r4, r5
 801aba4:	428b      	cmp	r3, r1
 801aba6:	bf04      	itt	eq
 801aba8:	6819      	ldreq	r1, [r3, #0]
 801abaa:	685b      	ldreq	r3, [r3, #4]
 801abac:	6063      	str	r3, [r4, #4]
 801abae:	bf04      	itt	eq
 801abb0:	1949      	addeq	r1, r1, r5
 801abb2:	6021      	streq	r1, [r4, #0]
 801abb4:	6054      	str	r4, [r2, #4]
 801abb6:	e7ca      	b.n	801ab4e <_free_r+0x26>
 801abb8:	b003      	add	sp, #12
 801abba:	bd30      	pop	{r4, r5, pc}
 801abbc:	24001ed4 	.word	0x24001ed4

0801abc0 <sbrk_aligned>:
 801abc0:	b570      	push	{r4, r5, r6, lr}
 801abc2:	4e0e      	ldr	r6, [pc, #56]	; (801abfc <sbrk_aligned+0x3c>)
 801abc4:	460c      	mov	r4, r1
 801abc6:	6831      	ldr	r1, [r6, #0]
 801abc8:	4605      	mov	r5, r0
 801abca:	b911      	cbnz	r1, 801abd2 <sbrk_aligned+0x12>
 801abcc:	f000 fbc2 	bl	801b354 <_sbrk_r>
 801abd0:	6030      	str	r0, [r6, #0]
 801abd2:	4621      	mov	r1, r4
 801abd4:	4628      	mov	r0, r5
 801abd6:	f000 fbbd 	bl	801b354 <_sbrk_r>
 801abda:	1c43      	adds	r3, r0, #1
 801abdc:	d00a      	beq.n	801abf4 <sbrk_aligned+0x34>
 801abde:	1cc4      	adds	r4, r0, #3
 801abe0:	f024 0403 	bic.w	r4, r4, #3
 801abe4:	42a0      	cmp	r0, r4
 801abe6:	d007      	beq.n	801abf8 <sbrk_aligned+0x38>
 801abe8:	1a21      	subs	r1, r4, r0
 801abea:	4628      	mov	r0, r5
 801abec:	f000 fbb2 	bl	801b354 <_sbrk_r>
 801abf0:	3001      	adds	r0, #1
 801abf2:	d101      	bne.n	801abf8 <sbrk_aligned+0x38>
 801abf4:	f04f 34ff 	mov.w	r4, #4294967295
 801abf8:	4620      	mov	r0, r4
 801abfa:	bd70      	pop	{r4, r5, r6, pc}
 801abfc:	24001ed8 	.word	0x24001ed8

0801ac00 <_malloc_r>:
 801ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac04:	1ccd      	adds	r5, r1, #3
 801ac06:	f025 0503 	bic.w	r5, r5, #3
 801ac0a:	3508      	adds	r5, #8
 801ac0c:	2d0c      	cmp	r5, #12
 801ac0e:	bf38      	it	cc
 801ac10:	250c      	movcc	r5, #12
 801ac12:	2d00      	cmp	r5, #0
 801ac14:	4607      	mov	r7, r0
 801ac16:	db01      	blt.n	801ac1c <_malloc_r+0x1c>
 801ac18:	42a9      	cmp	r1, r5
 801ac1a:	d905      	bls.n	801ac28 <_malloc_r+0x28>
 801ac1c:	230c      	movs	r3, #12
 801ac1e:	603b      	str	r3, [r7, #0]
 801ac20:	2600      	movs	r6, #0
 801ac22:	4630      	mov	r0, r6
 801ac24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac28:	4e2e      	ldr	r6, [pc, #184]	; (801ace4 <_malloc_r+0xe4>)
 801ac2a:	f000 fc45 	bl	801b4b8 <__malloc_lock>
 801ac2e:	6833      	ldr	r3, [r6, #0]
 801ac30:	461c      	mov	r4, r3
 801ac32:	bb34      	cbnz	r4, 801ac82 <_malloc_r+0x82>
 801ac34:	4629      	mov	r1, r5
 801ac36:	4638      	mov	r0, r7
 801ac38:	f7ff ffc2 	bl	801abc0 <sbrk_aligned>
 801ac3c:	1c43      	adds	r3, r0, #1
 801ac3e:	4604      	mov	r4, r0
 801ac40:	d14d      	bne.n	801acde <_malloc_r+0xde>
 801ac42:	6834      	ldr	r4, [r6, #0]
 801ac44:	4626      	mov	r6, r4
 801ac46:	2e00      	cmp	r6, #0
 801ac48:	d140      	bne.n	801accc <_malloc_r+0xcc>
 801ac4a:	6823      	ldr	r3, [r4, #0]
 801ac4c:	4631      	mov	r1, r6
 801ac4e:	4638      	mov	r0, r7
 801ac50:	eb04 0803 	add.w	r8, r4, r3
 801ac54:	f000 fb7e 	bl	801b354 <_sbrk_r>
 801ac58:	4580      	cmp	r8, r0
 801ac5a:	d13a      	bne.n	801acd2 <_malloc_r+0xd2>
 801ac5c:	6821      	ldr	r1, [r4, #0]
 801ac5e:	3503      	adds	r5, #3
 801ac60:	1a6d      	subs	r5, r5, r1
 801ac62:	f025 0503 	bic.w	r5, r5, #3
 801ac66:	3508      	adds	r5, #8
 801ac68:	2d0c      	cmp	r5, #12
 801ac6a:	bf38      	it	cc
 801ac6c:	250c      	movcc	r5, #12
 801ac6e:	4629      	mov	r1, r5
 801ac70:	4638      	mov	r0, r7
 801ac72:	f7ff ffa5 	bl	801abc0 <sbrk_aligned>
 801ac76:	3001      	adds	r0, #1
 801ac78:	d02b      	beq.n	801acd2 <_malloc_r+0xd2>
 801ac7a:	6823      	ldr	r3, [r4, #0]
 801ac7c:	442b      	add	r3, r5
 801ac7e:	6023      	str	r3, [r4, #0]
 801ac80:	e00e      	b.n	801aca0 <_malloc_r+0xa0>
 801ac82:	6822      	ldr	r2, [r4, #0]
 801ac84:	1b52      	subs	r2, r2, r5
 801ac86:	d41e      	bmi.n	801acc6 <_malloc_r+0xc6>
 801ac88:	2a0b      	cmp	r2, #11
 801ac8a:	d916      	bls.n	801acba <_malloc_r+0xba>
 801ac8c:	1961      	adds	r1, r4, r5
 801ac8e:	42a3      	cmp	r3, r4
 801ac90:	6025      	str	r5, [r4, #0]
 801ac92:	bf18      	it	ne
 801ac94:	6059      	strne	r1, [r3, #4]
 801ac96:	6863      	ldr	r3, [r4, #4]
 801ac98:	bf08      	it	eq
 801ac9a:	6031      	streq	r1, [r6, #0]
 801ac9c:	5162      	str	r2, [r4, r5]
 801ac9e:	604b      	str	r3, [r1, #4]
 801aca0:	4638      	mov	r0, r7
 801aca2:	f104 060b 	add.w	r6, r4, #11
 801aca6:	f000 fc0d 	bl	801b4c4 <__malloc_unlock>
 801acaa:	f026 0607 	bic.w	r6, r6, #7
 801acae:	1d23      	adds	r3, r4, #4
 801acb0:	1af2      	subs	r2, r6, r3
 801acb2:	d0b6      	beq.n	801ac22 <_malloc_r+0x22>
 801acb4:	1b9b      	subs	r3, r3, r6
 801acb6:	50a3      	str	r3, [r4, r2]
 801acb8:	e7b3      	b.n	801ac22 <_malloc_r+0x22>
 801acba:	6862      	ldr	r2, [r4, #4]
 801acbc:	42a3      	cmp	r3, r4
 801acbe:	bf0c      	ite	eq
 801acc0:	6032      	streq	r2, [r6, #0]
 801acc2:	605a      	strne	r2, [r3, #4]
 801acc4:	e7ec      	b.n	801aca0 <_malloc_r+0xa0>
 801acc6:	4623      	mov	r3, r4
 801acc8:	6864      	ldr	r4, [r4, #4]
 801acca:	e7b2      	b.n	801ac32 <_malloc_r+0x32>
 801accc:	4634      	mov	r4, r6
 801acce:	6876      	ldr	r6, [r6, #4]
 801acd0:	e7b9      	b.n	801ac46 <_malloc_r+0x46>
 801acd2:	230c      	movs	r3, #12
 801acd4:	603b      	str	r3, [r7, #0]
 801acd6:	4638      	mov	r0, r7
 801acd8:	f000 fbf4 	bl	801b4c4 <__malloc_unlock>
 801acdc:	e7a1      	b.n	801ac22 <_malloc_r+0x22>
 801acde:	6025      	str	r5, [r4, #0]
 801ace0:	e7de      	b.n	801aca0 <_malloc_r+0xa0>
 801ace2:	bf00      	nop
 801ace4:	24001ed4 	.word	0x24001ed4

0801ace8 <__sfputc_r>:
 801ace8:	6893      	ldr	r3, [r2, #8]
 801acea:	3b01      	subs	r3, #1
 801acec:	2b00      	cmp	r3, #0
 801acee:	b410      	push	{r4}
 801acf0:	6093      	str	r3, [r2, #8]
 801acf2:	da08      	bge.n	801ad06 <__sfputc_r+0x1e>
 801acf4:	6994      	ldr	r4, [r2, #24]
 801acf6:	42a3      	cmp	r3, r4
 801acf8:	db01      	blt.n	801acfe <__sfputc_r+0x16>
 801acfa:	290a      	cmp	r1, #10
 801acfc:	d103      	bne.n	801ad06 <__sfputc_r+0x1e>
 801acfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad02:	f7ff bbf9 	b.w	801a4f8 <__swbuf_r>
 801ad06:	6813      	ldr	r3, [r2, #0]
 801ad08:	1c58      	adds	r0, r3, #1
 801ad0a:	6010      	str	r0, [r2, #0]
 801ad0c:	7019      	strb	r1, [r3, #0]
 801ad0e:	4608      	mov	r0, r1
 801ad10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad14:	4770      	bx	lr

0801ad16 <__sfputs_r>:
 801ad16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad18:	4606      	mov	r6, r0
 801ad1a:	460f      	mov	r7, r1
 801ad1c:	4614      	mov	r4, r2
 801ad1e:	18d5      	adds	r5, r2, r3
 801ad20:	42ac      	cmp	r4, r5
 801ad22:	d101      	bne.n	801ad28 <__sfputs_r+0x12>
 801ad24:	2000      	movs	r0, #0
 801ad26:	e007      	b.n	801ad38 <__sfputs_r+0x22>
 801ad28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad2c:	463a      	mov	r2, r7
 801ad2e:	4630      	mov	r0, r6
 801ad30:	f7ff ffda 	bl	801ace8 <__sfputc_r>
 801ad34:	1c43      	adds	r3, r0, #1
 801ad36:	d1f3      	bne.n	801ad20 <__sfputs_r+0xa>
 801ad38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ad3c <_vfiprintf_r>:
 801ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad40:	460d      	mov	r5, r1
 801ad42:	b09d      	sub	sp, #116	; 0x74
 801ad44:	4614      	mov	r4, r2
 801ad46:	4698      	mov	r8, r3
 801ad48:	4606      	mov	r6, r0
 801ad4a:	b118      	cbz	r0, 801ad54 <_vfiprintf_r+0x18>
 801ad4c:	6983      	ldr	r3, [r0, #24]
 801ad4e:	b90b      	cbnz	r3, 801ad54 <_vfiprintf_r+0x18>
 801ad50:	f7ff fdca 	bl	801a8e8 <__sinit>
 801ad54:	4b89      	ldr	r3, [pc, #548]	; (801af7c <_vfiprintf_r+0x240>)
 801ad56:	429d      	cmp	r5, r3
 801ad58:	d11b      	bne.n	801ad92 <_vfiprintf_r+0x56>
 801ad5a:	6875      	ldr	r5, [r6, #4]
 801ad5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad5e:	07d9      	lsls	r1, r3, #31
 801ad60:	d405      	bmi.n	801ad6e <_vfiprintf_r+0x32>
 801ad62:	89ab      	ldrh	r3, [r5, #12]
 801ad64:	059a      	lsls	r2, r3, #22
 801ad66:	d402      	bmi.n	801ad6e <_vfiprintf_r+0x32>
 801ad68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad6a:	f7ff fe6d 	bl	801aa48 <__retarget_lock_acquire_recursive>
 801ad6e:	89ab      	ldrh	r3, [r5, #12]
 801ad70:	071b      	lsls	r3, r3, #28
 801ad72:	d501      	bpl.n	801ad78 <_vfiprintf_r+0x3c>
 801ad74:	692b      	ldr	r3, [r5, #16]
 801ad76:	b9eb      	cbnz	r3, 801adb4 <_vfiprintf_r+0x78>
 801ad78:	4629      	mov	r1, r5
 801ad7a:	4630      	mov	r0, r6
 801ad7c:	f7ff fc0e 	bl	801a59c <__swsetup_r>
 801ad80:	b1c0      	cbz	r0, 801adb4 <_vfiprintf_r+0x78>
 801ad82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad84:	07dc      	lsls	r4, r3, #31
 801ad86:	d50e      	bpl.n	801ada6 <_vfiprintf_r+0x6a>
 801ad88:	f04f 30ff 	mov.w	r0, #4294967295
 801ad8c:	b01d      	add	sp, #116	; 0x74
 801ad8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad92:	4b7b      	ldr	r3, [pc, #492]	; (801af80 <_vfiprintf_r+0x244>)
 801ad94:	429d      	cmp	r5, r3
 801ad96:	d101      	bne.n	801ad9c <_vfiprintf_r+0x60>
 801ad98:	68b5      	ldr	r5, [r6, #8]
 801ad9a:	e7df      	b.n	801ad5c <_vfiprintf_r+0x20>
 801ad9c:	4b79      	ldr	r3, [pc, #484]	; (801af84 <_vfiprintf_r+0x248>)
 801ad9e:	429d      	cmp	r5, r3
 801ada0:	bf08      	it	eq
 801ada2:	68f5      	ldreq	r5, [r6, #12]
 801ada4:	e7da      	b.n	801ad5c <_vfiprintf_r+0x20>
 801ada6:	89ab      	ldrh	r3, [r5, #12]
 801ada8:	0598      	lsls	r0, r3, #22
 801adaa:	d4ed      	bmi.n	801ad88 <_vfiprintf_r+0x4c>
 801adac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801adae:	f7ff fe4c 	bl	801aa4a <__retarget_lock_release_recursive>
 801adb2:	e7e9      	b.n	801ad88 <_vfiprintf_r+0x4c>
 801adb4:	2300      	movs	r3, #0
 801adb6:	9309      	str	r3, [sp, #36]	; 0x24
 801adb8:	2320      	movs	r3, #32
 801adba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801adbe:	f8cd 800c 	str.w	r8, [sp, #12]
 801adc2:	2330      	movs	r3, #48	; 0x30
 801adc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801af88 <_vfiprintf_r+0x24c>
 801adc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801adcc:	f04f 0901 	mov.w	r9, #1
 801add0:	4623      	mov	r3, r4
 801add2:	469a      	mov	sl, r3
 801add4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801add8:	b10a      	cbz	r2, 801adde <_vfiprintf_r+0xa2>
 801adda:	2a25      	cmp	r2, #37	; 0x25
 801addc:	d1f9      	bne.n	801add2 <_vfiprintf_r+0x96>
 801adde:	ebba 0b04 	subs.w	fp, sl, r4
 801ade2:	d00b      	beq.n	801adfc <_vfiprintf_r+0xc0>
 801ade4:	465b      	mov	r3, fp
 801ade6:	4622      	mov	r2, r4
 801ade8:	4629      	mov	r1, r5
 801adea:	4630      	mov	r0, r6
 801adec:	f7ff ff93 	bl	801ad16 <__sfputs_r>
 801adf0:	3001      	adds	r0, #1
 801adf2:	f000 80aa 	beq.w	801af4a <_vfiprintf_r+0x20e>
 801adf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801adf8:	445a      	add	r2, fp
 801adfa:	9209      	str	r2, [sp, #36]	; 0x24
 801adfc:	f89a 3000 	ldrb.w	r3, [sl]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	f000 80a2 	beq.w	801af4a <_vfiprintf_r+0x20e>
 801ae06:	2300      	movs	r3, #0
 801ae08:	f04f 32ff 	mov.w	r2, #4294967295
 801ae0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae10:	f10a 0a01 	add.w	sl, sl, #1
 801ae14:	9304      	str	r3, [sp, #16]
 801ae16:	9307      	str	r3, [sp, #28]
 801ae18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ae1c:	931a      	str	r3, [sp, #104]	; 0x68
 801ae1e:	4654      	mov	r4, sl
 801ae20:	2205      	movs	r2, #5
 801ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae26:	4858      	ldr	r0, [pc, #352]	; (801af88 <_vfiprintf_r+0x24c>)
 801ae28:	f7e5 fb7a 	bl	8000520 <memchr>
 801ae2c:	9a04      	ldr	r2, [sp, #16]
 801ae2e:	b9d8      	cbnz	r0, 801ae68 <_vfiprintf_r+0x12c>
 801ae30:	06d1      	lsls	r1, r2, #27
 801ae32:	bf44      	itt	mi
 801ae34:	2320      	movmi	r3, #32
 801ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae3a:	0713      	lsls	r3, r2, #28
 801ae3c:	bf44      	itt	mi
 801ae3e:	232b      	movmi	r3, #43	; 0x2b
 801ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae44:	f89a 3000 	ldrb.w	r3, [sl]
 801ae48:	2b2a      	cmp	r3, #42	; 0x2a
 801ae4a:	d015      	beq.n	801ae78 <_vfiprintf_r+0x13c>
 801ae4c:	9a07      	ldr	r2, [sp, #28]
 801ae4e:	4654      	mov	r4, sl
 801ae50:	2000      	movs	r0, #0
 801ae52:	f04f 0c0a 	mov.w	ip, #10
 801ae56:	4621      	mov	r1, r4
 801ae58:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae5c:	3b30      	subs	r3, #48	; 0x30
 801ae5e:	2b09      	cmp	r3, #9
 801ae60:	d94e      	bls.n	801af00 <_vfiprintf_r+0x1c4>
 801ae62:	b1b0      	cbz	r0, 801ae92 <_vfiprintf_r+0x156>
 801ae64:	9207      	str	r2, [sp, #28]
 801ae66:	e014      	b.n	801ae92 <_vfiprintf_r+0x156>
 801ae68:	eba0 0308 	sub.w	r3, r0, r8
 801ae6c:	fa09 f303 	lsl.w	r3, r9, r3
 801ae70:	4313      	orrs	r3, r2
 801ae72:	9304      	str	r3, [sp, #16]
 801ae74:	46a2      	mov	sl, r4
 801ae76:	e7d2      	b.n	801ae1e <_vfiprintf_r+0xe2>
 801ae78:	9b03      	ldr	r3, [sp, #12]
 801ae7a:	1d19      	adds	r1, r3, #4
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	9103      	str	r1, [sp, #12]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	bfbb      	ittet	lt
 801ae84:	425b      	neglt	r3, r3
 801ae86:	f042 0202 	orrlt.w	r2, r2, #2
 801ae8a:	9307      	strge	r3, [sp, #28]
 801ae8c:	9307      	strlt	r3, [sp, #28]
 801ae8e:	bfb8      	it	lt
 801ae90:	9204      	strlt	r2, [sp, #16]
 801ae92:	7823      	ldrb	r3, [r4, #0]
 801ae94:	2b2e      	cmp	r3, #46	; 0x2e
 801ae96:	d10c      	bne.n	801aeb2 <_vfiprintf_r+0x176>
 801ae98:	7863      	ldrb	r3, [r4, #1]
 801ae9a:	2b2a      	cmp	r3, #42	; 0x2a
 801ae9c:	d135      	bne.n	801af0a <_vfiprintf_r+0x1ce>
 801ae9e:	9b03      	ldr	r3, [sp, #12]
 801aea0:	1d1a      	adds	r2, r3, #4
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	9203      	str	r2, [sp, #12]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	bfb8      	it	lt
 801aeaa:	f04f 33ff 	movlt.w	r3, #4294967295
 801aeae:	3402      	adds	r4, #2
 801aeb0:	9305      	str	r3, [sp, #20]
 801aeb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801af98 <_vfiprintf_r+0x25c>
 801aeb6:	7821      	ldrb	r1, [r4, #0]
 801aeb8:	2203      	movs	r2, #3
 801aeba:	4650      	mov	r0, sl
 801aebc:	f7e5 fb30 	bl	8000520 <memchr>
 801aec0:	b140      	cbz	r0, 801aed4 <_vfiprintf_r+0x198>
 801aec2:	2340      	movs	r3, #64	; 0x40
 801aec4:	eba0 000a 	sub.w	r0, r0, sl
 801aec8:	fa03 f000 	lsl.w	r0, r3, r0
 801aecc:	9b04      	ldr	r3, [sp, #16]
 801aece:	4303      	orrs	r3, r0
 801aed0:	3401      	adds	r4, #1
 801aed2:	9304      	str	r3, [sp, #16]
 801aed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aed8:	482c      	ldr	r0, [pc, #176]	; (801af8c <_vfiprintf_r+0x250>)
 801aeda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aede:	2206      	movs	r2, #6
 801aee0:	f7e5 fb1e 	bl	8000520 <memchr>
 801aee4:	2800      	cmp	r0, #0
 801aee6:	d03f      	beq.n	801af68 <_vfiprintf_r+0x22c>
 801aee8:	4b29      	ldr	r3, [pc, #164]	; (801af90 <_vfiprintf_r+0x254>)
 801aeea:	bb1b      	cbnz	r3, 801af34 <_vfiprintf_r+0x1f8>
 801aeec:	9b03      	ldr	r3, [sp, #12]
 801aeee:	3307      	adds	r3, #7
 801aef0:	f023 0307 	bic.w	r3, r3, #7
 801aef4:	3308      	adds	r3, #8
 801aef6:	9303      	str	r3, [sp, #12]
 801aef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aefa:	443b      	add	r3, r7
 801aefc:	9309      	str	r3, [sp, #36]	; 0x24
 801aefe:	e767      	b.n	801add0 <_vfiprintf_r+0x94>
 801af00:	fb0c 3202 	mla	r2, ip, r2, r3
 801af04:	460c      	mov	r4, r1
 801af06:	2001      	movs	r0, #1
 801af08:	e7a5      	b.n	801ae56 <_vfiprintf_r+0x11a>
 801af0a:	2300      	movs	r3, #0
 801af0c:	3401      	adds	r4, #1
 801af0e:	9305      	str	r3, [sp, #20]
 801af10:	4619      	mov	r1, r3
 801af12:	f04f 0c0a 	mov.w	ip, #10
 801af16:	4620      	mov	r0, r4
 801af18:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af1c:	3a30      	subs	r2, #48	; 0x30
 801af1e:	2a09      	cmp	r2, #9
 801af20:	d903      	bls.n	801af2a <_vfiprintf_r+0x1ee>
 801af22:	2b00      	cmp	r3, #0
 801af24:	d0c5      	beq.n	801aeb2 <_vfiprintf_r+0x176>
 801af26:	9105      	str	r1, [sp, #20]
 801af28:	e7c3      	b.n	801aeb2 <_vfiprintf_r+0x176>
 801af2a:	fb0c 2101 	mla	r1, ip, r1, r2
 801af2e:	4604      	mov	r4, r0
 801af30:	2301      	movs	r3, #1
 801af32:	e7f0      	b.n	801af16 <_vfiprintf_r+0x1da>
 801af34:	ab03      	add	r3, sp, #12
 801af36:	9300      	str	r3, [sp, #0]
 801af38:	462a      	mov	r2, r5
 801af3a:	4b16      	ldr	r3, [pc, #88]	; (801af94 <_vfiprintf_r+0x258>)
 801af3c:	a904      	add	r1, sp, #16
 801af3e:	4630      	mov	r0, r6
 801af40:	f3af 8000 	nop.w
 801af44:	4607      	mov	r7, r0
 801af46:	1c78      	adds	r0, r7, #1
 801af48:	d1d6      	bne.n	801aef8 <_vfiprintf_r+0x1bc>
 801af4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af4c:	07d9      	lsls	r1, r3, #31
 801af4e:	d405      	bmi.n	801af5c <_vfiprintf_r+0x220>
 801af50:	89ab      	ldrh	r3, [r5, #12]
 801af52:	059a      	lsls	r2, r3, #22
 801af54:	d402      	bmi.n	801af5c <_vfiprintf_r+0x220>
 801af56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af58:	f7ff fd77 	bl	801aa4a <__retarget_lock_release_recursive>
 801af5c:	89ab      	ldrh	r3, [r5, #12]
 801af5e:	065b      	lsls	r3, r3, #25
 801af60:	f53f af12 	bmi.w	801ad88 <_vfiprintf_r+0x4c>
 801af64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af66:	e711      	b.n	801ad8c <_vfiprintf_r+0x50>
 801af68:	ab03      	add	r3, sp, #12
 801af6a:	9300      	str	r3, [sp, #0]
 801af6c:	462a      	mov	r2, r5
 801af6e:	4b09      	ldr	r3, [pc, #36]	; (801af94 <_vfiprintf_r+0x258>)
 801af70:	a904      	add	r1, sp, #16
 801af72:	4630      	mov	r0, r6
 801af74:	f000 f880 	bl	801b078 <_printf_i>
 801af78:	e7e4      	b.n	801af44 <_vfiprintf_r+0x208>
 801af7a:	bf00      	nop
 801af7c:	0801b7e8 	.word	0x0801b7e8
 801af80:	0801b808 	.word	0x0801b808
 801af84:	0801b7c8 	.word	0x0801b7c8
 801af88:	0801b828 	.word	0x0801b828
 801af8c:	0801b832 	.word	0x0801b832
 801af90:	00000000 	.word	0x00000000
 801af94:	0801ad17 	.word	0x0801ad17
 801af98:	0801b82e 	.word	0x0801b82e

0801af9c <_printf_common>:
 801af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afa0:	4616      	mov	r6, r2
 801afa2:	4699      	mov	r9, r3
 801afa4:	688a      	ldr	r2, [r1, #8]
 801afa6:	690b      	ldr	r3, [r1, #16]
 801afa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801afac:	4293      	cmp	r3, r2
 801afae:	bfb8      	it	lt
 801afb0:	4613      	movlt	r3, r2
 801afb2:	6033      	str	r3, [r6, #0]
 801afb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801afb8:	4607      	mov	r7, r0
 801afba:	460c      	mov	r4, r1
 801afbc:	b10a      	cbz	r2, 801afc2 <_printf_common+0x26>
 801afbe:	3301      	adds	r3, #1
 801afc0:	6033      	str	r3, [r6, #0]
 801afc2:	6823      	ldr	r3, [r4, #0]
 801afc4:	0699      	lsls	r1, r3, #26
 801afc6:	bf42      	ittt	mi
 801afc8:	6833      	ldrmi	r3, [r6, #0]
 801afca:	3302      	addmi	r3, #2
 801afcc:	6033      	strmi	r3, [r6, #0]
 801afce:	6825      	ldr	r5, [r4, #0]
 801afd0:	f015 0506 	ands.w	r5, r5, #6
 801afd4:	d106      	bne.n	801afe4 <_printf_common+0x48>
 801afd6:	f104 0a19 	add.w	sl, r4, #25
 801afda:	68e3      	ldr	r3, [r4, #12]
 801afdc:	6832      	ldr	r2, [r6, #0]
 801afde:	1a9b      	subs	r3, r3, r2
 801afe0:	42ab      	cmp	r3, r5
 801afe2:	dc26      	bgt.n	801b032 <_printf_common+0x96>
 801afe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801afe8:	1e13      	subs	r3, r2, #0
 801afea:	6822      	ldr	r2, [r4, #0]
 801afec:	bf18      	it	ne
 801afee:	2301      	movne	r3, #1
 801aff0:	0692      	lsls	r2, r2, #26
 801aff2:	d42b      	bmi.n	801b04c <_printf_common+0xb0>
 801aff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aff8:	4649      	mov	r1, r9
 801affa:	4638      	mov	r0, r7
 801affc:	47c0      	blx	r8
 801affe:	3001      	adds	r0, #1
 801b000:	d01e      	beq.n	801b040 <_printf_common+0xa4>
 801b002:	6823      	ldr	r3, [r4, #0]
 801b004:	68e5      	ldr	r5, [r4, #12]
 801b006:	6832      	ldr	r2, [r6, #0]
 801b008:	f003 0306 	and.w	r3, r3, #6
 801b00c:	2b04      	cmp	r3, #4
 801b00e:	bf08      	it	eq
 801b010:	1aad      	subeq	r5, r5, r2
 801b012:	68a3      	ldr	r3, [r4, #8]
 801b014:	6922      	ldr	r2, [r4, #16]
 801b016:	bf0c      	ite	eq
 801b018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b01c:	2500      	movne	r5, #0
 801b01e:	4293      	cmp	r3, r2
 801b020:	bfc4      	itt	gt
 801b022:	1a9b      	subgt	r3, r3, r2
 801b024:	18ed      	addgt	r5, r5, r3
 801b026:	2600      	movs	r6, #0
 801b028:	341a      	adds	r4, #26
 801b02a:	42b5      	cmp	r5, r6
 801b02c:	d11a      	bne.n	801b064 <_printf_common+0xc8>
 801b02e:	2000      	movs	r0, #0
 801b030:	e008      	b.n	801b044 <_printf_common+0xa8>
 801b032:	2301      	movs	r3, #1
 801b034:	4652      	mov	r2, sl
 801b036:	4649      	mov	r1, r9
 801b038:	4638      	mov	r0, r7
 801b03a:	47c0      	blx	r8
 801b03c:	3001      	adds	r0, #1
 801b03e:	d103      	bne.n	801b048 <_printf_common+0xac>
 801b040:	f04f 30ff 	mov.w	r0, #4294967295
 801b044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b048:	3501      	adds	r5, #1
 801b04a:	e7c6      	b.n	801afda <_printf_common+0x3e>
 801b04c:	18e1      	adds	r1, r4, r3
 801b04e:	1c5a      	adds	r2, r3, #1
 801b050:	2030      	movs	r0, #48	; 0x30
 801b052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b056:	4422      	add	r2, r4
 801b058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b05c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b060:	3302      	adds	r3, #2
 801b062:	e7c7      	b.n	801aff4 <_printf_common+0x58>
 801b064:	2301      	movs	r3, #1
 801b066:	4622      	mov	r2, r4
 801b068:	4649      	mov	r1, r9
 801b06a:	4638      	mov	r0, r7
 801b06c:	47c0      	blx	r8
 801b06e:	3001      	adds	r0, #1
 801b070:	d0e6      	beq.n	801b040 <_printf_common+0xa4>
 801b072:	3601      	adds	r6, #1
 801b074:	e7d9      	b.n	801b02a <_printf_common+0x8e>
	...

0801b078 <_printf_i>:
 801b078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b07c:	7e0f      	ldrb	r7, [r1, #24]
 801b07e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b080:	2f78      	cmp	r7, #120	; 0x78
 801b082:	4691      	mov	r9, r2
 801b084:	4680      	mov	r8, r0
 801b086:	460c      	mov	r4, r1
 801b088:	469a      	mov	sl, r3
 801b08a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b08e:	d807      	bhi.n	801b0a0 <_printf_i+0x28>
 801b090:	2f62      	cmp	r7, #98	; 0x62
 801b092:	d80a      	bhi.n	801b0aa <_printf_i+0x32>
 801b094:	2f00      	cmp	r7, #0
 801b096:	f000 80d8 	beq.w	801b24a <_printf_i+0x1d2>
 801b09a:	2f58      	cmp	r7, #88	; 0x58
 801b09c:	f000 80a3 	beq.w	801b1e6 <_printf_i+0x16e>
 801b0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b0a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b0a8:	e03a      	b.n	801b120 <_printf_i+0xa8>
 801b0aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b0ae:	2b15      	cmp	r3, #21
 801b0b0:	d8f6      	bhi.n	801b0a0 <_printf_i+0x28>
 801b0b2:	a101      	add	r1, pc, #4	; (adr r1, 801b0b8 <_printf_i+0x40>)
 801b0b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b0b8:	0801b111 	.word	0x0801b111
 801b0bc:	0801b125 	.word	0x0801b125
 801b0c0:	0801b0a1 	.word	0x0801b0a1
 801b0c4:	0801b0a1 	.word	0x0801b0a1
 801b0c8:	0801b0a1 	.word	0x0801b0a1
 801b0cc:	0801b0a1 	.word	0x0801b0a1
 801b0d0:	0801b125 	.word	0x0801b125
 801b0d4:	0801b0a1 	.word	0x0801b0a1
 801b0d8:	0801b0a1 	.word	0x0801b0a1
 801b0dc:	0801b0a1 	.word	0x0801b0a1
 801b0e0:	0801b0a1 	.word	0x0801b0a1
 801b0e4:	0801b231 	.word	0x0801b231
 801b0e8:	0801b155 	.word	0x0801b155
 801b0ec:	0801b213 	.word	0x0801b213
 801b0f0:	0801b0a1 	.word	0x0801b0a1
 801b0f4:	0801b0a1 	.word	0x0801b0a1
 801b0f8:	0801b253 	.word	0x0801b253
 801b0fc:	0801b0a1 	.word	0x0801b0a1
 801b100:	0801b155 	.word	0x0801b155
 801b104:	0801b0a1 	.word	0x0801b0a1
 801b108:	0801b0a1 	.word	0x0801b0a1
 801b10c:	0801b21b 	.word	0x0801b21b
 801b110:	682b      	ldr	r3, [r5, #0]
 801b112:	1d1a      	adds	r2, r3, #4
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	602a      	str	r2, [r5, #0]
 801b118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b11c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b120:	2301      	movs	r3, #1
 801b122:	e0a3      	b.n	801b26c <_printf_i+0x1f4>
 801b124:	6820      	ldr	r0, [r4, #0]
 801b126:	6829      	ldr	r1, [r5, #0]
 801b128:	0606      	lsls	r6, r0, #24
 801b12a:	f101 0304 	add.w	r3, r1, #4
 801b12e:	d50a      	bpl.n	801b146 <_printf_i+0xce>
 801b130:	680e      	ldr	r6, [r1, #0]
 801b132:	602b      	str	r3, [r5, #0]
 801b134:	2e00      	cmp	r6, #0
 801b136:	da03      	bge.n	801b140 <_printf_i+0xc8>
 801b138:	232d      	movs	r3, #45	; 0x2d
 801b13a:	4276      	negs	r6, r6
 801b13c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b140:	485e      	ldr	r0, [pc, #376]	; (801b2bc <_printf_i+0x244>)
 801b142:	230a      	movs	r3, #10
 801b144:	e019      	b.n	801b17a <_printf_i+0x102>
 801b146:	680e      	ldr	r6, [r1, #0]
 801b148:	602b      	str	r3, [r5, #0]
 801b14a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b14e:	bf18      	it	ne
 801b150:	b236      	sxthne	r6, r6
 801b152:	e7ef      	b.n	801b134 <_printf_i+0xbc>
 801b154:	682b      	ldr	r3, [r5, #0]
 801b156:	6820      	ldr	r0, [r4, #0]
 801b158:	1d19      	adds	r1, r3, #4
 801b15a:	6029      	str	r1, [r5, #0]
 801b15c:	0601      	lsls	r1, r0, #24
 801b15e:	d501      	bpl.n	801b164 <_printf_i+0xec>
 801b160:	681e      	ldr	r6, [r3, #0]
 801b162:	e002      	b.n	801b16a <_printf_i+0xf2>
 801b164:	0646      	lsls	r6, r0, #25
 801b166:	d5fb      	bpl.n	801b160 <_printf_i+0xe8>
 801b168:	881e      	ldrh	r6, [r3, #0]
 801b16a:	4854      	ldr	r0, [pc, #336]	; (801b2bc <_printf_i+0x244>)
 801b16c:	2f6f      	cmp	r7, #111	; 0x6f
 801b16e:	bf0c      	ite	eq
 801b170:	2308      	moveq	r3, #8
 801b172:	230a      	movne	r3, #10
 801b174:	2100      	movs	r1, #0
 801b176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b17a:	6865      	ldr	r5, [r4, #4]
 801b17c:	60a5      	str	r5, [r4, #8]
 801b17e:	2d00      	cmp	r5, #0
 801b180:	bfa2      	ittt	ge
 801b182:	6821      	ldrge	r1, [r4, #0]
 801b184:	f021 0104 	bicge.w	r1, r1, #4
 801b188:	6021      	strge	r1, [r4, #0]
 801b18a:	b90e      	cbnz	r6, 801b190 <_printf_i+0x118>
 801b18c:	2d00      	cmp	r5, #0
 801b18e:	d04d      	beq.n	801b22c <_printf_i+0x1b4>
 801b190:	4615      	mov	r5, r2
 801b192:	fbb6 f1f3 	udiv	r1, r6, r3
 801b196:	fb03 6711 	mls	r7, r3, r1, r6
 801b19a:	5dc7      	ldrb	r7, [r0, r7]
 801b19c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b1a0:	4637      	mov	r7, r6
 801b1a2:	42bb      	cmp	r3, r7
 801b1a4:	460e      	mov	r6, r1
 801b1a6:	d9f4      	bls.n	801b192 <_printf_i+0x11a>
 801b1a8:	2b08      	cmp	r3, #8
 801b1aa:	d10b      	bne.n	801b1c4 <_printf_i+0x14c>
 801b1ac:	6823      	ldr	r3, [r4, #0]
 801b1ae:	07de      	lsls	r6, r3, #31
 801b1b0:	d508      	bpl.n	801b1c4 <_printf_i+0x14c>
 801b1b2:	6923      	ldr	r3, [r4, #16]
 801b1b4:	6861      	ldr	r1, [r4, #4]
 801b1b6:	4299      	cmp	r1, r3
 801b1b8:	bfde      	ittt	le
 801b1ba:	2330      	movle	r3, #48	; 0x30
 801b1bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b1c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b1c4:	1b52      	subs	r2, r2, r5
 801b1c6:	6122      	str	r2, [r4, #16]
 801b1c8:	f8cd a000 	str.w	sl, [sp]
 801b1cc:	464b      	mov	r3, r9
 801b1ce:	aa03      	add	r2, sp, #12
 801b1d0:	4621      	mov	r1, r4
 801b1d2:	4640      	mov	r0, r8
 801b1d4:	f7ff fee2 	bl	801af9c <_printf_common>
 801b1d8:	3001      	adds	r0, #1
 801b1da:	d14c      	bne.n	801b276 <_printf_i+0x1fe>
 801b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 801b1e0:	b004      	add	sp, #16
 801b1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1e6:	4835      	ldr	r0, [pc, #212]	; (801b2bc <_printf_i+0x244>)
 801b1e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b1ec:	6829      	ldr	r1, [r5, #0]
 801b1ee:	6823      	ldr	r3, [r4, #0]
 801b1f0:	f851 6b04 	ldr.w	r6, [r1], #4
 801b1f4:	6029      	str	r1, [r5, #0]
 801b1f6:	061d      	lsls	r5, r3, #24
 801b1f8:	d514      	bpl.n	801b224 <_printf_i+0x1ac>
 801b1fa:	07df      	lsls	r7, r3, #31
 801b1fc:	bf44      	itt	mi
 801b1fe:	f043 0320 	orrmi.w	r3, r3, #32
 801b202:	6023      	strmi	r3, [r4, #0]
 801b204:	b91e      	cbnz	r6, 801b20e <_printf_i+0x196>
 801b206:	6823      	ldr	r3, [r4, #0]
 801b208:	f023 0320 	bic.w	r3, r3, #32
 801b20c:	6023      	str	r3, [r4, #0]
 801b20e:	2310      	movs	r3, #16
 801b210:	e7b0      	b.n	801b174 <_printf_i+0xfc>
 801b212:	6823      	ldr	r3, [r4, #0]
 801b214:	f043 0320 	orr.w	r3, r3, #32
 801b218:	6023      	str	r3, [r4, #0]
 801b21a:	2378      	movs	r3, #120	; 0x78
 801b21c:	4828      	ldr	r0, [pc, #160]	; (801b2c0 <_printf_i+0x248>)
 801b21e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b222:	e7e3      	b.n	801b1ec <_printf_i+0x174>
 801b224:	0659      	lsls	r1, r3, #25
 801b226:	bf48      	it	mi
 801b228:	b2b6      	uxthmi	r6, r6
 801b22a:	e7e6      	b.n	801b1fa <_printf_i+0x182>
 801b22c:	4615      	mov	r5, r2
 801b22e:	e7bb      	b.n	801b1a8 <_printf_i+0x130>
 801b230:	682b      	ldr	r3, [r5, #0]
 801b232:	6826      	ldr	r6, [r4, #0]
 801b234:	6961      	ldr	r1, [r4, #20]
 801b236:	1d18      	adds	r0, r3, #4
 801b238:	6028      	str	r0, [r5, #0]
 801b23a:	0635      	lsls	r5, r6, #24
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	d501      	bpl.n	801b244 <_printf_i+0x1cc>
 801b240:	6019      	str	r1, [r3, #0]
 801b242:	e002      	b.n	801b24a <_printf_i+0x1d2>
 801b244:	0670      	lsls	r0, r6, #25
 801b246:	d5fb      	bpl.n	801b240 <_printf_i+0x1c8>
 801b248:	8019      	strh	r1, [r3, #0]
 801b24a:	2300      	movs	r3, #0
 801b24c:	6123      	str	r3, [r4, #16]
 801b24e:	4615      	mov	r5, r2
 801b250:	e7ba      	b.n	801b1c8 <_printf_i+0x150>
 801b252:	682b      	ldr	r3, [r5, #0]
 801b254:	1d1a      	adds	r2, r3, #4
 801b256:	602a      	str	r2, [r5, #0]
 801b258:	681d      	ldr	r5, [r3, #0]
 801b25a:	6862      	ldr	r2, [r4, #4]
 801b25c:	2100      	movs	r1, #0
 801b25e:	4628      	mov	r0, r5
 801b260:	f7e5 f95e 	bl	8000520 <memchr>
 801b264:	b108      	cbz	r0, 801b26a <_printf_i+0x1f2>
 801b266:	1b40      	subs	r0, r0, r5
 801b268:	6060      	str	r0, [r4, #4]
 801b26a:	6863      	ldr	r3, [r4, #4]
 801b26c:	6123      	str	r3, [r4, #16]
 801b26e:	2300      	movs	r3, #0
 801b270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b274:	e7a8      	b.n	801b1c8 <_printf_i+0x150>
 801b276:	6923      	ldr	r3, [r4, #16]
 801b278:	462a      	mov	r2, r5
 801b27a:	4649      	mov	r1, r9
 801b27c:	4640      	mov	r0, r8
 801b27e:	47d0      	blx	sl
 801b280:	3001      	adds	r0, #1
 801b282:	d0ab      	beq.n	801b1dc <_printf_i+0x164>
 801b284:	6823      	ldr	r3, [r4, #0]
 801b286:	079b      	lsls	r3, r3, #30
 801b288:	d413      	bmi.n	801b2b2 <_printf_i+0x23a>
 801b28a:	68e0      	ldr	r0, [r4, #12]
 801b28c:	9b03      	ldr	r3, [sp, #12]
 801b28e:	4298      	cmp	r0, r3
 801b290:	bfb8      	it	lt
 801b292:	4618      	movlt	r0, r3
 801b294:	e7a4      	b.n	801b1e0 <_printf_i+0x168>
 801b296:	2301      	movs	r3, #1
 801b298:	4632      	mov	r2, r6
 801b29a:	4649      	mov	r1, r9
 801b29c:	4640      	mov	r0, r8
 801b29e:	47d0      	blx	sl
 801b2a0:	3001      	adds	r0, #1
 801b2a2:	d09b      	beq.n	801b1dc <_printf_i+0x164>
 801b2a4:	3501      	adds	r5, #1
 801b2a6:	68e3      	ldr	r3, [r4, #12]
 801b2a8:	9903      	ldr	r1, [sp, #12]
 801b2aa:	1a5b      	subs	r3, r3, r1
 801b2ac:	42ab      	cmp	r3, r5
 801b2ae:	dcf2      	bgt.n	801b296 <_printf_i+0x21e>
 801b2b0:	e7eb      	b.n	801b28a <_printf_i+0x212>
 801b2b2:	2500      	movs	r5, #0
 801b2b4:	f104 0619 	add.w	r6, r4, #25
 801b2b8:	e7f5      	b.n	801b2a6 <_printf_i+0x22e>
 801b2ba:	bf00      	nop
 801b2bc:	0801b839 	.word	0x0801b839
 801b2c0:	0801b84a 	.word	0x0801b84a

0801b2c4 <_putc_r>:
 801b2c4:	b570      	push	{r4, r5, r6, lr}
 801b2c6:	460d      	mov	r5, r1
 801b2c8:	4614      	mov	r4, r2
 801b2ca:	4606      	mov	r6, r0
 801b2cc:	b118      	cbz	r0, 801b2d6 <_putc_r+0x12>
 801b2ce:	6983      	ldr	r3, [r0, #24]
 801b2d0:	b90b      	cbnz	r3, 801b2d6 <_putc_r+0x12>
 801b2d2:	f7ff fb09 	bl	801a8e8 <__sinit>
 801b2d6:	4b1c      	ldr	r3, [pc, #112]	; (801b348 <_putc_r+0x84>)
 801b2d8:	429c      	cmp	r4, r3
 801b2da:	d124      	bne.n	801b326 <_putc_r+0x62>
 801b2dc:	6874      	ldr	r4, [r6, #4]
 801b2de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2e0:	07d8      	lsls	r0, r3, #31
 801b2e2:	d405      	bmi.n	801b2f0 <_putc_r+0x2c>
 801b2e4:	89a3      	ldrh	r3, [r4, #12]
 801b2e6:	0599      	lsls	r1, r3, #22
 801b2e8:	d402      	bmi.n	801b2f0 <_putc_r+0x2c>
 801b2ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2ec:	f7ff fbac 	bl	801aa48 <__retarget_lock_acquire_recursive>
 801b2f0:	68a3      	ldr	r3, [r4, #8]
 801b2f2:	3b01      	subs	r3, #1
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	60a3      	str	r3, [r4, #8]
 801b2f8:	da05      	bge.n	801b306 <_putc_r+0x42>
 801b2fa:	69a2      	ldr	r2, [r4, #24]
 801b2fc:	4293      	cmp	r3, r2
 801b2fe:	db1c      	blt.n	801b33a <_putc_r+0x76>
 801b300:	b2eb      	uxtb	r3, r5
 801b302:	2b0a      	cmp	r3, #10
 801b304:	d019      	beq.n	801b33a <_putc_r+0x76>
 801b306:	6823      	ldr	r3, [r4, #0]
 801b308:	1c5a      	adds	r2, r3, #1
 801b30a:	6022      	str	r2, [r4, #0]
 801b30c:	701d      	strb	r5, [r3, #0]
 801b30e:	b2ed      	uxtb	r5, r5
 801b310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b312:	07da      	lsls	r2, r3, #31
 801b314:	d405      	bmi.n	801b322 <_putc_r+0x5e>
 801b316:	89a3      	ldrh	r3, [r4, #12]
 801b318:	059b      	lsls	r3, r3, #22
 801b31a:	d402      	bmi.n	801b322 <_putc_r+0x5e>
 801b31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b31e:	f7ff fb94 	bl	801aa4a <__retarget_lock_release_recursive>
 801b322:	4628      	mov	r0, r5
 801b324:	bd70      	pop	{r4, r5, r6, pc}
 801b326:	4b09      	ldr	r3, [pc, #36]	; (801b34c <_putc_r+0x88>)
 801b328:	429c      	cmp	r4, r3
 801b32a:	d101      	bne.n	801b330 <_putc_r+0x6c>
 801b32c:	68b4      	ldr	r4, [r6, #8]
 801b32e:	e7d6      	b.n	801b2de <_putc_r+0x1a>
 801b330:	4b07      	ldr	r3, [pc, #28]	; (801b350 <_putc_r+0x8c>)
 801b332:	429c      	cmp	r4, r3
 801b334:	bf08      	it	eq
 801b336:	68f4      	ldreq	r4, [r6, #12]
 801b338:	e7d1      	b.n	801b2de <_putc_r+0x1a>
 801b33a:	4629      	mov	r1, r5
 801b33c:	4622      	mov	r2, r4
 801b33e:	4630      	mov	r0, r6
 801b340:	f7ff f8da 	bl	801a4f8 <__swbuf_r>
 801b344:	4605      	mov	r5, r0
 801b346:	e7e3      	b.n	801b310 <_putc_r+0x4c>
 801b348:	0801b7e8 	.word	0x0801b7e8
 801b34c:	0801b808 	.word	0x0801b808
 801b350:	0801b7c8 	.word	0x0801b7c8

0801b354 <_sbrk_r>:
 801b354:	b538      	push	{r3, r4, r5, lr}
 801b356:	4d06      	ldr	r5, [pc, #24]	; (801b370 <_sbrk_r+0x1c>)
 801b358:	2300      	movs	r3, #0
 801b35a:	4604      	mov	r4, r0
 801b35c:	4608      	mov	r0, r1
 801b35e:	602b      	str	r3, [r5, #0]
 801b360:	f7e5 ffe0 	bl	8001324 <_sbrk>
 801b364:	1c43      	adds	r3, r0, #1
 801b366:	d102      	bne.n	801b36e <_sbrk_r+0x1a>
 801b368:	682b      	ldr	r3, [r5, #0]
 801b36a:	b103      	cbz	r3, 801b36e <_sbrk_r+0x1a>
 801b36c:	6023      	str	r3, [r4, #0]
 801b36e:	bd38      	pop	{r3, r4, r5, pc}
 801b370:	24001edc 	.word	0x24001edc

0801b374 <__sread>:
 801b374:	b510      	push	{r4, lr}
 801b376:	460c      	mov	r4, r1
 801b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b37c:	f000 f8a8 	bl	801b4d0 <_read_r>
 801b380:	2800      	cmp	r0, #0
 801b382:	bfab      	itete	ge
 801b384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b386:	89a3      	ldrhlt	r3, [r4, #12]
 801b388:	181b      	addge	r3, r3, r0
 801b38a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b38e:	bfac      	ite	ge
 801b390:	6563      	strge	r3, [r4, #84]	; 0x54
 801b392:	81a3      	strhlt	r3, [r4, #12]
 801b394:	bd10      	pop	{r4, pc}

0801b396 <__swrite>:
 801b396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b39a:	461f      	mov	r7, r3
 801b39c:	898b      	ldrh	r3, [r1, #12]
 801b39e:	05db      	lsls	r3, r3, #23
 801b3a0:	4605      	mov	r5, r0
 801b3a2:	460c      	mov	r4, r1
 801b3a4:	4616      	mov	r6, r2
 801b3a6:	d505      	bpl.n	801b3b4 <__swrite+0x1e>
 801b3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3ac:	2302      	movs	r3, #2
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	f000 f870 	bl	801b494 <_lseek_r>
 801b3b4:	89a3      	ldrh	r3, [r4, #12]
 801b3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b3ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b3be:	81a3      	strh	r3, [r4, #12]
 801b3c0:	4632      	mov	r2, r6
 801b3c2:	463b      	mov	r3, r7
 801b3c4:	4628      	mov	r0, r5
 801b3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b3ca:	f000 b817 	b.w	801b3fc <_write_r>

0801b3ce <__sseek>:
 801b3ce:	b510      	push	{r4, lr}
 801b3d0:	460c      	mov	r4, r1
 801b3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3d6:	f000 f85d 	bl	801b494 <_lseek_r>
 801b3da:	1c43      	adds	r3, r0, #1
 801b3dc:	89a3      	ldrh	r3, [r4, #12]
 801b3de:	bf15      	itete	ne
 801b3e0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b3e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b3e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b3ea:	81a3      	strheq	r3, [r4, #12]
 801b3ec:	bf18      	it	ne
 801b3ee:	81a3      	strhne	r3, [r4, #12]
 801b3f0:	bd10      	pop	{r4, pc}

0801b3f2 <__sclose>:
 801b3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3f6:	f000 b81b 	b.w	801b430 <_close_r>
	...

0801b3fc <_write_r>:
 801b3fc:	b538      	push	{r3, r4, r5, lr}
 801b3fe:	4d07      	ldr	r5, [pc, #28]	; (801b41c <_write_r+0x20>)
 801b400:	4604      	mov	r4, r0
 801b402:	4608      	mov	r0, r1
 801b404:	4611      	mov	r1, r2
 801b406:	2200      	movs	r2, #0
 801b408:	602a      	str	r2, [r5, #0]
 801b40a:	461a      	mov	r2, r3
 801b40c:	f7e5 ff39 	bl	8001282 <_write>
 801b410:	1c43      	adds	r3, r0, #1
 801b412:	d102      	bne.n	801b41a <_write_r+0x1e>
 801b414:	682b      	ldr	r3, [r5, #0]
 801b416:	b103      	cbz	r3, 801b41a <_write_r+0x1e>
 801b418:	6023      	str	r3, [r4, #0]
 801b41a:	bd38      	pop	{r3, r4, r5, pc}
 801b41c:	24001edc 	.word	0x24001edc

0801b420 <abort>:
 801b420:	b508      	push	{r3, lr}
 801b422:	2006      	movs	r0, #6
 801b424:	f000 f88e 	bl	801b544 <raise>
 801b428:	2001      	movs	r0, #1
 801b42a:	f7e5 ff03 	bl	8001234 <_exit>
	...

0801b430 <_close_r>:
 801b430:	b538      	push	{r3, r4, r5, lr}
 801b432:	4d06      	ldr	r5, [pc, #24]	; (801b44c <_close_r+0x1c>)
 801b434:	2300      	movs	r3, #0
 801b436:	4604      	mov	r4, r0
 801b438:	4608      	mov	r0, r1
 801b43a:	602b      	str	r3, [r5, #0]
 801b43c:	f7e5 ff3d 	bl	80012ba <_close>
 801b440:	1c43      	adds	r3, r0, #1
 801b442:	d102      	bne.n	801b44a <_close_r+0x1a>
 801b444:	682b      	ldr	r3, [r5, #0]
 801b446:	b103      	cbz	r3, 801b44a <_close_r+0x1a>
 801b448:	6023      	str	r3, [r4, #0]
 801b44a:	bd38      	pop	{r3, r4, r5, pc}
 801b44c:	24001edc 	.word	0x24001edc

0801b450 <_fstat_r>:
 801b450:	b538      	push	{r3, r4, r5, lr}
 801b452:	4d07      	ldr	r5, [pc, #28]	; (801b470 <_fstat_r+0x20>)
 801b454:	2300      	movs	r3, #0
 801b456:	4604      	mov	r4, r0
 801b458:	4608      	mov	r0, r1
 801b45a:	4611      	mov	r1, r2
 801b45c:	602b      	str	r3, [r5, #0]
 801b45e:	f7e5 ff38 	bl	80012d2 <_fstat>
 801b462:	1c43      	adds	r3, r0, #1
 801b464:	d102      	bne.n	801b46c <_fstat_r+0x1c>
 801b466:	682b      	ldr	r3, [r5, #0]
 801b468:	b103      	cbz	r3, 801b46c <_fstat_r+0x1c>
 801b46a:	6023      	str	r3, [r4, #0]
 801b46c:	bd38      	pop	{r3, r4, r5, pc}
 801b46e:	bf00      	nop
 801b470:	24001edc 	.word	0x24001edc

0801b474 <_isatty_r>:
 801b474:	b538      	push	{r3, r4, r5, lr}
 801b476:	4d06      	ldr	r5, [pc, #24]	; (801b490 <_isatty_r+0x1c>)
 801b478:	2300      	movs	r3, #0
 801b47a:	4604      	mov	r4, r0
 801b47c:	4608      	mov	r0, r1
 801b47e:	602b      	str	r3, [r5, #0]
 801b480:	f7e5 ff37 	bl	80012f2 <_isatty>
 801b484:	1c43      	adds	r3, r0, #1
 801b486:	d102      	bne.n	801b48e <_isatty_r+0x1a>
 801b488:	682b      	ldr	r3, [r5, #0]
 801b48a:	b103      	cbz	r3, 801b48e <_isatty_r+0x1a>
 801b48c:	6023      	str	r3, [r4, #0]
 801b48e:	bd38      	pop	{r3, r4, r5, pc}
 801b490:	24001edc 	.word	0x24001edc

0801b494 <_lseek_r>:
 801b494:	b538      	push	{r3, r4, r5, lr}
 801b496:	4d07      	ldr	r5, [pc, #28]	; (801b4b4 <_lseek_r+0x20>)
 801b498:	4604      	mov	r4, r0
 801b49a:	4608      	mov	r0, r1
 801b49c:	4611      	mov	r1, r2
 801b49e:	2200      	movs	r2, #0
 801b4a0:	602a      	str	r2, [r5, #0]
 801b4a2:	461a      	mov	r2, r3
 801b4a4:	f7e5 ff30 	bl	8001308 <_lseek>
 801b4a8:	1c43      	adds	r3, r0, #1
 801b4aa:	d102      	bne.n	801b4b2 <_lseek_r+0x1e>
 801b4ac:	682b      	ldr	r3, [r5, #0]
 801b4ae:	b103      	cbz	r3, 801b4b2 <_lseek_r+0x1e>
 801b4b0:	6023      	str	r3, [r4, #0]
 801b4b2:	bd38      	pop	{r3, r4, r5, pc}
 801b4b4:	24001edc 	.word	0x24001edc

0801b4b8 <__malloc_lock>:
 801b4b8:	4801      	ldr	r0, [pc, #4]	; (801b4c0 <__malloc_lock+0x8>)
 801b4ba:	f7ff bac5 	b.w	801aa48 <__retarget_lock_acquire_recursive>
 801b4be:	bf00      	nop
 801b4c0:	24001ed0 	.word	0x24001ed0

0801b4c4 <__malloc_unlock>:
 801b4c4:	4801      	ldr	r0, [pc, #4]	; (801b4cc <__malloc_unlock+0x8>)
 801b4c6:	f7ff bac0 	b.w	801aa4a <__retarget_lock_release_recursive>
 801b4ca:	bf00      	nop
 801b4cc:	24001ed0 	.word	0x24001ed0

0801b4d0 <_read_r>:
 801b4d0:	b538      	push	{r3, r4, r5, lr}
 801b4d2:	4d07      	ldr	r5, [pc, #28]	; (801b4f0 <_read_r+0x20>)
 801b4d4:	4604      	mov	r4, r0
 801b4d6:	4608      	mov	r0, r1
 801b4d8:	4611      	mov	r1, r2
 801b4da:	2200      	movs	r2, #0
 801b4dc:	602a      	str	r2, [r5, #0]
 801b4de:	461a      	mov	r2, r3
 801b4e0:	f7e5 feb2 	bl	8001248 <_read>
 801b4e4:	1c43      	adds	r3, r0, #1
 801b4e6:	d102      	bne.n	801b4ee <_read_r+0x1e>
 801b4e8:	682b      	ldr	r3, [r5, #0]
 801b4ea:	b103      	cbz	r3, 801b4ee <_read_r+0x1e>
 801b4ec:	6023      	str	r3, [r4, #0]
 801b4ee:	bd38      	pop	{r3, r4, r5, pc}
 801b4f0:	24001edc 	.word	0x24001edc

0801b4f4 <_raise_r>:
 801b4f4:	291f      	cmp	r1, #31
 801b4f6:	b538      	push	{r3, r4, r5, lr}
 801b4f8:	4604      	mov	r4, r0
 801b4fa:	460d      	mov	r5, r1
 801b4fc:	d904      	bls.n	801b508 <_raise_r+0x14>
 801b4fe:	2316      	movs	r3, #22
 801b500:	6003      	str	r3, [r0, #0]
 801b502:	f04f 30ff 	mov.w	r0, #4294967295
 801b506:	bd38      	pop	{r3, r4, r5, pc}
 801b508:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b50a:	b112      	cbz	r2, 801b512 <_raise_r+0x1e>
 801b50c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b510:	b94b      	cbnz	r3, 801b526 <_raise_r+0x32>
 801b512:	4620      	mov	r0, r4
 801b514:	f000 f830 	bl	801b578 <_getpid_r>
 801b518:	462a      	mov	r2, r5
 801b51a:	4601      	mov	r1, r0
 801b51c:	4620      	mov	r0, r4
 801b51e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b522:	f000 b817 	b.w	801b554 <_kill_r>
 801b526:	2b01      	cmp	r3, #1
 801b528:	d00a      	beq.n	801b540 <_raise_r+0x4c>
 801b52a:	1c59      	adds	r1, r3, #1
 801b52c:	d103      	bne.n	801b536 <_raise_r+0x42>
 801b52e:	2316      	movs	r3, #22
 801b530:	6003      	str	r3, [r0, #0]
 801b532:	2001      	movs	r0, #1
 801b534:	e7e7      	b.n	801b506 <_raise_r+0x12>
 801b536:	2400      	movs	r4, #0
 801b538:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b53c:	4628      	mov	r0, r5
 801b53e:	4798      	blx	r3
 801b540:	2000      	movs	r0, #0
 801b542:	e7e0      	b.n	801b506 <_raise_r+0x12>

0801b544 <raise>:
 801b544:	4b02      	ldr	r3, [pc, #8]	; (801b550 <raise+0xc>)
 801b546:	4601      	mov	r1, r0
 801b548:	6818      	ldr	r0, [r3, #0]
 801b54a:	f7ff bfd3 	b.w	801b4f4 <_raise_r>
 801b54e:	bf00      	nop
 801b550:	24000090 	.word	0x24000090

0801b554 <_kill_r>:
 801b554:	b538      	push	{r3, r4, r5, lr}
 801b556:	4d07      	ldr	r5, [pc, #28]	; (801b574 <_kill_r+0x20>)
 801b558:	2300      	movs	r3, #0
 801b55a:	4604      	mov	r4, r0
 801b55c:	4608      	mov	r0, r1
 801b55e:	4611      	mov	r1, r2
 801b560:	602b      	str	r3, [r5, #0]
 801b562:	f7e5 fe57 	bl	8001214 <_kill>
 801b566:	1c43      	adds	r3, r0, #1
 801b568:	d102      	bne.n	801b570 <_kill_r+0x1c>
 801b56a:	682b      	ldr	r3, [r5, #0]
 801b56c:	b103      	cbz	r3, 801b570 <_kill_r+0x1c>
 801b56e:	6023      	str	r3, [r4, #0]
 801b570:	bd38      	pop	{r3, r4, r5, pc}
 801b572:	bf00      	nop
 801b574:	24001edc 	.word	0x24001edc

0801b578 <_getpid_r>:
 801b578:	f7e5 be44 	b.w	8001204 <_getpid>

0801b57c <_init>:
 801b57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b57e:	bf00      	nop
 801b580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b582:	bc08      	pop	{r3}
 801b584:	469e      	mov	lr, r3
 801b586:	4770      	bx	lr

0801b588 <_fini>:
 801b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b58a:	bf00      	nop
 801b58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b58e:	bc08      	pop	{r3}
 801b590:	469e      	mov	lr, r3
 801b592:	4770      	bx	lr
